/*
 RequireJS text 0.25.0 Copyright (c) 2010-2011, The Dojo Foundation All Rights Reserved.
 Available via the MIT or new BSD license.
 see: http://github.com/jrburke/requirejs for details
 RequireJS order 0.25.0 Copyright (c) 2010-2011, The Dojo Foundation All Rights Reserved.
 Available via the MIT or new BSD license.
 see: http://github.com/jrburke/requirejs for details
*/
(function () {
    var b = ["Msxml2.XMLHTTP", "Microsoft.XMLHTTP", "Msxml2.XMLHTTP.4.0"],
        c = /^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im, e = /<body[^>]*>\s*([\s\S]+)\s*<\/body>/im,
        f = typeof location !== "undefined" && location.href, k = [];
    define("text", [], function () {
        var m, h, n;
        typeof window !== "undefined" && window.navigator && window.document ? h = function (b, c) {
            var e = m.createXhr();
            e.open("GET", b, true);
            e.onreadystatechange = function () {
                e.readyState === 4 && c(e.responseText)
            };
            e.send(null)
        } : typeof process !== "undefined" &&
        process.versions && process.versions.node ? (n = require.nodeRequire("fs"), h = function (b, c) {
            c(n.readFileSync(b, "utf8"))
        }) : typeof Packages !== "undefined" && (h = function (b, c) {
            var e = new java.io.File(b), f = java.lang.System.getProperty("line.separator"),
                e = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(e), "utf-8")),
                k, m, h = "";
            try {
                k = new java.lang.StringBuffer;
                (m = e.readLine()) && m.length() && m.charAt(0) === 65279 && (m = m.substring(1));
                for (k.append(m); (m = e.readLine()) !== null;) k.append(f),
                    k.append(m);
                h = String(k.toString())
            } finally {
                e.close()
            }
            c(h)
        });
        return m = {
            version: "0.25.0", strip: function (b) {
                if (b) {
                    var b = b.replace(c, ""), f = b.match(e);
                    f && (b = f[1])
                } else b = "";
                return b
            }, jsEscape: function (b) {
                return b.replace(/(['\\])/g, "\\$1").replace(/[\f]/g, "\\f").replace(/[\b]/g, "\\b").replace(/[\n]/g, "\\n").replace(/[\t]/g, "\\t").replace(/[\r]/g, "\\r")
            }, createXhr: function () {
                var c, e, f;
                if (typeof XMLHttpRequest !== "undefined") return new XMLHttpRequest; else for (e = 0; e < 3; e++) {
                    f = b[e];
                    try {
                        c = new ActiveXObject(f)
                    } catch (k) {
                    }
                    if (c) {
                        b =
                            [f];
                        break
                    }
                }
                if (!c) throw Error("createXhr(): XMLHttpRequest not available");
                return c
            }, get: h, parseName: function (b) {
                var c = false, e = b.indexOf("."), f = b.substring(0, e), b = b.substring(e + 1, b.length),
                    e = b.indexOf("!");
                e !== -1 && (c = b.substring(e + 1, b.length), c = c === "strip", b = b.substring(0, e));
                return {moduleName: f, ext: b, strip: c}
            }, xdRegExp: /^((\w+)\:)?\/\/([^\/\\]+)/, canUseXhr: function (b, c, e, f) {
                var k = m.xdRegExp.exec(b), h;
                if (!k) return true;
                b = k[2];
                k = k[3];
                k = k.split(":");
                h = k[1];
                k = k[0];
                return (!b || b === c) && (!k || k === e) && (!h &&
                    !k || h === f)
            }, finishLoad: function (b, c, e, f, h) {
                e = c ? m.strip(e) : e;
                h.isBuild && h.inlineText && (k[b] = e);
                f(e)
            }, load: function (b, c, e, k) {
                var h = m.parseName(b), n = h.moduleName + "." + h.ext, B = c.toUrl(n);
                !f || m.canUseXhr(B) ? m.get(B, function (c) {
                    m.finishLoad(b, h.strip, c, e, k)
                }) : c([n], function (b) {
                    m.finishLoad(h.moduleName + "." + h.ext, h.strip, b, e, k)
                })
            }, write: function (b, c, e) {
                if (c in k) {
                    var f = m.jsEscape(k[c]);
                    e("define('" + b + "!" + c + "', function () { return '" + f + "';});\n")
                }
            }, writeFile: function (b, c, e, f, k) {
                var c = m.parseName(c), h = c.moduleName +
                    "." + c.ext, n = e.toUrl(c.moduleName + "." + c.ext) + ".js";
                m.load(h, e, function () {
                    m.write(b, h, function (b) {
                        f(n, b)
                    }, k)
                }, k)
            }
        }
    })
})();
define("text!dat/mahog/data/config.json", function () {
    return '{\n  "name": "dat.mahog",\n  "src": "client/src",\n  "build": "client/build",\n  "js": ["dat.mahog"],\n\n  "seed_path": "raw/seed.json",\n\n  "categories_path": "data/categories.json",\n  "original_ids_path": "data/original_ids.json",\n  "ids_path": "data/ids.json",\n  "colors_path": "data/colors.json",\n  "dominant_colors_path": "data/dominant_colors.json",\n  "aspect_ratios_path": "data/aspect_ratios.json",\n  "more_info_path": "data/more_info.json",\n  "more_info_dir": "data/more_info",\n  "count_path": "data/count.json",\n\n  "failed_path": "data/failed.json",\n  "exclude_path": "data/exclude.json",\n  "manual_exclude_path": "data/manual_exclude.json",\n  "manual_include_path": "data/manual_include.json",\n\n  "trimmed_id_path": "data/trimmed.json",\n  "trimmed_path": "data/trimmed",\n  "trimmed_rejects": "data/trimmed_rejects.json",\n\n  "merged_path": "data/merged",\n  "qr_dir": "data/qr",\n  "qr_path": "data/qr_failed.json",\n  "fullsize_path": "data/fullsize",\n  "fullsize_square_path": "data/fullsize_square",\n  "spritesheet_path": "data/spritesheets",\n\n  "spritesheet_size": 1024,\n  "spritesheet_count": 36,\n  "spritesheet_quality": 95,\n\n  "fullsize_zoom": 3\n}\n'
});
define("text!dat/mahog/data/count.json", function () {
    return '{"count": 10965}'
});
define("dat/mahog/CONFIG", ["text!dat/mahog/data/config.json", "text!dat/mahog/data/count.json"], function (b, c) {
    var e = JSON.parse(b);
    e.count = JSON.parse(c).count;
    return e
});
define("dat/utils/utils", [], function () {
    var b = {
        sign: function (b) {
            return b >= 0 ? 1 : -1
        }, lerp: function (b, e, f) {
            return (e - b) * f + b
        }, map: function (b, e, f, k, m) {
            return k + (m - k) * ((b - e) / (f - e))
        }, cmap: function (c, e, f, k, m) {
            return b.clamp(k + (m - k) * (c - e) / (f - e), k, m)
        }, wrap: function (b, e) {
            for (; b < 0;) b += e;
            return b % e
        }, cap: function (c, e) {
            return Math.abs(c) > e ? b.sign(c) * e : c
        }, dist: function (b, e, f, k) {
            return Math.sqrt((b - f) * (b - f) + (e - k) * (e - k))
        }, clamp: function (b, e, f) {
            var k = Math.max(e, f), e = Math.min(e, f);
            return b > k ? k : b < e ? e : b
        }, roundToDecimal: function (b,
                                     e) {
            var f = Math.pow(10, e);
            return Math.round(b * f) / f
        }, random: function () {
            if (arguments.length == 0) return Math.random(); else if (arguments.length == 1) if (typeof arguments[0] == "number") return random() * arguments[0]; else {
                if (typeof arguments[0] == "array") return arguments[0][Math.floor(random(arguments[0].length))]
            } else if (arguments.length == 2) return lerp(arguments[0], arguments[1], random())
        }, clone: function (b) {
            if (b == null || typeof b != "object") return b;
            var e = b.constructor(), f;
            for (f in b) e[f] = clone(b[f]);
            return e
        }, bezier: function (b,
                             e, f, k, m) {
            var h = 1 - m;
            return b * h * h * h + 3 * e * m * h * h + 3 * f * m * m * h + k * m * m * m
        }, commaify: function (b, e) {
            e || (e = 3);
            for (var b = b.toString().split("").reverse().join(""), f = "", k = 0, m = 0; m < b.length; m++) {
                var h = b.charAt(m);
                k > e - 1 ? (k = 0, f += ",") : k++;
                f += h
            }
            return f.split("").reverse().join("")
        }
    };
    return b
});
define("dat/mahog/params", ["dat/mahog/CONFIG", "dat/utils/utils"], function (b, c) {
    return {
        TINT_DEBUG: true,
        SHELF_TEXTURE: "/textures/wood.jpg",
        SHELF_NORMALS: "/textures/wood-normal-hard.jpg",
        STATIC_COVER_LIGHT_MAP_SRC: "/textures/lightMap_static.jpg",
        MORPHING_COVER_LIGHT_MAP_SRC: "/textures/lightMap_cover.jpg",
        MORPHING_PAGES_LIGHT_MAP_SRC: "/textures/lightMap_pages.jpg",
        MORPHING_COVER_GEOMETRY_SRC: "/models/book_cover1.js",
        MORPHING_PAGES_GEOMETRY_SRC: "/models/book_pages1.js",
        numBookDisplayers: 500,
        maxTextures: 50,
        bookSize: 40,
        minAspectRatio: 0.79,
        shelfHeight: 63,
        spiralRadius: 448,
        cameraDistance: 719,
        booksPerCircle: 59,
        bookSpacing: 30,
        bookTwist: 2.199,
        baseFov: 30,
        maxFov: 50,
        fovCap: Math.PI / 2,
        fovCurve: 1.6445,
        scaleFov: true,
        loopHeight: 200,
        grabTextures: 750,
        lightDistance: 0,
        openDistance: 120,
        applyThumbnailStaggerSize: 200,
        imageRequestStaggerSize: 1,
        labelWidth: 550,
        labelHeight: 20,
        labelOffsetY: 54,
        labelOffsetX: 30,
        projectTitle: "Mahogany",
        projectDescription: "Browse thousands of titles from Google Books, using WebGL on Google Chrome.",
        smallPrint: "Learn more at <strong>goto/mahog</strong>. Library includes " + c.commaify(b.count) + " books. Data from the public Google Books API. Updated 14 July 2011.",
        backgroundImage: "textures/ui/texture.jpg",
        tileSizeCorrect: -5.0E-4,
        fontStyle: "32px Lora, EB Garamond, serif",
        fill: "#000",
        offsetTheta: 0,
        focusOffset: 1,
        lookAhead: 1E3,
        near: 725,
        far: 1400,
        bookOpenTime: 800,
        bookCloseTime: 1500,
        cameraPositionDriftLength: 3E3,
        cameraTargetDriftLength: 1500,
        orbitDriftLength: 1200,
        insideFace: true,
        outsideFace: true,
        bottomFace: true,
        topFace: true,
        wireframe: false,
        shelfDepth: 40,
        shelfThickness: 3,
        shelfResolution: 70,
        shelfYOffset: 1.5,
        shelfXOffset: 0,
        topTextureSpan: 14,
        sideTextureSpan: 9,
        orbits: Math.PI * 60,
        errorString: "Unable to open book.",
        maxOpen: 0.93,
        pagesTextureWidth: 1600,
        pagesAspectRatio: 2.4,
        pagesScale: 1.435,
        openVel: 0.001,
        fullOpenEffort: 600,
        openThreshold: 0.08,
        dragEpsilon: 12,
        idleUntilDemo: 36E4,
        closeButtonFadeSpeed: 200,
        numBooksPerDemo: 5
    }
});
var THREE = THREE || {};
if (!window.Int32Array) window.Int32Array = Array, window.Float32Array = Array;
THREE.Color = function (b) {
    b !== void 0 && this.setHex(b);
    return this
};
THREE.Color.prototype = {
    constructor: THREE.Color, r: 1, g: 1, b: 1, copy: function (b) {
        this.r = b.r;
        this.g = b.g;
        this.b = b.b;
        return this
    }, setRGB: function (b, c, e) {
        this.r = b;
        this.g = c;
        this.b = e;
        return this
    }, setHSV: function (b, c, e) {
        var f, k, m;
        if (e == 0) this.r = this.g = this.b = 0; else switch (f = Math.floor(b * 6), k = b * 6 - f, b = e * (1 - c), m = e * (1 - c * k), c = e * (1 - c * (1 - k)), f) {
            case 1:
                this.r = m;
                this.g = e;
                this.b = b;
                break;
            case 2:
                this.r = b;
                this.g = e;
                this.b = c;
                break;
            case 3:
                this.r = b;
                this.g = m;
                this.b = e;
                break;
            case 4:
                this.r = c;
                this.g = b;
                this.b = e;
                break;
            case 5:
                this.r =
                    e;
                this.g = b;
                this.b = m;
                break;
            case 6:
            case 0:
                this.r = e, this.g = c, this.b = b
        }
        return this
    }, setHex: function (b) {
        b = Math.floor(b);
        this.r = (b >> 16 & 255) / 255;
        this.g = (b >> 8 & 255) / 255;
        this.b = (b & 255) / 255;
        return this
    }, getHex: function () {
        return ~~(this.r * 255) << 16 ^ ~~(this.g * 255) << 8 ^ ~~(this.b * 255)
    }, getContextStyle: function () {
        return "rgb(" + Math.floor(this.r * 255) + "," + Math.floor(this.g * 255) + "," + Math.floor(this.b * 255) + ")"
    }, clone: function () {
        return (new THREE.Color).setRGB(this.r, this.g, this.b)
    }
};
THREE.Vector2 = function (b, c) {
    this.x = b || 0;
    this.y = c || 0
};
THREE.Vector2.prototype = {
    constructor: THREE.Vector2, set: function (b, c) {
        this.x = b;
        this.y = c;
        return this
    }, copy: function (b) {
        this.x = b.x;
        this.y = b.y;
        return this
    }, clone: function () {
        return new THREE.Vector2(this.x, this.y)
    }, add: function (b, c) {
        this.x = b.x + c.x;
        this.y = b.y + c.y;
        return this
    }, addSelf: function (b) {
        this.x += b.x;
        this.y += b.y;
        return this
    }, sub: function (b, c) {
        this.x = b.x - c.x;
        this.y = b.y - c.y;
        return this
    }, subSelf: function (b) {
        this.x -= b.x;
        this.y -= b.y;
        return this
    }, multiplyScalar: function (b) {
        this.x *= b;
        this.y *= b;
        return this
    },
    divideScalar: function (b) {
        b ? (this.x /= b, this.y /= b) : this.set(0, 0);
        return this
    }, negate: function () {
        return this.multiplyScalar(-1)
    }, dot: function (b) {
        return this.x * b.x + this.y * b.y
    }, lengthSq: function () {
        return this.x * this.x + this.y * this.y
    }, length: function () {
        return Math.sqrt(this.lengthSq())
    }, normalize: function () {
        return this.divideScalar(this.length())
    }, distanceTo: function (b) {
        return Math.sqrt(this.distanceToSquared(b))
    }, distanceToSquared: function (b) {
        var c = this.x - b.x, b = this.y - b.y;
        return c * c + b * b
    }, setLength: function (b) {
        return this.normalize().multiplyScalar(b)
    },
    equals: function (b) {
        return b.x == this.x && b.y == this.y
    }
};
THREE.Vector3 = function (b, c, e) {
    this.x = b || 0;
    this.y = c || 0;
    this.z = e || 0
};
THREE.Vector3.prototype = {
    constructor: THREE.Vector3, set: function (b, c, e) {
        this.x = b;
        this.y = c;
        this.z = e;
        return this
    }, copy: function (b) {
        this.x = b.x;
        this.y = b.y;
        this.z = b.z;
        return this
    }, clone: function () {
        return new THREE.Vector3(this.x, this.y, this.z)
    }, add: function (b, c) {
        this.x = b.x + c.x;
        this.y = b.y + c.y;
        this.z = b.z + c.z;
        return this
    }, addSelf: function (b) {
        this.x += b.x;
        this.y += b.y;
        this.z += b.z;
        return this
    }, addScalar: function (b) {
        this.x += b;
        this.y += b;
        this.z += b;
        return this
    }, sub: function (b, c) {
        this.x = b.x - c.x;
        this.y = b.y - c.y;
        this.z =
            b.z - c.z;
        return this
    }, subSelf: function (b) {
        this.x -= b.x;
        this.y -= b.y;
        this.z -= b.z;
        return this
    }, multiply: function (b, c) {
        this.x = b.x * c.x;
        this.y = b.y * c.y;
        this.z = b.z * c.z;
        return this
    }, multiplySelf: function (b) {
        this.x *= b.x;
        this.y *= b.y;
        this.z *= b.z;
        return this
    }, multiplyScalar: function (b) {
        this.x *= b;
        this.y *= b;
        this.z *= b;
        return this
    }, divideSelf: function (b) {
        this.x /= b.x;
        this.y /= b.y;
        this.z /= b.z;
        return this
    }, divideScalar: function (b) {
        b ? (this.x /= b, this.y /= b, this.z /= b) : this.set(0, 0, 0);
        return this
    }, negate: function () {
        return this.multiplyScalar(-1)
    },
    dot: function (b) {
        return this.x * b.x + this.y * b.y + this.z * b.z
    }, lengthSq: function () {
        return this.x * this.x + this.y * this.y + this.z * this.z
    }, length: function () {
        return Math.sqrt(this.lengthSq())
    }, lengthManhattan: function () {
        return this.x + this.y + this.z
    }, normalize: function () {
        return this.divideScalar(this.length())
    }, setLength: function (b) {
        return this.normalize().multiplyScalar(b)
    }, cross: function (b, c) {
        this.x = b.y * c.z - b.z * c.y;
        this.y = b.z * c.x - b.x * c.z;
        this.z = b.x * c.y - b.y * c.x;
        return this
    }, crossSelf: function (b) {
        return this.set(this.y *
            b.z - this.z * b.y, this.z * b.x - this.x * b.z, this.x * b.y - this.y * b.x)
    }, distanceTo: function (b) {
        return Math.sqrt(this.distanceToSquared(b))
    }, distanceToSquared: function (b) {
        return (new THREE.Vector3).sub(this, b).lengthSq()
    }, setPositionFromMatrix: function (b) {
        this.x = b.n14;
        this.y = b.n24;
        this.z = b.n34
    }, setRotationFromMatrix: function (b) {
        var c = Math.cos(this.y);
        this.y = Math.asin(b.n13);
        Math.abs(c) > 1.0E-5 ? (this.x = Math.atan2(-b.n23 / c, b.n33 / c), this.z = Math.atan2(-b.n12 / c, b.n11 / c)) : (this.x = 0, this.z = Math.atan2(b.n21, b.n22))
    }, isZero: function () {
        return this.lengthSq() <
            1.0E-4
    }
};
THREE.Vector4 = function (b, c, e, f) {
    this.x = b || 0;
    this.y = c || 0;
    this.z = e || 0;
    this.w = f || 1
};
THREE.Vector4.prototype = {
    constructor: THREE.Vector4, set: function (b, c, e, f) {
        this.x = b;
        this.y = c;
        this.z = e;
        this.w = f;
        return this
    }, copy: function (b) {
        this.x = b.x;
        this.y = b.y;
        this.z = b.z;
        this.w = b.w || 1
    }, clone: function () {
        return new THREE.Vector4(this.x, this.y, this.z, this.w)
    }, add: function (b, c) {
        this.x = b.x + c.x;
        this.y = b.y + c.y;
        this.z = b.z + c.z;
        this.w = b.w + c.w;
        return this
    }, addSelf: function (b) {
        this.x += b.x;
        this.y += b.y;
        this.z += b.z;
        this.w += b.w;
        return this
    }, sub: function (b, c) {
        this.x = b.x - c.x;
        this.y = b.y - c.y;
        this.z = b.z - c.z;
        this.w =
            b.w - c.w;
        return this
    }, subSelf: function (b) {
        this.x -= b.x;
        this.y -= b.y;
        this.z -= b.z;
        this.w -= b.w;
        return this
    }, multiplyScalar: function (b) {
        this.x *= b;
        this.y *= b;
        this.z *= b;
        this.w *= b;
        return this
    }, divideScalar: function (b) {
        b ? (this.x /= b, this.y /= b, this.z /= b, this.w /= b) : (this.z = this.y = this.x = 0, this.w = 1);
        return this
    }, negate: function () {
        return this.multiplyScalar(-1)
    }, dot: function (b) {
        return this.x * b.x + this.y * b.y + this.z * b.z + this.w * b.w
    }, lengthSq: function () {
        return this.dot(this)
    }, length: function () {
        return Math.sqrt(this.lengthSq())
    },
    normalize: function () {
        return this.divideScalar(this.length())
    }, setLength: function (b) {
        return this.normalize().multiplyScalar(b)
    }, lerpSelf: function (b, c) {
        this.x += (b.x - this.x) * c;
        this.y += (b.y - this.y) * c;
        this.z += (b.z - this.z) * c;
        this.w += (b.w - this.w) * c;
        return this
    }
};
THREE.Ray = function (b, c) {
    this.origin = b || new THREE.Vector3;
    this.direction = c || new THREE.Vector3
};
THREE.Ray.prototype = {
    constructor: THREE.Ray, intersectScene: function (b) {
        return this.intersectObjects(b.objects)
    }, intersectObjects: function (b) {
        var c, e, f = [];
        c = 0;
        for (e = b.length; c < e; c++) f = f.concat(this.intersectObject(b[c]));
        f.sort(function (b, e) {
            return b.distance - e.distance
        });
        return f
    }, intersectObject: function (b) {
        function c(b, e, c) {
            var f;
            f = c.clone().subSelf(b).dot(e);
            if (f <= 0) return null;
            b = b.clone().addSelf(e.clone().multiplyScalar(f));
            return c.distanceTo(b)
        }

        function e(b, e, c, f) {
            var f = f.clone().subSelf(e),
                c = c.clone().subSelf(e), k = b.clone().subSelf(e), b = f.dot(f), e = f.dot(c), f = f.dot(k),
                h = c.dot(c), c = c.dot(k), k = 1 / (b * h - e * e), h = (h * f - e * c) * k, b = (b * c - e * f) * k;
            return h > 0 && b > 0 && h + b < 1
        }

        if (b instanceof THREE.Particle) {
            var f = c(this.origin, this.direction, b.matrixWorld.getPosition());
            return f == null || f > b.scale.x ? [] : [{distance: f, point: b.position, face: null, object: b}]
        } else if (b instanceof THREE.Mesh) {
            f = c(this.origin, this.direction, b.matrixWorld.getPosition());
            if (f == null || f > b.geometry.boundingSphere.radius * Math.max(b.scale.x,
                Math.max(b.scale.y, b.scale.z))) return [];
            var k, m, h, n, o, t, u, v, x, w, B = b.geometry, A = B.vertices, y = [], f = 0;
            for (k = B.faces.length; f < k; f++) if (m = B.faces[f], x = this.origin.clone(), w = this.direction.clone(), t = b.matrixWorld, h = t.multiplyVector3(m.centroid.clone()).subSelf(x), v = h.dot(w), !(v <= 0) && (h = t.multiplyVector3(A[m.a].position.clone()), n = t.multiplyVector3(A[m.b].position.clone()), o = t.multiplyVector3(A[m.c].position.clone()), t = m instanceof THREE.Face4 ? t.multiplyVector3(A[m.d].position.clone()) : null, u = b.matrixRotationWorld.multiplyVector3(m.normal.clone()),
                v = w.dot(u), b.doubleSided || (b.flipSided ? v > 0 : v < 0))) if (v = u.dot((new THREE.Vector3).sub(h, x)) / v, x = x.addSelf(w.multiplyScalar(v)), m instanceof THREE.Face3) e(x, h, n, o) && (m = {
                distance: this.origin.distanceTo(x),
                point: x,
                face: m,
                object: b
            }, y.push(m)); else if (m instanceof THREE.Face4 && (e(x, h, n, t) || e(x, n, o, t))) m = {
                distance: this.origin.distanceTo(x),
                point: x,
                face: m,
                object: b
            }, y.push(m);
            y.sort(function (b, e) {
                return b.distance - e.distance
            });
            return y
        } else return []
    }
};
THREE.Rectangle = function () {
    function b() {
        m = f - c;
        h = k - e
    }

    var c, e, f, k, m, h, n = true;
    this.getX = function () {
        return c
    };
    this.getY = function () {
        return e
    };
    this.getWidth = function () {
        return m
    };
    this.getHeight = function () {
        return h
    };
    this.getLeft = function () {
        return c
    };
    this.getTop = function () {
        return e
    };
    this.getRight = function () {
        return f
    };
    this.getBottom = function () {
        return k
    };
    this.set = function (h, m, u, v) {
        n = false;
        c = h;
        e = m;
        f = u;
        k = v;
        b()
    };
    this.addPoint = function (h, m) {
        n ? (n = false, c = h, e = m, f = h, k = m) : (c = c < h ? c : h, e = e < m ? e : m, f = f > h ? f : h, k = k > m ? k : m);
        b()
    };
    this.add3Points = function (h, m, u, v, x, w) {
        n ? (n = false, c = h < u ? h < x ? h : x : u < x ? u : x, e = m < v ? m < w ? m : w : v < w ? v : w, f = h > u ? h > x ? h : x : u > x ? u : x, k = m > v ? m > w ? m : w : v > w ? v : w) : (c = h < u ? h < x ? h < c ? h : c : x < c ? x : c : u < x ? u < c ? u : c : x < c ? x : c, e = m < v ? m < w ? m < e ? m : e : w < e ? w : e : v < w ? v < e ? v : e : w < e ? w : e, f = h > u ? h > x ? h > f ? h : f : x > f ? x : f : u > x ? u > f ? u : f : x > f ? x : f, k = m > v ? m > w ? m > k ? m : k : w > k ? w : k : v > w ? v > k ? v : k : w > k ? w : k);
        b()
    };
    this.addRectangle = function (h) {
        n ? (n = false, c = h.getLeft(), e = h.getTop(), f = h.getRight(), k = h.getBottom()) : (c = c < h.getLeft() ? c : h.getLeft(), e = e < h.getTop() ? e : h.getTop(), f = f > h.getRight() ?
            f : h.getRight(), k = k > h.getBottom() ? k : h.getBottom());
        b()
    };
    this.inflate = function (h) {
        c -= h;
        e -= h;
        f += h;
        k += h;
        b()
    };
    this.minSelf = function (h) {
        c = c > h.getLeft() ? c : h.getLeft();
        e = e > h.getTop() ? e : h.getTop();
        f = f < h.getRight() ? f : h.getRight();
        k = k < h.getBottom() ? k : h.getBottom();
        b()
    };
    this.instersects = function (b) {
        return Math.min(f, b.getRight()) - Math.max(c, b.getLeft()) >= 0 && Math.min(k, b.getBottom()) - Math.max(e, b.getTop()) >= 0
    };
    this.empty = function () {
        n = true;
        k = f = e = c = 0;
        b()
    };
    this.isEmpty = function () {
        return n
    }
};
THREE.Matrix3 = function () {
    this.m = []
};
THREE.Matrix3.prototype = {
    constructor: THREE.Matrix3, transpose: function () {
        var b, c = this.m;
        b = c[1];
        c[1] = c[3];
        c[3] = b;
        b = c[2];
        c[2] = c[6];
        c[6] = b;
        b = c[5];
        c[5] = c[7];
        c[7] = b;
        return this
    }, transposeIntoArray: function (b) {
        var c = this.m;
        b[0] = c[0];
        b[1] = c[3];
        b[2] = c[6];
        b[3] = c[1];
        b[4] = c[4];
        b[5] = c[7];
        b[6] = c[2];
        b[7] = c[5];
        b[8] = c[8];
        return this
    }
};
THREE.Matrix4 = function (b, c, e, f, k, m, h, n, o, t, u, v, x, w, B, A) {
    this.set(b || 1, c || 0, e || 0, f || 0, k || 0, m || 1, h || 0, n || 0, o || 0, t || 0, u || 1, v || 0, x || 0, w || 0, B || 0, A || 1);
    this.flat = Array(16);
    this.m33 = new THREE.Matrix3
};
THREE.Matrix4.prototype = {
    constructor: THREE.Matrix4, set: function (b, c, e, f, k, m, h, n, o, t, u, v, x, w, B, A) {
        this.n11 = b;
        this.n12 = c;
        this.n13 = e;
        this.n14 = f;
        this.n21 = k;
        this.n22 = m;
        this.n23 = h;
        this.n24 = n;
        this.n31 = o;
        this.n32 = t;
        this.n33 = u;
        this.n34 = v;
        this.n41 = x;
        this.n42 = w;
        this.n43 = B;
        this.n44 = A;
        return this
    }, identity: function () {
        this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        return this
    }, copy: function (b) {
        this.set(b.n11, b.n12, b.n13, b.n14, b.n21, b.n22, b.n23, b.n24, b.n31, b.n32, b.n33, b.n34, b.n41, b.n42, b.n43, b.n44);
        return this
    }, lookAt: function (b,
                         c, e) {
        var f = THREE.Matrix4.__v1, k = THREE.Matrix4.__v2, m = THREE.Matrix4.__v3;
        m.sub(b, c).normalize();
        if (m.length() === 0) m.z = 1;
        f.cross(e, m).normalize();
        f.length() === 0 && (m.x += 1.0E-4, f.cross(e, m).normalize());
        k.cross(m, f).normalize();
        this.n11 = f.x;
        this.n12 = k.x;
        this.n13 = m.x;
        this.n21 = f.y;
        this.n22 = k.y;
        this.n23 = m.y;
        this.n31 = f.z;
        this.n32 = k.z;
        this.n33 = m.z;
        return this
    }, multiplyVector3: function (b) {
        var c = b.x, e = b.y, f = b.z, k = 1 / (this.n41 * c + this.n42 * e + this.n43 * f + this.n44);
        b.x = (this.n11 * c + this.n12 * e + this.n13 * f + this.n14) * k;
        b.y = (this.n21 * c + this.n22 * e + this.n23 * f + this.n24) * k;
        b.z = (this.n31 * c + this.n32 * e + this.n33 * f + this.n34) * k;
        return b
    }, multiplyVector4: function (b) {
        var c = b.x, e = b.y, f = b.z, k = b.w;
        b.x = this.n11 * c + this.n12 * e + this.n13 * f + this.n14 * k;
        b.y = this.n21 * c + this.n22 * e + this.n23 * f + this.n24 * k;
        b.z = this.n31 * c + this.n32 * e + this.n33 * f + this.n34 * k;
        b.w = this.n41 * c + this.n42 * e + this.n43 * f + this.n44 * k;
        return b
    }, rotateAxis: function (b) {
        var c = b.x, e = b.y, f = b.z;
        b.x = c * this.n11 + e * this.n12 + f * this.n13;
        b.y = c * this.n21 + e * this.n22 + f * this.n23;
        b.z = c * this.n31 +
            e * this.n32 + f * this.n33;
        b.normalize();
        return b
    }, crossVector: function (b) {
        var c = new THREE.Vector4;
        c.x = this.n11 * b.x + this.n12 * b.y + this.n13 * b.z + this.n14 * b.w;
        c.y = this.n21 * b.x + this.n22 * b.y + this.n23 * b.z + this.n24 * b.w;
        c.z = this.n31 * b.x + this.n32 * b.y + this.n33 * b.z + this.n34 * b.w;
        c.w = b.w ? this.n41 * b.x + this.n42 * b.y + this.n43 * b.z + this.n44 * b.w : 1;
        return c
    }, multiply: function (b, c) {
        var e = b.n11, f = b.n12, k = b.n13, m = b.n14, h = b.n21, n = b.n22, o = b.n23, t = b.n24, u = b.n31,
            v = b.n32, x = b.n33, w = b.n34, B = b.n41, A = b.n42, y = b.n43, D = b.n44, C = c.n11, L = c.n12,
            z = c.n13, E = c.n14, N = c.n21, I = c.n22, P = c.n23, H = c.n24, W = c.n31, M = c.n32, J = c.n33,
            Q = c.n34, O = c.n41, Y = c.n42, V = c.n43, Z = c.n44;
        this.n11 = e * C + f * N + k * W + m * O;
        this.n12 = e * L + f * I + k * M + m * Y;
        this.n13 = e * z + f * P + k * J + m * V;
        this.n14 = e * E + f * H + k * Q + m * Z;
        this.n21 = h * C + n * N + o * W + t * O;
        this.n22 = h * L + n * I + o * M + t * Y;
        this.n23 = h * z + n * P + o * J + t * V;
        this.n24 = h * E + n * H + o * Q + t * Z;
        this.n31 = u * C + v * N + x * W + w * O;
        this.n32 = u * L + v * I + x * M + w * Y;
        this.n33 = u * z + v * P + x * J + w * V;
        this.n34 = u * E + v * H + x * Q + w * Z;
        this.n41 = B * C + A * N + y * W + D * O;
        this.n42 = B * L + A * I + y * M + D * Y;
        this.n43 = B * z + A * P + y * J + D * V;
        this.n44 = B * E + A *
            H + y * Q + D * Z;
        return this
    }, multiplyToArray: function (b, c, e) {
        this.multiply(b, c);
        e[0] = this.n11;
        e[1] = this.n21;
        e[2] = this.n31;
        e[3] = this.n41;
        e[4] = this.n12;
        e[5] = this.n22;
        e[6] = this.n32;
        e[7] = this.n42;
        e[8] = this.n13;
        e[9] = this.n23;
        e[10] = this.n33;
        e[11] = this.n43;
        e[12] = this.n14;
        e[13] = this.n24;
        e[14] = this.n34;
        e[15] = this.n44;
        return this
    }, multiplySelf: function (b) {
        this.multiply(this, b);
        return this
    }, multiplyScalar: function (b) {
        this.n11 *= b;
        this.n12 *= b;
        this.n13 *= b;
        this.n14 *= b;
        this.n21 *= b;
        this.n22 *= b;
        this.n23 *= b;
        this.n24 *= b;
        this.n31 *=
            b;
        this.n32 *= b;
        this.n33 *= b;
        this.n34 *= b;
        this.n41 *= b;
        this.n42 *= b;
        this.n43 *= b;
        this.n44 *= b;
        return this
    }, determinant: function () {
        var b = this.n11, c = this.n12, e = this.n13, f = this.n14, k = this.n21, m = this.n22, h = this.n23,
            n = this.n24, o = this.n31, t = this.n32, u = this.n33, v = this.n34, x = this.n41, w = this.n42,
            B = this.n43, A = this.n44;
        return f * h * t * x - e * n * t * x - f * m * u * x + c * n * u * x + e * m * v * x - c * h * v * x - f * h * o * w + e * n * o * w + f * k * u * w - b * n * u * w - e * k * v * w + b * h * v * w + f * m * o * B - c * n * o * B - f * k * t * B + b * n * t * B + c * k * v * B - b * m * v * B - e * m * o * A + c * h * o * A + e * k * t * A - b * h * t * A - c * k * u * A + b * m * u * A
    },
    transpose: function () {
        var b;
        b = this.n21;
        this.n21 = this.n12;
        this.n12 = b;
        b = this.n31;
        this.n31 = this.n13;
        this.n13 = b;
        b = this.n32;
        this.n32 = this.n23;
        this.n23 = b;
        b = this.n41;
        this.n41 = this.n14;
        this.n14 = b;
        b = this.n42;
        this.n42 = this.n24;
        this.n24 = b;
        b = this.n43;
        this.n43 = this.n34;
        this.n43 = b;
        return this
    }, clone: function () {
        var b = new THREE.Matrix4;
        b.n11 = this.n11;
        b.n12 = this.n12;
        b.n13 = this.n13;
        b.n14 = this.n14;
        b.n21 = this.n21;
        b.n22 = this.n22;
        b.n23 = this.n23;
        b.n24 = this.n24;
        b.n31 = this.n31;
        b.n32 = this.n32;
        b.n33 = this.n33;
        b.n34 = this.n34;
        b.n41 = this.n41;
        b.n42 = this.n42;
        b.n43 = this.n43;
        b.n44 = this.n44;
        return b
    }, flatten: function () {
        this.flat[0] = this.n11;
        this.flat[1] = this.n21;
        this.flat[2] = this.n31;
        this.flat[3] = this.n41;
        this.flat[4] = this.n12;
        this.flat[5] = this.n22;
        this.flat[6] = this.n32;
        this.flat[7] = this.n42;
        this.flat[8] = this.n13;
        this.flat[9] = this.n23;
        this.flat[10] = this.n33;
        this.flat[11] = this.n43;
        this.flat[12] = this.n14;
        this.flat[13] = this.n24;
        this.flat[14] = this.n34;
        this.flat[15] = this.n44;
        return this.flat
    }, flattenToArray: function (b) {
        b[0] = this.n11;
        b[1] = this.n21;
        b[2] = this.n31;
        b[3] = this.n41;
        b[4] = this.n12;
        b[5] = this.n22;
        b[6] = this.n32;
        b[7] = this.n42;
        b[8] = this.n13;
        b[9] = this.n23;
        b[10] = this.n33;
        b[11] = this.n43;
        b[12] = this.n14;
        b[13] = this.n24;
        b[14] = this.n34;
        b[15] = this.n44;
        return b
    }, flattenToArrayOffset: function (b, c) {
        b[c] = this.n11;
        b[c + 1] = this.n21;
        b[c + 2] = this.n31;
        b[c + 3] = this.n41;
        b[c + 4] = this.n12;
        b[c + 5] = this.n22;
        b[c + 6] = this.n32;
        b[c + 7] = this.n42;
        b[c + 8] = this.n13;
        b[c + 9] = this.n23;
        b[c + 10] = this.n33;
        b[c + 11] = this.n43;
        b[c + 12] = this.n14;
        b[c + 13] = this.n24;
        b[c + 14] = this.n34;
        b[c + 15] = this.n44;
        return b
    }, setTranslation: function (b, c, e) {
        this.set(1, 0, 0, b, 0, 1, 0, c, 0, 0, 1, e, 0, 0, 0, 1);
        return this
    }, setScale: function (b, c, e) {
        this.set(b, 0, 0, 0, 0, c, 0, 0, 0, 0, e, 0, 0, 0, 0, 1);
        return this
    }, setRotationX: function (b) {
        var c = Math.cos(b), b = Math.sin(b);
        this.set(1, 0, 0, 0, 0, c, -b, 0, 0, b, c, 0, 0, 0, 0, 1);
        return this
    }, setRotationY: function (b) {
        var c = Math.cos(b), b = Math.sin(b);
        this.set(c, 0, b, 0, 0, 1, 0, 0, -b, 0, c, 0, 0, 0, 0, 1);
        return this
    }, setRotationZ: function (b) {
        var c = Math.cos(b), b = Math.sin(b);
        this.set(c, -b, 0, 0, b, c, 0, 0,
            0, 0, 1, 0, 0, 0, 0, 1);
        return this
    }, setRotationAxis: function (b, c) {
        var e = Math.cos(c), f = Math.sin(c), k = 1 - e, m = b.x, h = b.y, n = b.z, o = k * m, t = k * h;
        this.set(o * m + e, o * h - f * n, o * n + f * h, 0, o * h + f * n, t * h + e, t * n - f * m, 0, o * n - f * h, t * n + f * m, k * n * n + e, 0, 0, 0, 0, 1);
        return this
    }, setPosition: function (b) {
        this.n14 = b.x;
        this.n24 = b.y;
        this.n34 = b.z;
        return this
    }, getPosition: function () {
        if (!this.position) this.position = new THREE.Vector3;
        this.position.set(this.n14, this.n24, this.n34);
        return this.position
    }, getColumnX: function () {
        if (!this.columnX) this.columnX =
            new THREE.Vector3;
        this.columnX.set(this.n11, this.n21, this.n31);
        return this.columnX
    }, getColumnY: function () {
        if (!this.columnY) this.columnY = new THREE.Vector3;
        this.columnY.set(this.n12, this.n22, this.n32);
        return this.columnY
    }, getColumnZ: function () {
        if (!this.columnZ) this.columnZ = new THREE.Vector3;
        this.columnZ.set(this.n13, this.n23, this.n33);
        return this.columnZ
    }, setRotationFromEuler: function (b, c) {
        var e = b.x, f = b.y, k = b.z, m = Math.cos(e), e = Math.sin(e), h = Math.cos(f), f = Math.sin(f),
            n = Math.cos(k), k = Math.sin(k);
        switch (c) {
            case "YXZ":
                var o =
                    h * n, t = h * k, u = f * n, v = f * k;
                this.n11 = o + v * e;
                this.n12 = u * e - t;
                this.n13 = m * f;
                this.n21 = m * k;
                this.n22 = m * n;
                this.n23 = -e;
                this.n31 = t * e - u;
                this.n32 = v + o * e;
                this.n33 = m * h;
                break;
            case "ZXY":
                o = h * n;
                t = h * k;
                u = f * n;
                v = f * k;
                this.n11 = o - v * e;
                this.n12 = -m * k;
                this.n13 = u + t * e;
                this.n21 = t + u * e;
                this.n22 = m * n;
                this.n23 = v - o * e;
                this.n31 = -m * f;
                this.n32 = e;
                this.n33 = m * h;
                break;
            case "ZYX":
                o = m * n;
                t = m * k;
                u = e * n;
                v = e * k;
                this.n11 = h * n;
                this.n12 = u * f - t;
                this.n13 = o * f + v;
                this.n21 = h * k;
                this.n22 = v * f + o;
                this.n23 = t * f - u;
                this.n31 = -f;
                this.n32 = e * h;
                this.n33 = m * h;
                break;
            case "YZX":
                o = m * h;
                t =
                    m * f;
                u = e * h;
                v = e * f;
                this.n11 = h * n;
                this.n12 = v - o * k;
                this.n13 = u * k + t;
                this.n21 = k;
                this.n22 = m * n;
                this.n23 = -e * n;
                this.n31 = -f * n;
                this.n32 = t * k + u;
                this.n33 = o - v * k;
                break;
            case "XZY":
                o = m * h;
                t = m * f;
                u = e * h;
                v = e * f;
                this.n11 = h * n;
                this.n12 = -k;
                this.n13 = f * n;
                this.n21 = o * k + v;
                this.n22 = m * n;
                this.n23 = t * k - u;
                this.n31 = u * k - t;
                this.n32 = e * n;
                this.n33 = v * k + o;
                break;
            default:
                o = m * n, t = m * k, u = e * n, v = e * k, this.n11 = h * n, this.n12 = -h * k, this.n13 = f, this.n21 = t + u * f, this.n22 = o - v * f, this.n23 = -e * h, this.n31 = v - o * f, this.n32 = u + t * f, this.n33 = m * h
        }
        return this
    }, setRotationFromQuaternion: function (b) {
        var c =
            b.x, e = b.y, f = b.z, k = b.w, m = c + c, h = e + e, n = f + f, b = c * m, o = c * h;
        c *= n;
        var t = e * h;
        e *= n;
        f *= n;
        m *= k;
        h *= k;
        k *= n;
        this.n11 = 1 - (t + f);
        this.n12 = o - k;
        this.n13 = c + h;
        this.n21 = o + k;
        this.n22 = 1 - (b + f);
        this.n23 = e - m;
        this.n31 = c - h;
        this.n32 = e + m;
        this.n33 = 1 - (b + t);
        return this
    }, scale: function (b) {
        var c = b.x, e = b.y, b = b.z;
        this.n11 *= c;
        this.n12 *= e;
        this.n13 *= b;
        this.n21 *= c;
        this.n22 *= e;
        this.n23 *= b;
        this.n31 *= c;
        this.n32 *= e;
        this.n33 *= b;
        this.n41 *= c;
        this.n42 *= e;
        this.n43 *= b;
        return this
    }, compose: function (b, c, e) {
        var f = THREE.Matrix4.__m1, k = THREE.Matrix4.__m2;
        f.identity();
        f.setRotationFromQuaternion(c);
        k.setScale(e.x, e.y, e.z);
        this.multiply(f, k);
        this.n14 = b.x;
        this.n24 = b.y;
        this.n34 = b.z;
        return this
    }, decompose: function (b, c, e) {
        var f = THREE.Matrix4.__v1, k = THREE.Matrix4.__v2, m = THREE.Matrix4.__v3;
        f.set(this.n11, this.n21, this.n31);
        k.set(this.n12, this.n22, this.n32);
        m.set(this.n13, this.n23, this.n33);
        b = b instanceof THREE.Vector3 ? b : new THREE.Vector3;
        c = c instanceof THREE.Quaternion ? c : new THREE.Quaternion;
        e = e instanceof THREE.Vector3 ? e : new THREE.Vector3;
        e.x = f.length();
        e.y = k.length();
        e.z = m.length();
        b.x = this.n14;
        b.y = this.n24;
        b.z = this.n34;
        f = THREE.Matrix4.__m1;
        f.copy(this);
        f.n11 /= e.x;
        f.n21 /= e.x;
        f.n31 /= e.x;
        f.n12 /= e.y;
        f.n22 /= e.y;
        f.n32 /= e.y;
        f.n13 /= e.z;
        f.n23 /= e.z;
        f.n33 /= e.z;
        c.setFromRotationMatrix(f);
        return [b, c, e]
    }, extractPosition: function (b) {
        this.n14 = b.n14;
        this.n24 = b.n24;
        this.n34 = b.n34
    }, extractRotation: function (b, c) {
        var e = 1 / c.x, f = 1 / c.y, k = 1 / c.z;
        this.n11 = b.n11 * e;
        this.n21 = b.n21 * e;
        this.n31 = b.n31 * e;
        this.n12 = b.n12 * f;
        this.n22 = b.n22 * f;
        this.n32 = b.n32 * f;
        this.n13 = b.n13 * k;
        this.n23 =
            b.n23 * k;
        this.n33 = b.n33 * k
    }
};
THREE.Matrix4.makeInvert = function (b, c) {
    var e = b.n11, f = b.n12, k = b.n13, m = b.n14, h = b.n21, n = b.n22, o = b.n23, t = b.n24, u = b.n31, v = b.n32,
        x = b.n33, w = b.n34, B = b.n41, A = b.n42, y = b.n43, D = b.n44;
    c === void 0 && (c = new THREE.Matrix4);
    c.n11 = o * w * A - t * x * A + t * v * y - n * w * y - o * v * D + n * x * D;
    c.n12 = m * x * A - k * w * A - m * v * y + f * w * y + k * v * D - f * x * D;
    c.n13 = k * t * A - m * o * A + m * n * y - f * t * y - k * n * D + f * o * D;
    c.n14 = m * o * v - k * t * v - m * n * x + f * t * x + k * n * w - f * o * w;
    c.n21 = t * x * B - o * w * B - t * u * y + h * w * y + o * u * D - h * x * D;
    c.n22 = k * w * B - m * x * B + m * u * y - e * w * y - k * u * D + e * x * D;
    c.n23 = m * o * B - k * t * B - m * h * y + e * t * y + k * h * D - e * o * D;
    c.n24 =
        k * t * u - m * o * u + m * h * x - e * t * x - k * h * w + e * o * w;
    c.n31 = n * w * B - t * v * B + t * u * A - h * w * A - n * u * D + h * v * D;
    c.n32 = m * v * B - f * w * B - m * u * A + e * w * A + f * u * D - e * v * D;
    c.n33 = k * t * B - m * n * B + m * h * A - e * t * A - f * h * D + e * n * D;
    c.n34 = m * n * u - f * t * u - m * h * v + e * t * v + f * h * w - e * n * w;
    c.n41 = o * v * B - n * x * B - o * u * A + h * x * A + n * u * y - h * v * y;
    c.n42 = f * x * B - k * v * B + k * u * A - e * x * A - f * u * y + e * v * y;
    c.n43 = k * n * B - f * o * B - k * h * A + e * o * A + f * h * y - e * n * y;
    c.n44 = f * o * u - k * n * u + k * h * v - e * o * v - f * h * x + e * n * x;
    c.multiplyScalar(1 / b.determinant());
    return c
};
THREE.Matrix4.makeInvert3x3 = function (b) {
    var c = b.m33, e = c.m, f = b.n33 * b.n22 - b.n32 * b.n23, k = -b.n33 * b.n21 + b.n31 * b.n23,
        m = b.n32 * b.n21 - b.n31 * b.n22, h = -b.n33 * b.n12 + b.n32 * b.n13, n = b.n33 * b.n11 - b.n31 * b.n13,
        o = -b.n32 * b.n11 + b.n31 * b.n12, t = b.n23 * b.n12 - b.n22 * b.n13, u = -b.n23 * b.n11 + b.n21 * b.n13,
        v = b.n22 * b.n11 - b.n21 * b.n12, b = b.n11 * f + b.n21 * h + b.n31 * t;
    b == 0 && console.error("THREE.Matrix4.makeInvert3x3: Matrix not invertible.");
    b = 1 / b;
    e[0] = b * f;
    e[1] = b * k;
    e[2] = b * m;
    e[3] = b * h;
    e[4] = b * n;
    e[5] = b * o;
    e[6] = b * t;
    e[7] = b * u;
    e[8] = b * v;
    return c
};
THREE.Matrix4.makeFrustum = function (b, c, e, f, k, m) {
    var h;
    h = new THREE.Matrix4;
    h.n11 = 2 * k / (c - b);
    h.n12 = 0;
    h.n13 = (c + b) / (c - b);
    h.n14 = 0;
    h.n21 = 0;
    h.n22 = 2 * k / (f - e);
    h.n23 = (f + e) / (f - e);
    h.n24 = 0;
    h.n31 = 0;
    h.n32 = 0;
    h.n33 = -(m + k) / (m - k);
    h.n34 = -2 * m * k / (m - k);
    h.n41 = 0;
    h.n42 = 0;
    h.n43 = -1;
    h.n44 = 0;
    return h
};
THREE.Matrix4.makePerspective = function (b, c, e, f) {
    var k, b = e * Math.tan(b * Math.PI / 360);
    k = -b;
    return THREE.Matrix4.makeFrustum(k * c, b * c, k, b, e, f)
};
THREE.Matrix4.makeOrtho = function (b, c, e, f, k, m) {
    var h, n, o, t;
    h = new THREE.Matrix4;
    n = c - b;
    o = e - f;
    t = m - k;
    h.n11 = 2 / n;
    h.n12 = 0;
    h.n13 = 0;
    h.n14 = -((c + b) / n);
    h.n21 = 0;
    h.n22 = 2 / o;
    h.n23 = 0;
    h.n24 = -((e + f) / o);
    h.n31 = 0;
    h.n32 = 0;
    h.n33 = -2 / t;
    h.n34 = -((m + k) / t);
    h.n41 = 0;
    h.n42 = 0;
    h.n43 = 0;
    h.n44 = 1;
    return h
};
THREE.Matrix4.__v1 = new THREE.Vector3;
THREE.Matrix4.__v2 = new THREE.Vector3;
THREE.Matrix4.__v3 = new THREE.Vector3;
THREE.Matrix4.__m1 = new THREE.Matrix4;
THREE.Matrix4.__m2 = new THREE.Matrix4;
THREE.Object3D = function () {
    this.id = THREE.Object3DCount++;
    this.name = "";
    this.parent = void 0;
    this.children = [];
    this.up = new THREE.Vector3(0, 1, 0);
    this.position = new THREE.Vector3;
    this.rotation = new THREE.Vector3;
    this.eulerOrder = "XYZ";
    this.scale = new THREE.Vector3(1, 1, 1);
    this.flipSided = this.doubleSided = this.dynamic = false;
    this.renderDepth = null;
    this.rotationAutoUpdate = true;
    this.matrix = new THREE.Matrix4;
    this.matrixWorld = new THREE.Matrix4;
    this.matrixRotationWorld = new THREE.Matrix4;
    this.matrixWorldNeedsUpdate = this.matrixAutoUpdate =
        true;
    this.quaternion = new THREE.Quaternion;
    this.useQuaternion = false;
    this.boundRadius = 0;
    this.boundRadiusScale = 1;
    this.visible = true;
    this.receiveShadow = this.castShadow = false;
    this.frustumCulled = true;
    this._vector = new THREE.Vector3
};
THREE.Object3D.prototype = {
    constructor: THREE.Object3D, translate: function (b, c) {
        this.matrix.rotateAxis(c);
        this.position.addSelf(c.multiplyScalar(b))
    }, translateX: function (b) {
        this.translate(b, this._vector.set(1, 0, 0))
    }, translateY: function (b) {
        this.translate(b, this._vector.set(0, 1, 0))
    }, translateZ: function (b) {
        this.translate(b, this._vector.set(0, 0, 1))
    }, lookAt: function (b) {
        this.matrix.lookAt(b, this.position, this.up);
        this.rotationAutoUpdate && this.rotation.setRotationFromMatrix(this.matrix)
    }, addChild: function (b) {
        if (this.children.indexOf(b) ===
            -1) {
            b.parent !== void 0 && b.parent.removeChild(b);
            b.parent = this;
            this.children.push(b);
            for (var c = this; c.parent !== void 0;) c = c.parent;
            c !== void 0 && c instanceof THREE.Scene && c.addChildRecurse(b)
        }
    }, removeChild: function (b) {
        var c = this, e = this.children.indexOf(b);
        if (e !== -1) {
            b.parent = void 0;
            for (this.children.splice(e, 1); c.parent !== void 0;) c = c.parent;
            c !== void 0 && c instanceof THREE.Scene && c.removeChildRecurse(b)
        }
    }, getChildByName: function (b, c) {
        var e, f, k;
        e = 0;
        for (f = this.children.length; e < f; e++) {
            k = this.children[e];
            if (k.name ===
                b) return k;
            if (c && (k = k.getChildByName(b, c), k !== void 0)) return k
        }
    }, updateMatrix: function () {
        this.matrix.setPosition(this.position);
        this.useQuaternion ? this.matrix.setRotationFromQuaternion(this.quaternion) : this.matrix.setRotationFromEuler(this.rotation, this.eulerOrder);
        if (this.scale.x !== 1 || this.scale.y !== 1 || this.scale.z !== 1) this.matrix.scale(this.scale), this.boundRadiusScale = Math.max(this.scale.x, Math.max(this.scale.y, this.scale.z));
        this.matrixWorldNeedsUpdate = true
    }, update: function (b, c, e) {
        this.matrixAutoUpdate &&
        this.updateMatrix();
        if (this.matrixWorldNeedsUpdate || c) b ? this.matrixWorld.multiply(b, this.matrix) : this.matrixWorld.copy(this.matrix), this.matrixRotationWorld.extractRotation(this.matrixWorld, this.scale), this.matrixWorldNeedsUpdate = false, c = true;
        for (var b = 0, f = this.children.length; b < f; b++) this.children[b].update(this.matrixWorld, c, e)
    }
};
THREE.Object3DCount = 0;
THREE.Projector = function () {
    function b() {
        var b = n[h] = n[h] || new THREE.RenderableVertex;
        h++;
        return b
    }

    function c(b, e) {
        return e.z - b.z
    }

    var e, f, k = [], m, h, n = [], o, t, u = [], v, x = [], w, B, A = [], y, D, C = [], L = [], z = [],
        E = new THREE.Vector4, N = new THREE.Vector4, I = new THREE.Matrix4, P = new THREE.Matrix4,
        H = [new THREE.Vector4, new THREE.Vector4, new THREE.Vector4, new THREE.Vector4, new THREE.Vector4, new THREE.Vector4],
        W = new THREE.Vector4, M = new THREE.Vector4;
    this.projectVector = function (b, e) {
        I.multiply(e.projectionMatrix, e.matrixWorldInverse);
        I.multiplyVector3(b);
        return b
    };
    this.unprojectVector = function (b, e) {
        I.multiply(e.matrixWorld, THREE.Matrix4.makeInvert(e.projectionMatrix));
        I.multiplyVector3(b);
        return b
    };
    this.projectObjects = function (b, h, m) {
        var n, o;
        f = L.length = 0;
        n = b.objects;
        b = 0;
        for (h = n.length; b < h; b++) {
            o = n[b];
            var t;
            if (!(t = !o.visible)) if (t = o instanceof THREE.Mesh) if (t = o.frustumCulled) {
                a:{
                    t = void 0;
                    for (var w = o.matrixWorld, v = -o.geometry.boundingSphere.radius * Math.max(o.scale.x, Math.max(o.scale.y, o.scale.z)), u = 0; u < 6; u++) if (t = H[u].x * w.n14 + H[u].y *
                        w.n24 + H[u].z * w.n34 + H[u].w, t <= v) {
                        t = false;
                        break a
                    }
                    t = true
                }
                t = !t
            }
            if (!t) t = k[f] = k[f] || new THREE.RenderableObject, f++, e = t, E.copy(o.position), I.multiplyVector3(E), e.object = o, e.z = E.z, L.push(e)
        }
        m && L.sort(c);
        return L
    };
    this.projectScene = function (e, f, k) {
        var L = f.near, E = f.far, Z, K, X, S, p, ca, aa, la, ka, ja, ea, da, ga, ya, ma, na, za;
        D = B = v = t = z.length = 0;
        f.matrixAutoUpdate && f.update(void 0, true);
        e.update(void 0, false, f);
        I.multiply(f.projectionMatrix, f.matrixWorldInverse);
        H[0].set(I.n41 - I.n11, I.n42 - I.n12, I.n43 - I.n13, I.n44 - I.n14);
        H[1].set(I.n41 + I.n11, I.n42 + I.n12, I.n43 + I.n13, I.n44 + I.n14);
        H[2].set(I.n41 + I.n21, I.n42 + I.n22, I.n43 + I.n23, I.n44 + I.n24);
        H[3].set(I.n41 - I.n21, I.n42 - I.n22, I.n43 - I.n23, I.n44 - I.n24);
        H[4].set(I.n41 - I.n31, I.n42 - I.n32, I.n43 - I.n33, I.n44 - I.n34);
        H[5].set(I.n41 + I.n31, I.n42 + I.n32, I.n43 + I.n33, I.n44 + I.n34);
        for (Z = 0; Z < 6; Z++) ka = H[Z], ka.divideScalar(Math.sqrt(ka.x * ka.x + ka.y * ka.y + ka.z * ka.z));
        ka = this.projectObjects(e, f, true);
        e = 0;
        for (Z = ka.length; e < Z; e++) if (ja = ka[e].object, ja.visible) if (ea = ja.matrixWorld, da = ja.matrixRotationWorld,
            ga = ja.materials, ya = ja.overdraw, h = 0, ja instanceof THREE.Mesh) {
            ma = ja.geometry;
            S = ma.vertices;
            na = ma.faces;
            ma = ma.faceVertexUvs;
            K = 0;
            for (X = S.length; K < X; K++) m = b(), m.positionWorld.copy(S[K].position), ea.multiplyVector3(m.positionWorld), m.positionScreen.copy(m.positionWorld), I.multiplyVector4(m.positionScreen), m.positionScreen.x /= m.positionScreen.w, m.positionScreen.y /= m.positionScreen.w, m.visible = m.positionScreen.z > L && m.positionScreen.z < E;
            S = 0;
            for (K = na.length; S < K; S++) {
                X = na[S];
                if (X instanceof THREE.Face3) if (p =
                    n[X.a], ca = n[X.b], aa = n[X.c], p.visible && ca.visible && aa.visible && (ja.doubleSided || ja.flipSided != (aa.positionScreen.x - p.positionScreen.x) * (ca.positionScreen.y - p.positionScreen.y) - (aa.positionScreen.y - p.positionScreen.y) * (ca.positionScreen.x - p.positionScreen.x) < 0)) la = u[t] = u[t] || new THREE.RenderableFace3, t++, o = la, o.v1.copy(p), o.v2.copy(ca), o.v3.copy(aa); else continue; else if (X instanceof THREE.Face4) if (p = n[X.a], ca = n[X.b], aa = n[X.c], la = n[X.d], p.visible && ca.visible && aa.visible && la.visible && (ja.doubleSided ||
                    ja.flipSided != ((la.positionScreen.x - p.positionScreen.x) * (ca.positionScreen.y - p.positionScreen.y) - (la.positionScreen.y - p.positionScreen.y) * (ca.positionScreen.x - p.positionScreen.x) < 0 || (ca.positionScreen.x - aa.positionScreen.x) * (la.positionScreen.y - aa.positionScreen.y) - (ca.positionScreen.y - aa.positionScreen.y) * (la.positionScreen.x - aa.positionScreen.x) < 0))) za = x[v] = x[v] || new THREE.RenderableFace4, v++, o = za, o.v1.copy(p), o.v2.copy(ca), o.v3.copy(aa), o.v4.copy(la); else continue;
                o.normalWorld.copy(X.normal);
                da.multiplyVector3(o.normalWorld);
                o.centroidWorld.copy(X.centroid);
                ea.multiplyVector3(o.centroidWorld);
                o.centroidScreen.copy(o.centroidWorld);
                I.multiplyVector3(o.centroidScreen);
                aa = X.vertexNormals;
                p = 0;
                for (ca = aa.length; p < ca; p++) la = o.vertexNormalsWorld[p], la.copy(aa[p]), da.multiplyVector3(la);
                p = 0;
                for (ca = ma.length; p < ca; p++) if (za = ma[p][S]) {
                    aa = 0;
                    for (la = za.length; aa < la; aa++) o.uvs[p][aa] = za[aa]
                }
                o.meshMaterials = ga;
                o.faceMaterials = X.materials;
                o.overdraw = ya;
                o.z = o.centroidScreen.z;
                z.push(o)
            }
        } else if (ja instanceof
            THREE.Line) {
            P.multiply(I, ea);
            S = ja.geometry.vertices;
            p = b();
            p.positionScreen.copy(S[0].position);
            P.multiplyVector4(p.positionScreen);
            K = 1;
            for (X = S.length; K < X; K++) {
                p = b();
                p.positionScreen.copy(S[K].position);
                P.multiplyVector4(p.positionScreen);
                ca = n[h - 2];
                W.copy(p.positionScreen);
                M.copy(ca.positionScreen);
                da = W;
                ga = M;
                ya = 0;
                ma = 1;
                na = da.z + da.w;
                var ta = ga.z + ga.w, Aa = -da.z + da.w, Fa = -ga.z + ga.w;
                if (na >= 0 && ta >= 0 && Aa >= 0 && Fa >= 0 || (na < 0 && ta < 0 || Aa < 0 && Fa < 0 ? 0 : (na < 0 ? ya = Math.max(ya, na / (na - ta)) : ta < 0 && (ma = Math.min(ma, na / (na - ta))),
                    Aa < 0 ? ya = Math.max(ya, Aa / (Aa - Fa)) : Fa < 0 && (ma = Math.min(ma, Aa / (Aa - Fa))), ma < ya ? false : (da.lerpSelf(ga, ya), ga.lerpSelf(da, 1 - ma), true)))) W.multiplyScalar(1 / W.w), M.multiplyScalar(1 / M.w), ea = A[B] = A[B] || new THREE.RenderableLine, B++, w = ea, w.v1.positionScreen.copy(W), w.v2.positionScreen.copy(M), w.z = Math.max(W.z, M.z), w.materials = ja.materials, z.push(w)
            }
        } else if (ja instanceof THREE.Particle && (N.set(ja.matrixWorld.n14, ja.matrixWorld.n24, ja.matrixWorld.n34, 1), I.multiplyVector4(N), N.z /= N.w, N.z > 0 && N.z < 1)) ea = C[D] = C[D] ||
            new THREE.RenderableParticle, D++, y = ea, y.x = N.x / N.w, y.y = N.y / N.w, y.z = N.z, y.rotation = ja.rotation.z, y.scale.x = ja.scale.x * Math.abs(y.x - (N.x + f.projectionMatrix.n11) / (N.w + f.projectionMatrix.n14)), y.scale.y = ja.scale.y * Math.abs(y.y - (N.y + f.projectionMatrix.n22) / (N.w + f.projectionMatrix.n24)), y.materials = ja.materials, z.push(y);
        k && z.sort(c);
        return z
    }
};
THREE.Quaternion = function (b, c, e, f) {
    this.set(b || 0, c || 0, e || 0, f !== void 0 ? f : 1)
};
THREE.Quaternion.prototype = {
    constructor: THREE.Quaternion, set: function (b, c, e, f) {
        this.x = b;
        this.y = c;
        this.z = e;
        this.w = f;
        return this
    }, copy: function (b) {
        this.x = b.x;
        this.y = b.y;
        this.z = b.z;
        this.w = b.w;
        return this
    }, setFromEuler: function (b) {
        var c = 0.5 * Math.PI / 360, e = b.x * c, f = b.y * c, k = b.z * c, b = Math.cos(f), f = Math.sin(f),
            c = Math.cos(-k), k = Math.sin(-k), m = Math.cos(e), e = Math.sin(e), h = b * c, n = f * k;
        this.w = h * m - n * e;
        this.x = h * e + n * m;
        this.y = f * c * m + b * k * e;
        this.z = b * k * m - f * c * e;
        return this
    }, setFromAxisAngle: function (b, c) {
        var e = c / 2, f = Math.sin(e);
        this.x = b.x * f;
        this.y = b.y * f;
        this.z = b.z * f;
        this.w = Math.cos(e);
        return this
    }, setFromRotationMatrix: function (b) {
        var c = Math.pow(b.determinant(), 1 / 3);
        this.w = Math.sqrt(Math.max(0, c + b.n11 + b.n22 + b.n33)) / 2;
        this.x = Math.sqrt(Math.max(0, c + b.n11 - b.n22 - b.n33)) / 2;
        this.y = Math.sqrt(Math.max(0, c - b.n11 + b.n22 - b.n33)) / 2;
        this.z = Math.sqrt(Math.max(0, c - b.n11 - b.n22 + b.n33)) / 2;
        this.x = b.n32 - b.n23 < 0 ? -Math.abs(this.x) : Math.abs(this.x);
        this.y = b.n13 - b.n31 < 0 ? -Math.abs(this.y) : Math.abs(this.y);
        this.z = b.n21 - b.n12 < 0 ? -Math.abs(this.z) : Math.abs(this.z);
        this.normalize();
        return this
    }, calculateW: function () {
        this.w = -Math.sqrt(Math.abs(1 - this.x * this.x - this.y * this.y - this.z * this.z));
        return this
    }, inverse: function () {
        this.x *= -1;
        this.y *= -1;
        this.z *= -1;
        return this
    }, length: function () {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)
    }, normalize: function () {
        var b = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
        b == 0 ? this.w = this.z = this.y = this.x = 0 : (b = 1 / b, this.x *= b, this.y *= b, this.z *= b, this.w *= b);
        return this
    }, multiplySelf: function (b) {
        var c =
            this.x, e = this.y, f = this.z, k = this.w, m = b.x, h = b.y, n = b.z, b = b.w;
        this.x = c * b + k * m + e * n - f * h;
        this.y = e * b + k * h + f * m - c * n;
        this.z = f * b + k * n + c * h - e * m;
        this.w = k * b - c * m - e * h - f * n;
        return this
    }, multiply: function (b, c) {
        this.x = b.x * c.w + b.y * c.z - b.z * c.y + b.w * c.x;
        this.y = -b.x * c.z + b.y * c.w + b.z * c.x + b.w * c.y;
        this.z = b.x * c.y - b.y * c.x + b.z * c.w + b.w * c.z;
        this.w = -b.x * c.x - b.y * c.y - b.z * c.z + b.w * c.w;
        return this
    }, multiplyVector3: function (b, c) {
        c || (c = b);
        var e = b.x, f = b.y, k = b.z, m = this.x, h = this.y, n = this.z, o = this.w, t = o * e + h * k - n * f,
            u = o * f + n * e - m * k, v = o * k + m * f - h * e, e = -m *
            e - h * f - n * k;
        c.x = t * o + e * -m + u * -n - v * -h;
        c.y = u * o + e * -h + v * -m - t * -n;
        c.z = v * o + e * -n + t * -h - u * -m;
        return c
    }
};
THREE.Quaternion.slerp = function (b, c, e, f) {
    var k = b.w * c.w + b.x * c.x + b.y * c.y + b.z * c.z;
    if (Math.abs(k) >= 1) return e.w = b.w, e.x = b.x, e.y = b.y, e.z = b.z, e;
    var m = Math.acos(k), h = Math.sqrt(1 - k * k);
    if (Math.abs(h) < 0.001) return e.w = 0.5 * (b.w + c.w), e.x = 0.5 * (b.x + c.x), e.y = 0.5 * (b.y + c.y), e.z = 0.5 * (b.z + c.z), e;
    k = Math.sin((1 - f) * m) / h;
    f = Math.sin(f * m) / h;
    e.w = b.w * k + c.w * f;
    e.x = b.x * k + c.x * f;
    e.y = b.y * k + c.y * f;
    e.z = b.z * k + c.z * f;
    return e
};
THREE.Vertex = function (b) {
    this.position = b || new THREE.Vector3
};
THREE.Face3 = function (b, c, e, f, k, m) {
    this.a = b;
    this.b = c;
    this.c = e;
    this.normal = f instanceof THREE.Vector3 ? f : new THREE.Vector3;
    this.vertexNormals = f instanceof Array ? f : [];
    this.color = k instanceof THREE.Color ? k : new THREE.Color;
    this.vertexColors = k instanceof Array ? k : [];
    this.vertexTangents = [];
    this.materials = m instanceof Array ? m : [m];
    this.centroid = new THREE.Vector3
};
THREE.Face4 = function (b, c, e, f, k, m, h) {
    this.a = b;
    this.b = c;
    this.c = e;
    this.d = f;
    this.normal = k instanceof THREE.Vector3 ? k : new THREE.Vector3;
    this.vertexNormals = k instanceof Array ? k : [];
    this.color = m instanceof THREE.Color ? m : new THREE.Color;
    this.vertexColors = m instanceof Array ? m : [];
    this.vertexTangents = [];
    this.materials = h instanceof Array ? h : [h];
    this.centroid = new THREE.Vector3
};
THREE.UV = function (b, c) {
    this.u = b || 0;
    this.v = c || 0
};
THREE.UV.prototype = {
    constructor: THREE.UV, set: function (b, c) {
        this.u = b;
        this.v = c;
        return this
    }, copy: function (b) {
        this.u = b.u;
        this.v = b.v;
        return this
    }, clone: function () {
        return new THREE.UV(this.u, this.v)
    }
};
THREE.Geometry = function () {
    this.id = THREE.GeometryCount++;
    this.vertices = [];
    this.colors = [];
    this.faces = [];
    this.edges = [];
    this.faceUvs = [[]];
    this.faceVertexUvs = [[]];
    this.morphTargets = [];
    this.morphColors = [];
    this.skinWeights = [];
    this.skinIndices = [];
    this.boundingSphere = this.boundingBox = null;
    this.dynamic = this.hasTangents = false
};
THREE.Geometry.prototype = {
    constructor: THREE.Geometry, computeCentroids: function () {
        var b, c, e;
        b = 0;
        for (c = this.faces.length; b < c; b++) e = this.faces[b], e.centroid.set(0, 0, 0), e instanceof THREE.Face3 ? (e.centroid.addSelf(this.vertices[e.a].position), e.centroid.addSelf(this.vertices[e.b].position), e.centroid.addSelf(this.vertices[e.c].position), e.centroid.divideScalar(3)) : e instanceof THREE.Face4 && (e.centroid.addSelf(this.vertices[e.a].position), e.centroid.addSelf(this.vertices[e.b].position), e.centroid.addSelf(this.vertices[e.c].position),
            e.centroid.addSelf(this.vertices[e.d].position), e.centroid.divideScalar(4))
    }, computeFaceNormals: function (b) {
        var c, e, f, k, m, h, n = new THREE.Vector3, o = new THREE.Vector3;
        f = 0;
        for (k = this.faces.length; f < k; f++) {
            m = this.faces[f];
            if (b && m.vertexNormals.length) {
                n.set(0, 0, 0);
                c = 0;
                for (e = m.vertexNormals.length; c < e; c++) n.addSelf(m.vertexNormals[c]);
                n.divideScalar(3)
            } else c = this.vertices[m.a], e = this.vertices[m.b], h = this.vertices[m.c], n.sub(h.position, e.position), o.sub(c.position, e.position), n.crossSelf(o);
            n.isZero() ||
            n.normalize();
            m.normal.copy(n)
        }
    }, computeVertexNormals: function () {
        var b, c, e, f;
        if (this.__tmpVertices == void 0) {
            f = this.__tmpVertices = Array(this.vertices.length);
            b = 0;
            for (c = this.vertices.length; b < c; b++) f[b] = new THREE.Vector3;
            b = 0;
            for (c = this.faces.length; b < c; b++) if (e = this.faces[b], e instanceof THREE.Face3) e.vertexNormals = [new THREE.Vector3, new THREE.Vector3, new THREE.Vector3]; else if (e instanceof THREE.Face4) e.vertexNormals = [new THREE.Vector3, new THREE.Vector3, new THREE.Vector3, new THREE.Vector3]
        } else {
            f =
                this.__tmpVertices;
            b = 0;
            for (c = this.vertices.length; b < c; b++) f[b].set(0, 0, 0)
        }
        b = 0;
        for (c = this.faces.length; b < c; b++) e = this.faces[b], e instanceof THREE.Face3 ? (f[e.a].addSelf(e.normal), f[e.b].addSelf(e.normal), f[e.c].addSelf(e.normal)) : e instanceof THREE.Face4 && (f[e.a].addSelf(e.normal), f[e.b].addSelf(e.normal), f[e.c].addSelf(e.normal), f[e.d].addSelf(e.normal));
        b = 0;
        for (c = this.vertices.length; b < c; b++) f[b].normalize();
        b = 0;
        for (c = this.faces.length; b < c; b++) e = this.faces[b], e instanceof THREE.Face3 ? (e.vertexNormals[0].copy(f[e.a]),
            e.vertexNormals[1].copy(f[e.b]), e.vertexNormals[2].copy(f[e.c])) : e instanceof THREE.Face4 && (e.vertexNormals[0].copy(f[e.a]), e.vertexNormals[1].copy(f[e.b]), e.vertexNormals[2].copy(f[e.c]), e.vertexNormals[3].copy(f[e.d]))
    }, computeTangents: function () {
        function b(b, e, c, f, k, m, Q) {
            n = b.vertices[e].position;
            o = b.vertices[c].position;
            t = b.vertices[f].position;
            u = h[k];
            v = h[m];
            x = h[Q];
            w = o.x - n.x;
            B = t.x - n.x;
            A = o.y - n.y;
            y = t.y - n.y;
            D = o.z - n.z;
            C = t.z - n.z;
            L = v.u - u.u;
            z = x.u - u.u;
            E = v.v - u.v;
            N = x.v - u.v;
            I = 1 / (L * N - z * E);
            M.set((N * w - E * B) *
                I, (N * A - E * y) * I, (N * D - E * C) * I);
            J.set((L * B - z * w) * I, (L * y - z * A) * I, (L * C - z * D) * I);
            H[e].addSelf(M);
            H[c].addSelf(M);
            H[f].addSelf(M);
            W[e].addSelf(J);
            W[c].addSelf(J);
            W[f].addSelf(J)
        }

        var c, e, f, k, m, h, n, o, t, u, v, x, w, B, A, y, D, C, L, z, E, N, I, P, H = [], W = [],
            M = new THREE.Vector3, J = new THREE.Vector3, Q = new THREE.Vector3, O = new THREE.Vector3,
            Y = new THREE.Vector3;
        c = 0;
        for (e = this.vertices.length; c < e; c++) H[c] = new THREE.Vector3, W[c] = new THREE.Vector3;
        c = 0;
        for (e = this.faces.length; c < e; c++) m = this.faces[c], h = this.faceVertexUvs[0][c], m instanceof
        THREE.Face3 ? b(this, m.a, m.b, m.c, 0, 1, 2) : m instanceof THREE.Face4 && (b(this, m.a, m.b, m.c, 0, 1, 2), b(this, m.a, m.b, m.d, 0, 1, 3));
        var V = ["a", "b", "c", "d"];
        c = 0;
        for (e = this.faces.length; c < e; c++) {
            m = this.faces[c];
            for (f = 0; f < m.vertexNormals.length; f++) Y.copy(m.vertexNormals[f]), k = m[V[f]], P = H[k], Q.copy(P), Q.subSelf(Y.multiplyScalar(Y.dot(P))).normalize(), O.cross(m.vertexNormals[f], P), k = O.dot(W[k]), k = k < 0 ? -1 : 1, m.vertexTangents[f] = new THREE.Vector4(Q.x, Q.y, Q.z, k)
        }
        this.hasTangents = true
    }, computeBoundingBox: function () {
        var b;
        if (this.vertices.length > 0) {
            this.boundingBox = {
                x: [this.vertices[0].position.x, this.vertices[0].position.x],
                y: [this.vertices[0].position.y, this.vertices[0].position.y],
                z: [this.vertices[0].position.z, this.vertices[0].position.z]
            };
            for (var c = 1, e = this.vertices.length; c < e; c++) {
                b = this.vertices[c];
                if (b.position.x < this.boundingBox.x[0]) this.boundingBox.x[0] = b.position.x; else if (b.position.x > this.boundingBox.x[1]) this.boundingBox.x[1] = b.position.x;
                if (b.position.y < this.boundingBox.y[0]) this.boundingBox.y[0] = b.position.y;
                else if (b.position.y > this.boundingBox.y[1]) this.boundingBox.y[1] = b.position.y;
                if (b.position.z < this.boundingBox.z[0]) this.boundingBox.z[0] = b.position.z; else if (b.position.z > this.boundingBox.z[1]) this.boundingBox.z[1] = b.position.z
            }
        }
    }, computeBoundingSphere: function () {
        for (var b = 0, c = 0, e = this.vertices.length; c < e; c++) b = Math.max(b, this.vertices[c].position.length());
        this.boundingSphere = {radius: b}
    }, computeEdgeFaces: function () {
        function b(b, e) {
            return Math.min(b, e) + "_" + Math.max(b, e)
        }

        function c(b, e, c) {
            b[e] ===
            void 0 ? (b[e] = {
                set: {},
                array: []
            }, b[e].set[c] = 1, b[e].array.push(c)) : b[e].set[c] === void 0 && (b[e].set[c] = 1, b[e].array.push(c))
        }

        var e, f, k, m, h, n = {};
        e = 0;
        for (f = this.faces.length; e < f; e++) h = this.faces[e], h instanceof THREE.Face3 ? (k = b(h.a, h.b), c(n, k, e), k = b(h.b, h.c), c(n, k, e), k = b(h.a, h.c), c(n, k, e)) : h instanceof THREE.Face4 && (k = b(h.b, h.d), c(n, k, e), k = b(h.a, h.b), c(n, k, e), k = b(h.a, h.d), c(n, k, e), k = b(h.b, h.c), c(n, k, e), k = b(h.c, h.d), c(n, k, e));
        e = 0;
        for (f = this.edges.length; e < f; e++) {
            h = this.edges[e];
            k = h.vertexIndices[0];
            m = h.vertexIndices[1];
            h.faceIndices = n[b(k, m)].array;
            for (k = 0; k < h.faceIndices.length; k++) m = h.faceIndices[k], h.faces.push(this.faces[m])
        }
    }
};
THREE.GeometryCount = 0;
THREE.Spline = function (b) {
    function c(b, e, c, f, k, h, m) {
        b = (c - b) * 0.5;
        f = (f - e) * 0.5;
        return (2 * (e - c) + b + f) * m + (-3 * (e - c) - 2 * b - f) * h + b * k + e
    }

    this.points = b;
    var e = [], f = {x: 0, y: 0, z: 0}, k, m, h, n, o, t, u, v, x;
    this.initFromArray = function (b) {
        this.points = [];
        for (var e = 0; e < b.length; e++) this.points[e] = {x: b[e][0], y: b[e][1], z: b[e][2]}
    };
    this.getPoint = function (b) {
        k = (this.points.length - 1) * b;
        m = Math.floor(k);
        h = k - m;
        e[0] = m == 0 ? m : m - 1;
        e[1] = m;
        e[2] = m > this.points.length - 2 ? m : m + 1;
        e[3] = m > this.points.length - 3 ? m : m + 2;
        t = this.points[e[0]];
        u = this.points[e[1]];
        v = this.points[e[2]];
        x = this.points[e[3]];
        n = h * h;
        o = h * n;
        f.x = c(t.x, u.x, v.x, x.x, h, n, o);
        f.y = c(t.y, u.y, v.y, x.y, h, n, o);
        f.z = c(t.z, u.z, v.z, x.z, h, n, o);
        return f
    };
    this.getControlPointsArray = function () {
        var b, e, c = this.points.length, f = [];
        for (b = 0; b < c; b++) e = this.points[b], f[b] = [e.x, e.y, e.z];
        return f
    };
    this.getLength = function (b) {
        var e, c, f = e = e = 0, k = new THREE.Vector3, h = new THREE.Vector3, m = [], n = 0;
        m[0] = 0;
        b || (b = 100);
        c = this.points.length * b;
        k.copy(this.points[0]);
        for (b = 1; b < c; b++) e = b / c, position = this.getPoint(e), h.copy(position),
            n += h.distanceTo(k), k.copy(position), e *= this.points.length - 1, e = Math.floor(e), e != f && (m[e] = n, f = e);
        m[m.length] = n;
        return {chunks: m, total: n}
    };
    this.reparametrizeByArcLength = function (b) {
        var e, c, f, k, h, m, n = [], o = new THREE.Vector3, t = this.getLength();
        n.push(o.copy(this.points[0]).clone());
        for (e = 1; e < this.points.length; e++) {
            c = t.chunks[e] - t.chunks[e - 1];
            m = Math.ceil(b * c / t.total);
            k = (e - 1) / (this.points.length - 1);
            h = e / (this.points.length - 1);
            for (c = 1; c < m - 1; c++) f = k + c * (1 / m) * (h - k), position = this.getPoint(f), n.push(o.copy(position).clone());
            n.push(o.copy(this.points[e]).clone())
        }
        this.points = n
    }
};
THREE.Edge = function (b, c, e, f) {
    this.vertices = [b, c];
    this.vertexIndices = [e, f];
    this.faces = [];
    this.faceIndices = []
};
THREE.Camera = function (b, c, e, f, k) {
    THREE.Object3D.call(this);
    this.fov = b || 50;
    this.aspect = c || 1;
    this.near = e || 0.1;
    this.far = f || 2E3;
    this.target = k || new THREE.Object3D;
    this.useTarget = true;
    this.matrixWorldInverse = new THREE.Matrix4;
    this.projectionMatrix = null;
    this.updateProjectionMatrix()
};
THREE.Camera.prototype = new THREE.Object3D;
THREE.Camera.prototype.constructor = THREE.Camera;
THREE.Camera.prototype.supr = THREE.Object3D.prototype;
THREE.Camera.prototype.translate = function (b, c) {
    this.matrix.rotateAxis(c);
    c.multiplyScalar(b);
    this.position.addSelf(c);
    this.target.position.addSelf(c)
};
THREE.Camera.prototype.updateProjectionMatrix = function () {
    if (this.fullWidth) {
        var b = this.fullWidth / this.fullHeight, c = Math.tan(this.fov * Math.PI / 360) * this.near, e = -c, f = b * e,
            b = Math.abs(b * c - f), e = Math.abs(c - e);
        this.projectionMatrix = THREE.Matrix4.makeFrustum(f + this.x * b / this.fullWidth, f + (this.x + this.width) * b / this.fullWidth, c - (this.y + this.height) * e / this.fullHeight, c - this.y * e / this.fullHeight, this.near, this.far)
    } else this.projectionMatrix = THREE.Matrix4.makePerspective(this.fov, this.aspect, this.near, this.far)
};
THREE.Camera.prototype.setViewOffset = function (b, c, e, f, k, m) {
    this.fullWidth = b;
    this.fullHeight = c;
    this.x = e;
    this.y = f;
    this.width = k;
    this.height = m;
    this.updateProjectionMatrix()
};
THREE.Camera.prototype.update = function (b, c, e) {
    if (this.useTarget) this.matrix.lookAt(this.position, this.target.position, this.up), this.matrix.setPosition(this.position), b ? this.matrixWorld.multiply(b, this.matrix) : this.matrixWorld.copy(this.matrix), THREE.Matrix4.makeInvert(this.matrixWorld, this.matrixWorldInverse), c = true; else if (this.matrixAutoUpdate && this.updateMatrix(), c || this.matrixWorldNeedsUpdate) b ? this.matrixWorld.multiply(b, this.matrix) : this.matrixWorld.copy(this.matrix), this.matrixWorldNeedsUpdate =
        false, c = true, THREE.Matrix4.makeInvert(this.matrixWorld, this.matrixWorldInverse);
    for (b = 0; b < this.children.length; b++) this.children[b].update(this.matrixWorld, c, e)
};
THREE.OrthoCamera = function (b, c, e, f, k, m, h) {
    THREE.Camera.call(this, 45, 1, k, m, h);
    this.left = b;
    this.right = c;
    this.top = e;
    this.bottom = f;
    this.updateProjectionMatrix()
};
THREE.OrthoCamera.prototype = new THREE.Camera;
THREE.OrthoCamera.prototype.constructor = THREE.OrthoCamera;
THREE.OrthoCamera.prototype.updateProjectionMatrix = function () {
    this.projectionMatrix = THREE.Matrix4.makeOrtho(this.left, this.right, this.top, this.bottom, this.near, this.far)
};
THREE.Light = function (b) {
    THREE.Object3D.call(this);
    this.color = new THREE.Color(b)
};
THREE.Light.prototype = new THREE.Object3D;
THREE.Light.prototype.constructor = THREE.Light;
THREE.Light.prototype.supr = THREE.Object3D.prototype;
THREE.AmbientLight = function (b) {
    THREE.Light.call(this, b)
};
THREE.AmbientLight.prototype = new THREE.Light;
THREE.AmbientLight.prototype.constructor = THREE.AmbientLight;
THREE.DirectionalLight = function (b, c, e, f) {
    THREE.Light.call(this, b);
    this.position = new THREE.Vector3(0, 1, 0);
    this.intensity = c || 1;
    this.distance = e || 0;
    this.castShadow = f !== void 0 ? f : false
};
THREE.DirectionalLight.prototype = new THREE.Light;
THREE.DirectionalLight.prototype.constructor = THREE.DirectionalLight;
THREE.PointLight = function (b, c, e) {
    THREE.Light.call(this, b);
    this.position = new THREE.Vector3;
    this.intensity = c || 1;
    this.distance = e || 0
};
THREE.PointLight.prototype = new THREE.Light;
THREE.PointLight.prototype.constructor = THREE.PointLight;
THREE.SpotLight = function (b, c, e, f) {
    THREE.Light.call(this, b);
    this.position = new THREE.Vector3(0, 1, 0);
    this.target = new THREE.Object3D;
    this.intensity = c || 1;
    this.distance = e || 0;
    this.castShadow = f !== void 0 ? f : false
};
THREE.SpotLight.prototype = new THREE.Light;
THREE.SpotLight.prototype.constructor = THREE.SpotLight;
THREE.Material = function (b) {
    this.id = THREE.MaterialCount++;
    b = b || {};
    this.opacity = b.opacity !== void 0 ? b.opacity : 1;
    this.transparent = b.transparent !== void 0 ? b.transparent : false;
    this.blending = b.blending !== void 0 ? b.blending : THREE.NormalBlending;
    this.depthTest = b.depthTest !== void 0 ? b.depthTest : true;
    this.polygonOffset = b.polygonOffset !== void 0 ? b.polygonOffset : false;
    this.polygonOffsetFactor = b.polygonOffsetFactor !== void 0 ? b.polygonOffsetFactor : 0;
    this.polygonOffsetUnits = b.polygonOffsetUnits !== void 0 ? b.polygonOffsetUnits :
        0;
    this.alphaTest = b.alphaTest !== void 0 ? b.alphaTest : 0
};
THREE.MaterialCount = 0;
THREE.NoShading = 0;
THREE.FlatShading = 1;
THREE.SmoothShading = 2;
THREE.NoColors = 0;
THREE.FaceColors = 1;
THREE.VertexColors = 2;
THREE.NormalBlending = 0;
THREE.AdditiveBlending = 1;
THREE.SubtractiveBlending = 2;
THREE.MultiplyBlending = 3;
THREE.AdditiveAlphaBlending = 4;
THREE.LineBasicMaterial = function (b) {
    THREE.Material.call(this, b);
    b = b || {};
    this.color = b.color !== void 0 ? new THREE.Color(b.color) : new THREE.Color(16777215);
    this.linewidth = b.linewidth !== void 0 ? b.linewidth : 1;
    this.linecap = b.linecap !== void 0 ? b.linecap : "round";
    this.linejoin = b.linejoin !== void 0 ? b.linejoin : "round";
    this.vertexColors = b.vertexColors ? b.vertexColors : false
};
THREE.LineBasicMaterial.prototype = new THREE.Material;
THREE.LineBasicMaterial.prototype.constructor = THREE.LineBasicMaterial;
THREE.MeshBasicMaterial = function (b) {
    THREE.Material.call(this, b);
    b = b || {};
    this.color = b.color !== void 0 ? new THREE.Color(b.color) : new THREE.Color(16777215);
    this.map = b.map !== void 0 ? b.map : null;
    this.lightMap = b.lightMap !== void 0 ? b.lightMap : null;
    this.envMap = b.envMap !== void 0 ? b.envMap : null;
    this.combine = b.combine !== void 0 ? b.combine : THREE.MultiplyOperation;
    this.reflectivity = b.reflectivity !== void 0 ? b.reflectivity : 1;
    this.refractionRatio = b.refractionRatio !== void 0 ? b.refractionRatio : 0.98;
    this.shading = b.shading !==
    void 0 ? b.shading : THREE.SmoothShading;
    this.wireframe = b.wireframe !== void 0 ? b.wireframe : false;
    this.wireframeLinewidth = b.wireframeLinewidth !== void 0 ? b.wireframeLinewidth : 1;
    this.wireframeLinecap = b.wireframeLinecap !== void 0 ? b.wireframeLinecap : "round";
    this.wireframeLinejoin = b.wireframeLinejoin !== void 0 ? b.wireframeLinejoin : "round";
    this.vertexColors = b.vertexColors !== void 0 ? b.vertexColors : false;
    this.skinning = b.skinning !== void 0 ? b.skinning : false;
    this.morphTargets = b.morphTargets !== void 0 ? b.morphTargets : false
};
THREE.MeshBasicMaterial.prototype = new THREE.Material;
THREE.MeshBasicMaterial.prototype.constructor = THREE.MeshBasicMaterial;
THREE.MeshLambertMaterial = function (b) {
    THREE.Material.call(this, b);
    b = b || {};
    this.color = b.color !== void 0 ? new THREE.Color(b.color) : new THREE.Color(16777215);
    this.map = b.map !== void 0 ? b.map : null;
    this.lightMap = b.lightMap !== void 0 ? b.lightMap : null;
    this.envMap = b.envMap !== void 0 ? b.envMap : null;
    this.combine = b.combine !== void 0 ? b.combine : THREE.MultiplyOperation;
    this.reflectivity = b.reflectivity !== void 0 ? b.reflectivity : 1;
    this.refractionRatio = b.refractionRatio !== void 0 ? b.refractionRatio : 0.98;
    this.shading = b.shading !==
    void 0 ? b.shading : THREE.SmoothShading;
    this.wireframe = b.wireframe !== void 0 ? b.wireframe : false;
    this.wireframeLinewidth = b.wireframeLinewidth !== void 0 ? b.wireframeLinewidth : 1;
    this.wireframeLinecap = b.wireframeLinecap !== void 0 ? b.wireframeLinecap : "round";
    this.wireframeLinejoin = b.wireframeLinejoin !== void 0 ? b.wireframeLinejoin : "round";
    this.vertexColors = b.vertexColors !== void 0 ? b.vertexColors : false;
    this.skinning = b.skinning !== void 0 ? b.skinning : false;
    this.morphTargets = b.morphTargets !== void 0 ? b.morphTargets : false
};
THREE.MeshLambertMaterial.prototype = new THREE.Material;
THREE.MeshLambertMaterial.prototype.constructor = THREE.MeshLambertMaterial;
THREE.MeshPhongMaterial = function (b) {
    THREE.Material.call(this, b);
    b = b || {};
    this.color = b.color !== void 0 ? new THREE.Color(b.color) : new THREE.Color(16777215);
    this.ambient = b.ambient !== void 0 ? new THREE.Color(b.ambient) : new THREE.Color(328965);
    this.specular = b.specular !== void 0 ? new THREE.Color(b.specular) : new THREE.Color(1118481);
    this.shininess = b.shininess !== void 0 ? b.shininess : 30;
    this.map = b.map !== void 0 ? b.map : null;
    this.lightMap = b.lightMap !== void 0 ? b.lightMap : null;
    this.envMap = b.envMap !== void 0 ? b.envMap : null;
    this.combine = b.combine !== void 0 ? b.combine : THREE.MultiplyOperation;
    this.reflectivity = b.reflectivity !== void 0 ? b.reflectivity : 1;
    this.refractionRatio = b.refractionRatio !== void 0 ? b.refractionRatio : 0.98;
    this.shading = b.shading !== void 0 ? b.shading : THREE.SmoothShading;
    this.wireframe = b.wireframe !== void 0 ? b.wireframe : false;
    this.wireframeLinewidth = b.wireframeLinewidth !== void 0 ? b.wireframeLinewidth : 1;
    this.wireframeLinecap = b.wireframeLinecap !== void 0 ? b.wireframeLinecap : "round";
    this.wireframeLinejoin = b.wireframeLinejoin !==
    void 0 ? b.wireframeLinejoin : "round";
    this.vertexColors = b.vertexColors !== void 0 ? b.vertexColors : false;
    this.skinning = b.skinning !== void 0 ? b.skinning : false;
    this.morphTargets = b.morphTargets !== void 0 ? b.morphTargets : false
};
THREE.MeshPhongMaterial.prototype = new THREE.Material;
THREE.MeshPhongMaterial.prototype.constructor = THREE.MeshPhongMaterial;
THREE.MeshDepthMaterial = function (b) {
    THREE.Material.call(this, b);
    b = b || {};
    this.shading = b.shading !== void 0 ? b.shading : THREE.SmoothShading;
    this.wireframe = b.wireframe !== void 0 ? b.wireframe : false;
    this.wireframeLinewidth = b.wireframeLinewidth !== void 0 ? b.wireframeLinewidth : 1
};
THREE.MeshDepthMaterial.prototype = new THREE.Material;
THREE.MeshDepthMaterial.prototype.constructor = THREE.MeshDepthMaterial;
THREE.MeshNormalMaterial = function (b) {
    THREE.Material.call(this, b);
    b = b || {};
    this.shading = b.shading ? b.shading : THREE.FlatShading;
    this.wireframe = b.wireframe ? b.wireframe : false;
    this.wireframeLinewidth = b.wireframeLinewidth ? b.wireframeLinewidth : 1
};
THREE.MeshNormalMaterial.prototype = new THREE.Material;
THREE.MeshNormalMaterial.prototype.constructor = THREE.MeshNormalMaterial;
THREE.MeshFaceMaterial = function () {
};
THREE.MeshShaderMaterial = function (b) {
    THREE.Material.call(this, b);
    b = b || {};
    this.fragmentShader = b.fragmentShader !== void 0 ? b.fragmentShader : "void main() {}";
    this.vertexShader = b.vertexShader !== void 0 ? b.vertexShader : "void main() {}";
    this.uniforms = b.uniforms !== void 0 ? b.uniforms : {};
    this.attributes = b.attributes;
    this.shading = b.shading !== void 0 ? b.shading : THREE.SmoothShading;
    this.wireframe = b.wireframe !== void 0 ? b.wireframe : false;
    this.wireframeLinewidth = b.wireframeLinewidth !== void 0 ? b.wireframeLinewidth : 1;
    this.fog =
        b.fog !== void 0 ? b.fog : false;
    this.lights = b.lights !== void 0 ? b.lights : false;
    this.vertexColors = b.vertexColors !== void 0 ? b.vertexColors : false;
    this.skinning = b.skinning !== void 0 ? b.skinning : false;
    this.morphTargets = b.morphTargets !== void 0 ? b.morphTargets : false
};
THREE.MeshShaderMaterial.prototype = new THREE.Material;
THREE.MeshShaderMaterial.prototype.constructor = THREE.MeshShaderMaterial;
THREE.ParticleBasicMaterial = function (b) {
    THREE.Material.call(this, b);
    b = b || {};
    this.color = b.color !== void 0 ? new THREE.Color(b.color) : new THREE.Color(16777215);
    this.map = b.map !== void 0 ? b.map : null;
    this.size = b.size !== void 0 ? b.size : 1;
    this.sizeAttenuation = b.sizeAttenuation !== void 0 ? b.sizeAttenuation : true;
    this.vertexColors = b.vertexColors !== void 0 ? b.vertexColors : false
};
THREE.ParticleBasicMaterial.prototype = new THREE.Material;
THREE.ParticleBasicMaterial.prototype.constructor = THREE.ParticleBasicMaterial;
THREE.ParticleCanvasMaterial = function (b) {
    THREE.Material.call(this, b);
    b = b || {};
    this.color = b.color !== void 0 ? new THREE.Color(b.color) : new THREE.Color(16777215);
    this.program = b.program !== void 0 ? b.program : function () {
    }
};
THREE.ParticleCanvasMaterial.prototype = new THREE.Material;
THREE.ParticleCanvasMaterial.prototype.constructor = THREE.ParticleCanvasMaterial;
THREE.ParticleDOMMaterial = function (b) {
    THREE.Material.call(this);
    this.domElement = b
};
THREE.Texture = function (b, c, e, f, k, m) {
    this.id = THREE.TextureCount++;
    this.image = b;
    this.mapping = c !== void 0 ? c : new THREE.UVMapping;
    this.wrapS = e !== void 0 ? e : THREE.ClampToEdgeWrapping;
    this.wrapT = f !== void 0 ? f : THREE.ClampToEdgeWrapping;
    this.magFilter = k !== void 0 ? k : THREE.LinearFilter;
    this.minFilter = m !== void 0 ? m : THREE.LinearMipMapLinearFilter;
    this.offset = new THREE.Vector2(0, 0);
    this.repeat = new THREE.Vector2(1, 1);
    this.needsUpdate = false
};
THREE.Texture.prototype = {
    constructor: THREE.Texture, clone: function () {
        var b = new THREE.Texture(this.image, this.mapping, this.wrapS, this.wrapT, this.magFilter, this.minFilter);
        b.offset.copy(this.offset);
        b.repeat.copy(this.repeat);
        return b
    }
};
THREE.TextureCount = 0;
THREE.MultiplyOperation = 0;
THREE.MixOperation = 1;
THREE.CubeReflectionMapping = function () {
};
THREE.CubeRefractionMapping = function () {
};
THREE.LatitudeReflectionMapping = function () {
};
THREE.LatitudeRefractionMapping = function () {
};
THREE.SphericalReflectionMapping = function () {
};
THREE.SphericalRefractionMapping = function () {
};
THREE.UVMapping = function () {
};
THREE.RepeatWrapping = 0;
THREE.ClampToEdgeWrapping = 1;
THREE.MirroredRepeatWrapping = 2;
THREE.NearestFilter = 3;
THREE.NearestMipMapNearestFilter = 4;
THREE.NearestMipMapLinearFilter = 5;
THREE.LinearFilter = 6;
THREE.LinearMipMapNearestFilter = 7;
THREE.LinearMipMapLinearFilter = 8;
THREE.ByteType = 9;
THREE.UnsignedByteType = 10;
THREE.ShortType = 11;
THREE.UnsignedShortType = 12;
THREE.IntType = 13;
THREE.UnsignedIntType = 14;
THREE.FloatType = 15;
THREE.AlphaFormat = 16;
THREE.RGBFormat = 17;
THREE.RGBAFormat = 18;
THREE.LuminanceFormat = 19;
THREE.LuminanceAlphaFormat = 20;
THREE.DataTexture = function (b, c, e, f, k, m, h, n, o) {
    THREE.Texture.call(this, null, k, m, h, n, o);
    this.image = {data: b, width: c, height: e};
    this.format = f !== void 0 ? f : THREE.RGBAFormat
};
THREE.DataTexture.prototype = new THREE.Texture;
THREE.DataTexture.prototype.constructor = THREE.DataTexture;
THREE.DataTexture.prototype.clone = function () {
    var b = new THREE.DataTexture(this.data.slice(0), this.mapping, this.wrapS, this.wrapT, this.magFilter, this.minFilter);
    b.offset.copy(this.offset);
    b.repeat.copy(this.repeat);
    return b
};
THREE.Particle = function (b) {
    THREE.Object3D.call(this);
    this.materials = b instanceof Array ? b : [b]
};
THREE.Particle.prototype = new THREE.Object3D;
THREE.Particle.prototype.constructor = THREE.Particle;
THREE.ParticleSystem = function (b, c) {
    THREE.Object3D.call(this);
    this.geometry = b;
    this.materials = c instanceof Array ? c : [c];
    this.sortParticles = false
};
THREE.ParticleSystem.prototype = new THREE.Object3D;
THREE.ParticleSystem.prototype.constructor = THREE.ParticleSystem;
THREE.Line = function (b, c, e) {
    THREE.Object3D.call(this);
    this.geometry = b;
    this.materials = c instanceof Array ? c : [c];
    this.type = e != void 0 ? e : THREE.LineStrip
};
THREE.LineStrip = 0;
THREE.LinePieces = 1;
THREE.Line.prototype = new THREE.Object3D;
THREE.Line.prototype.constructor = THREE.Line;
THREE.Mesh = function (b, c) {
    THREE.Object3D.call(this);
    this.geometry = b;
    this.materials = c && c.length ? c : [c];
    this.overdraw = false;
    if (this.geometry && (this.geometry.boundingSphere || this.geometry.computeBoundingSphere(), this.boundRadius = b.boundingSphere.radius, this.geometry.morphTargets.length)) {
        this.morphTargetBase = -1;
        this.morphTargetForcedOrder = [];
        this.morphTargetInfluences = [];
        this.morphTargetDictionary = {};
        for (var e = 0; e < this.geometry.morphTargets.length; e++) this.morphTargetInfluences.push(0), this.morphTargetDictionary[this.geometry.morphTargets[e].name] =
            e
    }
};
THREE.Mesh.prototype = new THREE.Object3D;
THREE.Mesh.prototype.constructor = THREE.Mesh;
THREE.Mesh.prototype.supr = THREE.Object3D.prototype;
THREE.Mesh.prototype.getMorphTargetIndexByName = function (b) {
    if (this.morphTargetDictionary[b] !== void 0) return this.morphTargetDictionary[b];
    console.log("THREE.Mesh.getMorphTargetIndexByName: morph target " + b + " does not exist. Returning 0.");
    return 0
};
THREE.Bone = function (b) {
    THREE.Object3D.call(this);
    this.skin = b;
    this.skinMatrix = new THREE.Matrix4;
    this.hasNoneBoneChildren = false
};
THREE.Bone.prototype = new THREE.Object3D;
THREE.Bone.prototype.constructor = THREE.Bone;
THREE.Bone.prototype.supr = THREE.Object3D.prototype;
THREE.Bone.prototype.update = function (b, c, e) {
    this.matrixAutoUpdate && (c |= this.updateMatrix());
    if (c || this.matrixWorldNeedsUpdate) b ? this.skinMatrix.multiply(b, this.matrix) : this.skinMatrix.copy(this.matrix), this.matrixWorldNeedsUpdate = false, c = true;
    var f, k = this.children.length;
    if (this.hasNoneBoneChildren) {
        this.matrixWorld.multiply(this.skin.matrixWorld, this.skinMatrix);
        for (f = 0; f < k; f++) b = this.children[f], b instanceof THREE.Bone ? b.update(this.skinMatrix, c, e) : b.update(this.matrixWorld, true, e)
    } else for (f = 0; f <
    k; f++) this.children[f].update(this.skinMatrix, c, e)
};
THREE.Bone.prototype.addChild = function (b) {
    if (this.children.indexOf(b) === -1 && (b.parent !== void 0 && b.parent.removeChild(b), b.parent = this, this.children.push(b), !(b instanceof THREE.Bone))) this.hasNoneBoneChildren = true
};
THREE.SkinnedMesh = function (b, c) {
    THREE.Mesh.call(this, b, c);
    this.identityMatrix = new THREE.Matrix4;
    this.bones = [];
    this.boneMatrices = [];
    var e, f, k, m, h, n;
    if (this.geometry.bones !== void 0) {
        for (e = 0; e < this.geometry.bones.length; e++) k = this.geometry.bones[e], m = k.pos, h = k.rotq, n = k.scl, f = this.addBone(), f.name = k.name, f.position.set(m[0], m[1], m[2]), f.quaternion.set(h[0], h[1], h[2], h[3]), f.useQuaternion = true, n !== void 0 ? f.scale.set(n[0], n[1], n[2]) : f.scale.set(1, 1, 1);
        for (e = 0; e < this.bones.length; e++) k = this.geometry.bones[e],
            f = this.bones[e], k.parent === -1 ? this.addChild(f) : this.bones[k.parent].addChild(f);
        this.boneMatrices = new Float32Array(16 * this.bones.length);
        this.pose()
    }
};
THREE.SkinnedMesh.prototype = new THREE.Mesh;
THREE.SkinnedMesh.prototype.constructor = THREE.SkinnedMesh;
THREE.SkinnedMesh.prototype.update = function (b, c, e) {
    if (this.visible) {
        this.matrixAutoUpdate && (c |= this.updateMatrix());
        if (c || this.matrixWorldNeedsUpdate) b ? this.matrixWorld.multiply(b, this.matrix) : this.matrixWorld.copy(this.matrix), this.matrixWorldNeedsUpdate = false, c = true;
        var f, k = this.children.length;
        for (f = 0; f < k; f++) b = this.children[f], b instanceof THREE.Bone ? b.update(this.identityMatrix, false, e) : b.update(this.matrixWorld, c, e);
        e = this.bones.length;
        ba = this.bones;
        bm = this.boneMatrices;
        for (c = 0; c < e; c++) ba[c].skinMatrix.flattenToArrayOffset(bm,
            c * 16)
    }
};
THREE.SkinnedMesh.prototype.addBone = function (b) {
    b === void 0 && (b = new THREE.Bone(this));
    this.bones.push(b);
    return b
};
THREE.SkinnedMesh.prototype.pose = function () {
    this.update(void 0, true);
    for (var b, c = [], e = 0; e < this.bones.length; e++) b = this.bones[e], c.push(THREE.Matrix4.makeInvert(b.skinMatrix)), b.skinMatrix.flattenToArrayOffset(this.boneMatrices, e * 16);
    if (this.geometry.skinVerticesA === void 0) {
        this.geometry.skinVerticesA = [];
        this.geometry.skinVerticesB = [];
        var f;
        for (b = 0; b < this.geometry.skinIndices.length; b++) {
            var e = this.geometry.vertices[b].position, k = this.geometry.skinIndices[b].x,
                m = this.geometry.skinIndices[b].y;
            f = new THREE.Vector3(e.x,
                e.y, e.z);
            this.geometry.skinVerticesA.push(c[k].multiplyVector3(f));
            f = new THREE.Vector3(e.x, e.y, e.z);
            this.geometry.skinVerticesB.push(c[m].multiplyVector3(f));
            this.geometry.skinWeights[b].x + this.geometry.skinWeights[b].y !== 1 && (e = (1 - (this.geometry.skinWeights[b].x + this.geometry.skinWeights[b].y)) * 0.5, this.geometry.skinWeights[b].x += e, this.geometry.skinWeights[b].y += e)
        }
    }
};
THREE.Ribbon = function (b, c) {
    THREE.Object3D.call(this);
    this.geometry = b;
    this.materials = c instanceof Array ? c : [c]
};
THREE.Ribbon.prototype = new THREE.Object3D;
THREE.Ribbon.prototype.constructor = THREE.Ribbon;
THREE.LOD = function () {
    THREE.Object3D.call(this);
    this.LODs = []
};
THREE.LOD.prototype = new THREE.Object3D;
THREE.LOD.prototype.constructor = THREE.LOD;
THREE.LOD.prototype.supr = THREE.Object3D.prototype;
THREE.LOD.prototype.add = function (b, c) {
    c === void 0 && (c = 0);
    for (var c = Math.abs(c), e = 0; e < this.LODs.length; e++) if (c < this.LODs[e].visibleAtDistance) break;
    this.LODs.splice(e, 0, {visibleAtDistance: c, object3D: b});
    this.addChild(b)
};
THREE.LOD.prototype.update = function (b, c, e) {
    this.matrixAutoUpdate && (c |= this.updateMatrix());
    if (c || this.matrixWorldNeedsUpdate) b ? this.matrixWorld.multiply(b, this.matrix) : this.matrixWorld.copy(this.matrix), this.matrixWorldNeedsUpdate = false, c = true;
    if (this.LODs.length > 1) {
        b = e.matrixWorldInverse;
        b = -(b.n31 * this.position.x + b.n32 * this.position.y + b.n33 * this.position.z + b.n34);
        this.LODs[0].object3D.visible = true;
        for (var f = 1; f < this.LODs.length; f++) if (b >= this.LODs[f].visibleAtDistance) this.LODs[f - 1].object3D.visible =
            false, this.LODs[f].object3D.visible = true; else break;
        for (; f < this.LODs.length; f++) this.LODs[f].object3D.visible = false
    }
    for (b = 0; b < this.children.length; b++) this.children[b].update(this.matrixWorld, c, e)
};
THREE.Sprite = function (b) {
    THREE.Object3D.call(this);
    if (b.material !== void 0) this.material = b.material, this.map = void 0, this.blending = material.blending; else if (b.map !== void 0) this.map = b.map instanceof THREE.Texture ? b.map : THREE.ImageUtils.loadTexture(b.map), this.material = void 0, this.blending = b.blending !== void 0 ? b.blending : THREE.NormalBlending;
    this.useScreenCoordinates = b.useScreenCoordinates !== void 0 ? b.useScreenCoordinates : true;
    this.mergeWith3D = b.mergeWith3D !== void 0 ? b.mergeWith3D : !this.useScreenCoordinates;
    this.affectedByDistance = b.affectedByDistance !== void 0 ? b.affectedByDistance : !this.useScreenCoordinates;
    this.scaleByViewport = b.scaleByViewport !== void 0 ? b.scaleByViewport : !this.affectedByDistance;
    this.alignment = b.alignment instanceof THREE.Vector2 ? b.alignment : THREE.SpriteAlignment.center;
    this.rotation3d = this.rotation;
    this.rotation = 0;
    this.opacity = 1;
    this.uvOffset = new THREE.Vector2(0, 0);
    this.uvScale = new THREE.Vector2(1, 1)
};
THREE.Sprite.prototype = new THREE.Object3D;
THREE.Sprite.prototype.constructor = THREE.Sprite;
THREE.Sprite.prototype.supr = THREE.Object3D.prototype;
THREE.Sprite.prototype.updateMatrix = function () {
    this.matrix.setPosition(this.position);
    this.rotation3d.set(0, 0, this.rotation);
    this.matrix.setRotationFromEuler(this.rotation3d);
    if (this.scale.x !== 1 || this.scale.y !== 1) this.matrix.scale(this.scale), this.boundRadiusScale = Math.max(this.scale.x, this.scale.y);
    this.matrixWorldNeedsUpdate = true
};
THREE.SpriteAlignment = {};
THREE.SpriteAlignment.topLeft = new THREE.Vector2(1, -1);
THREE.SpriteAlignment.topCenter = new THREE.Vector2(0, -1);
THREE.SpriteAlignment.topRight = new THREE.Vector2(-1, -1);
THREE.SpriteAlignment.centerLeft = new THREE.Vector2(1, 0);
THREE.SpriteAlignment.center = new THREE.Vector2(0, 0);
THREE.SpriteAlignment.centerRight = new THREE.Vector2(-1, 0);
THREE.SpriteAlignment.bottomLeft = new THREE.Vector2(1, 1);
THREE.SpriteAlignment.bottomCenter = new THREE.Vector2(0, 1);
THREE.SpriteAlignment.bottomRight = new THREE.Vector2(-1, 1);
THREE.Scene = function () {
    THREE.Object3D.call(this);
    this.matrixAutoUpdate = false;
    this.collisions = this.overrideMaterial = this.fog = null;
    this.objects = [];
    this.lights = [];
    this.__objectsAdded = [];
    this.__objectsRemoved = []
};
THREE.Scene.prototype = new THREE.Object3D;
THREE.Scene.prototype.constructor = THREE.Scene;
THREE.Scene.prototype.supr = THREE.Object3D.prototype;
THREE.Scene.prototype.addChild = function (b) {
    this.supr.addChild.call(this, b);
    this.addChildRecurse(b)
};
THREE.Scene.prototype.addChildRecurse = function (b) {
    if (b instanceof THREE.Light) this.lights.indexOf(b) === -1 && this.lights.push(b); else if (!(b instanceof THREE.Camera || b instanceof THREE.Bone) && this.objects.indexOf(b) === -1) this.objects.push(b), this.__objectsAdded.push(b);
    for (var c = 0; c < b.children.length; c++) this.addChildRecurse(b.children[c])
};
THREE.Scene.prototype.removeChild = function (b) {
    this.supr.removeChild.call(this, b);
    this.removeChildRecurse(b)
};
THREE.Scene.prototype.removeChildRecurse = function (b) {
    if (b instanceof THREE.Light) {
        var c = this.lights.indexOf(b);
        c !== -1 && this.lights.splice(c, 1)
    } else b instanceof THREE.Camera || (c = this.objects.indexOf(b), c !== -1 && (this.objects.splice(c, 1), this.__objectsRemoved.push(b)));
    for (c = 0; c < b.children.length; c++) this.removeChildRecurse(b.children[c])
};
THREE.Scene.prototype.addObject = THREE.Scene.prototype.addChild;
THREE.Scene.prototype.removeObject = THREE.Scene.prototype.removeChild;
THREE.Scene.prototype.addLight = THREE.Scene.prototype.addChild;
THREE.Scene.prototype.removeLight = THREE.Scene.prototype.removeChild;
THREE.Fog = function (b, c, e) {
    this.color = new THREE.Color(b);
    this.near = c || 1;
    this.far = e || 1E3
};
THREE.FogExp2 = function (b, c) {
    this.color = new THREE.Color(b);
    this.density = c !== void 0 ? c : 2.5E-4
};
THREE.DOMRenderer = function () {
    THREE.Renderer.call(this);
    var b = null, c = new THREE.Projector, e, f, k, m;
    this.domElement = document.createElement("div");
    this.setSize = function (b, c) {
        e = b;
        f = c;
        k = e / 2;
        m = f / 2
    };
    this.render = function (e, f) {
        var o, t, u, v, x, w, B, A;
        b = c.projectScene(e, f);
        o = 0;
        for (t = b.length; o < t; o++) if (x = b[o], x instanceof THREE.RenderableParticle) {
            B = x.x * k + k;
            A = x.y * m + m;
            u = 0;
            for (v = x.material.length; u < v; u++) if (w = x.material[u], w instanceof THREE.ParticleDOMMaterial) w = w.domElement, w.style.left = B + "px", w.style.top = A + "px"
        }
    }
};
THREE.CanvasRenderer = function (b) {
    function c(b) {
        if (y != b) w.globalAlpha = y = b
    }

    function e(b) {
        if (D != b) {
            switch (b) {
                case THREE.NormalBlending:
                    w.globalCompositeOperation = "source-over";
                    break;
                case THREE.AdditiveBlending:
                    w.globalCompositeOperation = "lighter";
                    break;
                case THREE.SubtractiveBlending:
                    w.globalCompositeOperation = "darker"
            }
            D = b
        }
    }

    function f(b) {
        if (C != b) w.strokeStyle = C = b
    }

    function k(b) {
        if (L != b) w.fillStyle = L = b
    }

    var m = this, h = null, n = new THREE.Projector, b = b || {},
        o = b.canvas !== void 0 ? b.canvas : document.createElement("canvas"),
        t, u, v, x, w = o.getContext("2d"), B = new THREE.Color(0), A = 0, y = 1, D = 0, C = null, L = null, z = null,
        E = null, N = null, I, P, H, W, M = new THREE.RenderableVertex, J = new THREE.RenderableVertex, Q, O, Y, V, Z,
        K, X, S, p, ca, aa, la, ka = new THREE.Color(0), ja = new THREE.Color(0), ea = new THREE.Color(0),
        da = new THREE.Color(0), ga = new THREE.Color(0), ya = [], ma, na, za, ta, Aa, Fa, Da, U, Ha, qa,
        ra = new THREE.Rectangle, R = new THREE.Rectangle, G = new THREE.Rectangle, Ga = false, ha = new THREE.Color,
        ia = new THREE.Color, ua = new THREE.Color, oa = new THREE.Color, sa = new THREE.Vector3,
        Ca, pa, wa, fa, va, Ia, b = 16;
    Ca = document.createElement("canvas");
    Ca.width = Ca.height = 2;
    pa = Ca.getContext("2d");
    pa.fillStyle = "rgba(0,0,0,1)";
    pa.fillRect(0, 0, 2, 2);
    wa = pa.getImageData(0, 0, 2, 2);
    fa = wa.data;
    va = document.createElement("canvas");
    va.width = va.height = b;
    Ia = va.getContext("2d");
    Ia.translate(-b / 2, -b / 2);
    Ia.scale(b, b);
    b--;
    this.domElement = o;
    this.sortElements = this.sortObjects = this.autoClear = true;
    this.data = {vertices: 0, faces: 0};
    this.setSize = function (b, e) {
        t = b;
        u = e;
        v = Math.floor(t / 2);
        x = Math.floor(u / 2);
        o.width = t;
        o.height =
            u;
        ra.set(-v, -x, v, x);
        R.set(-v, -x, v, x);
        y = 1;
        D = 0;
        N = E = z = L = C = null
    };
    this.setClearColor = function (b, e) {
        B.copy(b);
        A = e;
        R.set(-v, -x, v, x)
    };
    this.setClearColorHex = function (b, e) {
        B.setHex(b);
        A = e;
        R.set(-v, -x, v, x)
    };
    this.clear = function () {
        w.setTransform(1, 0, 0, -1, v, x);
        R.isEmpty() || (R.minSelf(ra), R.inflate(2), A < 1 && w.clearRect(Math.floor(R.getX()), Math.floor(R.getY()), Math.floor(R.getWidth()), Math.floor(R.getHeight())), A > 0 && (e(THREE.NormalBlending), c(1), k("rgba(" + Math.floor(B.r * 255) + "," + Math.floor(B.g * 255) + "," + Math.floor(B.b *
            255) + "," + A + ")"), w.fillRect(Math.floor(R.getX()), Math.floor(R.getY()), Math.floor(R.getWidth()), Math.floor(R.getHeight()))), R.empty())
    };
    this.render = function (b, o) {
        function t(b) {
            var e, c, f, k = b.lights;
            ia.setRGB(0, 0, 0);
            ua.setRGB(0, 0, 0);
            oa.setRGB(0, 0, 0);
            b = 0;
            for (e = k.length; b < e; b++) c = k[b], f = c.color, c instanceof THREE.AmbientLight ? (ia.r += f.r, ia.g += f.g, ia.b += f.b) : c instanceof THREE.DirectionalLight ? (ua.r += f.r, ua.g += f.g, ua.b += f.b) : c instanceof THREE.PointLight && (oa.r += f.r, oa.g += f.g, oa.b += f.b)
        }

        function u(b, e, c,
                   f) {
            var k, h, m, p, n = b.lights, b = 0;
            for (k = n.length; b < k; b++) h = n[b], m = h.color, h instanceof THREE.DirectionalLight ? (p = c.dot(h.position), p <= 0 || (p *= h.intensity, f.r += m.r * p, f.g += m.g * p, f.b += m.b * p)) : h instanceof THREE.PointLight && (p = c.dot(sa.sub(h.position, e).normalize()), p <= 0 || (p *= h.distance == 0 ? 1 : 1 - Math.min(e.distanceTo(h.position) / h.distance, 1), p != 0 && (p *= h.intensity, f.r += m.r * p, f.g += m.g * p, f.b += m.b * p)))
        }

        function y(b, h, m) {
            c(m.opacity);
            e(m.blending);
            var p, n, o, t, u, Ba;
            if (m instanceof THREE.ParticleBasicMaterial) {
                if (m.map) t =
                    m.map.image, u = t.width >> 1, Ba = t.height >> 1, m = h.scale.x * v, o = h.scale.y * x, p = m * u, n = o * Ba, G.set(b.x - p, b.y - n, b.x + p, b.y + n), ra.instersects(G) && (w.save(), w.translate(b.x, b.y), w.rotate(-h.rotation), w.scale(m, -o), w.translate(-u, -Ba), w.drawImage(t, 0, 0), w.restore())
            } else m instanceof THREE.ParticleCanvasMaterial && (p = h.scale.x * v, n = h.scale.y * x, G.set(b.x - p, b.y - n, b.x + p, b.y + n), ra.instersects(G) && (f(m.color.getContextStyle()), k(m.color.getContextStyle()), w.save(), w.translate(b.x, b.y), w.rotate(-h.rotation), w.scale(p, n),
                m.program(w), w.restore()))
        }

        function A(b, k, h, m) {
            c(m.opacity);
            e(m.blending);
            w.beginPath();
            w.moveTo(b.positionScreen.x, b.positionScreen.y);
            w.lineTo(k.positionScreen.x, k.positionScreen.y);
            w.closePath();
            if (m instanceof THREE.LineBasicMaterial) {
                b = m.linewidth;
                if (z != b) w.lineWidth = z = b;
                b = m.linecap;
                if (E != b) w.lineCap = E = b;
                b = m.linejoin;
                if (N != b) w.lineJoin = N = b;
                f(m.color.getContextStyle());
                w.stroke();
                G.inflate(m.linewidth * 2)
            }
        }

        function D(b, f, k, h, p, n, t, v, w) {
            m.data.vertices += 3;
            m.data.faces++;
            c(v.opacity);
            e(v.blending);
            Q = b.positionScreen.x;
            O = b.positionScreen.y;
            Y = f.positionScreen.x;
            V = f.positionScreen.y;
            Z = k.positionScreen.x;
            K = k.positionScreen.y;
            C(Q, O, Y, V, Z, K);
            if (v instanceof THREE.MeshBasicMaterial) if (v.map) v.map.mapping instanceof THREE.UVMapping && (ta = t.uvs[0], Ma(Q, O, Y, V, Z, K, ta[h].u, ta[h].v, ta[p].u, ta[p].v, ta[n].u, ta[n].v, v.map)); else if (v.envMap) {
                if (v.envMap.mapping instanceof THREE.SphericalReflectionMapping) b = o.matrixWorldInverse, sa.copy(t.vertexNormalsWorld[0]), Aa = (sa.x * b.n11 + sa.y * b.n12 + sa.z * b.n13) * 0.5 + 0.5, Fa =
                    -(sa.x * b.n21 + sa.y * b.n22 + sa.z * b.n23) * 0.5 + 0.5, sa.copy(t.vertexNormalsWorld[1]), Da = (sa.x * b.n11 + sa.y * b.n12 + sa.z * b.n13) * 0.5 + 0.5, U = -(sa.x * b.n21 + sa.y * b.n22 + sa.z * b.n23) * 0.5 + 0.5, sa.copy(t.vertexNormalsWorld[2]), Ha = (sa.x * b.n11 + sa.y * b.n12 + sa.z * b.n13) * 0.5 + 0.5, qa = -(sa.x * b.n21 + sa.y * b.n22 + sa.z * b.n23) * 0.5 + 0.5, Ma(Q, O, Y, V, Z, K, Aa, Fa, Da, U, Ha, qa, v.envMap)
            } else v.wireframe ? La(v.color, v.wireframeLinewidth, v.wireframeLinecap, v.wireframeLinejoin) : Ea(v.color); else if (v instanceof THREE.MeshLambertMaterial) v.map && !v.wireframe &&
            (v.map.mapping instanceof THREE.UVMapping && (ta = t.uvs[0], Ma(Q, O, Y, V, Z, K, ta[h].u, ta[h].v, ta[p].u, ta[p].v, ta[n].u, ta[n].v, v.map)), e(THREE.SubtractiveBlending)), Ga ? !v.wireframe && v.shading == THREE.SmoothShading && t.vertexNormalsWorld.length == 3 ? (ja.r = ea.r = da.r = ia.r, ja.g = ea.g = da.g = ia.g, ja.b = ea.b = da.b = ia.b, u(w, t.v1.positionWorld, t.vertexNormalsWorld[0], ja), u(w, t.v2.positionWorld, t.vertexNormalsWorld[1], ea), u(w, t.v3.positionWorld, t.vertexNormalsWorld[2], da), ga.r = (ea.r + da.r) * 0.5, ga.g = (ea.g + da.g) * 0.5, ga.b = (ea.b +
                da.b) * 0.5, za = Wa(ja, ea, da, ga), Pa(Q, O, Y, V, Z, K, 0, 0, 1, 0, 0, 1, za)) : (ha.r = ia.r, ha.g = ia.g, ha.b = ia.b, u(w, t.centroidWorld, t.normalWorld, ha), ka.r = Math.max(0, Math.min(v.color.r * ha.r, 1)), ka.g = Math.max(0, Math.min(v.color.g * ha.g, 1)), ka.b = Math.max(0, Math.min(v.color.b * ha.b, 1)), v.wireframe ? La(ka, v.wireframeLinewidth, v.wireframeLinecap, v.wireframeLinejoin) : Ea(ka)) : v.wireframe ? La(v.color, v.wireframeLinewidth, v.wireframeLinecap, v.wireframeLinejoin) : Ea(v.color); else if (v instanceof THREE.MeshDepthMaterial) ma = o.near, na =
                o.far, ja.r = ja.g = ja.b = 1 - Ka(b.positionScreen.z, ma, na), ea.r = ea.g = ea.b = 1 - Ka(f.positionScreen.z, ma, na), da.r = da.g = da.b = 1 - Ka(k.positionScreen.z, ma, na), ga.r = (ea.r + da.r) * 0.5, ga.g = (ea.g + da.g) * 0.5, ga.b = (ea.b + da.b) * 0.5, za = Wa(ja, ea, da, ga), Pa(Q, O, Y, V, Z, K, 0, 0, 1, 0, 0, 1, za); else if (v instanceof THREE.MeshNormalMaterial) ka.r = bb(t.normalWorld.x), ka.g = bb(t.normalWorld.y), ka.b = bb(t.normalWorld.z), v.wireframe ? La(ka, v.wireframeLinewidth, v.wireframeLinecap, v.wireframeLinejoin) : Ea(ka)
        }

        function B(b, f, k, h, n, v, t, w, x) {
            m.data.vertices +=
                4;
            m.data.faces++;
            c(w.opacity);
            e(w.blending);
            if (w.map || w.envMap) D(b, f, h, 0, 1, 3, t, w, x), D(n, k, v, 1, 2, 3, t, w, x); else if (Q = b.positionScreen.x, O = b.positionScreen.y, Y = f.positionScreen.x, V = f.positionScreen.y, Z = k.positionScreen.x, K = k.positionScreen.y, X = h.positionScreen.x, S = h.positionScreen.y, p = n.positionScreen.x, ca = n.positionScreen.y, aa = v.positionScreen.x, la = v.positionScreen.y, w instanceof THREE.MeshBasicMaterial) L(Q, O, Y, V, Z, K, X, S), w.wireframe ? La(w.color, w.wireframeLinewidth, w.wireframeLinecap, w.wireframeLinejoin) :
                Ea(w.color); else if (w instanceof THREE.MeshLambertMaterial) Ga ? !w.wireframe && w.shading == THREE.SmoothShading && t.vertexNormalsWorld.length == 4 ? (ja.r = ea.r = da.r = ga.r = ia.r, ja.g = ea.g = da.g = ga.g = ia.g, ja.b = ea.b = da.b = ga.b = ia.b, u(x, t.v1.positionWorld, t.vertexNormalsWorld[0], ja), u(x, t.v2.positionWorld, t.vertexNormalsWorld[1], ea), u(x, t.v4.positionWorld, t.vertexNormalsWorld[3], da), u(x, t.v3.positionWorld, t.vertexNormalsWorld[2], ga), za = Wa(ja, ea, da, ga), C(Q, O, Y, V, X, S), Pa(Q, O, Y, V, X, S, 0, 0, 1, 0, 0, 1, za), C(p, ca, Z, K, aa, la),
                Pa(p, ca, Z, K, aa, la, 1, 0, 1, 1, 0, 1, za)) : (ha.r = ia.r, ha.g = ia.g, ha.b = ia.b, u(x, t.centroidWorld, t.normalWorld, ha), ka.r = Math.max(0, Math.min(w.color.r * ha.r, 1)), ka.g = Math.max(0, Math.min(w.color.g * ha.g, 1)), ka.b = Math.max(0, Math.min(w.color.b * ha.b, 1)), L(Q, O, Y, V, Z, K, X, S), w.wireframe ? La(ka, w.wireframeLinewidth, w.wireframeLinecap, w.wireframeLinejoin) : Ea(ka)) : (L(Q, O, Y, V, Z, K, X, S), w.wireframe ? La(w.color, w.wireframeLinewidth, w.wireframeLinecap, w.wireframeLinejoin) : Ea(w.color)); else if (w instanceof THREE.MeshNormalMaterial) ka.r =
                bb(t.normalWorld.x), ka.g = bb(t.normalWorld.y), ka.b = bb(t.normalWorld.z), L(Q, O, Y, V, Z, K, X, S), w.wireframe ? La(ka, w.wireframeLinewidth, w.wireframeLinecap, w.wireframeLinejoin) : Ea(ka); else if (w instanceof THREE.MeshDepthMaterial) ma = o.near, na = o.far, ja.r = ja.g = ja.b = 1 - Ka(b.positionScreen.z, ma, na), ea.r = ea.g = ea.b = 1 - Ka(f.positionScreen.z, ma, na), da.r = da.g = da.b = 1 - Ka(h.positionScreen.z, ma, na), ga.r = ga.g = ga.b = 1 - Ka(k.positionScreen.z, ma, na), za = Wa(ja, ea, da, ga), C(Q, O, Y, V, X, S), Pa(Q, O, Y, V, X, S, 0, 0, 1, 0, 0, 1, za), C(p, ca, Z, K, aa,
                la), Pa(p, ca, Z, K, aa, la, 1, 0, 1, 1, 0, 1, za)
        }

        function C(b, e, c, f, k, h) {
            w.beginPath();
            w.moveTo(b, e);
            w.lineTo(c, f);
            w.lineTo(k, h);
            w.lineTo(b, e);
            w.closePath()
        }

        function L(b, e, c, f, k, h, m, p) {
            w.beginPath();
            w.moveTo(b, e);
            w.lineTo(c, f);
            w.lineTo(k, h);
            w.lineTo(m, p);
            w.lineTo(b, e);
            w.closePath()
        }

        function La(b, e, c, k) {
            if (z != e) w.lineWidth = z = e;
            if (E != c) w.lineCap = E = c;
            if (N != k) w.lineJoin = N = k;
            f(b.getContextStyle());
            w.stroke();
            G.inflate(e * 2)
        }

        function Ea(b) {
            k(b.getContextStyle());
            w.fill()
        }

        function Ma(b, e, c, f, h, m, p, n, o, t, v, u, x) {
            if (x.image.width !=
                0) {
                if (x.needsUpdate == true || ya[x.id] == void 0) {
                    var Ba = x.wrapS == THREE.RepeatWrapping, J = x.wrapT == THREE.RepeatWrapping;
                    ya[x.id] = w.createPattern(x.image, Ba && J ? "repeat" : Ba && !J ? "repeat-x" : !Ba && J ? "repeat-y" : "no-repeat");
                    x.needsUpdate = false
                }
                k(ya[x.id]);
                var Ba = x.offset.x / x.repeat.x, J = x.offset.y / x.repeat.y, y = (x.image.width - 1) * x.repeat.x,
                    x = (x.image.height - 1) * x.repeat.y, p = (p + Ba) * y, n = (n + J) * x, o = (o + Ba) * y,
                    t = (t + J) * x, v = (v + Ba) * y, u = (u + J) * x;
                c -= b;
                f -= e;
                h -= b;
                m -= e;
                o -= p;
                t -= n;
                v -= p;
                u -= n;
                Ba = 1 / (o * u - v * t);
                x = (u * c - t * h) * Ba;
                t = (u * f - t *
                    m) * Ba;
                c = (o * h - v * c) * Ba;
                f = (o * m - v * f) * Ba;
                b = b - x * p - c * n;
                e = e - t * p - f * n;
                w.save();
                w.transform(x, t, c, f, b, e);
                w.fill();
                w.restore()
            }
        }

        function Pa(b, e, c, f, k, h, m, p, n, o, t, v, u) {
            var x, Ba;
            x = u.width - 1;
            Ba = u.height - 1;
            m *= x;
            p *= Ba;
            n *= x;
            o *= Ba;
            t *= x;
            v *= Ba;
            c -= b;
            f -= e;
            k -= b;
            h -= e;
            n -= m;
            o -= p;
            t -= m;
            v -= p;
            Ba = 1 / (n * v - t * o);
            x = (v * c - o * k) * Ba;
            o = (v * f - o * h) * Ba;
            c = (n * k - t * c) * Ba;
            f = (n * h - t * f) * Ba;
            b = b - x * m - c * p;
            e = e - o * m - f * p;
            w.save();
            w.transform(x, o, c, f, b, e);
            w.clip();
            w.drawImage(u, 0, 0);
            w.restore()
        }

        function Wa(b, e, c, f) {
            var k = ~~(b.r * 255), h = ~~(b.g * 255), b = ~~(b.b * 255),
                m = ~~(e.r * 255), p = ~~(e.g * 255), e = ~~(e.b * 255), n = ~~(c.r * 255), o = ~~(c.g * 255),
                c = ~~(c.b * 255), t = ~~(f.r * 255), v = ~~(f.g * 255), f = ~~(f.b * 255);
            fa[0] = k < 0 ? 0 : k > 255 ? 255 : k;
            fa[1] = h < 0 ? 0 : h > 255 ? 255 : h;
            fa[2] = b < 0 ? 0 : b > 255 ? 255 : b;
            fa[4] = m < 0 ? 0 : m > 255 ? 255 : m;
            fa[5] = p < 0 ? 0 : p > 255 ? 255 : p;
            fa[6] = e < 0 ? 0 : e > 255 ? 255 : e;
            fa[8] = n < 0 ? 0 : n > 255 ? 255 : n;
            fa[9] = o < 0 ? 0 : o > 255 ? 255 : o;
            fa[10] = c < 0 ? 0 : c > 255 ? 255 : c;
            fa[12] = t < 0 ? 0 : t > 255 ? 255 : t;
            fa[13] = v < 0 ? 0 : v > 255 ? 255 : v;
            fa[14] = f < 0 ? 0 : f > 255 ? 255 : f;
            pa.putImageData(wa, 0, 0);
            Ia.drawImage(Ca, 0, 0);
            return va
        }

        function Ka(b, e, c) {
            b = (b - e) / (c -
                e);
            return b * b * (3 - 2 * b)
        }

        function bb(b) {
            b = (b + 1) * 0.5;
            return b < 0 ? 0 : b > 1 ? 1 : b
        }

        function Ta(b, e) {
            var c = e.x - b.x, f = e.y - b.y, k = c * c + f * f;
            k != 0 && (k = 1 / Math.sqrt(k), c *= k, f *= k, e.x += c, e.y += f, b.x -= c, b.y -= f)
        }

        var eb, jb, xa, Na, Ua, cb, fb, Ja;
        this.autoClear ? this.clear() : w.setTransform(1, 0, 0, -1, v, x);
        m.data.vertices = 0;
        m.data.faces = 0;
        h = n.projectScene(b, o, this.sortElements);
        (Ga = b.lights.length > 0) && t(b);
        eb = 0;
        for (jb = h.length; eb < jb; eb++) {
            xa = h[eb];
            G.empty();
            if (xa instanceof THREE.RenderableParticle) {
                I = xa;
                I.x *= v;
                I.y *= x;
                Na = 0;
                for (Ua = xa.materials.length; Na <
                Ua;) Ja = xa.materials[Na++], Ja.opacity != 0 && y(I, xa, Ja, b)
            } else if (xa instanceof THREE.RenderableLine) {
                if (I = xa.v1, P = xa.v2, I.positionScreen.x *= v, I.positionScreen.y *= x, P.positionScreen.x *= v, P.positionScreen.y *= x, G.addPoint(I.positionScreen.x, I.positionScreen.y), G.addPoint(P.positionScreen.x, P.positionScreen.y), ra.instersects(G)) {
                    Na = 0;
                    for (Ua = xa.materials.length; Na < Ua;) Ja = xa.materials[Na++], Ja.opacity != 0 && A(I, P, xa, Ja, b)
                }
            } else if (xa instanceof THREE.RenderableFace3) {
                if (I = xa.v1, P = xa.v2, H = xa.v3, I.positionScreen.x *=
                    v, I.positionScreen.y *= x, P.positionScreen.x *= v, P.positionScreen.y *= x, H.positionScreen.x *= v, H.positionScreen.y *= x, xa.overdraw && (Ta(I.positionScreen, P.positionScreen), Ta(P.positionScreen, H.positionScreen), Ta(H.positionScreen, I.positionScreen)), G.add3Points(I.positionScreen.x, I.positionScreen.y, P.positionScreen.x, P.positionScreen.y, H.positionScreen.x, H.positionScreen.y), ra.instersects(G)) {
                    Na = 0;
                    for (Ua = xa.meshMaterials.length; Na < Ua;) if (Ja = xa.meshMaterials[Na++], Ja instanceof THREE.MeshFaceMaterial) {
                        cb =
                            0;
                        for (fb = xa.faceMaterials.length; cb < fb;) (Ja = xa.faceMaterials[cb++]) && Ja.opacity != 0 && D(I, P, H, 0, 1, 2, xa, Ja, b)
                    } else Ja.opacity != 0 && D(I, P, H, 0, 1, 2, xa, Ja, b)
                }
            } else if (xa instanceof THREE.RenderableFace4 && (I = xa.v1, P = xa.v2, H = xa.v3, W = xa.v4, I.positionScreen.x *= v, I.positionScreen.y *= x, P.positionScreen.x *= v, P.positionScreen.y *= x, H.positionScreen.x *= v, H.positionScreen.y *= x, W.positionScreen.x *= v, W.positionScreen.y *= x, M.positionScreen.copy(P.positionScreen), J.positionScreen.copy(W.positionScreen), xa.overdraw && (Ta(I.positionScreen,
                P.positionScreen), Ta(P.positionScreen, W.positionScreen), Ta(W.positionScreen, I.positionScreen), Ta(H.positionScreen, M.positionScreen), Ta(H.positionScreen, J.positionScreen)), G.addPoint(I.positionScreen.x, I.positionScreen.y), G.addPoint(P.positionScreen.x, P.positionScreen.y), G.addPoint(H.positionScreen.x, H.positionScreen.y), G.addPoint(W.positionScreen.x, W.positionScreen.y), ra.instersects(G))) {
                Na = 0;
                for (Ua = xa.meshMaterials.length; Na < Ua;) if (Ja = xa.meshMaterials[Na++], Ja instanceof THREE.MeshFaceMaterial) {
                    cb =
                        0;
                    for (fb = xa.faceMaterials.length; cb < fb;) (Ja = xa.faceMaterials[cb++]) && Ja.opacity != 0 && B(I, P, H, W, M, J, xa, Ja, b)
                } else Ja.opacity != 0 && B(I, P, H, W, M, J, xa, Ja, b)
            }
            R.addRectangle(G)
        }
        w.setTransform(1, 0, 0, 1, 0, 0)
    }
};
THREE.SVGRenderer = function () {
    function b(b, e, c) {
        var f, k, h, m;
        f = 0;
        for (k = b.lights.length; f < k; f++) h = b.lights[f], h instanceof THREE.DirectionalLight ? (m = e.normalWorld.dot(h.position) * h.intensity, m > 0 && (c.r += h.color.r * m, c.g += h.color.g * m, c.b += h.color.b * m)) : h instanceof THREE.PointLight && (W.sub(h.position, e.centroidWorld), W.normalize(), m = e.normalWorld.dot(W) * h.intensity, m > 0 && (c.r += h.color.r * m, c.g += h.color.g * m, c.b += h.color.b * m))
    }

    function c(e, c, h, n, p, t) {
        m.data.vertices += 3;
        m.data.faces++;
        Q = f(O++);
        Q.setAttribute("d",
            "M " + e.positionScreen.x + " " + e.positionScreen.y + " L " + c.positionScreen.x + " " + c.positionScreen.y + " L " + h.positionScreen.x + "," + h.positionScreen.y + "z");
        p instanceof THREE.MeshBasicMaterial ? z.copy(p.color) : p instanceof THREE.MeshLambertMaterial ? L ? (E.r = N.r, E.g = N.g, E.b = N.b, b(t, n, E), z.r = Math.max(0, Math.min(p.color.r * E.r, 1)), z.g = Math.max(0, Math.min(p.color.g * E.g, 1)), z.b = Math.max(0, Math.min(p.color.b * E.b, 1))) : z.copy(p.color) : p instanceof THREE.MeshDepthMaterial ? (H = 1 - p.__2near / (p.__farPlusNear - n.z * p.__farMinusNear),
            z.setRGB(H, H, H)) : p instanceof THREE.MeshNormalMaterial && z.setRGB(k(n.normalWorld.x), k(n.normalWorld.y), k(n.normalWorld.z));
        p.wireframe ? Q.setAttribute("style", "fill: none; stroke: " + z.getContextStyle() + "; stroke-width: " + p.wireframeLinewidth + "; stroke-opacity: " + p.opacity + "; stroke-linecap: " + p.wireframeLinecap + "; stroke-linejoin: " + p.wireframeLinejoin) : Q.setAttribute("style", "fill: " + z.getContextStyle() + "; fill-opacity: " + p.opacity);
        o.appendChild(Q)
    }

    function e(e, c, h, n, p, t, v) {
        m.data.vertices += 4;
        m.data.faces++;
        Q = f(O++);
        Q.setAttribute("d", "M " + e.positionScreen.x + " " + e.positionScreen.y + " L " + c.positionScreen.x + " " + c.positionScreen.y + " L " + h.positionScreen.x + "," + h.positionScreen.y + " L " + n.positionScreen.x + "," + n.positionScreen.y + "z");
        t instanceof THREE.MeshBasicMaterial ? z.copy(t.color) : t instanceof THREE.MeshLambertMaterial ? L ? (E.r = N.r, E.g = N.g, E.b = N.b, b(v, p, E), z.r = Math.max(0, Math.min(t.color.r * E.r, 1)), z.g = Math.max(0, Math.min(t.color.g * E.g, 1)), z.b = Math.max(0, Math.min(t.color.b * E.b, 1))) : z.copy(t.color) : t instanceof
        THREE.MeshDepthMaterial ? (H = 1 - t.__2near / (t.__farPlusNear - p.z * t.__farMinusNear), z.setRGB(H, H, H)) : t instanceof THREE.MeshNormalMaterial && z.setRGB(k(p.normalWorld.x), k(p.normalWorld.y), k(p.normalWorld.z));
        t.wireframe ? Q.setAttribute("style", "fill: none; stroke: " + z.getContextStyle() + "; stroke-width: " + t.wireframeLinewidth + "; stroke-opacity: " + t.opacity + "; stroke-linecap: " + t.wireframeLinecap + "; stroke-linejoin: " + t.wireframeLinejoin) : Q.setAttribute("style", "fill: " + z.getContextStyle() + "; fill-opacity: " +
            t.opacity);
        o.appendChild(Q)
    }

    function f(b) {
        M[b] == null && (M[b] = document.createElementNS("http://www.w3.org/2000/svg", "path"), V == 0 && M[b].setAttribute("shape-rendering", "crispEdges"));
        return M[b]
    }

    function k(b) {
        b = (b + 1) * 0.5;
        return b < 0 ? 0 : b > 1 ? 1 : b
    }

    var m = this, h = null, n = new THREE.Projector, o = document.createElementNS("http://www.w3.org/2000/svg", "svg"),
        t, u, v, x, w, B, A, y, D = new THREE.Rectangle, C = new THREE.Rectangle, L = false,
        z = new THREE.Color(16777215), E = new THREE.Color(16777215), N = new THREE.Color(0), I = new THREE.Color(0),
        P = new THREE.Color(0), H, W = new THREE.Vector3, M = [], J = [], Q, O, Y, V = 1;
    this.domElement = o;
    this.sortElements = this.sortObjects = this.autoClear = true;
    this.data = {vertices: 0, faces: 0};
    this.setQuality = function (b) {
        switch (b) {
            case "high":
                V = 1;
                break;
            case "low":
                V = 0
        }
    };
    this.setSize = function (b, e) {
        t = b;
        u = e;
        v = t / 2;
        x = u / 2;
        o.setAttribute("viewBox", -v + " " + -x + " " + t + " " + u);
        o.setAttribute("width", t);
        o.setAttribute("height", u);
        D.set(-v, -x, v, x)
    };
    this.clear = function () {
        for (; o.childNodes.length > 0;) o.removeChild(o.childNodes[0])
    };
    this.render =
        function (b, f) {
            var k, t, p, u, z, H, E, M;
            this.autoClear && this.clear();
            m.data.vertices = 0;
            m.data.faces = 0;
            h = n.projectScene(b, f, this.sortElements);
            Y = O = 0;
            if (L = b.lights.length > 0) {
                E = b.lights;
                N.setRGB(0, 0, 0);
                I.setRGB(0, 0, 0);
                P.setRGB(0, 0, 0);
                k = 0;
                for (t = E.length; k < t; k++) p = E[k], u = p.color, p instanceof THREE.AmbientLight ? (N.r += u.r, N.g += u.g, N.b += u.b) : p instanceof THREE.DirectionalLight ? (I.r += u.r, I.g += u.g, I.b += u.b) : p instanceof THREE.PointLight && (P.r += u.r, P.g += u.g, P.b += u.b)
            }
            k = 0;
            for (t = h.length; k < t; k++) if (E = h[k], C.empty(),
            E instanceof THREE.RenderableParticle) {
                w = E;
                w.x *= v;
                w.y *= -x;
                p = 0;
                for (u = E.materials.length; p < u;) p++
            } else if (E instanceof THREE.RenderableLine) {
                if (w = E.v1, B = E.v2, w.positionScreen.x *= v, w.positionScreen.y *= -x, B.positionScreen.x *= v, B.positionScreen.y *= -x, C.addPoint(w.positionScreen.x, w.positionScreen.y), C.addPoint(B.positionScreen.x, B.positionScreen.y), D.instersects(C)) {
                    p = 0;
                    for (u = E.materials.length; p < u;) if ((M = E.materials[p++]) && M.opacity != 0) {
                        z = w;
                        H = B;
                        var W = Y++;
                        J[W] == null && (J[W] = document.createElementNS("http://www.w3.org/2000/svg",
                            "line"), V == 0 && J[W].setAttribute("shape-rendering", "crispEdges"));
                        Q = J[W];
                        Q.setAttribute("x1", z.positionScreen.x);
                        Q.setAttribute("y1", z.positionScreen.y);
                        Q.setAttribute("x2", H.positionScreen.x);
                        Q.setAttribute("y2", H.positionScreen.y);
                        M instanceof THREE.LineBasicMaterial && (Q.setAttribute("style", "fill: none; stroke: " + M.color.getContextStyle() + "; stroke-width: " + M.linewidth + "; stroke-opacity: " + M.opacity + "; stroke-linecap: " + M.linecap + "; stroke-linejoin: " + M.linejoin), o.appendChild(Q))
                    }
                }
            } else if (E instanceof
                THREE.RenderableFace3) {
                if (w = E.v1, B = E.v2, A = E.v3, w.positionScreen.x *= v, w.positionScreen.y *= -x, B.positionScreen.x *= v, B.positionScreen.y *= -x, A.positionScreen.x *= v, A.positionScreen.y *= -x, C.addPoint(w.positionScreen.x, w.positionScreen.y), C.addPoint(B.positionScreen.x, B.positionScreen.y), C.addPoint(A.positionScreen.x, A.positionScreen.y), D.instersects(C)) {
                    p = 0;
                    for (u = E.meshMaterials.length; p < u;) if (M = E.meshMaterials[p++], M instanceof THREE.MeshFaceMaterial) {
                        z = 0;
                        for (H = E.faceMaterials.length; z < H;) (M = E.faceMaterials[z++]) &&
                        M.opacity != 0 && c(w, B, A, E, M, b)
                    } else M && M.opacity != 0 && c(w, B, A, E, M, b)
                }
            } else if (E instanceof THREE.RenderableFace4 && (w = E.v1, B = E.v2, A = E.v3, y = E.v4, w.positionScreen.x *= v, w.positionScreen.y *= -x, B.positionScreen.x *= v, B.positionScreen.y *= -x, A.positionScreen.x *= v, A.positionScreen.y *= -x, y.positionScreen.x *= v, y.positionScreen.y *= -x, C.addPoint(w.positionScreen.x, w.positionScreen.y), C.addPoint(B.positionScreen.x, B.positionScreen.y), C.addPoint(A.positionScreen.x, A.positionScreen.y), C.addPoint(y.positionScreen.x, y.positionScreen.y),
                D.instersects(C))) {
                p = 0;
                for (u = E.meshMaterials.length; p < u;) if (M = E.meshMaterials[p++], M instanceof THREE.MeshFaceMaterial) {
                    z = 0;
                    for (H = E.faceMaterials.length; z < H;) (M = E.faceMaterials[z++]) && M.opacity != 0 && e(w, B, A, y, E, M, b)
                } else M && M.opacity != 0 && e(w, B, A, y, E, M, b)
            }
        }
};
THREE.ShaderChunk = {
    fog_pars_fragment: "#ifdef USE_FOG\nuniform vec3 fogColor;\n#ifdef FOG_EXP2\nuniform float fogDensity;\n#else\nuniform float fogNear;\nuniform float fogFar;\n#endif\n#endif",
    fog_fragment: "#ifdef USE_FOG\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n#ifdef FOG_EXP2\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n#else\nfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n#endif\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n#endif",
    envmap_pars_fragment: "#ifdef USE_ENVMAP\nvarying vec3 vReflect;\nuniform float reflectivity;\nuniform samplerCube envMap;\nuniform int combine;\n#endif",
    envmap_fragment: "#ifdef USE_ENVMAP\nvec4 cubeColor = textureCube( envMap, vec3( -vReflect.x, vReflect.yz ) );\nif ( combine == 1 ) {\ngl_FragColor = vec4( mix( gl_FragColor.xyz, cubeColor.xyz, reflectivity ), opacity );\n} else {\ngl_FragColor = gl_FragColor * cubeColor;\n}\n#endif",
    envmap_pars_vertex: "#ifdef USE_ENVMAP\nvarying vec3 vReflect;\nuniform float refractionRatio;\nuniform bool useRefract;\n#endif",
    envmap_vertex: "#ifdef USE_ENVMAP\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\nvec3 nWorld = mat3( objectMatrix[ 0 ].xyz, objectMatrix[ 1 ].xyz, objectMatrix[ 2 ].xyz ) * normal;\nif ( useRefract ) {\nvReflect = refract( normalize( mPosition.xyz - cameraPosition ), normalize( nWorld.xyz ), refractionRatio );\n} else {\nvReflect = reflect( normalize( mPosition.xyz - cameraPosition ), normalize( nWorld.xyz ) );\n}\n#endif",
    map_particle_pars_fragment: "#ifdef USE_MAP\nuniform sampler2D map;\n#endif",
    map_particle_fragment: "#ifdef USE_MAP\ngl_FragColor = gl_FragColor * texture2D( map, gl_PointCoord );\n#endif",
    map_pars_vertex: "#ifdef USE_MAP\nvarying vec2 vUv;\nuniform vec4 offsetRepeat;\n#endif",
    map_pars_fragment: "#ifdef USE_MAP\nvarying vec2 vUv;\nuniform sampler2D map;\n#endif",
    map_vertex: "#ifdef USE_MAP\nvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif",
    map_fragment: "#ifdef USE_MAP\ngl_FragColor = gl_FragColor * texture2D( map, vUv );\n#endif",
    lightmap_pars_fragment: "#ifdef USE_LIGHTMAP\nvarying vec2 vUv2;\nuniform sampler2D lightMap;\n#endif",
    lightmap_pars_vertex: "#ifdef USE_LIGHTMAP\nvarying vec2 vUv2;\n#endif",
    lightmap_fragment: "#ifdef USE_LIGHTMAP\ngl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );\n#endif",
    lightmap_vertex: "#ifdef USE_LIGHTMAP\nvUv2 = uv2;\n#endif",
    lights_pars_vertex: "uniform bool enableLighting;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#ifdef PHONG\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#endif",
    lights_vertex: "if ( !enableLighting ) {\nvLightWeighting = vec3( 1.0 );\n} else {\nvLightWeighting = ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nfloat directionalLightWeighting = max( dot( transformedNormal, normalize( lDirection.xyz ) ), 0.0 );\nvLightWeighting += directionalLightColor[ i ] * directionalLightWeighting;\n}\n#endif\n#if MAX_POINT_LIGHTS > 0\nfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\nfloat pointLightWeighting = max( dot( transformedNormal, lVector ), 0.0 );\nvLightWeighting += pointLightColor[ i ] * pointLightWeighting * lDistance;\n#ifdef PHONG\nvPointLight[ i ] = vec4( lVector, lDistance );\n#endif\n}\n#endif\n}",
    lights_pars_fragment: "#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;",
    lights_fragment: "vec3 normal = normalize( vNormal );\nvec3 viewPosition = normalize( vViewPosition );\nvec4 mColor = vec4( diffuse, opacity );\nvec4 mSpecular = vec4( specular, opacity );\n#if MAX_POINT_LIGHTS > 0\nvec4 pointDiffuse  = vec4( vec3( 0.0 ), 1.0 );\nvec4 pointSpecular = vec4( vec3( 0.0 ), 1.0 );\nfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec3 pointVector = normalize( vPointLight[ i ].xyz );\nvec3 pointHalfVector = normalize( vPointLight[ i ].xyz + viewPosition );\nfloat pointDistance = vPointLight[ i ].w;\nfloat pointDotNormalHalf = dot( normal, pointHalfVector );\nfloat pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );\nfloat pointSpecularWeight = 0.0;\nif ( pointDotNormalHalf >= 0.0 )\npointSpecularWeight = pow( pointDotNormalHalf, shininess );\npointDiffuse  += mColor * pointDiffuseWeight * pointDistance;\npointSpecular += mSpecular * pointSpecularWeight * pointDistance;\n}\n#endif\n#if MAX_DIR_LIGHTS > 0\nvec4 dirDiffuse  = vec4( vec3( 0.0 ), 1.0 );\nvec4 dirSpecular = vec4( vec3( 0.0 ), 1.0 );\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nvec3 dirHalfVector = normalize( lDirection.xyz + viewPosition );\nfloat dirDotNormalHalf = dot( normal, dirHalfVector );\nfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\nfloat dirSpecularWeight = 0.0;\nif ( dirDotNormalHalf >= 0.0 )\ndirSpecularWeight = pow( dirDotNormalHalf, shininess );\ndirDiffuse  += mColor * dirDiffuseWeight;\ndirSpecular += mSpecular * dirSpecularWeight;\n}\n#endif\nvec4 totalLight = vec4( ambient, opacity );\n#if MAX_DIR_LIGHTS > 0\ntotalLight += dirDiffuse + dirSpecular;\n#endif\n#if MAX_POINT_LIGHTS > 0\ntotalLight += pointDiffuse + pointSpecular;\n#endif\ngl_FragColor = gl_FragColor * totalLight;",
    color_pars_fragment: "#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif",
    color_fragment: "#ifdef USE_COLOR\ngl_FragColor = gl_FragColor * vec4( vColor, opacity );\n#endif",
    color_pars_vertex: "#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif",
    color_vertex: "#ifdef USE_COLOR\nvColor = color;\n#endif",
    skinning_pars_vertex: "#ifdef USE_SKINNING\nuniform mat4 boneGlobalMatrices[ MAX_BONES ];\n#endif",
    skinning_vertex: "#ifdef USE_SKINNING\ngl_Position  = ( boneGlobalMatrices[ int( skinIndex.x ) ] * skinVertexA ) * skinWeight.x;\ngl_Position += ( boneGlobalMatrices[ int( skinIndex.y ) ] * skinVertexB ) * skinWeight.y;\ngl_Position  = projectionMatrix * viewMatrix * objectMatrix * gl_Position;\n#endif",
    morphtarget_pars_vertex: "#ifdef USE_MORPHTARGETS\nuniform float morphTargetInfluences[ 8 ];\n#endif",
    morphtarget_vertex: "#ifdef USE_MORPHTARGETS\nvec3 morphed = vec3( 0.0, 0.0, 0.0 );\nmorphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\nmorphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\nmorphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\nmorphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\nmorphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\nmorphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\nmorphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\nmorphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\nmorphed += position;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( morphed, 1.0 );\n#endif",
    default_vertex: "#ifndef USE_MORPHTARGETS\n#ifndef USE_SKINNING\ngl_Position = projectionMatrix * mvPosition;\n#endif\n#endif",
    shadowmap_pars_fragment: "#ifdef USE_SHADOWMAP\nuniform sampler2D shadowMap[ MAX_SHADOWS ];\nuniform float shadowDarkness;\nuniform float shadowBias;\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nfloat unpackDepth( const in vec4 rgba_depth ) {\nconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\nfloat depth = dot( rgba_depth, bit_shift );\nreturn depth;\n}\n#endif",
    shadowmap_fragment: "#ifdef USE_SHADOWMAP\n#ifdef SHADOWMAP_SOFT\nconst float xPixelOffset = 1.0 / SHADOWMAP_WIDTH;\nconst float yPixelOffset = 1.0 / SHADOWMAP_HEIGHT;\n#endif\nvec4 shadowColor = vec4( 1.0 );\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\nif ( shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0 ) {\n#ifdef SHADOWMAP_SOFT\nfloat shadow = 0.0;\nfor ( float y = -1.25; y <= 1.25; y += 1.25 )\nfor ( float x = -1.25; x <= 1.25; x += 1.25 ) {\nvec4 rgbaDepth = texture2D( shadowMap[ i ], vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy );\nfloat fDepth = unpackDepth( rgbaDepth );\nif ( fDepth < ( shadowCoord.z + shadowBias ) )\nshadow += 1.0;\n}\nshadow /= 9.0;\nshadowColor = shadowColor * vec4( vec3( ( 1.0 - shadowDarkness * shadow ) ), 1.0 );\n#else\nvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\nfloat fDepth = unpackDepth( rgbaDepth );\nif ( fDepth < ( shadowCoord.z + shadowBias ) )\nshadowColor = shadowColor * vec4( vec3( shadowDarkness ), 1.0 );\n#endif\n}\n}\ngl_FragColor = gl_FragColor * shadowColor;\n#endif",
    shadowmap_pars_vertex: "#ifdef USE_SHADOWMAP\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nuniform mat4 shadowMatrix[ MAX_SHADOWS ];\n#endif",
    shadowmap_vertex: "#ifdef USE_SHADOWMAP\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvShadowCoord[ i ] = shadowMatrix[ i ] * objectMatrix * vec4( position, 1.0 );\n}\n#endif",
    alphatest_fragment: "#ifdef ALPHATEST\nif ( gl_FragColor.a < ALPHATEST ) discard;\n#endif"
};
THREE.UniformsUtils = {
    merge: function (b) {
        var c, e, f, k = {};
        for (c = 0; c < b.length; c++) for (e in f = this.clone(b[c]), f) k[e] = f[e];
        return k
    }, clone: function (b) {
        var c, e, f, k = {};
        for (c in b) for (e in k[c] = {}, b[c]) f = b[c][e], k[c][e] = f instanceof THREE.Color || f instanceof THREE.Vector2 || f instanceof THREE.Vector3 || f instanceof THREE.Vector4 || f instanceof THREE.Matrix4 || f instanceof THREE.Texture ? f.clone() : f instanceof Array ? f.slice() : f;
        return k
    }
};
THREE.UniformsLib = {
    common: {
        diffuse: {type: "c", value: new THREE.Color(15658734)},
        opacity: {type: "f", value: 1},
        map: {type: "t", value: 0, texture: null},
        offsetRepeat: {type: "v4", value: new THREE.Vector4(0, 0, 1, 1)},
        lightMap: {type: "t", value: 2, texture: null},
        envMap: {type: "t", value: 1, texture: null},
        useRefract: {type: "i", value: 0},
        reflectivity: {type: "f", value: 1},
        refractionRatio: {type: "f", value: 0.98},
        combine: {type: "i", value: 0},
        morphTargetInfluences: {type: "f", value: 0}
    },
    fog: {
        fogDensity: {type: "f", value: 2.5E-4}, fogNear: {
            type: "f",
            value: 1
        }, fogFar: {type: "f", value: 2E3}, fogColor: {type: "c", value: new THREE.Color(16777215)}
    },
    lights: {
        enableLighting: {type: "i", value: 1},
        ambientLightColor: {type: "fv", value: []},
        directionalLightDirection: {type: "fv", value: []},
        directionalLightColor: {type: "fv", value: []},
        pointLightColor: {type: "fv", value: []},
        pointLightPosition: {type: "fv", value: []},
        pointLightDistance: {type: "fv1", value: []}
    },
    particle: {
        psColor: {type: "c", value: new THREE.Color(15658734)},
        opacity: {type: "f", value: 1},
        size: {type: "f", value: 1},
        scale: {
            type: "f",
            value: 1
        },
        map: {type: "t", value: 0, texture: null},
        fogDensity: {type: "f", value: 2.5E-4},
        fogNear: {type: "f", value: 1},
        fogFar: {type: "f", value: 2E3},
        fogColor: {type: "c", value: new THREE.Color(16777215)}
    },
    shadowmap: {
        shadowMap: {type: "tv", value: 3, texture: []},
        shadowMatrix: {type: "m4v", value: []},
        shadowBias: {type: "f", value: 0.0039},
        shadowDarkness: {type: "f", value: 0.2}
    }
};
THREE.ShaderLib = {
    lensFlareVertexTexture: {
        vertexShader: "uniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform int renderType;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 UV;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nvUV = UV;\nvec2 pos = position;\nif( renderType == 2 ) {\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.5 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.1, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.1, 0.5 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.5 ) );\nvVisibility = (       visibility.r / 9.0 ) *\n( 1.0 - visibility.g / 9.0 ) *\n(       visibility.b / 9.0 ) *\n( 1.0 - visibility.a / 9.0 );\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
        fragmentShader: "#ifdef GL_ES\nprecision highp float;\n#endif\nuniform sampler2D map;\nuniform float opacity;\nuniform int renderType;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nvec4 color = texture2D( map, vUV );\ncolor.a *= opacity * vVisibility;\ngl_FragColor = color;\n}\n}"
    },
    lensFlare: {
        vertexShader: "uniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform int renderType;\nattribute vec2 position;\nattribute vec2 UV;\nvarying vec2 vUV;\nvoid main() {\nvUV = UV;\nvec2 pos = position;\nif( renderType == 2 ) {\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
        fragmentShader: "#ifdef GL_ES\nprecision highp float;\n#endif\nuniform sampler2D map;\nuniform sampler2D occlusionMap;\nuniform float opacity;\nuniform int renderType;\nvarying vec2 vUV;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nfloat visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a +\ntexture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a +\ntexture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a +\ntexture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\nvisibility = ( 1.0 - visibility / 4.0 );\nvec4 color = texture2D( map, vUV );\ncolor.a *= opacity * visibility;\ngl_FragColor = color;\n}\n}"
    },
    sprite: {
        vertexShader: "uniform int useScreenCoordinates;\nuniform int affectedByDistance;\nuniform vec3 screenPosition;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 alignment;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uvOffset + uv * uvScale;\nvec2 alignedPosition = position + alignment;\nvec2 rotatedPosition;\nrotatedPosition.x = ( cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y ) * scale.x;\nrotatedPosition.y = ( sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y ) * scale.y;\nvec4 finalPosition;\nif( useScreenCoordinates != 0 ) {\nfinalPosition = vec4( screenPosition.xy + rotatedPosition, screenPosition.z, 1.0 );\n} else {\nfinalPosition = projectionMatrix * modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\nfinalPosition.xy += rotatedPosition * ( affectedByDistance == 1 ? 1.0 : finalPosition.z );\n}\ngl_Position = finalPosition;\n}",
        fragmentShader: "#ifdef GL_ES\nprecision highp float;\n#endif\nuniform sampler2D map;\nuniform float opacity;\nvarying vec2 vUV;\nvoid main() {\nvec4 color = texture2D( map, vUV );\ncolor.a *= opacity;\ngl_FragColor = color;\n}"
    },
    shadowPost: {
        vertexShader: "uniform \tmat4 \tprojectionMatrix;\nattribute \tvec3 \tposition;\nvoid main() {\ngl_Position = projectionMatrix * vec4( position, 1.0 );\n}",
        fragmentShader: "#ifdef GL_ES\nprecision highp float;\n#endif\nuniform \tfloat \tdarkness;\nvoid main() {\ngl_FragColor = vec4( 0, 0, 0, darkness );\n}"
    },
    shadowVolumeDynamic: {
        uniforms: {directionalLightDirection: {type: "fv", value: []}},
        vertexShader: "uniform \tvec3 \tdirectionalLightDirection;\nvoid main() {\nvec4 pos      = objectMatrix * vec4( position, 1.0 );\nvec3 norm     = mat3( objectMatrix[ 0 ].xyz, objectMatrix[ 1 ].xyz, objectMatrix[ 2 ].xyz ) * normal;\nvec4 extruded = vec4( directionalLightDirection * 5000.0 * step( 0.0, dot( directionalLightDirection, norm ) ), 0.0 );\ngl_Position   = projectionMatrix * viewMatrix * ( pos + extruded );\n}",
        fragmentShader: "void main() {\ngl_FragColor = vec4( 1.0 );\n}"
    },
    depth: {
        uniforms: {mNear: {type: "f", value: 1}, mFar: {type: "f", value: 2E3}, opacity: {type: "f", value: 1}},
        fragmentShader: "uniform float mNear;\nuniform float mFar;\nuniform float opacity;\nvoid main() {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat color = 1.0 - smoothstep( mNear, mFar, depth );\ngl_FragColor = vec4( vec3( color ), opacity );\n}",
        vertexShader: "void main() {\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}"
    },
    normal: {
        uniforms: {opacity: {type: "f", value: 1}},
        fragmentShader: "uniform float opacity;\nvarying vec3 vNormal;\nvoid main() {\ngl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );\n}",
        vertexShader: "varying vec3 vNormal;\nvoid main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\nvNormal = normalize( normalMatrix * normal );\ngl_Position = projectionMatrix * mvPosition;\n}"
    },
    basic: {
        uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.common, THREE.UniformsLib.fog, THREE.UniformsLib.shadowmap]),
        fragmentShader: ["uniform vec3 diffuse;\nuniform float opacity;", THREE.ShaderChunk.color_pars_fragment, THREE.ShaderChunk.map_pars_fragment, THREE.ShaderChunk.lightmap_pars_fragment, THREE.ShaderChunk.envmap_pars_fragment, THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.shadowmap_pars_fragment, "void main() {\ngl_FragColor = vec4( diffuse, opacity );", THREE.ShaderChunk.map_fragment, THREE.ShaderChunk.alphatest_fragment, THREE.ShaderChunk.lightmap_fragment, THREE.ShaderChunk.color_fragment, THREE.ShaderChunk.envmap_fragment,
            THREE.ShaderChunk.shadowmap_fragment, THREE.ShaderChunk.fog_fragment, "}"].join("\n"),
        vertexShader: [THREE.ShaderChunk.map_pars_vertex, THREE.ShaderChunk.lightmap_pars_vertex, THREE.ShaderChunk.envmap_pars_vertex, THREE.ShaderChunk.color_pars_vertex, THREE.ShaderChunk.skinning_pars_vertex, THREE.ShaderChunk.morphtarget_pars_vertex, THREE.ShaderChunk.shadowmap_pars_vertex, "void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", THREE.ShaderChunk.map_vertex, THREE.ShaderChunk.lightmap_vertex,
            THREE.ShaderChunk.envmap_vertex, THREE.ShaderChunk.color_vertex, THREE.ShaderChunk.skinning_vertex, THREE.ShaderChunk.morphtarget_vertex, THREE.ShaderChunk.default_vertex, THREE.ShaderChunk.shadowmap_vertex, "}"].join("\n")
    },
    lambert: {
        uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.common, THREE.UniformsLib.fog, THREE.UniformsLib.lights, THREE.UniformsLib.shadowmap]),
        fragmentShader: ["uniform vec3 diffuse;\nuniform float opacity;\nvarying vec3 vLightWeighting;", THREE.ShaderChunk.color_pars_fragment, THREE.ShaderChunk.map_pars_fragment,
            THREE.ShaderChunk.lightmap_pars_fragment, THREE.ShaderChunk.envmap_pars_fragment, THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.shadowmap_pars_fragment, "void main() {\ngl_FragColor = vec4( diffuse, opacity );", THREE.ShaderChunk.map_fragment, THREE.ShaderChunk.alphatest_fragment, "gl_FragColor = gl_FragColor * vec4( vLightWeighting, 1.0 );", THREE.ShaderChunk.lightmap_fragment, THREE.ShaderChunk.color_fragment, THREE.ShaderChunk.envmap_fragment, THREE.ShaderChunk.shadowmap_fragment, THREE.ShaderChunk.fog_fragment,
            "}"].join("\n"),
        vertexShader: ["varying vec3 vLightWeighting;", THREE.ShaderChunk.map_pars_vertex, THREE.ShaderChunk.lightmap_pars_vertex, THREE.ShaderChunk.envmap_pars_vertex, THREE.ShaderChunk.lights_pars_vertex, THREE.ShaderChunk.color_pars_vertex, THREE.ShaderChunk.skinning_pars_vertex, THREE.ShaderChunk.morphtarget_pars_vertex, THREE.ShaderChunk.shadowmap_pars_vertex, "void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", THREE.ShaderChunk.map_vertex, THREE.ShaderChunk.lightmap_vertex,
            THREE.ShaderChunk.envmap_vertex, THREE.ShaderChunk.color_vertex, "vec3 transformedNormal = normalize( normalMatrix * normal );", THREE.ShaderChunk.lights_vertex, THREE.ShaderChunk.skinning_vertex, THREE.ShaderChunk.morphtarget_vertex, THREE.ShaderChunk.default_vertex, THREE.ShaderChunk.shadowmap_vertex, "}"].join("\n")
    },
    phong: {
        uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.common, THREE.UniformsLib.fog, THREE.UniformsLib.lights, THREE.UniformsLib.shadowmap, {
            ambient: {type: "c", value: new THREE.Color(328965)},
            specular: {type: "c", value: new THREE.Color(1118481)}, shininess: {type: "f", value: 30}
        }]),
        fragmentShader: ["uniform vec3 diffuse;\nuniform float opacity;\nuniform vec3 ambient;\nuniform vec3 specular;\nuniform float shininess;\nvarying vec3 vLightWeighting;", THREE.ShaderChunk.color_pars_fragment, THREE.ShaderChunk.map_pars_fragment, THREE.ShaderChunk.lightmap_pars_fragment, THREE.ShaderChunk.envmap_pars_fragment, THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.lights_pars_fragment, THREE.ShaderChunk.shadowmap_pars_fragment,
            "void main() {\ngl_FragColor = vec4( vLightWeighting, 1.0 );", THREE.ShaderChunk.map_fragment, THREE.ShaderChunk.alphatest_fragment, THREE.ShaderChunk.lights_fragment, THREE.ShaderChunk.lightmap_fragment, THREE.ShaderChunk.color_fragment, THREE.ShaderChunk.envmap_fragment, THREE.ShaderChunk.shadowmap_fragment, THREE.ShaderChunk.fog_fragment, "}"].join("\n"),
        vertexShader: ["#define PHONG\nvarying vec3 vLightWeighting;\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;", THREE.ShaderChunk.map_pars_vertex, THREE.ShaderChunk.lightmap_pars_vertex,
            THREE.ShaderChunk.envmap_pars_vertex, THREE.ShaderChunk.lights_pars_vertex, THREE.ShaderChunk.color_pars_vertex, THREE.ShaderChunk.skinning_pars_vertex, THREE.ShaderChunk.morphtarget_pars_vertex, THREE.ShaderChunk.shadowmap_pars_vertex, "void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", THREE.ShaderChunk.map_vertex, THREE.ShaderChunk.lightmap_vertex, THREE.ShaderChunk.envmap_vertex, THREE.ShaderChunk.color_vertex, "#ifndef USE_ENVMAP\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\n#endif\nvViewPosition = -mvPosition.xyz;\nvec3 transformedNormal = normalize( normalMatrix * normal );\nvNormal = transformedNormal;",
            THREE.ShaderChunk.lights_vertex, THREE.ShaderChunk.skinning_vertex, THREE.ShaderChunk.morphtarget_vertex, THREE.ShaderChunk.default_vertex, THREE.ShaderChunk.shadowmap_vertex, "}"].join("\n")
    },
    particle_basic: {
        uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.particle, THREE.UniformsLib.shadowmap]),
        fragmentShader: ["uniform vec3 psColor;\nuniform float opacity;", THREE.ShaderChunk.color_pars_fragment, THREE.ShaderChunk.map_particle_pars_fragment, THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.shadowmap_pars_fragment,
            "void main() {\ngl_FragColor = vec4( psColor, opacity );", THREE.ShaderChunk.map_particle_fragment, THREE.ShaderChunk.alphatest_fragment, THREE.ShaderChunk.color_fragment, THREE.ShaderChunk.shadowmap_fragment, THREE.ShaderChunk.fog_fragment, "}"].join("\n"),
        vertexShader: ["uniform float size;\nuniform float scale;", THREE.ShaderChunk.color_pars_vertex, THREE.ShaderChunk.shadowmap_pars_vertex, "void main() {", THREE.ShaderChunk.color_vertex, "vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n#ifdef USE_SIZEATTENUATION\ngl_PointSize = size * ( scale / length( mvPosition.xyz ) );\n#else\ngl_PointSize = size;\n#endif\ngl_Position = projectionMatrix * mvPosition;",
            THREE.ShaderChunk.shadowmap_vertex, "}"].join("\n")
    },
    depthRGBA: {
        uniforms: {},
        fragmentShader: "vec4 pack_depth( const in float depth ) {\nconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\nconst vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\nvec4 res = fract( depth * bit_shift );\nres -= res.xxyz * bit_mask;\nreturn res;\n}\nvoid main() {\ngl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\n}",
        vertexShader: [THREE.ShaderChunk.morphtarget_pars_vertex,
            "void main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", THREE.ShaderChunk.morphtarget_vertex, THREE.ShaderChunk.default_vertex, "}"].join("\n")
    }
};
THREE.WebGLRenderer = function (b) {
    var c, e, f, k, m, h;

    function n(b, e, c) {
        var f, k, h, m = b.vertices, n = m.length, t = b.colors, o = t.length, v = b.__vertexArray, w = b.__colorArray,
            u = b.__sortArray, x = b.__dirtyVertices, J = b.__dirtyColors, y = b.__webglCustomAttributes, z, A;
        if (y) for (z in y) y[z].offset = 0;
        if (c.sortParticles) {
            U.multiplySelf(c.matrixWorld);
            for (f = 0; f < n; f++) k = m[f].position, ra.copy(k), U.multiplyVector3(ra), u[f] = [ra.z, f];
            u.sort(function (b, e) {
                return e[0] - b[0]
            });
            for (f = 0; f < n; f++) k = m[u[f][1]].position, h = f * 3, v[h] = k.x, v[h + 1] =
                k.y, v[h + 2] = k.z;
            for (f = 0; f < o; f++) h = f * 3, color = t[u[f][1]], w[h] = color.r, w[h + 1] = color.g, w[h + 2] = color.b;
            if (y) for (z in y) {
                f = y[z];
                t = f.value.length;
                for (h = 0; h < t; h++) {
                    index = u[h][1];
                    o = f.offset;
                    if (f.size === 1) {
                        if (f.boundTo === void 0 || f.boundTo === "vertices") f.array[o] = f.value[index]
                    } else {
                        if (f.boundTo === void 0 || f.boundTo === "vertices") A = f.value[index];
                        f.size === 2 ? (f.array[o] = A.x, f.array[o + 1] = A.y) : f.size === 3 ? f.type === "c" ? (f.array[o] = A.r, f.array[o + 1] = A.g, f.array[o + 2] = A.b) : (f.array[o] = A.x, f.array[o + 1] = A.y, f.array[o + 2] =
                            A.z) : (f.array[o] = A.x, f.array[o + 1] = A.y, f.array[o + 2] = A.z, f.array[o + 3] = A.w)
                    }
                    f.offset += f.size
                }
            }
        } else {
            if (x) for (f = 0; f < n; f++) k = m[f].position, h = f * 3, v[h] = k.x, v[h + 1] = k.y, v[h + 2] = k.z;
            if (J) for (f = 0; f < o; f++) color = t[f], h = f * 3, w[h] = color.r, w[h + 1] = color.g, w[h + 2] = color.b;
            if (y) for (z in y) if (f = y[z], f.__original.needsUpdate) {
                t = f.value.length;
                for (h = 0; h < t; h++) {
                    o = f.offset;
                    if (f.size === 1) {
                        if (f.boundTo === void 0 || f.boundTo === "vertices") f.array[o] = f.value[h]
                    } else {
                        if (f.boundTo === void 0 || f.boundTo === "vertices") A = f.value[h];
                        f.size ===
                        2 ? (f.array[o] = A.x, f.array[o + 1] = A.y) : f.size === 3 ? f.type === "c" ? (f.array[o] = A.r, f.array[o + 1] = A.g, f.array[o + 2] = A.b) : (f.array[o] = A.x, f.array[o + 1] = A.y, f.array[o + 2] = A.z) : (f.array[o] = A.x, f.array[o + 1] = A.y, f.array[o + 2] = A.z, f.array[o + 3] = A.w)
                    }
                    f.offset += f.size
                }
            }
        }
        if (x || c.sortParticles) p.bindBuffer(p.ARRAY_BUFFER, b.__webglVertexBuffer), p.bufferData(p.ARRAY_BUFFER, v, e);
        if (J || c.sortParticles) p.bindBuffer(p.ARRAY_BUFFER, b.__webglColorBuffer), p.bufferData(p.ARRAY_BUFFER, w, e);
        if (y) for (z in y) if (f = y[z], f.__original.needsUpdate ||
        c.sortParticles) p.bindBuffer(p.ARRAY_BUFFER, f.buffer), p.bufferData(p.ARRAY_BUFFER, f.array, e)
    }

    function o(b, e, c, f, h) {
        f.program || S.initMaterial(f, e, c, h);
        if (f.morphTargets && !h.__webglMorphTargetInfluences) {
            h.__webglMorphTargetInfluences = new Float32Array(S.maxMorphTargets);
            for (var k = 0, m = S.maxMorphTargets; k < m; k++) h.__webglMorphTargetInfluences[k] = 0
        }
        var k = f.program, m = k.uniforms, n = f.uniforms;
        k != aa && (p.useProgram(k), aa = k);
        p.uniformMatrix4fv(m.projectionMatrix, false, Ha);
        if (c && (f instanceof THREE.MeshBasicMaterial ||
            f instanceof THREE.MeshLambertMaterial || f instanceof THREE.MeshPhongMaterial || f instanceof THREE.LineBasicMaterial || f instanceof THREE.ParticleBasicMaterial || f.fog)) if (n.fogColor.value = c.color, c instanceof THREE.Fog) n.fogNear.value = c.near, n.fogFar.value = c.far; else if (c instanceof THREE.FogExp2) n.fogDensity.value = c.density;
        if (f instanceof THREE.MeshPhongMaterial || f instanceof THREE.MeshLambertMaterial || f.lights) {
            var o, t, v, w = 0, u = 0, x = 0, y, J, A, z = R, D = z.directional.colors, B = z.directional.positions,
                C = z.point.colors,
                H = z.point.positions, ra = z.point.distances, E = 0, I = 0, c = t = 0;
            for (o = e.length; c < o; c++) if (t = e[c], v = t.color, y = t.position, J = t.intensity, A = t.distance, t instanceof THREE.AmbientLight) w += v.r, u += v.g, x += v.b; else if (t instanceof THREE.DirectionalLight) A = E * 3, D[A] = v.r * J, D[A + 1] = v.g * J, D[A + 2] = v.b * J, B[A] = y.x, B[A + 1] = y.y, B[A + 2] = y.z, E += 1; else if (t instanceof THREE.SpotLight) A = E * 3, D[A] = v.r * J, D[A + 1] = v.g * J, D[A + 2] = v.b * J, v = 1 / y.length(), B[A] = y.x * v, B[A + 1] = y.y * v, B[A + 2] = y.z * v, E += 1; else if (t instanceof THREE.PointLight) t = I * 3, C[t] = v.r *
                J, C[t + 1] = v.g * J, C[t + 2] = v.b * J, H[t] = y.x, H[t + 1] = y.y, H[t + 2] = y.z, ra[I] = A, I += 1;
            for (c = E * 3; c < D.length; c++) D[c] = 0;
            for (c = I * 3; c < C.length; c++) C[c] = 0;
            z.point.length = I;
            z.directional.length = E;
            z.ambient[0] = w;
            z.ambient[1] = u;
            z.ambient[2] = x;
            e = R;
            n.enableLighting.value = e.directional.length + e.point.length;
            n.ambientLightColor.value = e.ambient;
            n.directionalLightColor.value = e.directional.colors;
            n.directionalLightDirection.value = e.directional.positions;
            n.pointLightColor.value = e.point.colors;
            n.pointLightPosition.value = e.point.positions;
            n.pointLightDistance.value = e.point.distances
        }
        if (f instanceof THREE.MeshBasicMaterial || f instanceof THREE.MeshLambertMaterial || f instanceof THREE.MeshPhongMaterial) n.diffuse.value = f.color, n.opacity.value = f.opacity, (n.map.texture = f.map) && n.offsetRepeat.value.set(f.map.offset.x, f.map.offset.y, f.map.repeat.x, f.map.repeat.y), n.lightMap.texture = f.lightMap, n.envMap.texture = f.envMap, n.reflectivity.value = f.reflectivity, n.refractionRatio.value = f.refractionRatio, n.combine.value = f.combine, n.useRefract.value =
            f.envMap && f.envMap.mapping instanceof THREE.CubeRefractionMapping;
        if (f instanceof THREE.LineBasicMaterial) n.diffuse.value = f.color, n.opacity.value = f.opacity; else if (f instanceof THREE.ParticleBasicMaterial) n.psColor.value = f.color, n.opacity.value = f.opacity, n.size.value = f.size, n.scale.value = G.height / 2, n.map.texture = f.map; else if (f instanceof THREE.MeshPhongMaterial) n.ambient.value = f.ambient, n.specular.value = f.specular, n.shininess.value = f.shininess; else if (f instanceof THREE.MeshDepthMaterial) n.mNear.value =
            b.near, n.mFar.value = b.far, n.opacity.value = f.opacity; else if (f instanceof THREE.MeshNormalMaterial) n.opacity.value = f.opacity;
        if (h.receiveShadow && !f._shadowPass && n.shadowMatrix) {
            for (e = 0; e < sa.length; e++) n.shadowMatrix.value[e] = sa[e], n.shadowMap.texture[e] = S.shadowMap[e];
            n.shadowDarkness.value = S.shadowMapDarkness;
            n.shadowBias.value = S.shadowMapBias
        }
        for (var L in n) if (o = k.uniforms[L]) if (c = n[L], w = c.type, e = c.value, w == "i") p.uniform1i(o, e); else if (w == "f") p.uniform1f(o, e); else if (w == "v2") p.uniform2f(o, e.x, e.y);
        else if (w == "v3") p.uniform3f(o, e.x, e.y, e.z); else if (w == "v4") p.uniform4f(o, e.x, e.y, e.z, e.w); else if (w == "c") p.uniform3f(o, e.r, e.g, e.b); else if (w == "fv1") p.uniform1fv(o, e); else if (w == "fv") p.uniform3fv(o, e); else if (w == "v3v") {
            if (!c._array) c._array = new Float32Array(3 * e.length);
            w = 0;
            for (u = e.length; w < u; w++) x = w * 3, c._array[x] = e[w].x, c._array[x + 1] = e[w].y, c._array[x + 2] = e[w].z;
            p.uniform3fv(o, c._array)
        } else if (w == "m4") {
            if (!c._array) c._array = new Float32Array(16);
            e.flattenToArray(c._array);
            p.uniformMatrix4fv(o, false,
                c._array)
        } else if (w == "m4v") {
            if (!c._array) c._array = new Float32Array(16 * e.length);
            w = 0;
            for (u = e.length; w < u; w++) e[w].flattenToArrayOffset(c._array, w * 16);
            p.uniformMatrix4fv(o, false, c._array)
        } else if (w == "t") {
            if (p.uniform1i(o, e), o = c.texture) if (o.image instanceof Array && o.image.length == 6) {
                if (c = o, c.image.length == 6) if (c.needsUpdate) {
                    if (!c.image.__webglTextureCube) c.image.__webglTextureCube = p.createTexture();
                    p.activeTexture(p.TEXTURE0 + e);
                    p.bindTexture(p.TEXTURE_CUBE_MAP, c.image.__webglTextureCube);
                    for (e = 0; e <
                    6; e++) p.texImage2D(p.TEXTURE_CUBE_MAP_POSITIVE_X + e, 0, p.RGBA, p.RGBA, p.UNSIGNED_BYTE, c.image[e]);
                    Q(p.TEXTURE_CUBE_MAP, c, c.image[0]);
                    c.needsUpdate = false
                } else p.activeTexture(p.TEXTURE0 + e), p.bindTexture(p.TEXTURE_CUBE_MAP, c.image.__webglTextureCube)
            } else o instanceof THREE.WebGLRenderTargetCube ? (c = o, p.activeTexture(p.TEXTURE0 + e), p.bindTexture(p.TEXTURE_CUBE_MAP, c.__webglTexture)) : O(o, e)
        } else if (w == "tv") {
            if (!c._array) {
                c._array = [];
                w = 0;
                for (u = c.texture.length; w < u; w++) c._array[w] = e + w
            }
            p.uniform1iv(o, c._array);
            w = 0;
            for (u = c.texture.length; w < u; w++) (o = c.texture[w]) && O(o, c._array[w])
        }
        p.uniformMatrix4fv(m.modelViewMatrix, false, h._modelViewMatrixArray);
        m.normalMatrix && p.uniformMatrix3fv(m.normalMatrix, false, h._normalMatrixArray);
        (f instanceof THREE.MeshShaderMaterial || f instanceof THREE.MeshPhongMaterial || f.envMap) && m.cameraPosition !== null && p.uniform3f(m.cameraPosition, b.position.x, b.position.y, b.position.z);
        (f instanceof THREE.MeshShaderMaterial || f.envMap || f.skinning || h.receiveShadow) && m.objectMatrix !== null &&
        p.uniformMatrix4fv(m.objectMatrix, false, h._objectMatrixArray);
        (f instanceof THREE.MeshPhongMaterial || f instanceof THREE.MeshLambertMaterial || f instanceof THREE.MeshShaderMaterial || f.skinning) && m.viewMatrix !== null && p.uniformMatrix4fv(m.viewMatrix, false, qa);
        f.skinning && (p.uniformMatrix4fv(m.cameraInverseMatrix, false, qa), p.uniformMatrix4fv(m.boneGlobalMatrices, false, h.boneMatrices));
        return k
    }

    function t(b, e, c, f, h, k) {
        if (f.opacity != 0) {
            var m, b = o(b, e, c, f, k).attributes;
            if (!f.morphTargets && b.position >= 0) p.bindBuffer(p.ARRAY_BUFFER,
                h.__webglVertexBuffer), p.vertexAttribPointer(b.position, 3, p.FLOAT, false, 0, 0); else if (k.morphTargetBase) {
                e = f.program.attributes;
                k.morphTargetBase !== -1 ? (p.bindBuffer(p.ARRAY_BUFFER, h.__webglMorphTargetsBuffers[k.morphTargetBase]), p.vertexAttribPointer(e.position, 3, p.FLOAT, false, 0, 0)) : e.position >= 0 && (p.bindBuffer(p.ARRAY_BUFFER, h.__webglVertexBuffer), p.vertexAttribPointer(e.position, 3, p.FLOAT, false, 0, 0));
                if (k.morphTargetForcedOrder.length) for (var c = 0, n = k.morphTargetForcedOrder, t = k.morphTargetInfluences; c <
                f.numSupportedMorphTargets && c < n.length;) p.bindBuffer(p.ARRAY_BUFFER, h.__webglMorphTargetsBuffers[n[c]]), p.vertexAttribPointer(e["morphTarget" + c], 3, p.FLOAT, false, 0, 0), k.__webglMorphTargetInfluences[c] = t[n[c]], c++; else {
                    var n = [], v = -1, w = 0, t = k.morphTargetInfluences, u, x = t.length, c = 0;
                    for (k.morphTargetBase !== -1 && (n[k.morphTargetBase] = true); c < f.numSupportedMorphTargets;) {
                        for (u = 0; u < x; u++) !n[u] && t[u] > v && (w = u, v = t[w]);
                        p.bindBuffer(p.ARRAY_BUFFER, h.__webglMorphTargetsBuffers[w]);
                        p.vertexAttribPointer(e["morphTarget" +
                        c], 3, p.FLOAT, false, 0, 0);
                        k.__webglMorphTargetInfluences[c] = v;
                        n[w] = 1;
                        v = -1;
                        c++
                    }
                }
                f.program.uniforms.morphTargetInfluences !== null && p.uniform1fv(f.program.uniforms.morphTargetInfluences, k.__webglMorphTargetInfluences)
            }
            if (h.__webglCustomAttributes) for (m in h.__webglCustomAttributes) b[m] >= 0 && (e = h.__webglCustomAttributes[m], p.bindBuffer(p.ARRAY_BUFFER, e.buffer), p.vertexAttribPointer(b[m], e.size, p.FLOAT, false, 0, 0));
            b.color >= 0 && (p.bindBuffer(p.ARRAY_BUFFER, h.__webglColorBuffer), p.vertexAttribPointer(b.color,
                3, p.FLOAT, false, 0, 0));
            b.normal >= 0 && (p.bindBuffer(p.ARRAY_BUFFER, h.__webglNormalBuffer), p.vertexAttribPointer(b.normal, 3, p.FLOAT, false, 0, 0));
            b.tangent >= 0 && (p.bindBuffer(p.ARRAY_BUFFER, h.__webglTangentBuffer), p.vertexAttribPointer(b.tangent, 4, p.FLOAT, false, 0, 0));
            b.uv >= 0 && (h.__webglUVBuffer ? (p.bindBuffer(p.ARRAY_BUFFER, h.__webglUVBuffer), p.vertexAttribPointer(b.uv, 2, p.FLOAT, false, 0, 0), p.enableVertexAttribArray(b.uv)) : p.disableVertexAttribArray(b.uv));
            b.uv2 >= 0 && (h.__webglUV2Buffer ? (p.bindBuffer(p.ARRAY_BUFFER,
                h.__webglUV2Buffer), p.vertexAttribPointer(b.uv2, 2, p.FLOAT, false, 0, 0), p.enableVertexAttribArray(b.uv2)) : p.disableVertexAttribArray(b.uv2));
            f.skinning && b.skinVertexA >= 0 && b.skinVertexB >= 0 && b.skinIndex >= 0 && b.skinWeight >= 0 && (p.bindBuffer(p.ARRAY_BUFFER, h.__webglSkinVertexABuffer), p.vertexAttribPointer(b.skinVertexA, 4, p.FLOAT, false, 0, 0), p.bindBuffer(p.ARRAY_BUFFER, h.__webglSkinVertexBBuffer), p.vertexAttribPointer(b.skinVertexB, 4, p.FLOAT, false, 0, 0), p.bindBuffer(p.ARRAY_BUFFER, h.__webglSkinIndicesBuffer),
                p.vertexAttribPointer(b.skinIndex, 4, p.FLOAT, false, 0, 0), p.bindBuffer(p.ARRAY_BUFFER, h.__webglSkinWeightsBuffer), p.vertexAttribPointer(b.skinWeight, 4, p.FLOAT, false, 0, 0));
            k instanceof THREE.Mesh ? (f.wireframe ? (p.lineWidth(f.wireframeLinewidth), p.bindBuffer(p.ELEMENT_ARRAY_BUFFER, h.__webglLineBuffer), p.drawElements(p.LINES, h.__webglLineCount, p.UNSIGNED_SHORT, 0)) : (p.bindBuffer(p.ELEMENT_ARRAY_BUFFER, h.__webglFaceBuffer), p.drawElements(p.TRIANGLES, h.__webglFaceCount, p.UNSIGNED_SHORT, 0)), S.data.vertices +=
                h.__webglFaceCount, S.data.faces += h.__webglFaceCount / 3, S.data.drawCalls++) : k instanceof THREE.Line ? (k = k.type == THREE.LineStrip ? p.LINE_STRIP : p.LINES, p.lineWidth(f.linewidth), p.drawArrays(k, 0, h.__webglLineCount), S.data.drawCalls++) : k instanceof THREE.ParticleSystem ? (p.drawArrays(p.POINTS, 0, h.__webglParticleCount), S.data.drawCalls++) : k instanceof THREE.Ribbon && (p.drawArrays(p.TRIANGLE_STRIP, 0, h.__webglVertexCount), S.data.drawCalls++)
        }
    }

    function u(b, e, c) {
        if (!b.__webglVertexBuffer) b.__webglVertexBuffer = p.createBuffer();
        if (!b.__webglNormalBuffer) b.__webglNormalBuffer = p.createBuffer();
        b.hasPos && (p.bindBuffer(p.ARRAY_BUFFER, b.__webglVertexBuffer), p.bufferData(p.ARRAY_BUFFER, b.positionArray, p.DYNAMIC_DRAW), p.enableVertexAttribArray(e.attributes.position), p.vertexAttribPointer(e.attributes.position, 3, p.FLOAT, false, 0, 0));
        if (b.hasNormal) {
            p.bindBuffer(p.ARRAY_BUFFER, b.__webglNormalBuffer);
            if (c == THREE.FlatShading) {
                var f, h, k, m, n, o, t, v, w, u, x = b.count * 3;
                for (u = 0; u < x; u += 9) c = b.normalArray, f = c[u], h = c[u + 1], k = c[u + 2], m = c[u + 3], o = c[u +
                4], v = c[u + 5], n = c[u + 6], t = c[u + 7], w = c[u + 8], f = (f + m + n) / 3, h = (h + o + t) / 3, k = (k + v + w) / 3, c[u] = f, c[u + 1] = h, c[u + 2] = k, c[u + 3] = f, c[u + 4] = h, c[u + 5] = k, c[u + 6] = f, c[u + 7] = h, c[u + 8] = k
            }
            p.bufferData(p.ARRAY_BUFFER, b.normalArray, p.DYNAMIC_DRAW);
            p.enableVertexAttribArray(e.attributes.normal);
            p.vertexAttribPointer(e.attributes.normal, 3, p.FLOAT, false, 0, 0)
        }
        p.drawArrays(p.TRIANGLES, 0, b.count);
        b.count = 0
    }

    function v(b) {
        if (ja != b.doubleSided) b.doubleSided ? p.disable(p.CULL_FACE) : p.enable(p.CULL_FACE), ja = b.doubleSided;
        if (ea != b.flipSided) b.flipSided ?
            p.frontFace(p.CW) : p.frontFace(p.CCW), ea = b.flipSided
    }

    function x(b) {
        ga != b && (b ? p.enable(p.DEPTH_TEST) : p.disable(p.DEPTH_TEST), ga = b)
    }

    function w(b, e, c) {
        ya != b && (b ? p.enable(p.POLYGON_OFFSET_FILL) : p.disable(p.POLYGON_OFFSET_FILL), ya = b);
        if (b && (ma != e || na != c)) p.polygonOffset(e, c), ma = e, na = c
    }

    function B(b) {
        Da[0].set(b.n41 - b.n11, b.n42 - b.n12, b.n43 - b.n13, b.n44 - b.n14);
        Da[1].set(b.n41 + b.n11, b.n42 + b.n12, b.n43 + b.n13, b.n44 + b.n14);
        Da[2].set(b.n41 + b.n21, b.n42 + b.n22, b.n43 + b.n23, b.n44 + b.n24);
        Da[3].set(b.n41 - b.n21, b.n42 - b.n22,
            b.n43 - b.n23, b.n44 - b.n24);
        Da[4].set(b.n41 - b.n31, b.n42 - b.n32, b.n43 - b.n33, b.n44 - b.n34);
        Da[5].set(b.n41 + b.n31, b.n42 + b.n32, b.n43 + b.n33, b.n44 + b.n34);
        for (var e, b = 0; b < 6; b++) e = Da[b], e.divideScalar(Math.sqrt(e.x * e.x + e.y * e.y + e.z * e.z))
    }

    function A(b) {
        for (var e = b.matrixWorld, c = -b.geometry.boundingSphere.radius * Math.max(b.scale.x, Math.max(b.scale.y, b.scale.z)), f = 0; f < 6; f++) if (b = Da[f].x * e.n14 + Da[f].y * e.n24 + Da[f].z * e.n34 + Da[f].w, b <= c) return false;
        return true
    }

    function y(b, e) {
        b.list[b.count] = e;
        b.count += 1
    }

    function D(b) {
        var e,
            c, f = b.object, h = b.opaque, k = b.transparent;
        k.count = 0;
        b = h.count = 0;
        for (e = f.materials.length; b < e; b++) c = f.materials[b], c.transparent ? y(k, c) : y(h, c)
    }

    function C(b) {
        var e, c, f, h, k = b.object, m = b.buffer, n = b.opaque, p = b.transparent;
        p.count = 0;
        b = n.count = 0;
        for (f = k.materials.length; b < f; b++) if (e = k.materials[b], e instanceof THREE.MeshFaceMaterial) {
            e = 0;
            for (c = m.materials.length; e < c; e++) (h = m.materials[e]) && (h.transparent ? y(p, h) : y(n, h))
        } else (h = e) && (h.transparent ? y(p, h) : y(n, h))
    }

    function L(b, e) {
        return e.z - b.z
    }

    function z(b, e) {
        var c,
            f, h, k = 0, m, n, w, y, z = b.lights;
        oa || (oa = new THREE.Camera(S.shadowCameraFov, e.aspect, S.shadowCameraNear, S.shadowCameraFar));
        c = 0;
        for (f = z.length; c < f; c++) if (h = z[c], h instanceof THREE.SpotLight && h.castShadow) {
            S.shadowMap[k] || (S.shadowMap[k] = new THREE.WebGLRenderTarget(S.shadowMapWidth, S.shadowMapHeight, {
                minFilter: THREE.LinearFilter,
                magFilter: THREE.LinearFilter,
                format: THREE.RGBAFormat
            }));
            sa[k] || (sa[k] = new THREE.Matrix4);
            m = S.shadowMap[k];
            n = sa[k];
            oa.position.copy(h.position);
            oa.target.position.copy(h.target.position);
            oa.update(void 0, true);
            b.update(void 0, false, oa);
            n.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);
            n.multiplySelf(oa.projectionMatrix);
            n.multiplySelf(oa.matrixWorldInverse);
            oa.matrixWorldInverse.flattenToArray(qa);
            oa.projectionMatrix.flattenToArray(Ha);
            U.multiply(oa.projectionMatrix, oa.matrixWorldInverse);
            B(U);
            S.initWebGLObjects(b);
            Y(m);
            p.clearColor(1, 1, 1, 1);
            S.clear();
            p.clearColor(ia.r, ia.g, ia.b, ua);
            n = b.__webglObjects.length;
            h = b.__webglObjectsImmediate.length;
            for (m = 0; m < n; m++) w = b.__webglObjects[m],
                y = w.object, y.visible && y.castShadow ? !(y instanceof THREE.Mesh) || !y.frustumCulled || A(y) ? (y.matrixWorld.flattenToArray(y._objectMatrixArray), N(y, oa, false), w.render = true) : w.render = false : w.render = false;
            x(true);
            J(THREE.NormalBlending);
            for (m = 0; m < n; m++) if (w = b.__webglObjects[m], w.render) y = w.object, buffer = w.buffer, v(y), w = y.customDepthMaterial ? y.customDepthMaterial : y.geometry.morphTargets.length ? wa : pa, t(oa, z, null, w, buffer, y);
            for (m = 0; m < h; m++) w = b.__webglObjectsImmediate[m], y = w.object, y.visible && y.castShadow &&
            (y.matrixAutoUpdate && y.matrixWorld.flattenToArray(y._objectMatrixArray), N(y, oa, false), v(y), program = o(oa, z, null, pa, y), y.render(function (b) {
                u(b, program, pa.shading)
            }));
            k++
        }
    }

    function E(b, h) {
        var n, o, t;
        n = c;
        var v = e, w = Fa / Aa, u, x = [], y = Aa * 0.5, A = Fa * 0.5, z = true;
        p.useProgram(f);
        aa = f;
        ga = da = -1;
        Ia || (p.enableVertexAttribArray(c.position), p.enableVertexAttribArray(c.uv), Ia = true);
        p.disable(p.CULL_FACE);
        p.enable(p.BLEND);
        p.depthMask(true);
        p.bindBuffer(p.ARRAY_BUFFER, k);
        p.vertexAttribPointer(n.position, 2, p.FLOAT, false,
            16, 0);
        p.vertexAttribPointer(n.uv, 2, p.FLOAT, false, 16, 8);
        p.bindBuffer(p.ELEMENT_ARRAY_BUFFER, m);
        p.uniformMatrix4fv(v.projectionMatrix, false, Ha);
        p.activeTexture(p.TEXTURE0);
        p.uniform1i(v.map, 0);
        n = 0;
        for (o = b.__webglSprites.length; n < o; n++) t = b.__webglSprites[n], t.useScreenCoordinates ? t.z = -t.position.z : (t._modelViewMatrix.multiplyToArray(h.matrixWorldInverse, t.matrixWorld, t._modelViewMatrixArray), t.z = -t._modelViewMatrix.n34);
        b.__webglSprites.sort(L);
        n = 0;
        for (o = b.__webglSprites.length; n < o; n++) t = b.__webglSprites[n],
        t.material === void 0 && t.map && t.map.image && t.map.image.width && (t.useScreenCoordinates ? (p.uniform1i(v.useScreenCoordinates, 1), p.uniform3f(v.screenPosition, (t.position.x - y) / y, (A - t.position.y) / A, Math.max(0, Math.min(1, t.position.z)))) : (p.uniform1i(v.useScreenCoordinates, 0), p.uniform1i(v.affectedByDistance, t.affectedByDistance ? 1 : 0), p.uniformMatrix4fv(v.modelViewMatrix, false, t._modelViewMatrixArray)), u = t.map.image.width / (t.scaleByViewport ? Fa : 1), x[0] = u * w * t.scale.x, x[1] = u * t.scale.y, p.uniform2f(v.uvScale, t.uvScale.x,
            t.uvScale.y), p.uniform2f(v.uvOffset, t.uvOffset.x, t.uvOffset.y), p.uniform2f(v.alignment, t.alignment.x, t.alignment.y), p.uniform1f(v.opacity, t.opacity), p.uniform1f(v.rotation, t.rotation), p.uniform2fv(v.scale, x), t.mergeWith3D && !z ? (p.enable(p.DEPTH_TEST), z = true) : !t.mergeWith3D && z && (p.disable(p.DEPTH_TEST), z = false), J(t.blending), O(t.map, 0), p.drawElements(p.TRIANGLES, 6, p.UNSIGNED_SHORT, 0));
        p.enable(p.CULL_FACE);
        p.enable(p.DEPTH_TEST);
        p.depthMask(ka)
    }

    function N(b, e, c) {
        b._modelViewMatrix.multiplyToArray(e.matrixWorldInverse,
            b.matrixWorld, b._modelViewMatrixArray);
        c && THREE.Matrix4.makeInvert3x3(b._modelViewMatrix).transposeIntoArray(b._normalMatrixArray)
    }

    function I(b) {
        var e, c, f, h;
        h = b.__materials;
        b = 0;
        for (c = h.length; b < c; b++) if (f = h[b], f.attributes) for (e in f.attributes) if (f.attributes[e].needsUpdate) return true;
        return false
    }

    function P(b) {
        var e, c, f, h;
        h = b.__materials;
        b = 0;
        for (c = h.length; b < c; b++) if (f = h[b], f.attributes) for (e in f.attributes) f.attributes[e].needsUpdate = false
    }

    function H(b, e) {
        var c;
        for (c = b.length - 1; c >= 0; c--) b[c].object ==
        e && b.splice(c, 1)
    }

    function W(b) {
        var e, c, f, h, k, m, n, p, t = {}, o = b.morphTargets !== void 0 ? b.morphTargets.length : 0;
        b.geometryGroups = {};
        f = 0;
        for (h = b.faces.length; f < h; f++) {
            k = b.faces[f];
            m = k.materials;
            var v = m, w = [];
            e = 0;
            for (c = v.length; e < c; e++) v[e] == void 0 ? w.push("undefined") : w.push(v[e].id);
            n = w.join("_");
            t[n] == void 0 && (t[n] = {hash: n, counter: 0});
            p = t[n].hash + "_" + t[n].counter;
            b.geometryGroups[p] == void 0 && (b.geometryGroups[p] = {
                faces: [],
                materials: m,
                vertices: 0,
                numMorphTargets: o
            });
            k = k instanceof THREE.Face3 ? 3 : 4;
            b.geometryGroups[p].vertices +
            k > 65535 && (t[n].counter += 1, p = t[n].hash + "_" + t[n].counter, b.geometryGroups[p] == void 0 && (b.geometryGroups[p] = {
                faces: [],
                materials: m,
                vertices: 0,
                numMorphTargets: o
            }));
            b.geometryGroups[p].faces.push(f);
            b.geometryGroups[p].vertices += k
        }
        b.geometryGroupsList = [];
        for (var u in b.geometryGroups) b.geometryGroupsList.push(b.geometryGroups[u])
    }

    function M(b, e, c) {
        b.push({buffer: e, object: c, opaque: {list: [], count: 0}, transparent: {list: [], count: 0}})
    }

    function J(b) {
        if (b != da) {
            switch (b) {
                case THREE.AdditiveBlending:
                    p.blendEquation(p.FUNC_ADD);
                    p.blendFunc(p.SRC_ALPHA, p.ONE);
                    break;
                case THREE.SubtractiveBlending:
                    p.blendEquation(p.FUNC_ADD);
                    p.blendFunc(p.ZERO, p.ONE_MINUS_SRC_COLOR);
                    break;
                case THREE.MultiplyBlending:
                    p.blendEquation(p.FUNC_ADD);
                    p.blendFunc(p.ZERO, p.SRC_COLOR);
                    break;
                default:
                    p.blendEquationSeparate(p.FUNC_ADD, p.FUNC_ADD), p.blendFuncSeparate(p.SRC_ALPHA, p.ONE_MINUS_SRC_ALPHA, p.ONE, p.ONE_MINUS_SRC_ALPHA)
            }
            da = b
        }
    }

    function Q(b, e, c) {
        (c.width & c.width - 1) == 0 && (c.height & c.height - 1) == 0 ? (p.texParameteri(b, p.TEXTURE_WRAP_S, X(e.wrapS)), p.texParameteri(b,
            p.TEXTURE_WRAP_T, X(e.wrapT)), p.texParameteri(b, p.TEXTURE_MAG_FILTER, X(e.magFilter)), p.texParameteri(b, p.TEXTURE_MIN_FILTER, X(e.minFilter)), p.generateMipmap(b)) : (p.texParameteri(b, p.TEXTURE_WRAP_S, p.CLAMP_TO_EDGE), p.texParameteri(b, p.TEXTURE_WRAP_T, p.CLAMP_TO_EDGE), p.texParameteri(b, p.TEXTURE_MAG_FILTER, K(e.magFilter)), p.texParameteri(b, p.TEXTURE_MIN_FILTER, K(e.minFilter)))
    }

    function O(b, e) {
        if (b.needsUpdate) {
            if (!b.__webglInit) b.__webglInit = true, b.__webglTexture = p.createTexture();
            p.activeTexture(p.TEXTURE0 +
                e);
            p.bindTexture(p.TEXTURE_2D, b.__webglTexture);
            b instanceof THREE.DataTexture ? p.texImage2D(p.TEXTURE_2D, 0, X(b.format), b.image.width, b.image.height, 0, X(b.format), p.UNSIGNED_BYTE, b.image.data) : p.texImage2D(p.TEXTURE_2D, 0, p.RGBA, p.RGBA, p.UNSIGNED_BYTE, b.image);
            Q(p.TEXTURE_2D, b, b.image);
            b.needsUpdate = false
        } else p.activeTexture(p.TEXTURE0 + e), p.bindTexture(p.TEXTURE_2D, b.__webglTexture)
    }

    function Y(b) {
        var e = b instanceof THREE.WebGLRenderTargetCube;
        if (b && !b.__webglFramebuffer) {
            if (b.depthBuffer === void 0) b.depthBuffer =
                true;
            if (b.stencilBuffer === void 0) b.stencilBuffer = true;
            b.__webglRenderbuffer = p.createRenderbuffer();
            b.__webglTexture = p.createTexture();
            if (e) {
                p.bindTexture(p.TEXTURE_CUBE_MAP, b.__webglTexture);
                Q(p.TEXTURE_CUBE_MAP, b, b);
                b.__webglFramebuffer = [];
                for (var c = 0; c < 6; c++) b.__webglFramebuffer[c] = p.createFramebuffer(), p.texImage2D(p.TEXTURE_CUBE_MAP_POSITIVE_X + c, 0, X(b.format), b.width, b.height, 0, X(b.format), X(b.type), null)
            } else b.__webglFramebuffer = p.createFramebuffer(), p.bindTexture(p.TEXTURE_2D, b.__webglTexture),
                Q(p.TEXTURE_2D, b, b), p.texImage2D(p.TEXTURE_2D, 0, X(b.format), b.width, b.height, 0, X(b.format), X(b.type), null);
            p.bindRenderbuffer(p.RENDERBUFFER, b.__webglRenderbuffer);
            if (e) for (c = 0; c < 6; ++c) p.bindFramebuffer(p.FRAMEBUFFER, b.__webglFramebuffer[c]), p.framebufferTexture2D(p.FRAMEBUFFER, p.COLOR_ATTACHMENT0, p.TEXTURE_CUBE_MAP_POSITIVE_X + c, b.__webglTexture, 0); else p.bindFramebuffer(p.FRAMEBUFFER, b.__webglFramebuffer), p.framebufferTexture2D(p.FRAMEBUFFER, p.COLOR_ATTACHMENT0, p.TEXTURE_2D, b.__webglTexture, 0);
            b.depthBuffer &&
            !b.stencilBuffer ? (p.renderbufferStorage(p.RENDERBUFFER, p.DEPTH_COMPONENT16, b.width, b.height), p.framebufferRenderbuffer(p.FRAMEBUFFER, p.DEPTH_ATTACHMENT, p.RENDERBUFFER, b.__webglRenderbuffer)) : b.depthBuffer && b.stencilBuffer ? (p.renderbufferStorage(p.RENDERBUFFER, p.DEPTH_STENCIL, b.width, b.height), p.framebufferRenderbuffer(p.FRAMEBUFFER, p.DEPTH_STENCIL_ATTACHMENT, p.RENDERBUFFER, b.__webglRenderbuffer)) : p.renderbufferStorage(p.RENDERBUFFER, p.RGBA4, b.width, b.height);
            e ? p.bindTexture(p.TEXTURE_CUBE_MAP, null) :
                p.bindTexture(p.TEXTURE_2D, null);
            p.bindRenderbuffer(p.RENDERBUFFER, null);
            p.bindFramebuffer(p.FRAMEBUFFER, null)
        }
        var f, h;
        b ? (e = e ? b.__webglFramebuffer[b.activeCubeFace] : b.__webglFramebuffer, c = b.width, b = b.height, h = f = 0) : (e = null, c = Aa, b = Fa, f = za, h = ta);
        e != la && (p.bindFramebuffer(p.FRAMEBUFFER, e), p.viewport(f, h, c, b), la = e)
    }

    function V(b) {
        b instanceof THREE.WebGLRenderTargetCube ? (p.bindTexture(p.TEXTURE_CUBE_MAP, b.__webglTexture), p.generateMipmap(p.TEXTURE_CUBE_MAP), p.bindTexture(p.TEXTURE_CUBE_MAP, null)) : (p.bindTexture(p.TEXTURE_2D,
            b.__webglTexture), p.generateMipmap(p.TEXTURE_2D), p.bindTexture(p.TEXTURE_2D, null))
    }

    function Z(b, e) {
        var c;
        b == "fragment" ? c = p.createShader(p.FRAGMENT_SHADER) : b == "vertex" && (c = p.createShader(p.VERTEX_SHADER));
        p.shaderSource(c, e);
        p.compileShader(c);
        return !p.getShaderParameter(c, p.COMPILE_STATUS) ? (console.error(p.getShaderInfoLog(c)), console.error(e), null) : c
    }

    function K(b) {
        switch (b) {
            case THREE.NearestFilter:
            case THREE.NearestMipMapNearestFilter:
            case THREE.NearestMipMapLinearFilter:
                return p.NEAREST;
            default:
                return p.LINEAR
        }
    }

    function X(b) {
        switch (b) {
            case THREE.RepeatWrapping:
                return p.REPEAT;
            case THREE.ClampToEdgeWrapping:
                return p.CLAMP_TO_EDGE;
            case THREE.MirroredRepeatWrapping:
                return p.MIRRORED_REPEAT;
            case THREE.NearestFilter:
                return p.NEAREST;
            case THREE.NearestMipMapNearestFilter:
                return p.NEAREST_MIPMAP_NEAREST;
            case THREE.NearestMipMapLinearFilter:
                return p.NEAREST_MIPMAP_LINEAR;
            case THREE.LinearFilter:
                return p.LINEAR;
            case THREE.LinearMipMapNearestFilter:
                return p.LINEAR_MIPMAP_NEAREST;
            case THREE.LinearMipMapLinearFilter:
                return p.LINEAR_MIPMAP_LINEAR;
            case THREE.ByteType:
                return p.BYTE;
            case THREE.UnsignedByteType:
                return p.UNSIGNED_BYTE;
            case THREE.ShortType:
                return p.SHORT;
            case THREE.UnsignedShortType:
                return p.UNSIGNED_SHORT;
            case THREE.IntType:
                return p.INT;
            case THREE.UnsignedShortType:
                return p.UNSIGNED_INT;
            case THREE.FloatType:
                return p.FLOAT;
            case THREE.AlphaFormat:
                return p.ALPHA;
            case THREE.RGBFormat:
                return p.RGB;
            case THREE.RGBAFormat:
                return p.RGBA;
            case THREE.LuminanceFormat:
                return p.LUMINANCE;
            case THREE.LuminanceAlphaFormat:
                return p.LUMINANCE_ALPHA
        }
        return 0
    }

    var S = this, p, ca = [], aa = null, la = null, ka = true, ja = null, ea = null, da = null, ga = null, ya = null,
        ma = null, na = null, za = 0, ta = 0, Aa = 0, Fa = 0,
        Da = [new THREE.Vector4, new THREE.Vector4, new THREE.Vector4, new THREE.Vector4, new THREE.Vector4, new THREE.Vector4],
        U = new THREE.Matrix4, Ha = new Float32Array(16), qa = new Float32Array(16), ra = new THREE.Vector4, R = {
            ambient: [0, 0, 0],
            directional: {length: 0, colors: [], positions: []},
            point: {length: 0, colors: [], positions: [], distances: []}
        }, b = b || {}, G = b.canvas !== void 0 ? b.canvas : document.createElement("canvas");
    h = b.stencil !== void 0 ? b.stencil : true;
    var Ga = b.preserveDrawingBuffer !== void 0 ? b.preserveDrawingBuffer : false,
        ha = b.antialias !== void 0 ? b.antialias : false,
        ia = b.clearColor !== void 0 ? new THREE.Color(b.clearColor) : new THREE.Color(0),
        ua = b.clearAlpha !== void 0 ? b.clearAlpha : 0;
    _maxLights = b.maxLights !== void 0 ? b.maxLights : 4;
    this.data = {vertices: 0, faces: 0, drawCalls: 0};
    this.maxMorphTargets = 8;
    this.domElement = G;
    this.sortObjects = this.autoClear = true;
    this.shadowMapBias = 0.0039;
    this.shadowMapDarkness = 0.5;
    this.shadowMapHeight =
        this.shadowMapWidth = 512;
    this.shadowCameraNear = 1;
    this.shadowCameraFar = 5E3;
    this.shadowCameraFov = 50;
    this.shadowMap = [];
    this.shadowMapEnabled = false;
    this.shadowMapSoft = true;
    var oa, sa = [], b = THREE.ShaderLib.depthRGBA, Ca = THREE.UniformsUtils.clone(b.uniforms),
        pa = new THREE.MeshShaderMaterial({
            fragmentShader: b.fragmentShader,
            vertexShader: b.vertexShader,
            uniforms: Ca
        }), wa = new THREE.MeshShaderMaterial({
            fragmentShader: b.fragmentShader,
            vertexShader: b.vertexShader,
            uniforms: Ca,
            morphTargets: true
        });
    pa._shadowPass = true;
    wa._shadowPass = true;
    try {
        if (!(p = G.getContext("experimental-webgl", {
            antialias: ha,
            stencil: h,
            preserveDrawingBuffer: Ga
        }))) throw"Error creating WebGL context.";
        console.log(navigator.userAgent + " | " + p.getParameter(p.VERSION) + " | " + p.getParameter(p.VENDOR) + " | " + p.getParameter(p.RENDERER) + " | " + p.getParameter(p.SHADING_LANGUAGE_VERSION))
    } catch (fa) {
        console.error(fa)
    }
    p.clearColor(0, 0, 0, 1);
    p.clearDepth(1);
    p.clearStencil(0);
    p.enable(p.DEPTH_TEST);
    p.depthFunc(p.LEQUAL);
    p.frontFace(p.CCW);
    p.cullFace(p.BACK);
    p.enable(p.CULL_FACE);
    p.enable(p.BLEND);
    p.blendEquation(p.FUNC_ADD);
    p.blendFunc(p.SRC_ALPHA, p.ONE_MINUS_SRC_ALPHA);
    p.clearColor(ia.r, ia.g, ia.b, ua);
    this.context = p;
    var va = p.getParameter(p.MAX_VERTEX_TEXTURE_IMAGE_UNITS) > 0;
    c = void 0;
    e = void 0;
    f = void 0;
    k = void 0;
    m = void 0;
    b = void 0;
    h = void 0;
    b = new Float32Array(16);
    h = new Uint16Array(6);
    i = 0;
    b[i++] = -1;
    b[i++] = -1;
    b[i++] = 0;
    b[i++] = 1;
    b[i++] = 1;
    b[i++] = -1;
    b[i++] = 1;
    b[i++] = 1;
    b[i++] = 1;
    b[i++] = 1;
    b[i++] = 1;
    b[i++] = 0;
    b[i++] = -1;
    b[i++] = 1;
    b[i++] = 0;
    i = b[i++] = 0;
    h[i++] = 0;
    h[i++] = 1;
    h[i++] = 2;
    h[i++] = 0;
    h[i++] =
        2;
    h[i++] = 3;
    k = p.createBuffer();
    m = p.createBuffer();
    p.bindBuffer(p.ARRAY_BUFFER, k);
    p.bufferData(p.ARRAY_BUFFER, b, p.STATIC_DRAW);
    p.bindBuffer(p.ELEMENT_ARRAY_BUFFER, m);
    p.bufferData(p.ELEMENT_ARRAY_BUFFER, h, p.STATIC_DRAW);
    f = p.createProgram();
    p.attachShader(f, Z("fragment", THREE.ShaderLib.sprite.fragmentShader));
    p.attachShader(f, Z("vertex", THREE.ShaderLib.sprite.vertexShader));
    p.linkProgram(f);
    c = {};
    e = {};
    c.position = p.getAttribLocation(f, "position");
    c.uv = p.getAttribLocation(f, "uv");
    e.uvOffset = p.getUniformLocation(f,
        "uvOffset");
    e.uvScale = p.getUniformLocation(f, "uvScale");
    e.rotation = p.getUniformLocation(f, "rotation");
    e.scale = p.getUniformLocation(f, "scale");
    e.alignment = p.getUniformLocation(f, "alignment");
    e.map = p.getUniformLocation(f, "map");
    e.opacity = p.getUniformLocation(f, "opacity");
    e.useScreenCoordinates = p.getUniformLocation(f, "useScreenCoordinates");
    e.affectedByDistance = p.getUniformLocation(f, "affectedByDistance");
    e.screenPosition = p.getUniformLocation(f, "screenPosition");
    e.modelViewMatrix = p.getUniformLocation(f,
        "modelViewMatrix");
    e.projectionMatrix = p.getUniformLocation(f, "projectionMatrix");
    var Ia = false;
    this.setSize = function (b, e) {
        G.width = b;
        G.height = e;
        this.setViewport(0, 0, G.width, G.height)
    };
    this.setViewport = function (b, e, c, f) {
        za = b;
        ta = e;
        Aa = c;
        Fa = f;
        p.viewport(za, ta, Aa, Fa)
    };
    this.setScissor = function (b, e, c, f) {
        p.scissor(b, e, c, f)
    };
    this.enableScissorTest = function (b) {
        b ? p.enable(p.SCISSOR_TEST) : p.disable(p.SCISSOR_TEST)
    };
    this.enableDepthBufferWrite = function (b) {
        ka = b;
        p.depthMask(b)
    };
    this.setClearColorHex = function (b, e) {
        ia.setHex(b);
        ua = e;
        p.clearColor(ia.r, ia.g, ia.b, ua)
    };
    this.setClearColor = function (b, e) {
        ia.copy(b);
        ua = e;
        p.clearColor(ia.r, ia.g, ia.b, ua)
    };
    this.clear = function () {
        p.clear(p.COLOR_BUFFER_BIT | p.DEPTH_BUFFER_BIT | p.STENCIL_BUFFER_BIT)
    };
    this.getContext = function () {
        return p
    };
    this.deallocateObject = function (b) {
        if (b.__webglInit) if (b.__webglInit = false, delete b._modelViewMatrix, delete b._normalMatrixArray, delete b._modelViewMatrixArray, delete b._objectMatrixArray, b instanceof THREE.Mesh) for (g in b.geometry.geometryGroups) {
            var e =
                b.geometry.geometryGroups[g];
            p.deleteBuffer(e.__webglVertexBuffer);
            p.deleteBuffer(e.__webglNormalBuffer);
            p.deleteBuffer(e.__webglTangentBuffer);
            p.deleteBuffer(e.__webglColorBuffer);
            p.deleteBuffer(e.__webglUVBuffer);
            p.deleteBuffer(e.__webglUV2Buffer);
            p.deleteBuffer(e.__webglSkinVertexABuffer);
            p.deleteBuffer(e.__webglSkinVertexBBuffer);
            p.deleteBuffer(e.__webglSkinIndicesBuffer);
            p.deleteBuffer(e.__webglSkinWeightsBuffer);
            p.deleteBuffer(e.__webglFaceBuffer);
            p.deleteBuffer(e.__webglLineBuffer);
            if (e.numMorphTargets) for (var c =
                0, f = e.numMorphTargets; c < f; c++) p.deleteBuffer(e.__webglMorphTargetsBuffers[c])
        } else if (b instanceof THREE.Ribbon) b = b.geometry, p.deleteBuffer(b.__webglVertexBuffer), p.deleteBuffer(b.__webglColorBuffer); else if (b instanceof THREE.Line) b = b.geometry, p.deleteBuffer(b.__webglVertexBuffer), p.deleteBuffer(b.__webglColorBuffer); else if (b instanceof THREE.ParticleSystem) b = b.geometry, p.deleteBuffer(b.__webglVertexBuffer), p.deleteBuffer(b.__webglColorBuffer)
    };
    this.deallocateTexture = function (b) {
        if (b.__webglInit) b.__webglInit =
            false, p.deleteTexture(b.__webglTexture)
    };
    this.initMaterial = function (b, e, c, f) {
        var h, k, m;
        b instanceof THREE.MeshDepthMaterial ? m = "depth" : b instanceof THREE.MeshNormalMaterial ? m = "normal" : b instanceof THREE.MeshBasicMaterial ? m = "basic" : b instanceof THREE.MeshLambertMaterial ? m = "lambert" : b instanceof THREE.MeshPhongMaterial ? m = "phong" : b instanceof THREE.LineBasicMaterial ? m = "basic" : b instanceof THREE.ParticleBasicMaterial && (m = "particle_basic");
        if (m) {
            var n = THREE.ShaderLib[m];
            b.uniforms = THREE.UniformsUtils.clone(n.uniforms);
            b.vertexShader = n.vertexShader;
            b.fragmentShader = n.fragmentShader
        }
        var t, o, v;
        t = v = n = 0;
        for (o = e.length; t < o; t++) k = e[t], k instanceof THREE.SpotLight && v++, k instanceof THREE.DirectionalLight && v++, k instanceof THREE.PointLight && n++;
        n + v <= _maxLights ? t = v : (t = Math.ceil(_maxLights * v / (n + v)), n = _maxLights - t);
        k = {directional: t, point: n};
        n = v = 0;
        for (t = e.length; n < t; n++) o = e[n], o instanceof THREE.SpotLight && o.castShadow && v++;
        var w = 50;
        if (f !== void 0 && f instanceof THREE.SkinnedMesh) w = f.bones.length;
        var u;
        a:{
            t = b.fragmentShader;
            o = b.vertexShader;
            var n = b.uniforms, e = b.attributes, c = {
                    map: !!b.map,
                    envMap: !!b.envMap,
                    lightMap: !!b.lightMap,
                    vertexColors: b.vertexColors,
                    fog: c,
                    sizeAttenuation: b.sizeAttenuation,
                    skinning: b.skinning,
                    morphTargets: b.morphTargets,
                    maxMorphTargets: this.maxMorphTargets,
                    maxDirLights: k.directional,
                    maxPointLights: k.point,
                    maxBones: w,
                    shadowMapEnabled: this.shadowMapEnabled && f.receiveShadow,
                    shadowMapSoft: this.shadowMapSoft,
                    shadowMapWidth: this.shadowMapWidth,
                    shadowMapHeight: this.shadowMapHeight,
                    maxShadows: v,
                    alphaTest: b.alphaTest
                },
                x, f = [];
            m ? f.push(m) : (f.push(t), f.push(o));
            for (x in c) f.push(x), f.push(c[x]);
            m = f.join();
            x = 0;
            for (f = ca.length; x < f; x++) if (ca[x].code == m) {
                u = ca[x].program;
                break a
            }
            x = p.createProgram();
            f = [va ? "#define VERTEX_TEXTURES" : "", "#define MAX_DIR_LIGHTS " + c.maxDirLights, "#define MAX_POINT_LIGHTS " + c.maxPointLights, "#define MAX_SHADOWS " + c.maxShadows, "#define MAX_BONES " + c.maxBones, c.map ? "#define USE_MAP" : "", c.envMap ? "#define USE_ENVMAP" : "", c.lightMap ? "#define USE_LIGHTMAP" : "", c.vertexColors ? "#define USE_COLOR" : "", c.skinning ?
                "#define USE_SKINNING" : "", c.morphTargets ? "#define USE_MORPHTARGETS" : "", c.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", c.shadowMapSoft ? "#define SHADOWMAP_SOFT" : "", c.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", "uniform mat4 objectMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform mat4 cameraInverseMatrix;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\n#ifdef USE_COLOR\nattribute vec3 color;\n#endif\n#ifdef USE_MORPHTARGETS\nattribute vec3 morphTarget0;\nattribute vec3 morphTarget1;\nattribute vec3 morphTarget2;\nattribute vec3 morphTarget3;\nattribute vec3 morphTarget4;\nattribute vec3 morphTarget5;\nattribute vec3 morphTarget6;\nattribute vec3 morphTarget7;\n#endif\n#ifdef USE_SKINNING\nattribute vec4 skinVertexA;\nattribute vec4 skinVertexB;\nattribute vec4 skinIndex;\nattribute vec4 skinWeight;\n#endif\n"].join("\n");
            k = ["#ifdef GL_ES\nprecision highp float;\n#endif", "#define MAX_DIR_LIGHTS " + c.maxDirLights, "#define MAX_POINT_LIGHTS " + c.maxPointLights, "#define MAX_SHADOWS " + c.maxShadows, c.alphaTest ? "#define ALPHATEST " + c.alphaTest : "", c.fog ? "#define USE_FOG" : "", c.fog instanceof THREE.FogExp2 ? "#define FOG_EXP2" : "", c.map ? "#define USE_MAP" : "", c.envMap ? "#define USE_ENVMAP" : "", c.lightMap ? "#define USE_LIGHTMAP" : "", c.vertexColors ? "#define USE_COLOR" : "", c.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", c.shadowMapSoft ? "#define SHADOWMAP_SOFT" :
                "", c.shadowMapSoft ? "#define SHADOWMAP_WIDTH " + c.shadowMapWidth.toFixed(1) : "", c.shadowMapSoft ? "#define SHADOWMAP_HEIGHT " + c.shadowMapHeight.toFixed(1) : "", "uniform mat4 viewMatrix;\nuniform vec3 cameraPosition;\n"].join("\n");
            p.attachShader(x, Z("fragment", k + t));
            p.attachShader(x, Z("vertex", f + o));
            p.linkProgram(x);
            p.getProgramParameter(x, p.LINK_STATUS) || console.error("Could not initialise shader\nVALIDATE_STATUS: " + p.getProgramParameter(x, p.VALIDATE_STATUS) + ", gl error [" + p.getError() + "]");
            x.uniforms =
                {};
            x.attributes = {};
            var y,
                f = "viewMatrix,modelViewMatrix,projectionMatrix,normalMatrix,objectMatrix,cameraPosition,cameraInverseMatrix,boneGlobalMatrices,morphTargetInfluences".split(",");
            for (y in n) f.push(y);
            y = f;
            f = 0;
            for (n = y.length; f < n; f++) t = y[f], x.uniforms[t] = p.getUniformLocation(x, t);
            f = "position,normal,uv,uv2,tangent,color,skinVertexA,skinVertexB,skinIndex,skinWeight".split(",");
            for (y = 0; y < c.maxMorphTargets; y++) f.push("morphTarget" + y);
            for (u in e) f.push(u);
            u = f;
            y = 0;
            for (e = u.length; y < e; y++) c = u[y], x.attributes[c] =
                p.getAttribLocation(x, c);
            ca.push({program: x, code: m});
            u = x
        }
        b.program = u;
        u = b.program.attributes;
        u.position >= 0 && p.enableVertexAttribArray(u.position);
        u.color >= 0 && p.enableVertexAttribArray(u.color);
        u.normal >= 0 && p.enableVertexAttribArray(u.normal);
        u.tangent >= 0 && p.enableVertexAttribArray(u.tangent);
        b.skinning && u.skinVertexA >= 0 && u.skinVertexB >= 0 && u.skinIndex >= 0 && u.skinWeight >= 0 && (p.enableVertexAttribArray(u.skinVertexA), p.enableVertexAttribArray(u.skinVertexB), p.enableVertexAttribArray(u.skinIndex), p.enableVertexAttribArray(u.skinWeight));
        if (b.attributes) for (h in b.attributes) u[h] !== void 0 && u[h] >= 0 && p.enableVertexAttribArray(u[h]);
        if (b.morphTargets) for (h = b.numSupportedMorphTargets = 0; h < this.maxMorphTargets; h++) y = "morphTarget" + h, u[y] >= 0 && (p.enableVertexAttribArray(u[y]), b.numSupportedMorphTargets++)
    };
    this.clearTarget = function (b, e, c, f) {
        Y(b);
        b = 0;
        e && (b |= p.COLOR_BUFFER_BIT);
        c && (b |= p.DEPTH_BUFFER_BIT);
        f && (b |= p.STENCIL_BUFFER_BIT);
        p.clear(b)
    };
    this.render = function (b, e, c, f) {
        var h, k, m, n, p, y, R, H, Q = b.lights, O = b.fog;
        this.shadowMapEnabled && z(b, e);
        S.data.vertices = 0;
        S.data.faces = 0;
        S.data.drawCalls = 0;
        e.matrixAutoUpdate && e.update(void 0, true);
        b.update(void 0, false, e);
        e.matrixWorldInverse.flattenToArray(qa);
        e.projectionMatrix.flattenToArray(Ha);
        U.multiply(e.projectionMatrix, e.matrixWorldInverse);
        B(U);
        this.initWebGLObjects(b);
        Y(c);
        (this.autoClear || f) && this.clear();
        p = b.__webglObjects.length;
        for (f = 0; f < p; f++) if (h = b.__webglObjects[f], R = h.object, R.visible) if (!(R instanceof THREE.Mesh) || !R.frustumCulled || A(R)) {
            if (R.matrixWorld.flattenToArray(R._objectMatrixArray),
                N(R, e, true), C(h), h.render = true, this.sortObjects) h.object.renderDepth ? h.z = h.object.renderDepth : (ra.copy(R.position), U.multiplyVector3(ra), h.z = ra.z)
        } else h.render = false; else h.render = false;
        this.sortObjects && b.__webglObjects.sort(L);
        y = b.__webglObjectsImmediate.length;
        for (f = 0; f < y; f++) h = b.__webglObjectsImmediate[f], R = h.object, R.visible && (R.matrixAutoUpdate && R.matrixWorld.flattenToArray(R._objectMatrixArray), N(R, e, true), D(h));
        if (b.overrideMaterial) {
            x(b.overrideMaterial.depthTest);
            J(b.overrideMaterial.blending);
            for (f = 0; f < p; f++) if (h = b.__webglObjects[f], h.render) R = h.object, H = h.buffer, v(R), t(e, Q, O, b.overrideMaterial, H, R);
            for (f = 0; f < y; f++) h = b.__webglObjectsImmediate[f], R = h.object, R.visible && (v(R), k = o(e, Q, O, b.overrideMaterial, R), R.render(function (e) {
                u(e, k, b.overrideMaterial.shading)
            }))
        } else {
            J(THREE.NormalBlending);
            for (f = p - 1; f >= 0; f--) if (h = b.__webglObjects[f], h.render) {
                R = h.object;
                H = h.buffer;
                m = h.opaque;
                v(R);
                for (h = 0; h < m.count; h++) n = m.list[h], x(n.depthTest), w(n.polygonOffset, n.polygonOffsetFactor, n.polygonOffsetUnits),
                    t(e, Q, O, n, H, R)
            }
            for (f = 0; f < y; f++) if (h = b.__webglObjectsImmediate[f], R = h.object, R.visible) {
                m = h.opaque;
                v(R);
                for (h = 0; h < m.count; h++) n = m.list[h], x(n.depthTest), w(n.polygonOffset, n.polygonOffsetFactor, n.polygonOffsetUnits), k = o(e, Q, O, n, R), R.render(function (b) {
                    u(b, k, n.shading)
                })
            }
            for (f = 0; f < p; f++) if (h = b.__webglObjects[f], h.render) {
                R = h.object;
                H = h.buffer;
                m = h.transparent;
                v(R);
                for (h = 0; h < m.count; h++) n = m.list[h], J(n.blending), x(n.depthTest), w(n.polygonOffset, n.polygonOffsetFactor, n.polygonOffsetUnits), t(e, Q, O, n, H, R)
            }
            for (f =
                     0; f < y; f++) if (h = b.__webglObjectsImmediate[f], R = h.object, R.visible) {
                m = h.transparent;
                v(R);
                for (h = 0; h < m.count; h++) n = m.list[h], J(n.blending), x(n.depthTest), w(n.polygonOffset, n.polygonOffsetFactor, n.polygonOffsetUnits), k = o(e, Q, O, n, R), R.render(function (b) {
                    u(b, k, n.shading)
                })
            }
        }
        b.__webglSprites.length && E(b, e);
        c && c.minFilter !== THREE.NearestFilter && c.minFilter !== THREE.LinearFilter && V(c)
    };
    this.initWebGLObjects = function (b) {
        if (!b.__webglObjects) b.__webglObjects = [], b.__webglObjectsImmediate = [], b.__webglSprites = [];
        for (; b.__objectsAdded.length;) {
            var e = b.__objectsAdded[0], c = b, f = void 0, h = void 0, k = void 0;
            if (!e.__webglInit) if (e.__webglInit = true, e._modelViewMatrix = new THREE.Matrix4, e._normalMatrixArray = new Float32Array(9), e._modelViewMatrixArray = new Float32Array(16), e._objectMatrixArray = new Float32Array(16), e.matrixWorld.flattenToArray(e._objectMatrixArray), e instanceof THREE.Mesh) for (f in h = e.geometry, h.geometryGroups == void 0 && W(h), h.geometryGroups) {
                k = h.geometryGroups[f];
                if (!k.__webglVertexBuffer) {
                    var m = k;
                    m.__webglVertexBuffer =
                        p.createBuffer();
                    m.__webglNormalBuffer = p.createBuffer();
                    m.__webglTangentBuffer = p.createBuffer();
                    m.__webglColorBuffer = p.createBuffer();
                    m.__webglUVBuffer = p.createBuffer();
                    m.__webglUV2Buffer = p.createBuffer();
                    m.__webglSkinVertexABuffer = p.createBuffer();
                    m.__webglSkinVertexBBuffer = p.createBuffer();
                    m.__webglSkinIndicesBuffer = p.createBuffer();
                    m.__webglSkinWeightsBuffer = p.createBuffer();
                    m.__webglFaceBuffer = p.createBuffer();
                    m.__webglLineBuffer = p.createBuffer();
                    if (m.numMorphTargets) {
                        var t = void 0, o = void 0;
                        m.__webglMorphTargetsBuffers =
                            [];
                        t = 0;
                        for (o = m.numMorphTargets; t < o; t++) m.__webglMorphTargetsBuffers.push(p.createBuffer())
                    }
                    for (var m = k, t = e, v = void 0, w = void 0, u = void 0, x = void 0, y = void 0, J = void 0, A = J = o = 0, z = void 0, D = void 0, u = void 0, x = t.geometry, y = x.faces, z = m.faces, v = 0, w = z.length; v < w; v++) u = z[v], u = y[u], u instanceof THREE.Face3 ? (o += 3, J += 1, A += 3) : u instanceof THREE.Face4 && (o += 4, J += 2, A += 4);
                    for (var v = m, w = t, B = void 0, R = void 0, B = void 0, u = [], y = 0, z = w.materials.length; y < z; y++) if (B = w.materials[y], B instanceof THREE.MeshFaceMaterial) {
                        B = 0;
                        for (l = v.materials.length; B <
                        l; B++) (R = v.materials[B]) && u.push(R)
                    } else (R = B) && u.push(R);
                    v = u;
                    m.__materials = v;
                    a:{
                        y = void 0;
                        z = v.length;
                        for (w = 0; w < z; w++) if (y = v[w], y.map || y.lightMap || y instanceof THREE.MeshShaderMaterial) {
                            w = true;
                            break a
                        }
                        w = false
                    }
                    a:{
                        z = void 0;
                        u = v.length;
                        for (y = 0; y < u; y++) if (z = v[y], !(z instanceof THREE.MeshBasicMaterial && !z.envMap || z instanceof THREE.MeshDepthMaterial)) {
                            z = z && z.shading != void 0 && z.shading == THREE.SmoothShading ? THREE.SmoothShading : THREE.FlatShading;
                            break a
                        }
                        z = false
                    }
                    a:{
                        u = void 0;
                        B = v.length;
                        for (y = 0; y < B; y++) if (u = v[y],
                            u.vertexColors) {
                            u = u.vertexColors;
                            break a
                        }
                        u = false
                    }
                    m.__vertexArray = new Float32Array(o * 3);
                    if (z) m.__normalArray = new Float32Array(o * 3);
                    if (x.hasTangents) m.__tangentArray = new Float32Array(o * 4);
                    if (u) m.__colorArray = new Float32Array(o * 3);
                    if (w) {
                        if (x.faceUvs.length > 0 || x.faceVertexUvs.length > 0) m.__uvArray = new Float32Array(o * 2);
                        if (x.faceUvs.length > 1 || x.faceVertexUvs.length > 1) m.__uv2Array = new Float32Array(o * 2)
                    }
                    if (t.geometry.skinWeights.length && t.geometry.skinIndices.length) m.__skinVertexAArray = new Float32Array(o *
                        4), m.__skinVertexBArray = new Float32Array(o * 4), m.__skinIndexArray = new Float32Array(o * 4), m.__skinWeightArray = new Float32Array(o * 4);
                    m.__faceArray = new Uint16Array(J * 3 + (t.geometry.edgeFaces ? t.geometry.edgeFaces.length * 6 : 0));
                    m.__lineArray = new Uint16Array(A * 2);
                    if (m.numMorphTargets) {
                        m.__morphTargetsArrays = [];
                        x = 0;
                        for (y = m.numMorphTargets; x < y; x++) m.__morphTargetsArrays.push(new Float32Array(o * 3))
                    }
                    m.__needsSmoothNormals = z == THREE.SmoothShading;
                    m.__uvType = w;
                    m.__vertexColorType = u;
                    m.__normalType = z;
                    m.__webglFaceCount =
                        J * 3 + (t.geometry.edgeFaces ? t.geometry.edgeFaces.length * 6 : 0);
                    m.__webglLineCount = A * 2;
                    x = 0;
                    for (y = v.length; x < y; x++) if (w = v[x], w.attributes) {
                        if (m.__webglCustomAttributes === void 0) m.__webglCustomAttributes = {};
                        for (a in w.attributes) {
                            u = w.attributes[a];
                            z = {};
                            for (D in u) z[D] = u[D];
                            if (!z.__webglInitialized || z.createUniqueBuffers) z.__webglInitialized = true, J = 1, z.type === "v2" ? J = 2 : z.type === "v3" ? J = 3 : z.type === "v4" ? J = 4 : z.type === "c" && (J = 3), z.size = J, z.array = new Float32Array(o * J), z.buffer = p.createBuffer(), z.buffer.belongsToAttribute =
                                a, u.needsUpdate = true, z.__original = u;
                            m.__webglCustomAttributes[a] = z
                        }
                    }
                    m.__inittedArrays = true;
                    h.__dirtyVertices = true;
                    h.__dirtyMorphTargets = true;
                    h.__dirtyElements = true;
                    h.__dirtyUvs = true;
                    h.__dirtyNormals = true;
                    h.__dirtyTangents = true;
                    h.__dirtyColors = true
                }
                M(c.__webglObjects, k, e)
            } else if (e instanceof THREE.Ribbon) {
                h = e.geometry;
                if (!h.__webglVertexBuffer) f = h, f.__webglVertexBuffer = p.createBuffer(), f.__webglColorBuffer = p.createBuffer(), f = h, k = f.vertices.length, f.__vertexArray = new Float32Array(k * 3), f.__colorArray =
                    new Float32Array(k * 3), f.__webglVertexCount = k, h.__dirtyVertices = true, h.__dirtyColors = true;
                M(c.__webglObjects, h, e)
            } else if (e instanceof THREE.Line) {
                h = e.geometry;
                if (!h.__webglVertexBuffer) f = h, f.__webglVertexBuffer = p.createBuffer(), f.__webglColorBuffer = p.createBuffer(), f = h, k = f.vertices.length, f.__vertexArray = new Float32Array(k * 3), f.__colorArray = new Float32Array(k * 3), f.__webglLineCount = k, h.__dirtyVertices = true, h.__dirtyColors = true;
                M(c.__webglObjects, h, e)
            } else if (e instanceof THREE.ParticleSystem) {
                h = e.geometry;
                if (!h.__webglVertexBuffer) {
                    f = h;
                    f.__webglVertexBuffer = p.createBuffer();
                    f.__webglColorBuffer = p.createBuffer();
                    f = h;
                    k = e;
                    m = f.vertices.length;
                    f.__vertexArray = new Float32Array(m * 3);
                    f.__colorArray = new Float32Array(m * 3);
                    f.__sortArray = [];
                    f.__webglParticleCount = m;
                    f.__materials = k.materials;
                    D = void 0;
                    t = 0;
                    for (o = k.materials.length; t < o; t++) if (D = k.materials[t], D.attributes) {
                        if (f.__webglCustomAttributes === void 0) f.__webglCustomAttributes = {};
                        for (a in D.attributes) {
                            originalAttribute = D.attributes[a];
                            attribute = {};
                            for (property in originalAttribute) attribute[property] =
                                originalAttribute[property];
                            if (!attribute.__webglInitialized || attribute.createUniqueBuffers) attribute.__webglInitialized = true, size = 1, attribute.type === "v2" ? size = 2 : attribute.type === "v3" ? size = 3 : attribute.type === "v4" ? size = 4 : attribute.type === "c" && (size = 3), attribute.size = size, attribute.array = new Float32Array(m * size), attribute.buffer = p.createBuffer(), attribute.buffer.belongsToAttribute = a, originalAttribute.needsUpdate = true, attribute.__original = originalAttribute;
                            f.__webglCustomAttributes[a] = attribute
                        }
                    }
                    h.__dirtyVertices =
                        true;
                    h.__dirtyColors = true
                }
                M(c.__webglObjects, h, e)
            } else THREE.MarchingCubes !== void 0 && e instanceof THREE.MarchingCubes ? c.__webglObjectsImmediate.push({
                object: e,
                opaque: {list: [], count: 0},
                transparent: {list: [], count: 0}
            }) : e instanceof THREE.Sprite && c.__webglSprites.push(e);
            b.__objectsAdded.splice(0, 1)
        }
        for (; b.__objectsRemoved.length;) {
            c = b.__objectsRemoved[0];
            e = b;
            if (c instanceof THREE.Mesh || c instanceof THREE.ParticleSystem || c instanceof THREE.Ribbon || c instanceof THREE.Line) H(e.__webglObjects, c); else if (c instanceof
                THREE.Sprite) {
                e = e.__webglSprites;
                for (h = e.length - 1; h >= 0; h--) e[h] == c && e.splice(h, 1)
            } else c instanceof THREE.MarchingCubes && H(e.__webglObjectsImmediate, c);
            b.__objectsRemoved.splice(0, 1)
        }
        e = 0;
        for (c = b.__webglObjects.length; e < c; e++) if (f = b.__webglObjects[e].object, o = k = h = void 0, f instanceof THREE.Mesh) {
            h = f.geometry;
            m = 0;
            for (t = h.geometryGroupsList.length; m < t; m++) if (k = h.geometryGroupsList[m], o = I(k), h.__dirtyVertices || h.__dirtyMorphTargets || h.__dirtyElements || h.__dirtyUvs || h.__dirtyNormals || h.__dirtyColors || h.__dirtyTangents ||
            o) if (o = k, D = p.DYNAMIC_DRAW, J = !h.dynamic, o.__inittedArrays) {
                var qa = void 0, C = void 0, Q = void 0, O = void 0, ra = void 0, E = void 0,
                    L = R = B = u = z = void 0, oa = void 0, G = void 0, F = void 0, K = void 0, N = void 0,
                    Y = qa = qa = C = N = N = void 0, ha = 0, V = 0, sa = 0, Ga = 0, S = 0, Z = 0, ia = 0, Ca = 0,
                    X = 0, T = 0, pa = 0, G = 0, K = void 0, fa = o.__vertexArray, ja = o.__uvArray, ua = o.__uv2Array,
                    wa = o.__normalArray, U = o.__tangentArray, ca = o.__colorArray, ea = o.__skinVertexAArray,
                    da = o.__skinVertexBArray, ga = o.__skinIndexArray, aa = o.__skinWeightArray,
                    la = o.__morphTargetsArrays, ma = o.__webglCustomAttributes,
                    F = void 0, ka = o.__faceArray, na = o.__lineArray, ya = o.__needsSmoothNormals,
                    w = o.__vertexColorType, v = o.__uvType, y = o.__normalType, va = f.geometry,
                    ta = va.__dirtyVertices, za = va.__dirtyElements, Ia = va.__dirtyUvs, Aa = va.__dirtyNormals,
                    Da = va.__dirtyTangents, Fa = va.__dirtyColors, Ha = va.__dirtyMorphTargets, Xa = va.vertices,
                    kb = o.faces, ob = va.faces, lb = va.faceVertexUvs[0], mb = va.faceVertexUvs[1],
                    Ya = va.skinVerticesA, Za = va.skinVerticesB, $a = va.skinIndices, Ra = va.skinWeights,
                    Oa = va.morphTargets;
                if (ma) for (Y in ma) ma[Y].offset = 0, ma[Y].offsetSrc =
                    0;
                A = 0;
                for (x = kb.length; A < x; A++) if (qa = kb[A], C = ob[qa], lb && (z = lb[qa]), mb && (u = mb[qa]), qa = C.vertexNormals, Q = C.normal, O = C.vertexColors, ra = C.color, E = C.vertexTangents, C instanceof THREE.Face3) {
                    if (ta) B = Xa[C.a].position, R = Xa[C.b].position, L = Xa[C.c].position, fa[V] = B.x, fa[V + 1] = B.y, fa[V + 2] = B.z, fa[V + 3] = R.x, fa[V + 4] = R.y, fa[V + 5] = R.z, fa[V + 6] = L.x, fa[V + 7] = L.y, fa[V + 8] = L.z, V += 9;
                    if (ma) for (Y in ma) if (F = ma[Y], F.__original.needsUpdate) G = F.offset, K = F.offsetSrc, F.size === 1 ? (F.boundTo === void 0 || F.boundTo === "vertices" ? (F.array[G] =
                        F.value[C.a], F.array[G + 1] = F.value[C.b], F.array[G + 2] = F.value[C.c]) : F.boundTo === "faces" ? (K = F.value[K], F.array[G] = K, F.array[G + 1] = K, F.array[G + 2] = K, F.offsetSrc++) : F.boundTo === "faceVertices" && (F.array[G] = F.value[K], F.array[G + 1] = F.value[K + 1], F.array[G + 2] = F.value[K + 2], F.offsetSrc += 3), F.offset += 3) : (F.boundTo === void 0 || F.boundTo === "vertices" ? (B = F.value[C.a], R = F.value[C.b], L = F.value[C.c]) : F.boundTo === "faces" ? (L = R = B = K = F.value[K], F.offsetSrc++) : F.boundTo === "faceVertices" && (B = F.value[K], R = F.value[K + 1], L = F.value[K +
                    2], F.offsetSrc += 3), F.size === 2 ? (F.array[G] = B.x, F.array[G + 1] = B.y, F.array[G + 2] = R.x, F.array[G + 3] = R.y, F.array[G + 4] = L.x, F.array[G + 5] = L.y, F.offset += 6) : F.size === 3 ? (F.type === "c" ? (F.array[G] = B.r, F.array[G + 1] = B.g, F.array[G + 2] = B.b, F.array[G + 3] = R.r, F.array[G + 4] = R.g, F.array[G + 5] = R.b, F.array[G + 6] = L.r, F.array[G + 7] = L.g, F.array[G + 8] = L.b) : (F.array[G] = B.x, F.array[G + 1] = B.y, F.array[G + 2] = B.z, F.array[G + 3] = R.x, F.array[G + 4] = R.y, F.array[G + 5] = R.z, F.array[G + 6] = L.x, F.array[G + 7] = L.y, F.array[G + 8] = L.z), F.offset += 9) : (F.array[G] = B.x,
                        F.array[G + 1] = B.y, F.array[G + 2] = B.z, F.array[G + 3] = B.w, F.array[G + 4] = R.x, F.array[G + 5] = R.y, F.array[G + 6] = R.z, F.array[G + 7] = R.w, F.array[G + 8] = L.x, F.array[G + 9] = L.y, F.array[G + 10] = L.z, F.array[G + 11] = L.w, F.offset += 12));
                    if (Ha) {
                        G = 0;
                        for (F = Oa.length; G < F; G++) B = Oa[G].vertices[C.a].position, R = Oa[G].vertices[C.b].position, L = Oa[G].vertices[C.c].position, K = la[G], K[pa] = B.x, K[pa + 1] = B.y, K[pa + 2] = B.z, K[pa + 3] = R.x, K[pa + 4] = R.y, K[pa + 5] = R.z, K[pa + 6] = L.x, K[pa + 7] = L.y, K[pa + 8] = L.z;
                        pa += 9
                    }
                    if (Ra.length) G = Ra[C.a], F = Ra[C.b], K = Ra[C.c], aa[T] =
                        G.x, aa[T + 1] = G.y, aa[T + 2] = G.z, aa[T + 3] = G.w, aa[T + 4] = F.x, aa[T + 5] = F.y, aa[T + 6] = F.z, aa[T + 7] = F.w, aa[T + 8] = K.x, aa[T + 9] = K.y, aa[T + 10] = K.z, aa[T + 11] = K.w, G = $a[C.a], F = $a[C.b], K = $a[C.c], ga[T] = G.x, ga[T + 1] = G.y, ga[T + 2] = G.z, ga[T + 3] = G.w, ga[T + 4] = F.x, ga[T + 5] = F.y, ga[T + 6] = F.z, ga[T + 7] = F.w, ga[T + 8] = K.x, ga[T + 9] = K.y, ga[T + 10] = K.z, ga[T + 11] = K.w, G = Ya[C.a], F = Ya[C.b], K = Ya[C.c], ea[T] = G.x, ea[T + 1] = G.y, ea[T + 2] = G.z, ea[T + 3] = 1, ea[T + 4] = F.x, ea[T + 5] = F.y, ea[T + 6] = F.z, ea[T + 7] = 1, ea[T + 8] = K.x, ea[T + 9] = K.y, ea[T + 10] = K.z, ea[T + 11] = 1, G = Za[C.a], F = Za[C.b], K =
                        Za[C.c], da[T] = G.x, da[T + 1] = G.y, da[T + 2] = G.z, da[T + 3] = 1, da[T + 4] = F.x, da[T + 5] = F.y, da[T + 6] = F.z, da[T + 7] = 1, da[T + 8] = K.x, da[T + 9] = K.y, da[T + 10] = K.z, da[T + 11] = 1, T += 12;
                    if (Fa && w) O.length == 3 && w == THREE.VertexColors ? (C = O[0], G = O[1], F = O[2]) : F = G = C = ra, ca[X] = C.r, ca[X + 1] = C.g, ca[X + 2] = C.b, ca[X + 3] = G.r, ca[X + 4] = G.g, ca[X + 5] = G.b, ca[X + 6] = F.r, ca[X + 7] = F.g, ca[X + 8] = F.b, X += 9;
                    if (Da && va.hasTangents) O = E[0], ra = E[1], C = E[2], U[ia] = O.x, U[ia + 1] = O.y, U[ia + 2] = O.z, U[ia + 3] = O.w, U[ia + 4] = ra.x, U[ia + 5] = ra.y, U[ia + 6] = ra.z, U[ia + 7] = ra.w, U[ia + 8] = C.x, U[ia + 9] =
                        C.y, U[ia + 10] = C.z, U[ia + 11] = C.w, ia += 12;
                    if (Aa && y) if (qa.length == 3 && ya) for (E = 0; E < 3; E++) Q = qa[E], wa[Z] = Q.x, wa[Z + 1] = Q.y, wa[Z + 2] = Q.z, Z += 3; else for (E = 0; E < 3; E++) wa[Z] = Q.x, wa[Z + 1] = Q.y, wa[Z + 2] = Q.z, Z += 3;
                    if (Ia && z !== void 0 && v) for (E = 0; E < 3; E++) qa = z[E], ja[sa] = qa.u, ja[sa + 1] = qa.v, sa += 2;
                    if (Ia && u !== void 0 && v) for (E = 0; E < 3; E++) qa = u[E], ua[Ga] = qa.u, ua[Ga + 1] = qa.v, Ga += 2;
                    za && (ka[S] = ha, ka[S + 1] = ha + 1, ka[S + 2] = ha + 2, S += 3, na[Ca] = ha, na[Ca + 1] = ha + 1, na[Ca + 2] = ha, na[Ca + 3] = ha + 2, na[Ca + 4] = ha + 1, na[Ca + 5] = ha + 2, Ca += 6, ha += 3)
                } else if (C instanceof THREE.Face4) {
                    if (ta) B =
                        Xa[C.a].position, R = Xa[C.b].position, L = Xa[C.c].position, oa = Xa[C.d].position, fa[V] = B.x, fa[V + 1] = B.y, fa[V + 2] = B.z, fa[V + 3] = R.x, fa[V + 4] = R.y, fa[V + 5] = R.z, fa[V + 6] = L.x, fa[V + 7] = L.y, fa[V + 8] = L.z, fa[V + 9] = oa.x, fa[V + 10] = oa.y, fa[V + 11] = oa.z, V += 12;
                    if (ma) for (Y in ma) if (F = ma[Y], F.__original.needsUpdate) G = F.offset, K = F.offsetSrc, F.size === 1 ? (F.boundTo === void 0 || F.boundTo === "vertices" ? (F.array[G] = F.value[C.a], F.array[G + 1] = F.value[C.b], F.array[G + 2] = F.value[C.c], F.array[G + 3] = F.value[C.d]) : F.boundTo === "faces" ? (K = F.value[K], F.array[G] =
                        K, F.array[G + 1] = K, F.array[G + 2] = K, F.array[G + 3] = K, F.offsetSrc++) : F.boundTo === "faceVertices" && (F.array[G] = F.value[K], F.array[G + 1] = F.value[K + 1], F.array[G + 2] = F.value[K + 2], F.array[G + 3] = F.value[K + 3], F.offsetSrc += 4), F.offset += 4) : (F.boundTo === void 0 || F.boundTo === "vertices" ? (B = F.value[C.a], R = F.value[C.b], L = F.value[C.c], oa = F.value[C.d]) : F.boundTo === "faces" ? (oa = L = R = B = K = F.value[K], F.offsetSrc++) : F.boundTo === "faceVertices" && (B = F.value[K], R = F.value[K + 1], L = F.value[K + 2], oa = F.value[K + 3], F.offsetSrc += 4), F.size === 2 ? (F.array[G] =
                        B.x, F.array[G + 1] = B.y, F.array[G + 2] = R.x, F.array[G + 3] = R.y, F.array[G + 4] = L.x, F.array[G + 5] = L.y, F.array[G + 6] = oa.x, F.array[G + 7] = oa.y, F.offset += 8) : F.size === 3 ? (F.type === "c" ? (F.array[G] = B.r, F.array[G + 1] = B.g, F.array[G + 2] = B.b, F.array[G + 3] = R.r, F.array[G + 4] = R.g, F.array[G + 5] = R.b, F.array[G + 6] = L.r, F.array[G + 7] = L.g, F.array[G + 8] = L.b, F.array[G + 9] = oa.r, F.array[G + 10] = oa.g, F.array[G + 11] = oa.b) : (F.array[G] = B.x, F.array[G + 1] = B.y, F.array[G + 2] = B.z, F.array[G + 3] = R.x, F.array[G + 4] = R.y, F.array[G + 5] = R.z, F.array[G + 6] = L.x, F.array[G + 7] =
                        L.y, F.array[G + 8] = L.z, F.array[G + 9] = oa.x, F.array[G + 10] = oa.y, F.array[G + 11] = oa.z), F.offset += 12) : (F.array[G] = B.x, F.array[G + 1] = B.y, F.array[G + 2] = B.z, F.array[G + 3] = B.w, F.array[G + 4] = R.x, F.array[G + 5] = R.y, F.array[G + 6] = R.z, F.array[G + 7] = R.w, F.array[G + 8] = L.x, F.array[G + 9] = L.y, F.array[G + 10] = L.z, F.array[G + 11] = L.w, F.array[G + 12] = oa.x, F.array[G + 13] = oa.y, F.array[G + 14] = oa.z, F.array[G + 15] = oa.w, F.offset += 16));
                    if (Ha) {
                        G = 0;
                        for (F = Oa.length; G < F; G++) B = Oa[G].vertices[C.a].position, R = Oa[G].vertices[C.b].position, L = Oa[G].vertices[C.c].position,
                            oa = Oa[G].vertices[C.d].position, K = la[G], K[pa] = B.x, K[pa + 1] = B.y, K[pa + 2] = B.z, K[pa + 3] = R.x, K[pa + 4] = R.y, K[pa + 5] = R.z, K[pa + 6] = L.x, K[pa + 7] = L.y, K[pa + 8] = L.z, K[pa + 9] = oa.x, K[pa + 10] = oa.y, K[pa + 11] = oa.z;
                        pa += 12
                    }
                    if (Ra.length) G = Ra[C.a], F = Ra[C.b], K = Ra[C.c], N = Ra[C.d], aa[T] = G.x, aa[T + 1] = G.y, aa[T + 2] = G.z, aa[T + 3] = G.w, aa[T + 4] = F.x, aa[T + 5] = F.y, aa[T + 6] = F.z, aa[T + 7] = F.w, aa[T + 8] = K.x, aa[T + 9] = K.y, aa[T + 10] = K.z, aa[T + 11] = K.w, aa[T + 12] = N.x, aa[T + 13] = N.y, aa[T + 14] = N.z, aa[T + 15] = N.w, G = $a[C.a], F = $a[C.b], K = $a[C.c], N = $a[C.d], ga[T] = G.x, ga[T + 1] =
                        G.y, ga[T + 2] = G.z, ga[T + 3] = G.w, ga[T + 4] = F.x, ga[T + 5] = F.y, ga[T + 6] = F.z, ga[T + 7] = F.w, ga[T + 8] = K.x, ga[T + 9] = K.y, ga[T + 10] = K.z, ga[T + 11] = K.w, ga[T + 12] = N.x, ga[T + 13] = N.y, ga[T + 14] = N.z, ga[T + 15] = N.w, G = Ya[C.a], F = Ya[C.b], K = Ya[C.c], N = Ya[C.d], ea[T] = G.x, ea[T + 1] = G.y, ea[T + 2] = G.z, ea[T + 3] = 1, ea[T + 4] = F.x, ea[T + 5] = F.y, ea[T + 6] = F.z, ea[T + 7] = 1, ea[T + 8] = K.x, ea[T + 9] = K.y, ea[T + 10] = K.z, ea[T + 11] = 1, ea[T + 12] = N.x, ea[T + 13] = N.y, ea[T + 14] = N.z, ea[T + 15] = 1, G = Za[C.a], F = Za[C.b], K = Za[C.c], C = Za[C.d], da[T] = G.x, da[T + 1] = G.y, da[T + 2] = G.z, da[T + 3] = 1, da[T + 4] = F.x,
                        da[T + 5] = F.y, da[T + 6] = F.z, da[T + 7] = 1, da[T + 8] = K.x, da[T + 9] = K.y, da[T + 10] = K.z, da[T + 11] = 1, da[T + 12] = C.x, da[T + 13] = C.y, da[T + 14] = C.z, da[T + 15] = 1, T += 16;
                    if (Fa && w) O.length == 4 && w == THREE.VertexColors ? (C = O[0], G = O[1], F = O[2], O = O[3]) : O = F = G = C = ra, ca[X] = C.r, ca[X + 1] = C.g, ca[X + 2] = C.b, ca[X + 3] = G.r, ca[X + 4] = G.g, ca[X + 5] = G.b, ca[X + 6] = F.r, ca[X + 7] = F.g, ca[X + 8] = F.b, ca[X + 9] = O.r, ca[X + 10] = O.g, ca[X + 11] = O.b, X += 12;
                    if (Da && va.hasTangents) O = E[0], ra = E[1], C = E[2], E = E[3], U[ia] = O.x, U[ia + 1] = O.y, U[ia + 2] = O.z, U[ia + 3] = O.w, U[ia + 4] = ra.x, U[ia + 5] = ra.y, U[ia +
                    6] = ra.z, U[ia + 7] = ra.w, U[ia + 8] = C.x, U[ia + 9] = C.y, U[ia + 10] = C.z, U[ia + 11] = C.w, U[ia + 12] = E.x, U[ia + 13] = E.y, U[ia + 14] = E.z, U[ia + 15] = E.w, ia += 16;
                    if (Aa && y) if (qa.length == 4 && ya) for (E = 0; E < 4; E++) Q = qa[E], wa[Z] = Q.x, wa[Z + 1] = Q.y, wa[Z + 2] = Q.z, Z += 3; else for (E = 0; E < 4; E++) wa[Z] = Q.x, wa[Z + 1] = Q.y, wa[Z + 2] = Q.z, Z += 3;
                    if (Ia && z !== void 0 && v) for (E = 0; E < 4; E++) qa = z[E], ja[sa] = qa.u, ja[sa + 1] = qa.v, sa += 2;
                    if (Ia && u !== void 0 && v) for (E = 0; E < 4; E++) qa = u[E], ua[Ga] = qa.u, ua[Ga + 1] = qa.v, Ga += 2;
                    za && (ka[S] = ha, ka[S + 1] = ha + 1, ka[S + 2] = ha + 3, ka[S + 3] = ha + 1, ka[S + 4] = ha + 2,
                        ka[S + 5] = ha + 3, S += 6, na[Ca] = ha, na[Ca + 1] = ha + 1, na[Ca + 2] = ha, na[Ca + 3] = ha + 3, na[Ca + 4] = ha + 1, na[Ca + 5] = ha + 2, na[Ca + 6] = ha + 2, na[Ca + 7] = ha + 3, Ca += 8, ha += 4)
                }
                ta && (p.bindBuffer(p.ARRAY_BUFFER, o.__webglVertexBuffer), p.bufferData(p.ARRAY_BUFFER, fa, D));
                if (ma) for (Y in ma) F = ma[Y], F.__original.needsUpdate && (p.bindBuffer(p.ARRAY_BUFFER, F.buffer), p.bufferData(p.ARRAY_BUFFER, F.array, D));
                if (Ha) {
                    G = 0;
                    for (F = Oa.length; G < F; G++) p.bindBuffer(p.ARRAY_BUFFER, o.__webglMorphTargetsBuffers[G]), p.bufferData(p.ARRAY_BUFFER, la[G], D)
                }
                Fa && X > 0 &&
                (p.bindBuffer(p.ARRAY_BUFFER, o.__webglColorBuffer), p.bufferData(p.ARRAY_BUFFER, ca, D));
                Aa && (p.bindBuffer(p.ARRAY_BUFFER, o.__webglNormalBuffer), p.bufferData(p.ARRAY_BUFFER, wa, D));
                Da && va.hasTangents && (p.bindBuffer(p.ARRAY_BUFFER, o.__webglTangentBuffer), p.bufferData(p.ARRAY_BUFFER, U, D));
                Ia && sa > 0 && (p.bindBuffer(p.ARRAY_BUFFER, o.__webglUVBuffer), p.bufferData(p.ARRAY_BUFFER, ja, D));
                Ia && Ga > 0 && (p.bindBuffer(p.ARRAY_BUFFER, o.__webglUV2Buffer), p.bufferData(p.ARRAY_BUFFER, ua, D));
                za && (p.bindBuffer(p.ELEMENT_ARRAY_BUFFER,
                    o.__webglFaceBuffer), p.bufferData(p.ELEMENT_ARRAY_BUFFER, ka, D), p.bindBuffer(p.ELEMENT_ARRAY_BUFFER, o.__webglLineBuffer), p.bufferData(p.ELEMENT_ARRAY_BUFFER, na, D));
                T > 0 && (p.bindBuffer(p.ARRAY_BUFFER, o.__webglSkinVertexABuffer), p.bufferData(p.ARRAY_BUFFER, ea, D), p.bindBuffer(p.ARRAY_BUFFER, o.__webglSkinVertexBBuffer), p.bufferData(p.ARRAY_BUFFER, da, D), p.bindBuffer(p.ARRAY_BUFFER, o.__webglSkinIndicesBuffer), p.bufferData(p.ARRAY_BUFFER, ga, D), p.bindBuffer(p.ARRAY_BUFFER, o.__webglSkinWeightsBuffer), p.bufferData(p.ARRAY_BUFFER,
                    aa, D));
                J && (delete o.__inittedArrays, delete o.__colorArray, delete o.__normalArray, delete o.__tangentArray, delete o.__uvArray, delete o.__uv2Array, delete o.__faceArray, delete o.__vertexArray, delete o.__lineArray, delete o.__skinVertexAArray, delete o.__skinVertexBArray, delete o.__skinIndexArray, delete o.__skinWeightArray)
            }
            h.__dirtyVertices = false;
            h.__dirtyMorphTargets = false;
            h.__dirtyElements = false;
            h.__dirtyUvs = false;
            h.__dirtyNormals = false;
            h.__dirtyTangents = false;
            h.__dirtyColors = false;
            P(k)
        } else if (f instanceof
            THREE.Ribbon) {
            h = f.geometry;
            if (h.__dirtyVertices || h.__dirtyColors) {
                f = h;
                k = p.DYNAMIC_DRAW;
                m = A = void 0;
                x = f.vertices;
                t = f.colors;
                v = x.length;
                o = t.length;
                w = f.__vertexArray;
                D = f.__colorArray;
                y = f.__dirtyColors;
                if (f.__dirtyVertices) {
                    for (J = 0; J < v; J++) A = x[J].position, m = J * 3, w[m] = A.x, w[m + 1] = A.y, w[m + 2] = A.z;
                    p.bindBuffer(p.ARRAY_BUFFER, f.__webglVertexBuffer);
                    p.bufferData(p.ARRAY_BUFFER, w, k)
                }
                if (y) {
                    for (J = 0; J < o; J++) color = t[J], m = J * 3, D[m] = color.r, D[m + 1] = color.g, D[m + 2] = color.b;
                    p.bindBuffer(p.ARRAY_BUFFER, f.__webglColorBuffer);
                    p.bufferData(p.ARRAY_BUFFER, D, k)
                }
            }
            h.__dirtyVertices = false;
            h.__dirtyColors = false
        } else if (f instanceof THREE.Line) {
            h = f.geometry;
            if (h.__dirtyVertices || h.__dirtyColors) {
                f = h;
                k = p.DYNAMIC_DRAW;
                m = A = void 0;
                x = f.vertices;
                t = f.colors;
                v = x.length;
                o = t.length;
                w = f.__vertexArray;
                D = f.__colorArray;
                y = f.__dirtyColors;
                if (f.__dirtyVertices) {
                    for (J = 0; J < v; J++) A = x[J].position, m = J * 3, w[m] = A.x, w[m + 1] = A.y, w[m + 2] = A.z;
                    p.bindBuffer(p.ARRAY_BUFFER, f.__webglVertexBuffer);
                    p.bufferData(p.ARRAY_BUFFER, w, k)
                }
                if (y) {
                    for (J = 0; J < o; J++) color = t[J],
                        m = J * 3, D[m] = color.r, D[m + 1] = color.g, D[m + 2] = color.b;
                    p.bindBuffer(p.ARRAY_BUFFER, f.__webglColorBuffer);
                    p.bufferData(p.ARRAY_BUFFER, D, k)
                }
            }
            h.__dirtyVertices = false;
            h.__dirtyColors = false
        } else if (f instanceof THREE.ParticleSystem) h = f.geometry, o = I(h), (h.__dirtyVertices || h.__dirtyColors || f.sortParticles || o) && n(h, p.DYNAMIC_DRAW, f), h.__dirtyVertices = false, h.__dirtyColors = false, P(h)
    };
    this.setFaceCulling = function (b, e) {
        b ? (!e || e == "ccw" ? p.frontFace(p.CCW) : p.frontFace(p.CW), b == "back" ? p.cullFace(p.BACK) : b == "front" ? p.cullFace(p.FRONT) :
            p.cullFace(p.FRONT_AND_BACK), p.enable(p.CULL_FACE)) : p.disable(p.CULL_FACE)
    };
    this.supportsVertexTextures = function () {
        return va
    }
};
THREE.WebGLRenderTarget = function (b, c, e) {
    this.width = b;
    this.height = c;
    e = e || {};
    this.wrapS = e.wrapS !== void 0 ? e.wrapS : THREE.ClampToEdgeWrapping;
    this.wrapT = e.wrapT !== void 0 ? e.wrapT : THREE.ClampToEdgeWrapping;
    this.magFilter = e.magFilter !== void 0 ? e.magFilter : THREE.LinearFilter;
    this.minFilter = e.minFilter !== void 0 ? e.minFilter : THREE.LinearMipMapLinearFilter;
    this.offset = new THREE.Vector2(0, 0);
    this.repeat = new THREE.Vector2(1, 1);
    this.format = e.format !== void 0 ? e.format : THREE.RGBAFormat;
    this.type = e.type !== void 0 ? e.type :
        THREE.UnsignedByteType;
    this.depthBuffer = e.depthBuffer !== void 0 ? e.depthBuffer : true;
    this.stencilBuffer = e.stencilBuffer !== void 0 ? e.stencilBuffer : true
};
THREE.WebGLRenderTarget.prototype.clone = function () {
    var b = new THREE.WebGLRenderTarget(this.width, this.height);
    b.wrapS = this.wrapS;
    b.wrapT = this.wrapT;
    b.magFilter = this.magFilter;
    b.minFilter = this.minFilter;
    b.offset.copy(this.offset);
    b.repeat.copy(this.repeat);
    b.format = this.format;
    b.type = this.type;
    b.depthBuffer = this.depthBuffer;
    b.stencilBuffer = this.stencilBuffer;
    return b
};
THREE.WebGLRenderTargetCube = function (b, c, e) {
    THREE.WebGLRenderTarget.call(this, b, c, e);
    this.activeCubeFace = 0
};
THREE.WebGLRenderTargetCube.prototype = new THREE.WebGLRenderTarget;
THREE.WebGLRenderTargetCube.prototype.constructor = THREE.WebGLRenderTargetCube;
THREE.RenderableVertex = function () {
    this.positionWorld = new THREE.Vector3;
    this.positionScreen = new THREE.Vector4;
    this.visible = true
};
THREE.RenderableVertex.prototype.copy = function (b) {
    this.positionWorld.copy(b.positionWorld);
    this.positionScreen.copy(b.positionScreen)
};
THREE.RenderableFace3 = function () {
    this.v1 = new THREE.RenderableVertex;
    this.v2 = new THREE.RenderableVertex;
    this.v3 = new THREE.RenderableVertex;
    this.centroidWorld = new THREE.Vector3;
    this.centroidScreen = new THREE.Vector3;
    this.normalWorld = new THREE.Vector3;
    this.vertexNormalsWorld = [new THREE.Vector3, new THREE.Vector3, new THREE.Vector3];
    this.faceMaterials = this.meshMaterials = null;
    this.overdraw = false;
    this.uvs = [[]];
    this.z = null
};
THREE.RenderableFace4 = function () {
    this.v1 = new THREE.RenderableVertex;
    this.v2 = new THREE.RenderableVertex;
    this.v3 = new THREE.RenderableVertex;
    this.v4 = new THREE.RenderableVertex;
    this.centroidWorld = new THREE.Vector3;
    this.centroidScreen = new THREE.Vector3;
    this.normalWorld = new THREE.Vector3;
    this.vertexNormalsWorld = [new THREE.Vector3, new THREE.Vector3, new THREE.Vector3, new THREE.Vector3];
    this.faceMaterials = this.meshMaterials = null;
    this.overdraw = false;
    this.uvs = [[]];
    this.z = null
};
THREE.RenderableObject = function () {
    this.z = this.object = null
};
THREE.RenderableParticle = function () {
    this.rotation = this.z = this.y = this.x = null;
    this.scale = new THREE.Vector2;
    this.materials = null
};
THREE.RenderableLine = function () {
    this.z = null;
    this.v1 = new THREE.RenderableVertex;
    this.v2 = new THREE.RenderableVertex;
    this.materials = null
};
THREE.ColorUtils = {
    adjustHSV: function (b, c, e, f) {
        var k = THREE.ColorUtils.__hsv;
        THREE.ColorUtils.rgbToHsv(b, k);
        k.h = THREE.ColorUtils.clamp(k.h + c, 0, 1);
        k.s = THREE.ColorUtils.clamp(k.s + e, 0, 1);
        k.v = THREE.ColorUtils.clamp(k.v + f, 0, 1);
        b.setHSV(k.h, k.s, k.v)
    }, rgbToHsv: function (b, c) {
        var e = b.r, f = b.g, k = b.b, m = Math.max(Math.max(e, f), k), h = Math.min(Math.min(e, f), k);
        if (h == m) h = e = 0; else {
            var n = m - h, h = n / m, e = e == m ? (f - k) / n : f == m ? 2 + (k - e) / n : 4 + (e - f) / n;
            e /= 6;
            e < 0 && (e += 1);
            e > 1 && (e -= 1)
        }
        c === void 0 && (c = {h: 0, s: 0, v: 0});
        c.h = e;
        c.s = h;
        c.v = m;
        return c
    },
    clamp: function (b, c, e) {
        return b < c ? c : b > e ? e : b
    }
};
THREE.ColorUtils.__hsv = {h: 0, s: 0, v: 0};
THREE.GeometryUtils = {
    merge: function (b, c) {
        var e = c instanceof THREE.Mesh, f = b.vertices.length, k = e ? c.geometry : c, m = b.vertices, h = k.vertices,
            n = b.faces, o = k.faces, t = b.faceVertexUvs[0], k = k.faceVertexUvs[0];
        e && c.matrixAutoUpdate && c.updateMatrix();
        for (var u = 0, v = h.length; u < v; u++) {
            var x = new THREE.Vertex(h[u].position.clone());
            e && c.matrix.multiplyVector3(x.position);
            m.push(x)
        }
        u = 0;
        for (v = o.length; u < v; u++) {
            var h = o[u], w, B, A = h.vertexNormals, x = h.vertexColors;
            h instanceof THREE.Face3 ? w = new THREE.Face3(h.a + f, h.b + f, h.c +
                f) : h instanceof THREE.Face4 && (w = new THREE.Face4(h.a + f, h.b + f, h.c + f, h.d + f));
            w.normal.copy(h.normal);
            e = 0;
            for (m = A.length; e < m; e++) B = A[e], w.vertexNormals.push(B.clone());
            w.color.copy(h.color);
            e = 0;
            for (m = x.length; e < m; e++) B = x[e], w.vertexColors.push(B.clone());
            w.materials = h.materials.slice();
            w.centroid.copy(h.centroid);
            n.push(w)
        }
        u = 0;
        for (v = k.length; u < v; u++) {
            f = k[u];
            n = [];
            e = 0;
            for (m = f.length; e < m; e++) n.push(new THREE.UV(f[e].u, f[e].v));
            t.push(n)
        }
    }, clone: function (b) {
        var c = new THREE.Geometry, e, f = b.vertices, k = b.faces,
            m = b.faceVertexUvs[0], b = 0;
        for (e = f.length; b < e; b++) {
            var h = new THREE.Vertex(f[b].position.clone());
            c.vertices.push(h)
        }
        b = 0;
        for (e = k.length; b < e; b++) {
            var n = k[b], o, t, u = n.vertexNormals, v = n.vertexColors;
            n instanceof THREE.Face3 ? o = new THREE.Face3(n.a, n.b, n.c) : n instanceof THREE.Face4 && (o = new THREE.Face4(n.a, n.b, n.c, n.d));
            o.normal.copy(n.normal);
            f = 0;
            for (h = u.length; f < h; f++) t = u[f], o.vertexNormals.push(t.clone());
            o.color.copy(n.color);
            f = 0;
            for (h = v.length; f < h; f++) t = v[f], o.vertexColors.push(t.clone());
            o.materials = n.materials.slice();
            o.centroid.copy(n.centroid);
            c.faces.push(o)
        }
        b = 0;
        for (e = m.length; b < e; b++) {
            k = m[b];
            o = [];
            f = 0;
            for (h = k.length; f < h; f++) o.push(new THREE.UV(k[f].u, k[f].v));
            c.faceVertexUvs[0].push(o)
        }
        return c
    }, randomPointInTriangle: function (b, c, e) {
        var f, k, m, h = new THREE.Vector3, n = THREE.GeometryUtils.__v1;
        f = THREE.GeometryUtils.random();
        k = THREE.GeometryUtils.random();
        f + k > 1 && (f = 1 - f, k = 1 - k);
        m = 1 - f - k;
        h.copy(b);
        h.multiplyScalar(f);
        n.copy(c);
        n.multiplyScalar(k);
        h.addSelf(n);
        n.copy(e);
        n.multiplyScalar(m);
        h.addSelf(n);
        return h
    }, randomPointInFace: function (b,
                                    c, e) {
        var f, k, m;
        if (b instanceof THREE.Face3) return f = c.vertices[b.a].position, k = c.vertices[b.b].position, m = c.vertices[b.c].position, THREE.GeometryUtils.randomPointInTriangle(f, k, m); else if (b instanceof THREE.Face4) {
            f = c.vertices[b.a].position;
            k = c.vertices[b.b].position;
            m = c.vertices[b.c].position;
            var c = c.vertices[b.d].position, h;
            e ? b._area1 && b._area2 ? (e = b._area1, h = b._area2) : (e = THREE.GeometryUtils.triangleArea(f, k, c), h = THREE.GeometryUtils.triangleArea(k, m, c), b._area1 = e, b._area2 = h) : (e = THREE.GeometryUtils.triangleArea(f,
                k, c), h = THREE.GeometryUtils.triangleArea(k, m, c));
            return THREE.GeometryUtils.random() * (e + h) < e ? THREE.GeometryUtils.randomPointInTriangle(f, k, c) : THREE.GeometryUtils.randomPointInTriangle(k, m, c)
        }
    }, randomPointsInGeometry: function (b, c) {
        function e(b) {
            function e(c, f) {
                if (f < c) return c;
                var h = c + Math.floor((f - c) / 2);
                return t[h] > b ? e(c, h - 1) : t[h] < b ? e(h + 1, f) : h
            }

            return e(0, t.length - 1)
        }

        var f, k, m = b.faces, h = b.vertices, n = m.length, o = 0, t = [], u, v, x, w;
        for (k = 0; k < n; k++) {
            f = m[k];
            if (f instanceof THREE.Face3) u = h[f.a].position, v = h[f.b].position,
                x = h[f.c].position, f._area = THREE.GeometryUtils.triangleArea(u, v, x); else if (f instanceof THREE.Face4) u = h[f.a].position, v = h[f.b].position, x = h[f.c].position, w = h[f.d].position, f._area1 = THREE.GeometryUtils.triangleArea(u, v, w), f._area2 = THREE.GeometryUtils.triangleArea(v, x, w), f._area = f._area1 + f._area2;
            o += f._area;
            t[k] = o
        }
        f = [];
        h = {};
        for (k = 0; k < c; k++) n = THREE.GeometryUtils.random() * o, n = e(n), f[k] = THREE.GeometryUtils.randomPointInFace(m[n], b, true), h[n] ? h[n] += 1 : h[n] = 1;
        return f
    }, triangleArea: function (b, c, e) {
        var f, k =
            THREE.GeometryUtils.__v1;
        k.sub(b, c);
        f = k.length();
        k.sub(b, e);
        b = k.length();
        k.sub(c, e);
        e = k.length();
        c = 0.5 * (f + b + e);
        return Math.sqrt(c * (c - f) * (c - b) * (c - e))
    }, random16: function () {
        return (65280 * Math.random() + 255 * Math.random()) / 65535
    }
};
THREE.GeometryUtils.random = THREE.GeometryUtils.random16;
THREE.GeometryUtils.__v1 = new THREE.Vector3;
THREE.ImageUtils = {
    loadTexture: function (b, c, e) {
        var f = new Image, k = new THREE.Texture(f, c);
        f.onload = function () {
            k.needsUpdate = true;
            e && e(this)
        };
        f.crossOrigin = "";
        f.src = b;
        return k
    }, loadTextureCube: function (b, c, e) {
        var f, k = [], m = new THREE.Texture(k, c), c = k.loadCount = 0;
        for (f = b.length; c < f; ++c) k[c] = new Image, k[c].onload = function () {
            k.loadCount += 1;
            if (k.loadCount == 6) m.needsUpdate = true;
            e && e(this)
        }, k[c].crossOrigin = "", k[c].src = b[c];
        return m
    }, getNormalMap: function (b, c) {
        var e = function (b) {
            var e = Math.sqrt(b[0] * b[0] + b[1] *
                b[1] + b[2] * b[2]);
            return [b[0] / e, b[1] / e, b[2] / e]
        };
        c |= 1;
        var f = b.width, k = b.height, m = document.createElement("canvas");
        m.width = f;
        m.height = k;
        var h = m.getContext("2d");
        h.drawImage(b, 0, 0);
        for (var n = h.getImageData(0, 0, f, k).data, o = h.createImageData(f, k), t = o.data, u = 0; u < f; u++) for (var v = 1; v < k; v++) {
            var x = v - 1 < 0 ? k - 1 : v - 1, w = (v + 1) % k, B = u - 1 < 0 ? f - 1 : u - 1, A = (u + 1) % f, y = [],
                D = [0, 0, n[(v * f + u) * 4] / 255 * c];
            y.push([-1, 0, n[(v * f + B) * 4] / 255 * c]);
            y.push([-1, -1, n[(x * f + B) * 4] / 255 * c]);
            y.push([0, -1, n[(x * f + u) * 4] / 255 * c]);
            y.push([1, -1, n[(x * f + A) * 4] / 255 *
            c]);
            y.push([1, 0, n[(v * f + A) * 4] / 255 * c]);
            y.push([1, 1, n[(w * f + A) * 4] / 255 * c]);
            y.push([0, 1, n[(w * f + u) * 4] / 255 * c]);
            y.push([-1, 1, n[(w * f + B) * 4] / 255 * c]);
            x = [];
            B = y.length;
            for (w = 0; w < B; w++) {
                var A = y[w], C = y[(w + 1) % B], A = [A[0] - D[0], A[1] - D[1], A[2] - D[2]],
                    C = [C[0] - D[0], C[1] - D[1], C[2] - D[2]];
                x.push(e([A[1] * C[2] - A[2] * C[1], A[2] * C[0] - A[0] * C[2], A[0] * C[1] - A[1] * C[0]]))
            }
            y = [0, 0, 0];
            for (w = 0; w < x.length; w++) y[0] += x[w][0], y[1] += x[w][1], y[2] += x[w][2];
            y[0] /= x.length;
            y[1] /= x.length;
            y[2] /= x.length;
            D = (v * f + u) * 4;
            t[D] = (y[0] + 1) / 2 * 255 | 0;
            t[D + 1] = (y[1] +
                0.5) * 255 | 0;
            t[D + 2] = y[2] * 255 | 0;
            t[D + 3] = 255
        }
        h.putImageData(o, 0, 0);
        return m
    }
};
THREE.SceneUtils = {
    showHierarchy: function (b, c) {
        THREE.SceneUtils.traverseHierarchy(b, function (b) {
            b.visible = c
        })
    }, traverseHierarchy: function (b, c) {
        var e, f, k = b.children.length;
        for (f = 0; f < k; f++) e = b.children[f], c(e), THREE.SceneUtils.traverseHierarchy(e, c)
    }
};
if (THREE.WebGLRenderer) THREE.ShaderUtils = {
    lib: {
        fresnel: {
            uniforms: {
                mRefractionRatio: {type: "f", value: 1.02},
                mFresnelBias: {type: "f", value: 0.1},
                mFresnelPower: {type: "f", value: 2},
                mFresnelScale: {type: "f", value: 1},
                tCube: {type: "t", value: 1, texture: null}
            },
            fragmentShader: "uniform samplerCube tCube;\nvarying vec3 vReflect;\nvarying vec3 vRefract[3];\nvarying float vReflectionFactor;\nvoid main() {\nvec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\nvec4 refractedColor = vec4( 1.0, 1.0, 1.0, 1.0 );\nrefractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\nrefractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\nrefractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\nrefractedColor.a = 1.0;\ngl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\n}",
            vertexShader: "uniform float mRefractionRatio;\nuniform float mFresnelBias;\nuniform float mFresnelScale;\nuniform float mFresnelPower;\nvarying vec3 vReflect;\nvarying vec3 vRefract[3];\nvarying float vReflectionFactor;\nvoid main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\nvec3 nWorld = normalize ( mat3( objectMatrix[0].xyz, objectMatrix[1].xyz, objectMatrix[2].xyz ) * normal );\nvec3 I = mPosition.xyz - cameraPosition;\nvReflect = reflect( I, nWorld );\nvRefract[0] = refract( normalize( I ), nWorld, mRefractionRatio );\nvRefract[1] = refract( normalize( I ), nWorld, mRefractionRatio * 0.99 );\nvRefract[2] = refract( normalize( I ), nWorld, mRefractionRatio * 0.98 );\nvReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), nWorld ), mFresnelPower );\ngl_Position = projectionMatrix * mvPosition;\n}"
        },
        normal: {
            uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.fog, THREE.UniformsLib.lights, {
                enableAO: {type: "i", value: 0},
                enableDiffuse: {type: "i", value: 0},
                enableSpecular: {type: "i", value: 0},
                tDiffuse: {type: "t", value: 0, texture: null},
                tNormal: {type: "t", value: 2, texture: null},
                tSpecular: {type: "t", value: 3, texture: null},
                tAO: {type: "t", value: 4, texture: null},
                uNormalScale: {type: "f", value: 1},
                tDisplacement: {type: "t", value: 5, texture: null},
                uDisplacementBias: {type: "f", value: 0},
                uDisplacementScale: {type: "f", value: 1},
                uDiffuseColor: {
                    type: "c",
                    value: new THREE.Color(15658734)
                },
                uSpecularColor: {type: "c", value: new THREE.Color(1118481)},
                uAmbientColor: {type: "c", value: new THREE.Color(328965)},
                uShininess: {type: "f", value: 30},
                uOpacity: {type: "f", value: 1}
            }]),
            fragmentShader: ["uniform vec3 uAmbientColor;\nuniform vec3 uDiffuseColor;\nuniform vec3 uSpecularColor;\nuniform float uShininess;\nuniform float uOpacity;\nuniform bool enableDiffuse;\nuniform bool enableSpecular;\nuniform bool enableAO;\nuniform sampler2D tDiffuse;\nuniform sampler2D tNormal;\nuniform sampler2D tSpecular;\nuniform sampler2D tAO;\nuniform float uNormalScale;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\nvarying vec3 vViewPosition;",
                THREE.ShaderChunk.fog_pars_fragment, "void main() {\ngl_FragColor = vec4( 1.0 );\nvec4 mColor = vec4( uDiffuseColor, uOpacity );\nvec4 mSpecular = vec4( uSpecularColor, uOpacity );\nvec3 specularTex = vec3( 1.0 );\nvec3 normalTex = texture2D( tNormal, vUv ).xyz * 2.0 - 1.0;\nnormalTex.xy *= uNormalScale;\nnormalTex = normalize( normalTex );\nif( enableDiffuse )\ngl_FragColor = gl_FragColor * texture2D( tDiffuse, vUv );\nif( enableAO )\ngl_FragColor = gl_FragColor * texture2D( tAO, vUv );\nif( enableSpecular )\nspecularTex = texture2D( tSpecular, vUv ).xyz;\nmat3 tsb = mat3( vTangent, vBinormal, vNormal );\nvec3 finalNormal = tsb * normalTex;\nvec3 normal = normalize( finalNormal );\nvec3 viewPosition = normalize( vViewPosition );\n#if MAX_POINT_LIGHTS > 0\nvec4 pointTotal = vec4( vec3( 0.0 ), 1.0 );\nfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec3 pointVector = normalize( vPointLight[ i ].xyz );\nvec3 pointHalfVector = normalize( vPointLight[ i ].xyz + viewPosition );\nfloat pointDistance = vPointLight[ i ].w;\nfloat pointDotNormalHalf = dot( normal, pointHalfVector );\nfloat pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );\nfloat pointSpecularWeight = 0.0;\nif ( pointDotNormalHalf >= 0.0 )\npointSpecularWeight = specularTex.r * pow( pointDotNormalHalf, uShininess );\npointTotal  += pointDistance * vec4( pointLightColor[ i ], 1.0 ) * ( mColor * pointDiffuseWeight + mSpecular * pointSpecularWeight * pointDiffuseWeight );\n}\n#endif\n#if MAX_DIR_LIGHTS > 0\nvec4 dirTotal = vec4( vec3( 0.0 ), 1.0 );\nfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nvec3 dirHalfVector = normalize( lDirection.xyz + viewPosition );\nfloat dirDotNormalHalf = dot( normal, dirHalfVector );\nfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\nfloat dirSpecularWeight = 0.0;\nif ( dirDotNormalHalf >= 0.0 )\ndirSpecularWeight = specularTex.r * pow( dirDotNormalHalf, uShininess );\ndirTotal  += vec4( directionalLightColor[ i ], 1.0 ) * ( mColor * dirDiffuseWeight + mSpecular * dirSpecularWeight * dirDiffuseWeight );\n}\n#endif\nvec4 totalLight = vec4( ambientLightColor * uAmbientColor, uOpacity );\n#if MAX_DIR_LIGHTS > 0\ntotalLight += dirTotal;\n#endif\n#if MAX_POINT_LIGHTS > 0\ntotalLight += pointTotal;\n#endif\ngl_FragColor = gl_FragColor * totalLight;",
                THREE.ShaderChunk.fog_fragment, "}"].join("\n"),
            vertexShader: "attribute vec4 tangent;\n#ifdef VERTEX_TEXTURES\nuniform sampler2D tDisplacement;\nuniform float uDisplacementScale;\nuniform float uDisplacementBias;\n#endif\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\nvarying vec3 vViewPosition;\nvoid main() {\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\nvViewPosition = -mvPosition.xyz;\nvNormal = normalize( normalMatrix * normal );\nvTangent = normalize( normalMatrix * tangent.xyz );\nvBinormal = cross( vNormal, vTangent ) * tangent.w;\nvBinormal = normalize( vBinormal );\nvUv = uv;\n#if MAX_POINT_LIGHTS > 0\nfor( int i = 0; i < MAX_POINT_LIGHTS; i++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\nvPointLight[ i ] = vec4( lVector, lDistance );\n}\n#endif\n#ifdef VERTEX_TEXTURES\nvec3 dv = texture2D( tDisplacement, uv ).xyz;\nfloat df = uDisplacementScale * dv.x + uDisplacementBias;\nvec4 displacedPosition = vec4( vNormal.xyz * df, 0.0 ) + mvPosition;\ngl_Position = projectionMatrix * displacedPosition;\n#else\ngl_Position = projectionMatrix * mvPosition;\n#endif\n}"
        },
        cube: {
            uniforms: {tCube: {type: "t", value: 1, texture: null}},
            vertexShader: "varying vec3 vViewPosition;\nvoid main() {\nvec4 mPosition = objectMatrix * vec4( position, 1.0 );\nvViewPosition = cameraPosition - mPosition.xyz;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",
            fragmentShader: "uniform samplerCube tCube;\nvarying vec3 vViewPosition;\nvoid main() {\nvec3 wPos = cameraPosition - vViewPosition;\ngl_FragColor = textureCube( tCube, vec3( - wPos.x, wPos.yz ) );\n}"
        }
    }
};
THREE.Curve = function () {
};
THREE.Curve.prototype.getPoint = function () {
    console.log("Warning, getPoint() not implemented!");
    return null
};
THREE.Curve.prototype.getPointAt = function (b) {
    return this.getPoint(this.getUtoTmapping(b))
};
THREE.Curve.prototype.getPoints = function (b) {
    b || (b = 5);
    var c, e = [];
    for (c = 0; c <= b; c++) e.push(this.getPoint(c / b));
    return e
};
THREE.Curve.prototype.getSpacedPoints = function (b) {
    b || (b = 5);
    var c, e = [];
    for (c = 0; c <= b; c++) e.push(this.getPointAt(c / b));
    return e
};
THREE.Curve.prototype.getLength = function () {
    var b = this.getLengths();
    return b[b.length - 1]
};
THREE.Curve.prototype.getLengths = function (b) {
    b || (b = 200);
    if (this.cacheArcLengths && this.cacheArcLengths.length == b + 1) return this.cacheArcLengths;
    var c = [], e, f = this.getPoint(0), k, m = 0;
    c.push(0);
    for (k = 1; k <= b; k++) e = this.getPoint(k / b), m += e.distanceTo(f), c.push(m), f = e;
    return this.cacheArcLengths = c
};
THREE.Curve.prototype.getUtoTmapping = function (b, c) {
    var e = this.getLengths(), f = 0, k = e.length, m;
    m = c ? c : b * e[k - 1];
    time = Date.now();
    for (var h = 0, n = k - 1, o; h <= n;) if (f = Math.floor(h + (n - h) / 2), o = e[f] - m, o < 0) h = f + 1; else if (o > 0) n = f - 1; else {
        n = f;
        break
    }
    f = n;
    if (e[f] == m) return f / (k - 1);
    h = e[f];
    return (f + (m - h) / (e[f + 1] - h)) / (k - 1)
};
THREE.Curve.prototype.getNormalVector = function (b) {
    b = this.getTangent(b);
    return new THREE.Vector2(-b.y, b.x)
};
THREE.Curve.prototype.getTangent = function (b) {
    var c = b - 1.0E-4;
    b += 1.0E-4;
    c < 0 && (c = 0);
    b > 1 && (b = 1);
    var c = this.getPoint(c), b = this.getPoint(b), e = new THREE.Vector2;
    e.sub(b, c);
    return e.unit()
};
THREE.LineCurve = function (b, c) {
    b instanceof THREE.Vector2 ? (this.v1 = b, this.v2 = c) : THREE.LineCurve.oldConstructor.apply(this, arguments)
};
THREE.LineCurve.oldConstructor = function (b, c, e, f) {
    this.constructor(new THREE.Vector2(b, c), new THREE.Vector2(e, f))
};
THREE.LineCurve.prototype = new THREE.Curve;
THREE.LineCurve.prototype.constructor = THREE.LineCurve;
THREE.LineCurve.prototype.getPoint = function (b) {
    var c = new THREE.Vector2;
    c.sub(this.v2, this.v1);
    c.multiplyScalar(b).addSelf(this.v1);
    return c
};
THREE.LineCurve.prototype.getPointAt = function (b) {
    return this.getPoint(b)
};
THREE.LineCurve.prototype.getTangent = function () {
    var b = new THREE.Vector2;
    b.sub(this.v2, this.v1);
    b.normalize();
    return b
};
THREE.QuadraticBezierCurve = function (b, c, e) {
    if (!(c instanceof THREE.Vector2)) var f = Array.prototype.slice.call(arguments), b = new THREE.Vector2(f[0], f[1]),
        c = new THREE.Vector2(f[2], f[3]), e = new THREE.Vector2(f[4], f[5]);
    this.v0 = b;
    this.v1 = c;
    this.v2 = e
};
THREE.QuadraticBezierCurve.prototype = new THREE.Curve;
THREE.QuadraticBezierCurve.prototype.constructor = THREE.QuadraticBezierCurve;
THREE.QuadraticBezierCurve.prototype.getPoint = function (b) {
    var c;
    c = THREE.Shape.Utils.b2(b, this.v0.x, this.v1.x, this.v2.x);
    b = THREE.Shape.Utils.b2(b, this.v0.y, this.v1.y, this.v2.y);
    return new THREE.Vector2(c, b)
};
THREE.QuadraticBezierCurve.prototype.getTangent = function (b) {
    var c;
    c = THREE.Curve.Utils.tangentQuadraticBezier(b, this.v0.x, this.v1.x, this.v2.x);
    b = THREE.Curve.Utils.tangentQuadraticBezier(b, this.v0.y, this.v1.y, this.v2.y);
    c = new THREE.Vector2(c, b);
    c.normalize();
    return c
};
THREE.CubicBezierCurve = function (b, c, e, f) {
    if (!(c instanceof THREE.Vector2)) var k = Array.prototype.slice.call(arguments), b = new THREE.Vector2(k[0], k[1]),
        c = new THREE.Vector2(k[2], k[3]), e = new THREE.Vector2(k[4], k[5]), f = new THREE.Vector2(k[6], k[7]);
    this.v0 = b;
    this.v1 = c;
    this.v2 = e;
    this.v3 = f
};
THREE.CubicBezierCurve.prototype = new THREE.Curve;
THREE.CubicBezierCurve.prototype.constructor = THREE.CubicBezierCurve;
THREE.CubicBezierCurve.prototype.getPoint = function (b) {
    var c;
    c = THREE.Shape.Utils.b3(b, this.v0.x, this.v1.x, this.v2.x, this.v3.x);
    b = THREE.Shape.Utils.b3(b, this.v0.y, this.v1.y, this.v2.y, this.v3.y);
    return new THREE.Vector2(c, b)
};
THREE.CubicBezierCurve.prototype.getTangent = function (b) {
    var c;
    c = THREE.Curve.Utils.tangentCubicBezier(b, this.v0.x, this.v1.x, this.v2.x, this.v3.x);
    b = THREE.Curve.Utils.tangentCubicBezier(b, this.v0.y, this.v1.y, this.v2.y, this.v3.y);
    c = new THREE.Vector2(c, b);
    c.normalize();
    return c
};
THREE.SplineCurve = function (b) {
    this.points = b
};
THREE.SplineCurve.prototype = new THREE.Curve;
THREE.SplineCurve.prototype.constructor = THREE.SplineCurve;
THREE.SplineCurve.prototype.getPoint = function (b) {
    var c = new THREE.Vector2, e = [], f = this.points, k;
    k = (f.length - 1) * b;
    b = Math.floor(k);
    k -= b;
    e[0] = b == 0 ? b : b - 1;
    e[1] = b;
    e[2] = b > f.length - 2 ? b : b + 1;
    e[3] = b > f.length - 3 ? b : b + 2;
    c.x = THREE.Curve.Utils.interpolate(f[e[0]].x, f[e[1]].x, f[e[2]].x, f[e[3]].x, k);
    c.y = THREE.Curve.Utils.interpolate(f[e[0]].y, f[e[1]].y, f[e[2]].y, f[e[3]].y, k);
    return c
};
THREE.ArcCurve = function (b, c, e, f, k, m) {
    this.aX = b;
    this.aY = c;
    this.aRadius = e;
    this.aStartAngle = f;
    this.aEndAngle = k;
    this.aClockwise = m
};
THREE.ArcCurve.prototype = new THREE.Curve;
THREE.ArcCurve.prototype.constructor = THREE.ArcCurve;
THREE.ArcCurve.prototype.getPoint = function (b) {
    var c = this.aEndAngle - this.aStartAngle;
    this.aClockwise || (b = 1 - b);
    b = this.aStartAngle + b * c;
    return new THREE.Vector2(this.aX + this.aRadius * Math.cos(b), this.aY + this.aRadius * Math.sin(b))
};
THREE.Curve.Utils = {
    tangentQuadraticBezier: function (b, c, e, f) {
        return 2 * (1 - b) * (e - c) + 2 * b * (f - e)
    }, tangentCubicBezier: function (b, c, e, f, k) {
        return -3 * c * (1 - b) * (1 - b) + 3 * e * (1 - b) * (1 - b) - 6 * b * e * (1 - b) + 6 * b * f * (1 - b) - 3 * b * b * f + 3 * b * b * k
    }, tangentSpline: function (b) {
        return 6 * b * b - 6 * b + (3 * b * b - 4 * b + 1) + (-6 * b * b + 6 * b) + (3 * b * b - 2 * b)
    }, interpolate: function (b, c, e, f, k) {
        var b = (e - b) * 0.5, f = (f - c) * 0.5, m = k * k;
        return (2 * c - 2 * e + b + f) * k * m + (-3 * c + 3 * e - 2 * b - f) * m + b * k + c
    }
};
THREE.Curve.create = function (b, c) {
    b.prototype = new THREE.Curve;
    b.prototype.constructor = b;
    b.prototype.getPoint = c;
    return b
};
THREE.LineCurve3 = THREE.Curve.create(function (b, c) {
    this.v1 = b;
    this.v2 = c
}, function (b) {
    var c = new THREE.Vector3;
    c.sub(v2, v1);
    c.multiplyScalar(b);
    c.addSelf(this.v1);
    return c
});
THREE.QuadraticBezierCurve3 = THREE.Curve.create(function (b, c, e) {
    this.v0 = b;
    this.v1 = c;
    this.v2 = e
}, function (b) {
    var c, e;
    c = THREE.Shape.Utils.b2(b, this.v0.x, this.v1.x, this.v2.x);
    e = THREE.Shape.Utils.b2(b, this.v0.y, this.v1.y, this.v2.y);
    b = THREE.Shape.Utils.b2(b, this.v0.z, this.v1.z, this.v2.z);
    return new THREE.Vector3(c, e, b)
});
THREE.CurvePath = function () {
    this.curves = [];
    this.bends = []
};
THREE.CurvePath.prototype = new THREE.Curve;
THREE.CurvePath.prototype.constructor = THREE.CurvePath;
THREE.CurvePath.prototype.add = function (b) {
    this.curves.push(b)
};
THREE.CurvePath.prototype.checkConnection = function () {
};
THREE.CurvePath.prototype.closePath = function () {
};
THREE.CurvePath.prototype.getPoint = function (b) {
    for (var c = b * this.getLength(), e = this.getCurveLengths(), b = 0; b < e.length;) {
        if (e[b] >= c) return c = e[b] - c, b = this.curves[b], c = 1 - c / b.getLength(), b.getPointAt(c);
        b++
    }
    return null
};
THREE.CurvePath.prototype.getLength = function () {
    var b = this.getCurveLengths();
    return b[b.length - 1]
};
THREE.CurvePath.prototype.getCurveLengths = function () {
    if (this.cacheLengths && this.cacheLengths.length == this.curves.length) return this.cacheLengths;
    var b = [], c = 0, e, f = this.curves.length;
    for (e = 0; e < f; e++) c += this.curves[e].getLength(), b.push(c);
    return this.cacheLengths = b
};
THREE.CurvePath.prototype.getBoundingBox = function () {
    var b = this.getPoints(), c, e, f, k;
    c = e = Number.NEGATIVE_INFINITY;
    f = k = Number.POSITIVE_INFINITY;
    var m, h, n, o;
    o = new THREE.Vector2;
    h = 0;
    for (n = b.length; h < n; h++) {
        m = b[h];
        if (m.x > c) c = m.x; else if (m.x < f) f = m.x;
        if (m.y > e) e = m.y; else if (m.y < e) k = m.y;
        o.addSelf(m.x, m.y)
    }
    return {minX: f, minY: k, maxX: c, maxY: e, centroid: o.divideScalar(n)}
};
THREE.CurvePath.prototype.createPointsGeometry = function (b) {
    return this.createGeometry(this.getPoints(b, true))
};
THREE.CurvePath.prototype.createSpacedPointsGeometry = function (b) {
    return this.createGeometry(this.getSpacedPoints(b, true))
};
THREE.CurvePath.prototype.createGeometry = function (b) {
    for (var c = new THREE.Geometry, e = 0; e < b.length; e++) c.vertices.push(new THREE.Vertex(new THREE.Vector3(b[e].x, b[e].y, 0)));
    return c
};
THREE.CurvePath.prototype.addWrapPath = function (b) {
    this.bends.push(b)
};
THREE.CurvePath.prototype.getTransformedPoints = function (b, c) {
    var e = this.getPoints(b), f, k;
    if (!c) c = this.bends;
    f = 0;
    for (k = c.length; f < k; f++) e = this.getWrapPoints(e, c[f]);
    return e
};
THREE.CurvePath.prototype.getTransformedSpacedPoints = function (b, c) {
    var e = this.getSpacedPoints(b), f, k;
    if (!c) c = this.bends;
    f = 0;
    for (k = c.length; f < k; f++) e = this.getWrapPoints(e, c[f]);
    return e
};
THREE.CurvePath.prototype.getWrapPoints = function (b, c) {
    var e = this.getBoundingBox(), f, k, m, h, n, o;
    f = 0;
    for (k = b.length; f < k; f++) m = b[f], h = m.x, n = m.y, o = h / e.maxX, o = c.getUtoTmapping(o, h), h = c.getPoint(o), n = c.getNormalVector(o).multiplyScalar(n), m.x = h.x + n.x, m.y = h.y + n.y;
    return b
};
THREE.Path = function (b) {
    THREE.CurvePath.call(this);
    this.actions = [];
    b && this.fromPoints(b)
};
THREE.Path.prototype = new THREE.CurvePath;
THREE.Path.prototype.constructor = THREE.Path;
THREE.PathActions = {
    MOVE_TO: "moveTo",
    LINE_TO: "lineTo",
    QUADRATIC_CURVE_TO: "quadraticCurveTo",
    BEZIER_CURVE_TO: "bezierCurveTo",
    CSPLINE_THRU: "splineThru",
    ARC: "arc"
};
THREE.Path.prototype.fromPoints = function (b) {
    this.moveTo(b[0].x, b[0].y);
    var c, e = b.length;
    for (c = 1; c < e; c++) this.lineTo(b[c].x, b[c].y)
};
THREE.Path.prototype.moveTo = function () {
    var b = Array.prototype.slice.call(arguments);
    this.actions.push({action: THREE.PathActions.MOVE_TO, args: b})
};
THREE.Path.prototype.lineTo = function (b, c) {
    var e = Array.prototype.slice.call(arguments), f = this.actions[this.actions.length - 1].args;
    this.curves.push(new THREE.LineCurve(new THREE.Vector2(f[f.length - 2], f[f.length - 1]), new THREE.Vector2(b, c)));
    this.actions.push({action: THREE.PathActions.LINE_TO, args: e})
};
THREE.Path.prototype.quadraticCurveTo = function (b, c, e, f) {
    var k = Array.prototype.slice.call(arguments), m = this.actions[this.actions.length - 1].args;
    this.curves.push(new THREE.QuadraticBezierCurve(new THREE.Vector2(m[m.length - 2], m[m.length - 1]), new THREE.Vector2(b, c), new THREE.Vector2(e, f)));
    this.actions.push({action: THREE.PathActions.QUADRATIC_CURVE_TO, args: k})
};
THREE.Path.prototype.bezierCurveTo = function (b, c, e, f, k, m) {
    var h = Array.prototype.slice.call(arguments), n = this.actions[this.actions.length - 1].args;
    this.curves.push(new THREE.CubicBezierCurve(new THREE.Vector2(n[n.length - 2], n[n.length - 1]), new THREE.Vector2(b, c), new THREE.Vector2(e, f), new THREE.Vector2(k, m)));
    this.actions.push({action: THREE.PathActions.BEZIER_CURVE_TO, args: h})
};
THREE.Path.prototype.splineThru = function (b) {
    var c = Array.prototype.slice.call(arguments), e = this.actions[this.actions.length - 1].args,
        e = [new THREE.Vector2(e[e.length - 2], e[e.length - 1])], e = e.concat(b);
    this.curves.push(new THREE.SplineCurve(e));
    this.actions.push({action: THREE.PathActions.CSPLINE_THRU, args: c})
};
THREE.Path.prototype.arc = function (b, c, e, f, k, m) {
    var h = Array.prototype.slice.call(arguments);
    this.curves.push(new THREE.ArcCurve(b, c, e, f, k, m));
    this.actions.push({action: THREE.PathActions.ARC, args: h})
};
THREE.Path.prototype.getSpacedPoints = function (b) {
    b || (b = 40);
    for (var c = [], e = 0; e < b; e++) c.push(this.getPoint(e / b));
    return c
};
THREE.Path.prototype.getPoints = function (b, c) {
    var b = b || 12, e = [], f, k, m, h, n, o, t, u, v, x, w, B, A;
    f = 0;
    for (k = this.actions.length; f < k; f++) switch (m = this.actions[f], h = m.action, m = m.args, h) {
        case THREE.PathActions.LINE_TO:
            e.push(new THREE.Vector2(m[0], m[1]));
            break;
        case THREE.PathActions.QUADRATIC_CURVE_TO:
            n = m[2];
            o = m[3];
            v = m[0];
            x = m[1];
            e.length > 0 ? (h = e[e.length - 1], w = h.x, B = h.y) : (h = this.actions[f - 1].args, w = h[h.length - 2], B = h[h.length - 1]);
            for (h = 1; h <= b; h++) A = h / b, m = THREE.Shape.Utils.b2(A, w, v, n), A = THREE.Shape.Utils.b2(A, B, x,
                o), e.push(new THREE.Vector2(m, A));
            break;
        case THREE.PathActions.BEZIER_CURVE_TO:
            n = m[4];
            o = m[5];
            v = m[0];
            x = m[1];
            t = m[2];
            u = m[3];
            e.length > 0 ? (h = e[e.length - 1], w = h.x, B = h.y) : (h = this.actions[f - 1].args, w = h[h.length - 2], B = h[h.length - 1]);
            for (h = 1; h <= b; h++) A = h / b, m = THREE.Shape.Utils.b3(A, w, v, t, n), A = THREE.Shape.Utils.b3(A, B, x, u, o), e.push(new THREE.Vector2(m, A));
            break;
        case THREE.PathActions.CSPLINE_THRU:
            h = this.actions[f - 1].args;
            h = [new THREE.Vector2(h[h.length - 2], h[h.length - 1])];
            A = b * m[0].length;
            h = h.concat(m[0]);
            m = new THREE.SplineCurve(h);
            for (h = 1; h <= A; h++) e.push(m.getPointAt(h / A));
            break;
        case THREE.PathActions.ARC:
            h = this.actions[f - 1].args;
            n = m[0];
            o = m[1];
            t = m[2];
            v = m[3];
            A = m[4];
            x = !!m[5];
            u = h[h.length - 2];
            w = h[h.length - 1];
            h.length == 0 && (u = w = 0);
            B = A - v;
            var y = b * 2;
            for (h = 1; h <= y; h++) A = h / y, x || (A = 1 - A), A = v + A * B, m = u + n + t * Math.cos(A), A = w + o + t * Math.sin(A), e.push(new THREE.Vector2(m, A))
    }
    c && e.push(e[0]);
    return e
};
THREE.Path.prototype.transform = function (b, c) {
    this.getBoundingBox();
    return this.getWrapPoints(this.getPoints(c), b)
};
THREE.Path.prototype.nltransform = function (b, c, e, f, k, m) {
    var h = this.getPoints(), n, o, t, u, v;
    n = 0;
    for (o = h.length; n < o; n++) t = h[n], u = t.x, v = t.y, t.x = b * u + c * v + e, t.y = f * v + k * u + m;
    return h
};
THREE.Path.prototype.debug = function (b) {
    var c = this.getBoundingBox();
    b || (b = document.createElement("canvas"), b.setAttribute("width", c.maxX + 100), b.setAttribute("height", c.maxY + 100), document.body.appendChild(b));
    c = b.getContext("2d");
    c.fillStyle = "white";
    c.fillRect(0, 0, b.width, b.height);
    c.strokeStyle = "black";
    c.beginPath();
    var e, f, k, b = 0;
    for (e = this.actions.length; b < e; b++) f = this.actions[b], k = f.args, f = f.action, f != THREE.PathActions.CSPLINE_THRU && c[f].apply(c, k);
    c.stroke();
    c.closePath();
    c.strokeStyle = "red";
    f =
        this.getPoints();
    b = 0;
    for (e = f.length; b < e; b++) k = f[b], c.beginPath(), c.arc(k.x, k.y, 1.5, 0, Math.PI * 2, false), c.stroke(), c.closePath()
};
THREE.Path.prototype.toShapes = function () {
    var b, c, e, f, k = [], m = new THREE.Path;
    b = 0;
    for (c = this.actions.length; b < c; b++) e = this.actions[b], f = e.args, e = e.action, e == THREE.PathActions.MOVE_TO && m.actions.length != 0 && (k.push(m), m = new THREE.Path), m[e].apply(m, f);
    m.actions.length != 0 && k.push(m);
    if (k.length == 0) return [];
    var h, m = [];
    if (THREE.Shape.Utils.isClockWise(k[0].getPoints())) {
        b = 0;
        for (c = k.length; b < c; b++) f = k[b], THREE.Shape.Utils.isClockWise(f.getPoints()) ? (h && m.push(h), h = new THREE.Shape, h.actions = f.actions, h.curves =
            f.curves) : h.holes.push(f);
        m.push(h)
    } else {
        h = new THREE.Shape;
        b = 0;
        for (c = k.length; b < c; b++) f = k[b], THREE.Shape.Utils.isClockWise(f.getPoints()) ? (h.actions = f.actions, h.curves = f.curves, m.push(h), h = new THREE.Shape) : h.holes.push(f)
    }
    return m
};
THREE.Shape = function () {
    THREE.Path.apply(this, arguments);
    this.holes = []
};
THREE.Shape.prototype = new THREE.Path;
THREE.Shape.prototype.constructor = THREE.Path;
THREE.Shape.prototype.extrude = function (b) {
    return new THREE.ExtrudeGeometry(this, b)
};
THREE.Shape.prototype.getPointsHoles = function (b) {
    var c, e = this.holes.length, f = [];
    for (c = 0; c < e; c++) f[c] = this.holes[c].getTransformedPoints(b, this.bends);
    return f
};
THREE.Shape.prototype.getSpacedPointsHoles = function (b) {
    var c, e = this.holes.length, f = [];
    for (c = 0; c < e; c++) f[c] = this.holes[c].getTransformedSpacedPoints(b, this.bends);
    return f
};
THREE.Shape.prototype.extractAllPoints = function (b) {
    return {shape: this.getTransformedPoints(b), holes: this.getPointsHoles(b)}
};
THREE.Shape.prototype.extractAllSpacedPoints = function (b) {
    return {shape: this.getTransformedSpacedPoints(b), holes: this.getSpacedPointsHoles(b)}
};
THREE.Shape.Utils = {
    removeHoles: function (b, c) {
        var e = b.concat(), f = e.concat(), k, m, h, n, o, t, u, v, x, w, B = [];
        for (o = 0; o < c.length; o++) {
            t = c[o];
            f = f.concat(t);
            m = Number.POSITIVE_INFINITY;
            for (k = 0; k < t.length; k++) {
                x = t[k];
                w = [];
                for (v = 0; v < e.length; v++) u = e[v], u = x.distanceToSquared(u), w.push(u), u < m && (m = u, h = k, n = v)
            }
            k = n - 1 >= 0 ? n - 1 : e.length - 1;
            m = h - 1 >= 0 ? h - 1 : t.length - 1;
            var A = [t[h], e[n], e[k]];
            v = THREE.FontUtils.Triangulate.area(A);
            var y = [t[h], t[m], e[n]];
            x = THREE.FontUtils.Triangulate.area(y);
            w = n;
            u = h;
            n += 1;
            h += -1;
            n < 0 && (n += e.length);
            n %=
                e.length;
            h < 0 && (h += t.length);
            h %= t.length;
            k = n - 1 >= 0 ? n - 1 : e.length - 1;
            m = h - 1 >= 0 ? h - 1 : t.length - 1;
            A = [t[h], e[n], e[k]];
            A = THREE.FontUtils.Triangulate.area(A);
            y = [t[h], t[m], e[n]];
            y = THREE.FontUtils.Triangulate.area(y);
            v + x > A + y && (n = w, h = u, n < 0 && (n += e.length), n %= e.length, h < 0 && (h += t.length), h %= t.length, k = n - 1 >= 0 ? n - 1 : e.length - 1, m = h - 1 >= 0 ? h - 1 : t.length - 1);
            v = e.slice(0, n);
            x = e.slice(n);
            w = t.slice(h);
            u = t.slice(0, h);
            m = [t[h], t[m], e[n]];
            B.push([t[h], e[n], e[k]]);
            B.push(m);
            e = v.concat(w).concat(u).concat(x)
        }
        return {
            shape: e, isolatedPts: B,
            allpoints: f
        }
    }, triangulateShape: function (b, c) {
        var e = THREE.Shape.Utils.removeHoles(b, c), f = e.allpoints, k = e.isolatedPts,
            e = THREE.FontUtils.Triangulate(e.shape, false), m, h, n, o, t = {};
        m = 0;
        for (h = f.length; m < h; m++) o = f[m].x + ":" + f[m].y, t[o] !== void 0 && console.log("Duplicate point", o), t[o] = m;
        m = 0;
        for (h = e.length; m < h; m++) {
            n = e[m];
            for (f = 0; f < 3; f++) o = n[f].x + ":" + n[f].y, o = t[o], o !== void 0 && (n[f] = o)
        }
        m = 0;
        for (h = k.length; m < h; m++) {
            n = k[m];
            for (f = 0; f < 3; f++) o = n[f].x + ":" + n[f].y, o = t[o], o !== void 0 && (n[f] = o)
        }
        return e.concat(k)
    }, isClockWise: function (b) {
        return THREE.FontUtils.Triangulate.area(b) <
            0
    }, b2p0: function (b, c) {
        var e = 1 - b;
        return e * e * c
    }, b2p1: function (b, c) {
        return 2 * (1 - b) * b * c
    }, b2p2: function (b, c) {
        return b * b * c
    }, b2: function (b, c, e, f) {
        return this.b2p0(b, c) + this.b2p1(b, e) + this.b2p2(b, f)
    }, b3p0: function (b, c) {
        var e = 1 - b;
        return e * e * e * c
    }, b3p1: function (b, c) {
        var e = 1 - b;
        return 3 * e * e * b * c
    }, b3p2: function (b, c) {
        return 3 * (1 - b) * b * b * c
    }, b3p3: function (b, c) {
        return b * b * b * c
    }, b3: function (b, c, e, f, k) {
        return this.b3p0(b, c) + this.b3p1(b, e) + this.b3p2(b, f) + this.b3p3(b, k)
    }
};
THREE.TextPath = function (b, c) {
    THREE.Path.call(this);
    this.parameters = c || {};
    this.set(b)
};
THREE.TextPath.prototype.set = function (b, c) {
    this.text = b;
    var c = c || this.parameters, e = c.curveSegments !== void 0 ? c.curveSegments : 4,
        f = c.font !== void 0 ? c.font : "helvetiker", k = c.weight !== void 0 ? c.weight : "normal",
        m = c.style !== void 0 ? c.style : "normal";
    THREE.FontUtils.size = c.size !== void 0 ? c.size : 100;
    THREE.FontUtils.divisions = e;
    THREE.FontUtils.face = f;
    THREE.FontUtils.weight = k;
    THREE.FontUtils.style = m
};
THREE.TextPath.prototype.toShapes = function () {
    for (var b = THREE.FontUtils.drawText(this.text).paths, c = [], e = 0, f = b.length; e < f; e++) c = c.concat(b[e].toShapes());
    return c
};
THREE.AnimationHandler = function () {
    var b = [], c = {}, e = {
        update: function (e) {
            for (var c = 0; c < b.length; c++) b[c].update(e)
        }, addToUpdate: function (e) {
            b.indexOf(e) === -1 && b.push(e)
        }, removeFromUpdate: function (e) {
            e = b.indexOf(e);
            e !== -1 && b.splice(e, 1)
        }, add: function (b) {
            c[b.name] !== void 0 && console.log("THREE.AnimationHandler.add: Warning! " + b.name + " already exists in library. Overwriting.");
            c[b.name] = b;
            if (b.initialized !== true) {
                for (var e = 0; e < b.hierarchy.length; e++) {
                    for (var f = 0; f < b.hierarchy[e].keys.length; f++) {
                        if (b.hierarchy[e].keys[f].time <
                            0) b.hierarchy[e].keys[f].time = 0;
                        if (b.hierarchy[e].keys[f].rot !== void 0 && !(b.hierarchy[e].keys[f].rot instanceof THREE.Quaternion)) {
                            var n = b.hierarchy[e].keys[f].rot;
                            b.hierarchy[e].keys[f].rot = new THREE.Quaternion(n[0], n[1], n[2], n[3])
                        }
                    }
                    if (b.hierarchy[e].keys[0].morphTargets !== void 0) {
                        n = {};
                        for (f = 0; f < b.hierarchy[e].keys.length; f++) for (var o = 0; o < b.hierarchy[e].keys[f].morphTargets.length; o++) {
                            var t = b.hierarchy[e].keys[f].morphTargets[o];
                            n[t] = -1
                        }
                        b.hierarchy[e].usedMorphTargets = n;
                        for (f = 0; f < b.hierarchy[e].keys.length; f++) {
                            var u =
                                {};
                            for (t in n) {
                                for (o = 0; o < b.hierarchy[e].keys[f].morphTargets.length; o++) if (b.hierarchy[e].keys[f].morphTargets[o] === t) {
                                    u[t] = b.hierarchy[e].keys[f].morphTargetsInfluences[o];
                                    break
                                }
                                o === b.hierarchy[e].keys[f].morphTargets.length && (u[t] = 0)
                            }
                            b.hierarchy[e].keys[f].morphTargetsInfluences = u
                        }
                    }
                    for (f = 1; f < b.hierarchy[e].keys.length; f++) b.hierarchy[e].keys[f].time === b.hierarchy[e].keys[f - 1].time && (b.hierarchy[e].keys.splice(f, 1), f--);
                    for (f = 1; f < b.hierarchy[e].keys.length; f++) b.hierarchy[e].keys[f].index = f
                }
                f = parseInt(b.length *
                    b.fps, 10);
                b.JIT = {};
                b.JIT.hierarchy = [];
                for (e = 0; e < b.hierarchy.length; e++) b.JIT.hierarchy.push(Array(f));
                b.initialized = true
            }
        }, get: function (b) {
            if (typeof b === "string") return c[b] ? c[b] : (console.log("THREE.AnimationHandler.get: Couldn't find animation " + b), null)
        }, parse: function (b) {
            var e = [];
            if (b instanceof THREE.SkinnedMesh) for (var c = 0; c < b.bones.length; c++) e.push(b.bones[c]); else f(b, e);
            return e
        }
    }, f = function (b, e) {
        e.push(b);
        for (var c = 0; c < b.children.length; c++) f(b.children[c], e)
    };
    e.LINEAR = 0;
    e.CATMULLROM = 1;
    e.CATMULLROM_FORWARD = 2;
    return e
}();
THREE.Animation = function (b, c, e, f) {
    this.root = b;
    this.data = THREE.AnimationHandler.get(c);
    this.hierarchy = THREE.AnimationHandler.parse(b);
    this.currentTime = 0;
    this.timeScale = 1;
    this.isPlaying = false;
    this.loop = this.isPaused = true;
    this.interpolationType = e !== void 0 ? e : THREE.AnimationHandler.LINEAR;
    this.JITCompile = f !== void 0 ? f : true;
    this.points = [];
    this.target = new THREE.Vector3
};
THREE.Animation.prototype.play = function (b, c) {
    if (!this.isPlaying) {
        this.isPlaying = true;
        this.loop = b !== void 0 ? b : true;
        this.currentTime = c !== void 0 ? c : 0;
        var e, f = this.hierarchy.length, k;
        for (e = 0; e < f; e++) {
            k = this.hierarchy[e];
            if (this.interpolationType !== THREE.AnimationHandler.CATMULLROM_FORWARD) k.useQuaternion = true;
            k.matrixAutoUpdate = true;
            if (k.animationCache === void 0) k.animationCache = {}, k.animationCache.prevKey = {
                pos: 0,
                rot: 0,
                scl: 0
            }, k.animationCache.nextKey = {pos: 0, rot: 0, scl: 0}, k.animationCache.originalMatrix = k instanceof
            THREE.Bone ? k.skinMatrix : k.matrix;
            var m = k.animationCache.prevKey;
            k = k.animationCache.nextKey;
            m.pos = this.data.hierarchy[e].keys[0];
            m.rot = this.data.hierarchy[e].keys[0];
            m.scl = this.data.hierarchy[e].keys[0];
            k.pos = this.getNextKeyWith("pos", e, 1);
            k.rot = this.getNextKeyWith("rot", e, 1);
            k.scl = this.getNextKeyWith("scl", e, 1)
        }
        this.update(0)
    }
    this.isPaused = false;
    THREE.AnimationHandler.addToUpdate(this)
};
THREE.Animation.prototype.pause = function () {
    this.isPaused ? THREE.AnimationHandler.addToUpdate(this) : THREE.AnimationHandler.removeFromUpdate(this);
    this.isPaused = !this.isPaused
};
THREE.Animation.prototype.stop = function () {
    this.isPaused = this.isPlaying = false;
    THREE.AnimationHandler.removeFromUpdate(this);
    for (var b = 0; b < this.hierarchy.length; b++) if (this.hierarchy[b].animationCache !== void 0) this.hierarchy[b] instanceof THREE.Bone ? this.hierarchy[b].skinMatrix = this.hierarchy[b].animationCache.originalMatrix : this.hierarchy[b].matrix = this.hierarchy[b].animationCache.originalMatrix, delete this.hierarchy[b].animationCache
};
THREE.Animation.prototype.update = function (b) {
    if (this.isPlaying) {
        var c = ["pos", "rot", "scl"], e, f, k, m, h, n, o, t, u = this.data.JIT.hierarchy, v, x;
        this.currentTime += b * this.timeScale;
        x = this.currentTime;
        v = this.currentTime %= this.data.length;
        t = parseInt(Math.min(v * this.data.fps, this.data.length * this.data.fps), 10);
        for (var w = 0, B = this.hierarchy.length; w < B; w++) if (b = this.hierarchy[w], o = b.animationCache, this.JITCompile && u[w][t] !== void 0) b instanceof THREE.Bone ? (b.skinMatrix = u[w][t], b.matrixAutoUpdate = false, b.matrixWorldNeedsUpdate =
            false) : (b.matrix = u[w][t], b.matrixAutoUpdate = false, b.matrixWorldNeedsUpdate = true); else {
            if (this.JITCompile) b instanceof THREE.Bone ? b.skinMatrix = b.animationCache.originalMatrix : b.matrix = b.animationCache.originalMatrix;
            for (var A = 0; A < 3; A++) {
                e = c[A];
                h = o.prevKey[e];
                n = o.nextKey[e];
                if (n.time <= x) {
                    if (v < x) if (this.loop) {
                        h = this.data.hierarchy[w].keys[0];
                        for (n = this.getNextKeyWith(e, w, 1); n.time < v;) h = n, n = this.getNextKeyWith(e, w, n.index + 1)
                    } else {
                        this.stop();
                        return
                    } else {
                        do h = n, n = this.getNextKeyWith(e, w, n.index + 1); while (n.time <
                        v)
                    }
                    o.prevKey[e] = h;
                    o.nextKey[e] = n
                }
                b.matrixAutoUpdate = true;
                b.matrixWorldNeedsUpdate = true;
                f = (v - h.time) / (n.time - h.time);
                k = h[e];
                m = n[e];
                if (f < 0 || f > 1) console.log("THREE.Animation.update: Warning! Scale out of bounds:" + f + " on bone " + w), f = f < 0 ? 0 : 1;
                if (e === "pos") if (e = b.position, this.interpolationType === THREE.AnimationHandler.LINEAR) e.x = k[0] + (m[0] - k[0]) * f, e.y = k[1] + (m[1] - k[1]) * f, e.z = k[2] + (m[2] - k[2]) * f; else {
                    if (this.interpolationType === THREE.AnimationHandler.CATMULLROM || this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD) if (this.points[0] =
                        this.getPrevKeyWith("pos", w, h.index - 1).pos, this.points[1] = k, this.points[2] = m, this.points[3] = this.getNextKeyWith("pos", w, n.index + 1).pos, f = f * 0.33 + 0.33, k = this.interpolateCatmullRom(this.points, f), e.x = k[0], e.y = k[1], e.z = k[2], this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD) f = this.interpolateCatmullRom(this.points, f * 1.01), this.target.set(f[0], f[1], f[2]), this.target.subSelf(e), this.target.y = 0, this.target.normalize(), f = Math.atan2(this.target.x, this.target.z), b.rotation.set(0, f, 0)
                } else if (e ===
                    "rot") THREE.Quaternion.slerp(k, m, b.quaternion, f); else if (e === "scl") e = b.scale, e.x = k[0] + (m[0] - k[0]) * f, e.y = k[1] + (m[1] - k[1]) * f, e.z = k[2] + (m[2] - k[2]) * f
            }
        }
        if (this.JITCompile && u[0][t] === void 0) {
            this.hierarchy[0].update(void 0, true);
            for (w = 0; w < this.hierarchy.length; w++) u[w][t] = this.hierarchy[w] instanceof THREE.Bone ? this.hierarchy[w].skinMatrix.clone() : this.hierarchy[w].matrix.clone()
        }
    }
};
THREE.Animation.prototype.interpolateCatmullRom = function (b, c) {
    var e = [], f = [], k, m, h, n, o, t;
    k = (b.length - 1) * c;
    m = Math.floor(k);
    k -= m;
    e[0] = m == 0 ? m : m - 1;
    e[1] = m;
    e[2] = m > b.length - 2 ? m : m + 1;
    e[3] = m > b.length - 3 ? m : m + 2;
    m = b[e[0]];
    n = b[e[1]];
    o = b[e[2]];
    t = b[e[3]];
    e = k * k;
    h = k * e;
    f[0] = this.interpolate(m[0], n[0], o[0], t[0], k, e, h);
    f[1] = this.interpolate(m[1], n[1], o[1], t[1], k, e, h);
    f[2] = this.interpolate(m[2], n[2], o[2], t[2], k, e, h);
    return f
};
THREE.Animation.prototype.interpolate = function (b, c, e, f, k, m, h) {
    b = (e - b) * 0.5;
    f = (f - c) * 0.5;
    return (2 * (c - e) + b + f) * h + (-3 * (c - e) - 2 * b - f) * m + b * k + c
};
THREE.Animation.prototype.getNextKeyWith = function (b, c, e) {
    var f = this.data.hierarchy[c].keys;
    for (this.interpolationType === THREE.AnimationHandler.CATMULLROM || this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ? e = e < f.length - 1 ? e : f.length - 1 : e %= f.length; e < f.length; e++) if (f[e][b] !== void 0) return f[e];
    return this.data.hierarchy[c].keys[0]
};
THREE.Animation.prototype.getPrevKeyWith = function (b, c, e) {
    for (var f = this.data.hierarchy[c].keys, e = this.interpolationType === THREE.AnimationHandler.CATMULLROM || this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ? e > 0 ? e : 0 : e >= 0 ? e : e + f.length; e >= 0; e--) if (f[e][b] !== void 0) return f[e];
    return this.data.hierarchy[c].keys[f.length - 1]
};
THREE.FirstPersonCamera = function (b) {
    function c(b, c) {
        return function () {
            c.apply(b, arguments)
        }
    }

    THREE.Camera.call(this, b.fov, b.aspect, b.near, b.far, b.target);
    this.movementSpeed = 1;
    this.lookSpeed = 0.005;
    this.noFly = false;
    this.lookVertical = true;
    this.autoForward = false;
    this.activeLook = true;
    this.heightSpeed = false;
    this.heightCoef = 1;
    this.heightMin = 0;
    this.constrainVertical = false;
    this.verticalMin = 0;
    this.verticalMax = 3.14;
    this.domElement = document;
    this.lastUpdate = (new Date).getTime();
    this.tdiff = 0;
    if (b) {
        if (b.movementSpeed !==
            void 0) this.movementSpeed = b.movementSpeed;
        if (b.lookSpeed !== void 0) this.lookSpeed = b.lookSpeed;
        if (b.noFly !== void 0) this.noFly = b.noFly;
        if (b.lookVertical !== void 0) this.lookVertical = b.lookVertical;
        if (b.autoForward !== void 0) this.autoForward = b.autoForward;
        if (b.activeLook !== void 0) this.activeLook = b.activeLook;
        if (b.heightSpeed !== void 0) this.heightSpeed = b.heightSpeed;
        if (b.heightCoef !== void 0) this.heightCoef = b.heightCoef;
        if (b.heightMin !== void 0) this.heightMin = b.heightMin;
        if (b.heightMax !== void 0) this.heightMax =
            b.heightMax;
        if (b.constrainVertical !== void 0) this.constrainVertical = b.constrainVertical;
        if (b.verticalMin !== void 0) this.verticalMin = b.verticalMin;
        if (b.verticalMax !== void 0) this.verticalMax = b.verticalMax;
        if (b.domElement !== void 0) this.domElement = b.domElement
    }
    this.theta = this.phi = this.lon = this.lat = this.mouseY = this.mouseX = this.autoSpeedFactor = 0;
    this.mouseDragOn = this.freeze = this.moveRight = this.moveLeft = this.moveBackward = this.moveForward = false;
    this.windowHalfX = window.innerWidth / 2;
    this.windowHalfY = window.innerHeight /
        2;
    this.onMouseDown = function (b) {
        b.preventDefault();
        b.stopPropagation();
        if (this.activeLook) switch (b.button) {
            case 0:
                this.moveForward = true;
                break;
            case 2:
                this.moveBackward = true
        }
        this.mouseDragOn = true
    };
    this.onMouseUp = function (b) {
        b.preventDefault();
        b.stopPropagation();
        if (this.activeLook) switch (b.button) {
            case 0:
                this.moveForward = false;
                break;
            case 2:
                this.moveBackward = false
        }
        this.mouseDragOn = false
    };
    this.onMouseMove = function (b) {
        this.mouseX = b.clientX - this.windowHalfX;
        this.mouseY = b.clientY - this.windowHalfY
    };
    this.onKeyDown =
        function (b) {
            switch (b.keyCode) {
                case 38:
                case 87:
                    this.moveForward = true;
                    break;
                case 37:
                case 65:
                    this.moveLeft = true;
                    break;
                case 40:
                case 83:
                    this.moveBackward = true;
                    break;
                case 39:
                case 68:
                    this.moveRight = true;
                    break;
                case 82:
                    this.moveUp = true;
                    break;
                case 70:
                    this.moveDown = true;
                    break;
                case 81:
                    this.freeze = !this.freeze
            }
        };
    this.onKeyUp = function (b) {
        switch (b.keyCode) {
            case 38:
            case 87:
                this.moveForward = false;
                break;
            case 37:
            case 65:
                this.moveLeft = false;
                break;
            case 40:
            case 83:
                this.moveBackward = false;
                break;
            case 39:
            case 68:
                this.moveRight =
                    false;
                break;
            case 82:
                this.moveUp = false;
                break;
            case 70:
                this.moveDown = false
        }
    };
    this.update = function () {
        var b = (new Date).getTime();
        this.tdiff = (b - this.lastUpdate) / 1E3;
        this.lastUpdate = b;
        if (!this.freeze) {
            this.autoSpeedFactor = this.heightSpeed ? this.tdiff * ((this.position.y < this.heightMin ? this.heightMin : this.position.y > this.heightMax ? this.heightMax : this.position.y) - this.heightMin) * this.heightCoef : 0;
            var c = this.tdiff * this.movementSpeed;
            (this.moveForward || this.autoForward && !this.moveBackward) && this.translateZ(-(c +
                this.autoSpeedFactor));
            this.moveBackward && this.translateZ(c);
            this.moveLeft && this.translateX(-c);
            this.moveRight && this.translateX(c);
            this.moveUp && this.translateY(c);
            this.moveDown && this.translateY(-c);
            c = this.tdiff * this.lookSpeed;
            this.activeLook || (c = 0);
            this.lon += this.mouseX * c;
            this.lookVertical && (this.lat -= this.mouseY * c);
            this.lat = Math.max(-85, Math.min(85, this.lat));
            this.phi = (90 - this.lat) * Math.PI / 180;
            this.theta = this.lon * Math.PI / 180;
            var b = this.target.position, k = this.position;
            b.x = k.x + 100 * Math.sin(this.phi) *
                Math.cos(this.theta);
            b.y = k.y + 100 * Math.cos(this.phi);
            b.z = k.z + 100 * Math.sin(this.phi) * Math.sin(this.theta)
        }
        b = 1;
        this.constrainVertical && (b = 3.14 / (this.verticalMax - this.verticalMin));
        this.lon += this.mouseX * c;
        this.lookVertical && (this.lat -= this.mouseY * c * b);
        this.lat = Math.max(-85, Math.min(85, this.lat));
        this.phi = (90 - this.lat) * Math.PI / 180;
        this.theta = this.lon * Math.PI / 180;
        if (this.constrainVertical) this.phi = (this.phi - 0) * (this.verticalMax - this.verticalMin) / 3.14 + this.verticalMin;
        b = this.target.position;
        k = this.position;
        b.x = k.x + 100 * Math.sin(this.phi) * Math.cos(this.theta);
        b.y = k.y + 100 * Math.cos(this.phi);
        b.z = k.z + 100 * Math.sin(this.phi) * Math.sin(this.theta);
        this.supr.update.call(this)
    };
    this.domElement.addEventListener("contextmenu", function (b) {
        b.preventDefault()
    }, false);
    this.domElement.addEventListener("mousemove", c(this, this.onMouseMove), false);
    this.domElement.addEventListener("mousedown", c(this, this.onMouseDown), false);
    this.domElement.addEventListener("mouseup", c(this, this.onMouseUp), false);
    this.domElement.addEventListener("keydown",
        c(this, this.onKeyDown), false);
    this.domElement.addEventListener("keyup", c(this, this.onKeyUp), false)
};
THREE.FirstPersonCamera.prototype = new THREE.Camera;
THREE.FirstPersonCamera.prototype.constructor = THREE.FirstPersonCamera;
THREE.FirstPersonCamera.prototype.supr = THREE.Camera.prototype;
THREE.FirstPersonCamera.prototype.translate = function (b, c) {
    this.matrix.rotateAxis(c);
    if (this.noFly) c.y = 0;
    this.position.addSelf(c.multiplyScalar(b));
    this.target.position.addSelf(c.multiplyScalar(b))
};
THREE.PathCamera = function (b) {
    function c(b, e, c, f) {
        var h = {name: c, fps: 0.6, length: f, hierarchy: []}, m, k = e.getControlPointsArray(), n = e.getLength(),
            o = k.length, C = 0;
        m = o - 1;
        e = {parent: -1, keys: []};
        e.keys[0] = {time: 0, pos: k[0], rot: [0, 0, 0, 1], scl: [1, 1, 1]};
        e.keys[m] = {time: f, pos: k[m], rot: [0, 0, 0, 1], scl: [1, 1, 1]};
        for (m = 1; m < o - 1; m++) C = f * n.chunks[m] / n.total, e.keys[m] = {time: C, pos: k[m]};
        h.hierarchy[0] = e;
        THREE.AnimationHandler.add(h);
        return new THREE.Animation(b, c, THREE.AnimationHandler.CATMULLROM_FORWARD, false)
    }

    function e(b,
               e) {
        var c, f, h = new THREE.Geometry;
        for (c = 0; c < b.points.length * e; c++) f = c / (b.points.length * e), f = b.getPoint(f), h.vertices[c] = new THREE.Vertex(new THREE.Vector3(f.x, f.y, f.z));
        return h
    }

    function f(b, c) {
        var f = e(c, 10), h = e(c, 10), m = new THREE.LineBasicMaterial({color: 16711680, linewidth: 3});
        lineObj = new THREE.Line(f, m);
        particleObj = new THREE.ParticleSystem(h, new THREE.ParticleBasicMaterial({color: 16755200, size: 3}));
        lineObj.scale.set(1, 1, 1);
        b.addChild(lineObj);
        particleObj.scale.set(1, 1, 1);
        b.addChild(particleObj);
        h =
            new THREE.SphereGeometry(1, 16, 8);
        m = new THREE.MeshBasicMaterial({color: 65280});
        for (i = 0; i < c.points.length; i++) f = new THREE.Mesh(h, m), f.position.copy(c.points[i]), f.updateMatrix(), b.addChild(f)
    }

    THREE.Camera.call(this, b.fov, b.aspect, b.near, b.far, b.target);
    this.id = "PathCamera" + THREE.PathCameraIdCounter++;
    this.duration = 1E4;
    this.waypoints = [];
    this.useConstantSpeed = true;
    this.resamplingCoef = 50;
    this.debugPath = new THREE.Object3D;
    this.debugDummy = new THREE.Object3D;
    this.animationParent = new THREE.Object3D;
    this.lookSpeed =
        0.005;
    this.lookHorizontal = this.lookVertical = true;
    this.verticalAngleMap = {srcRange: [0, 6.28], dstRange: [0, 6.28]};
    this.horizontalAngleMap = {srcRange: [0, 6.28], dstRange: [0, 6.28]};
    this.domElement = document;
    if (b) {
        if (b.duration !== void 0) this.duration = b.duration * 1E3;
        if (b.waypoints !== void 0) this.waypoints = b.waypoints;
        if (b.useConstantSpeed !== void 0) this.useConstantSpeed = b.useConstantSpeed;
        if (b.resamplingCoef !== void 0) this.resamplingCoef = b.resamplingCoef;
        if (b.createDebugPath !== void 0) this.createDebugPath = b.createDebugPath;
        if (b.createDebugDummy !== void 0) this.createDebugDummy = b.createDebugDummy;
        if (b.lookSpeed !== void 0) this.lookSpeed = b.lookSpeed;
        if (b.lookVertical !== void 0) this.lookVertical = b.lookVertical;
        if (b.lookHorizontal !== void 0) this.lookHorizontal = b.lookHorizontal;
        if (b.verticalAngleMap !== void 0) this.verticalAngleMap = b.verticalAngleMap;
        if (b.horizontalAngleMap !== void 0) this.horizontalAngleMap = b.horizontalAngleMap;
        if (b.domElement !== void 0) this.domElement = b.domElement
    }
    this.theta = this.phi = this.lon = this.lat = this.mouseY =
        this.mouseX = 0;
    this.windowHalfX = window.innerWidth / 2;
    this.windowHalfY = window.innerHeight / 2;
    var k = Math.PI * 2, m = Math.PI / 180;
    this.update = function (b, e, c) {
        var f, h;
        this.lookHorizontal && (this.lon += this.mouseX * this.lookSpeed);
        this.lookVertical && (this.lat -= this.mouseY * this.lookSpeed);
        this.lon = Math.max(0, Math.min(360, this.lon));
        this.lat = Math.max(-85, Math.min(85, this.lat));
        this.phi = (90 - this.lat) * m;
        this.theta = this.lon * m;
        f = this.phi % k;
        this.phi = f >= 0 ? f : f + k;
        f = this.verticalAngleMap.srcRange;
        h = this.verticalAngleMap.dstRange;
        var n = h[1] - h[0];
        this.phi = TWEEN.Easing.Quadratic.EaseInOut(((this.phi - f[0]) * (h[1] - h[0]) / (f[1] - f[0]) + h[0] - h[0]) / n) * n + h[0];
        f = this.horizontalAngleMap.srcRange;
        h = this.horizontalAngleMap.dstRange;
        n = h[1] - h[0];
        this.theta = TWEEN.Easing.Quadratic.EaseInOut(((this.theta - f[0]) * (h[1] - h[0]) / (f[1] - f[0]) + h[0] - h[0]) / n) * n + h[0];
        f = this.target.position;
        f.x = 100 * Math.sin(this.phi) * Math.cos(this.theta);
        f.y = 100 * Math.cos(this.phi);
        f.z = 100 * Math.sin(this.phi) * Math.sin(this.theta);
        this.supr.update.call(this, b, e, c)
    };
    this.onMouseMove =
        function (b) {
            this.mouseX = b.clientX - this.windowHalfX;
            this.mouseY = b.clientY - this.windowHalfY
        };
    this.spline = new THREE.Spline;
    this.spline.initFromArray(this.waypoints);
    this.useConstantSpeed && this.spline.reparametrizeByArcLength(this.resamplingCoef);
    if (this.createDebugDummy) {
        var b = new THREE.MeshLambertMaterial({color: 30719}), h = new THREE.MeshLambertMaterial({color: 65280}),
            n = new THREE.CubeGeometry(10, 10, 20), o = new THREE.CubeGeometry(2, 2, 10);
        this.animationParent = new THREE.Mesh(n, b);
        b = new THREE.Mesh(o, h);
        b.position.set(0,
            10, 0);
        this.animation = c(this.animationParent, this.spline, this.id, this.duration);
        this.animationParent.addChild(this);
        this.animationParent.addChild(this.target);
        this.animationParent.addChild(b)
    } else this.animation = c(this.animationParent, this.spline, this.id, this.duration), this.animationParent.addChild(this.target), this.animationParent.addChild(this);
    this.createDebugPath && f(this.debugPath, this.spline);
    this.domElement.addEventListener("mousemove", function (b, e) {
        return function () {
            e.apply(b, arguments)
        }
    }(this,
        this.onMouseMove), false)
};
THREE.PathCamera.prototype = new THREE.Camera;
THREE.PathCamera.prototype.constructor = THREE.PathCamera;
THREE.PathCamera.prototype.supr = THREE.Camera.prototype;
THREE.PathCameraIdCounter = 0;
THREE.FlyCamera = function (b) {
    function c(b, c) {
        return function () {
            c.apply(b, arguments)
        }
    }

    THREE.Camera.call(this, b.fov, b.aspect, b.near, b.far, b.target);
    this.tmpQuaternion = new THREE.Quaternion;
    this.movementSpeed = 1;
    this.rollSpeed = 0.005;
    this.autoForward = this.dragToLook = false;
    this.domElement = document;
    if (b) {
        if (b.movementSpeed !== void 0) this.movementSpeed = b.movementSpeed;
        if (b.rollSpeed !== void 0) this.rollSpeed = b.rollSpeed;
        if (b.dragToLook !== void 0) this.dragToLook = b.dragToLook;
        if (b.autoForward !== void 0) this.autoForward =
            b.autoForward;
        if (b.domElement !== void 0) this.domElement = b.domElement
    }
    this.useTarget = false;
    this.useQuaternion = true;
    this.mouseStatus = 0;
    this.moveState = {
        up: 0,
        down: 0,
        left: 0,
        right: 0,
        forward: 0,
        back: 0,
        pitchUp: 0,
        pitchDown: 0,
        yawLeft: 0,
        yawRight: 0,
        rollLeft: 0,
        rollRight: 0
    };
    this.moveVector = new THREE.Vector3(0, 0, 0);
    this.rotationVector = new THREE.Vector3(0, 0, 0);
    this.lastUpdate = -1;
    this.tdiff = 0;
    this.handleEvent = function (b) {
        if (typeof this[b.type] == "function") this[b.type](b)
    };
    this.keydown = function (b) {
        if (!b.altKey) {
            switch (b.keyCode) {
                case 16:
                    this.movementSpeedMultiplier =
                        0.1;
                    break;
                case 87:
                    this.moveState.forward = 1;
                    break;
                case 83:
                    this.moveState.back = 1;
                    break;
                case 65:
                    this.moveState.left = 1;
                    break;
                case 68:
                    this.moveState.right = 1;
                    break;
                case 82:
                    this.moveState.up = 1;
                    break;
                case 70:
                    this.moveState.down = 1;
                    break;
                case 38:
                    this.moveState.pitchUp = 1;
                    break;
                case 40:
                    this.moveState.pitchDown = 1;
                    break;
                case 37:
                    this.moveState.yawLeft = 1;
                    break;
                case 39:
                    this.moveState.yawRight = 1;
                    break;
                case 81:
                    this.moveState.rollLeft = 1;
                    break;
                case 69:
                    this.moveState.rollRight = 1
            }
            this.updateMovementVector();
            this.updateRotationVector()
        }
    };
    this.keyup = function (b) {
        switch (b.keyCode) {
            case 16:
                this.movementSpeedMultiplier = 1;
                break;
            case 87:
                this.moveState.forward = 0;
                break;
            case 83:
                this.moveState.back = 0;
                break;
            case 65:
                this.moveState.left = 0;
                break;
            case 68:
                this.moveState.right = 0;
                break;
            case 82:
                this.moveState.up = 0;
                break;
            case 70:
                this.moveState.down = 0;
                break;
            case 38:
                this.moveState.pitchUp = 0;
                break;
            case 40:
                this.moveState.pitchDown = 0;
                break;
            case 37:
                this.moveState.yawLeft = 0;
                break;
            case 39:
                this.moveState.yawRight = 0;
                break;
            case 81:
                this.moveState.rollLeft = 0;
                break;
            case 69:
                this.moveState.rollRight = 0
        }
        this.updateMovementVector();
        this.updateRotationVector()
    };
    this.mousedown = function (b) {
        b.preventDefault();
        b.stopPropagation();
        if (this.dragToLook) this.mouseStatus++; else switch (b.button) {
            case 0:
                this.moveForward = true;
                break;
            case 2:
                this.moveBackward = true
        }
    };
    this.mousemove = function (b) {
        if (!this.dragToLook || this.mouseStatus > 0) {
            var c = this.getContainerDimensions(), k = c.size[0] / 2, m = c.size[1] / 2;
            this.moveState.yawLeft = -(b.clientX - c.offset[0] - k) / k;
            this.moveState.pitchDown = (b.clientY -
                c.offset[1] - m) / m;
            this.updateRotationVector()
        }
    };
    this.mouseup = function (b) {
        b.preventDefault();
        b.stopPropagation();
        if (this.dragToLook) this.mouseStatus--, this.moveState.yawLeft = this.moveState.pitchDown = 0; else switch (b.button) {
            case 0:
                this.moveForward = false;
                break;
            case 2:
                this.moveBackward = false
        }
        this.updateRotationVector()
    };
    this.update = function () {
        var b = (new Date).getTime();
        if (this.lastUpdate == -1) this.lastUpdate = b;
        this.tdiff = (b - this.lastUpdate) / 1E3;
        this.lastUpdate = b;
        var b = this.tdiff * this.movementSpeed, c = this.tdiff *
            this.rollSpeed;
        this.translateX(this.moveVector.x * b);
        this.translateY(this.moveVector.y * b);
        this.translateZ(this.moveVector.z * b);
        this.tmpQuaternion.set(this.rotationVector.x * c, this.rotationVector.y * c, this.rotationVector.z * c, 1).normalize();
        this.quaternion.multiplySelf(this.tmpQuaternion);
        this.matrix.setPosition(this.position);
        this.matrix.setRotationFromQuaternion(this.quaternion);
        this.matrixWorldNeedsUpdate = true;
        this.supr.update.call(this)
    };
    this.updateMovementVector = function () {
        var b = this.moveState.forward ||
        this.autoForward && !this.moveState.back ? 1 : 0;
        this.moveVector.x = -this.moveState.left + this.moveState.right;
        this.moveVector.y = -this.moveState.down + this.moveState.up;
        this.moveVector.z = -b + this.moveState.back
    };
    this.updateRotationVector = function () {
        this.rotationVector.x = -this.moveState.pitchDown + this.moveState.pitchUp;
        this.rotationVector.y = -this.moveState.yawRight + this.moveState.yawLeft;
        this.rotationVector.z = -this.moveState.rollRight + this.moveState.rollLeft
    };
    this.getContainerDimensions = function () {
        return this.domElement !=
        document ? {
            size: [this.domElement.offsetWidth, this.domElement.offsetHeight],
            offset: [this.domElement.offsetLeft, this.domElement.offsetTop]
        } : {size: [window.innerWidth, window.innerHeight], offset: [0, 0]}
    };
    this.domElement.addEventListener("mousemove", c(this, this.mousemove), false);
    this.domElement.addEventListener("mousedown", c(this, this.mousedown), false);
    this.domElement.addEventListener("mouseup", c(this, this.mouseup), false);
    window.addEventListener("keydown", c(this, this.keydown), false);
    window.addEventListener("keyup",
        c(this, this.keyup), false);
    this.updateMovementVector();
    this.updateRotationVector()
};
THREE.FlyCamera.prototype = new THREE.Camera;
THREE.FlyCamera.prototype.constructor = THREE.FlyCamera;
THREE.FlyCamera.prototype.supr = THREE.Camera.prototype;
THREE.RollCamera = function (b, c, e, f) {
    THREE.Camera.call(this, b, c, e, f);
    this.mouseLook = true;
    this.autoForward = false;
    this.rollSpeed = this.movementSpeed = this.lookSpeed = 1;
    this.constrainVertical = [-0.9, 0.9];
    this.domElement = document;
    this.matrixAutoUpdate = this.useTarget = false;
    this.forward = new THREE.Vector3(0, 0, 1);
    this.roll = 0;
    this.lastUpdate = -1;
    this.delta = 0;
    var k = new THREE.Vector3, m = new THREE.Vector3, h = new THREE.Vector3, n = new THREE.Matrix4, o = false, t = 1,
        u = 0, v = 0, x = 0, w = 0, B = 0, A = window.innerWidth / 2, y = window.innerHeight /
        2;
    this.update = function () {
        var b = (new Date).getTime();
        if (this.lastUpdate == -1) this.lastUpdate = b;
        this.delta = (b - this.lastUpdate) / 1E3;
        this.lastUpdate = b;
        this.mouseLook && (b = this.delta * this.lookSpeed, this.rotateHorizontally(b * w), this.rotateVertically(b * B));
        b = this.delta * this.movementSpeed;
        this.translateZ(b * (u > 0 || this.autoForward && !(u < 0) ? 1 : u));
        this.translateX(b * v);
        this.translateY(b * x);
        o && (this.roll += this.rollSpeed * this.delta * t);
        if (this.forward.y > this.constrainVertical[1]) this.forward.y = this.constrainVertical[1],
            this.forward.normalize(); else if (this.forward.y < this.constrainVertical[0]) this.forward.y = this.constrainVertical[0], this.forward.normalize();
        h.copy(this.forward);
        m.set(0, 1, 0);
        k.cross(m, h).normalize();
        m.cross(h, k).normalize();
        this.matrix.n11 = k.x;
        this.matrix.n12 = m.x;
        this.matrix.n13 = h.x;
        this.matrix.n21 = k.y;
        this.matrix.n22 = m.y;
        this.matrix.n23 = h.y;
        this.matrix.n31 = k.z;
        this.matrix.n32 = m.z;
        this.matrix.n33 = h.z;
        n.identity();
        n.n11 = Math.cos(this.roll);
        n.n12 = -Math.sin(this.roll);
        n.n21 = Math.sin(this.roll);
        n.n22 =
            Math.cos(this.roll);
        this.matrix.multiplySelf(n);
        this.matrixWorldNeedsUpdate = true;
        this.matrix.n14 = this.position.x;
        this.matrix.n24 = this.position.y;
        this.matrix.n34 = this.position.z;
        this.supr.update.call(this)
    };
    this.translateX = function (b) {
        this.position.x += this.matrix.n11 * b;
        this.position.y += this.matrix.n21 * b;
        this.position.z += this.matrix.n31 * b
    };
    this.translateY = function (b) {
        this.position.x += this.matrix.n12 * b;
        this.position.y += this.matrix.n22 * b;
        this.position.z += this.matrix.n32 * b
    };
    this.translateZ = function (b) {
        this.position.x -=
            this.matrix.n13 * b;
        this.position.y -= this.matrix.n23 * b;
        this.position.z -= this.matrix.n33 * b
    };
    this.rotateHorizontally = function (b) {
        k.set(this.matrix.n11, this.matrix.n21, this.matrix.n31);
        k.multiplyScalar(b);
        this.forward.subSelf(k);
        this.forward.normalize()
    };
    this.rotateVertically = function (b) {
        m.set(this.matrix.n12, this.matrix.n22, this.matrix.n32);
        m.multiplyScalar(b);
        this.forward.addSelf(m);
        this.forward.normalize()
    };
    this.domElement.addEventListener("contextmenu", function (b) {
        b.preventDefault()
    }, false);
    this.domElement.addEventListener("mousemove",
        function (b) {
            w = (b.clientX - A) / window.innerWidth;
            B = (b.clientY - y) / window.innerHeight
        }, false);
    this.domElement.addEventListener("mousedown", function (b) {
        b.preventDefault();
        b.stopPropagation();
        switch (b.button) {
            case 0:
                u = 1;
                break;
            case 2:
                u = -1
        }
    }, false);
    this.domElement.addEventListener("mouseup", function (b) {
        b.preventDefault();
        b.stopPropagation();
        switch (b.button) {
            case 0:
                u = 0;
                break;
            case 2:
                u = 0
        }
    }, false);
    this.domElement.addEventListener("keydown", function (b) {
        switch (b.keyCode) {
            case 38:
            case 87:
                u = 1;
                break;
            case 37:
            case 65:
                v =
                    -1;
                break;
            case 40:
            case 83:
                u = -1;
                break;
            case 39:
            case 68:
                v = 1;
                break;
            case 81:
                o = true;
                t = 1;
                break;
            case 69:
                o = true;
                t = -1;
                break;
            case 82:
                x = 1;
                break;
            case 70:
                x = -1
        }
    }, false);
    this.domElement.addEventListener("keyup", function (b) {
        switch (b.keyCode) {
            case 38:
            case 87:
                u = 0;
                break;
            case 37:
            case 65:
                v = 0;
                break;
            case 40:
            case 83:
                u = 0;
                break;
            case 39:
            case 68:
                v = 0;
                break;
            case 81:
                o = false;
                break;
            case 69:
                o = false;
                break;
            case 82:
                x = 0;
                break;
            case 70:
                x = 0
        }
    }, false)
};
THREE.RollCamera.prototype = new THREE.Camera;
THREE.RollCamera.prototype.constructor = THREE.RollCamera;
THREE.RollCamera.prototype.supr = THREE.Camera.prototype;
THREE.TrackballCamera = function (b) {
    function c(b, e) {
        return function () {
            e.apply(b, arguments)
        }
    }

    b = b || {};
    THREE.Camera.call(this, b.fov, b.aspect, b.near, b.far, b.target);
    this.domElement = b.domElement || document;
    this.screen = b.screen || {width: window.innerWidth, height: window.innerHeight, offsetLeft: 0, offsetTop: 0};
    this.radius = b.radius || (this.screen.width + this.screen.height) / 4;
    this.rotateSpeed = b.rotateSpeed || 1;
    this.zoomSpeed = b.zoomSpeed || 1.2;
    this.panSpeed = b.panSpeed || 0.3;
    this.noZoom = b.noZoom || false;
    this.noPan = b.noPan ||
        false;
    this.staticMoving = b.staticMoving || false;
    this.dynamicDampingFactor = b.dynamicDampingFactor || 0.2;
    this.minDistance = b.minDistance || 0;
    this.maxDistance = b.maxDistance || Infinity;
    this.keys = b.keys || [65, 83, 68];
    this.useTarget = true;
    var e = false, f = this.STATE.NONE, k = new THREE.Vector3, m = new THREE.Vector3, h = new THREE.Vector3,
        n = new THREE.Vector2, o = new THREE.Vector2, t = new THREE.Vector2, u = new THREE.Vector2;
    this.handleEvent = function (b) {
        if (typeof this[b.type] == "function") this[b.type](b)
    };
    this.getMouseOnScreen = function (b,
                                      e) {
        return new THREE.Vector2((b - this.screen.offsetLeft) / this.radius * 0.5, (e - this.screen.offsetTop) / this.radius * 0.5)
    };
    this.getMouseProjectionOnBall = function (b, e) {
        var c = new THREE.Vector3((b - this.screen.width * 0.5 - this.screen.offsetLeft) / this.radius, (this.screen.height * 0.5 + this.screen.offsetTop - e) / this.radius, 0),
            f = c.length();
        f > 1 ? c.normalize() : c.z = Math.sqrt(1 - f * f);
        k = this.position.clone().subSelf(this.target.position);
        f = this.up.clone().setLength(c.y);
        f.addSelf(this.up.clone().crossSelf(k).setLength(c.x));
        f.addSelf(k.setLength(c.z));
        return f
    };
    this.rotateCamera = function () {
        var b = Math.acos(m.dot(h) / m.length() / h.length());
        if (b) {
            var e = (new THREE.Vector3).cross(m, h).normalize(), c = new THREE.Quaternion;
            b *= this.rotateSpeed;
            c.setFromAxisAngle(e, -b);
            c.multiplyVector3(k);
            c.multiplyVector3(this.up);
            c.multiplyVector3(h);
            this.staticMoving ? m = h : (c.setFromAxisAngle(e, b * (this.dynamicDampingFactor - 1)), c.multiplyVector3(m))
        }
    };
    this.zoomCamera = function () {
        var b = 1 + (o.y - n.y) * this.zoomSpeed;
        b !== 1 && b > 0 && (k.multiplyScalar(b),
            this.staticMoving ? n = o : n.y += (o.y - n.y) * this.dynamicDampingFactor)
    };
    this.panCamera = function () {
        var b = u.clone().subSelf(t);
        if (b.lengthSq()) {
            b.multiplyScalar(k.length() * this.panSpeed);
            var e = k.clone().crossSelf(this.up).setLength(b.x);
            e.addSelf(this.up.clone().setLength(b.y));
            this.position.addSelf(e);
            this.target.position.addSelf(e);
            this.staticMoving ? t = u : t.addSelf(b.sub(u, t).multiplyScalar(this.dynamicDampingFactor))
        }
    };
    this.checkDistances = function () {
        if (!this.noZoom || !this.noPan) this.position.lengthSq() > this.maxDistance *
        this.maxDistance && this.position.setLength(this.maxDistance), k.lengthSq() < this.minDistance * this.minDistance && this.position.add(this.target.position, k.setLength(this.minDistance))
    };
    this.update = function (b, e, c) {
        k = this.position.clone().subSelf(this.target.position);
        this.rotateCamera();
        this.noZoom || this.zoomCamera();
        this.noPan || this.panCamera();
        this.position.add(this.target.position, k);
        this.checkDistances();
        this.supr.update.call(this, b, e, c)
    };
    this.domElement.addEventListener("contextmenu", function (b) {
            b.preventDefault()
        },
        false);
    this.domElement.addEventListener("mousemove", c(this, function (b) {
        e && (m = h = this.getMouseProjectionOnBall(b.clientX, b.clientY), n = o = this.getMouseOnScreen(b.clientX, b.clientY), t = u = this.getMouseOnScreen(b.clientX, b.clientY), e = false);
        f !== this.STATE.NONE && (f === this.STATE.ROTATE ? h = this.getMouseProjectionOnBall(b.clientX, b.clientY) : f === this.STATE.ZOOM && !this.noZoom ? o = this.getMouseOnScreen(b.clientX, b.clientY) : f === this.STATE.PAN && !this.noPan && (u = this.getMouseOnScreen(b.clientX, b.clientY)))
    }), false);
    this.domElement.addEventListener("mousedown",
        c(this, function (b) {
            b.preventDefault();
            b.stopPropagation();
            if (f === this.STATE.NONE) f = b.button, f === this.STATE.ROTATE ? m = h = this.getMouseProjectionOnBall(b.clientX, b.clientY) : f === this.STATE.ZOOM && !this.noZoom ? n = o = this.getMouseOnScreen(b.clientX, b.clientY) : this.noPan || (t = u = this.getMouseOnScreen(b.clientX, b.clientY))
        }), false);
    this.domElement.addEventListener("mouseup", c(this, function (b) {
        b.preventDefault();
        b.stopPropagation();
        f = this.STATE.NONE
    }), false);
    window.addEventListener("keydown", c(this, function (b) {
        if (f ===
            this.STATE.NONE) {
            if (b.keyCode === this.keys[this.STATE.ROTATE]) f = this.STATE.ROTATE; else if (b.keyCode === this.keys[this.STATE.ZOOM] && !this.noZoom) f = this.STATE.ZOOM; else if (b.keyCode === this.keys[this.STATE.PAN] && !this.noPan) f = this.STATE.PAN;
            f !== this.STATE.NONE && (e = true)
        }
    }), false);
    window.addEventListener("keyup", c(this, function () {
        if (f !== this.STATE.NONE) f = this.STATE.NONE
    }), false)
};
THREE.TrackballCamera.prototype = new THREE.Camera;
THREE.TrackballCamera.prototype.constructor = THREE.TrackballCamera;
THREE.TrackballCamera.prototype.supr = THREE.Camera.prototype;
THREE.TrackballCamera.prototype.STATE = {NONE: -1, ROTATE: 0, ZOOM: 1, PAN: 2};
THREE.QuakeCamera = THREE.FirstPersonCamera;
THREE.CubeGeometry = function (b, c, e, f, k, m, h, n, o) {
    function t(b, e, c, h, n, o, t, w) {
        var v, x, A = f || 1, B = k || 1, J = n / 2, Q = o / 2, O = u.vertices.length;
        if (b == "x" && e == "y" || b == "y" && e == "x") v = "z"; else if (b == "x" && e == "z" || b == "z" && e == "x") v = "y", B = m || 1; else if (b == "z" && e == "y" || b == "y" && e == "z") v = "x", A = m || 1;
        var Y = A + 1, V = B + 1;
        n /= A;
        var Z = o / B;
        for (x = 0; x < V; x++) for (o = 0; o < Y; o++) {
            var K = new THREE.Vector3;
            K[b] = (o * n - J) * c;
            K[e] = (x * Z - Q) * h;
            K[v] = t;
            u.vertices.push(new THREE.Vertex(K))
        }
        for (x = 0; x < B; x++) for (o = 0; o < A; o++) u.faces.push(new THREE.Face4(o + Y * x +
            O, o + Y * (x + 1) + O, o + 1 + Y * (x + 1) + O, o + 1 + Y * x + O, null, null, w)), u.faceVertexUvs[0].push([new THREE.UV(o / A, x / B), new THREE.UV(o / A, (x + 1) / B), new THREE.UV((o + 1) / A, (x + 1) / B), new THREE.UV((o + 1) / A, x / B)])
    }

    THREE.Geometry.call(this);
    var u = this, v = b / 2, x = c / 2, w = e / 2, n = n ? -1 : 1;
    if (h !== void 0) if (h instanceof Array) this.materials = h; else {
        this.materials = [];
        for (var B = 0; B < 6; B++) this.materials.push([h])
    } else this.materials = [];
    this.sides = {px: true, nx: true, py: true, ny: true, pz: true, nz: true};
    if (o != void 0) for (var A in o) this.sides[A] != void 0 &&
    (this.sides[A] = o[A]);
    this.sides.px && t("z", "y", 1 * n, -1, e, c, -v, this.materials[0]);
    this.sides.nx && t("z", "y", -1 * n, -1, e, c, v, this.materials[1]);
    this.sides.py && t("x", "z", 1 * n, 1, b, e, x, this.materials[2]);
    this.sides.ny && t("x", "z", 1 * n, -1, b, e, -x, this.materials[3]);
    this.sides.pz && t("x", "y", 1 * n, -1, b, c, w, this.materials[4]);
    this.sides.nz && t("x", "y", -1 * n, -1, b, c, -w, this.materials[5]);
    (function () {
        for (var b = [], e = [], c = 0, f = u.vertices.length; c < f; c++) {
            for (var h = u.vertices[c], m = false, k = 0, n = b.length; k < n; k++) {
                var o = b[k];
                if (h.position.x ==
                    o.position.x && h.position.y == o.position.y && h.position.z == o.position.z) {
                    e[c] = k;
                    m = true;
                    break
                }
            }
            if (!m) e[c] = b.length, b.push(new THREE.Vertex(h.position.clone()))
        }
        c = 0;
        for (f = u.faces.length; c < f; c++) h = u.faces[c], h.a = e[h.a], h.b = e[h.b], h.c = e[h.c], h.d = e[h.d];
        u.vertices = b
    })();
    this.computeCentroids();
    this.computeFaceNormals()
};
THREE.CubeGeometry.prototype = new THREE.Geometry;
THREE.CubeGeometry.prototype.constructor = THREE.CubeGeometry;
THREE.CylinderGeometry = function (b, c, e, f, k, m) {
    function h(b, e, c) {
        n.vertices.push(new THREE.Vertex(new THREE.Vector3(b, e, c)))
    }

    THREE.Geometry.call(this);
    var n = this, o, t = Math.PI * 2, u = f / 2;
    for (o = 0; o < b; o++) h(Math.sin(t * o / b) * c, Math.cos(t * o / b) * c, -u);
    for (o = 0; o < b; o++) h(Math.sin(t * o / b) * e, Math.cos(t * o / b) * e, u);
    var v, x, w, B, A = c - e;
    for (o = 0; o < b; o++) v = new THREE.Vector3, v.copy(n.vertices[o].position), v.z = A, v.normalize(), x = new THREE.Vector3, x.copy(n.vertices[o + b].position), x.z = A, x.normalize(), w = new THREE.Vector3, w.copy(n.vertices[b +
    (o + 1) % b].position), w.z = A, w.normalize(), B = new THREE.Vector3, B.copy(n.vertices[(o + 1) % b].position), B.z = A, B.normalize(), n.faces.push(new THREE.Face4(o, o + b, b + (o + 1) % b, (o + 1) % b, [v, x, w, B]));
    if (e > 0) {
        e = new THREE.Vector3(0, 0, -1);
        h(0, 0, -u - (m || 0));
        for (o = b; o < b + b / 2; o++) n.faces.push(new THREE.Face4(2 * b, (2 * o - 2 * b) % b, (2 * o - 2 * b + 1) % b, (2 * o - 2 * b + 2) % b, [e, e, e, e]))
    }
    if (c > 0) {
        c = new THREE.Vector3(0, 0, 1);
        h(0, 0, u + (k || 0));
        for (o = b + b / 2; o < 2 * b; o++) n.faces.push(new THREE.Face4(2 * b + 1, (2 * o - 2 * b + 2) % b + b, (2 * o - 2 * b + 1) % b + b, (2 * o - 2 * b) % b + b, [c, c, c, c]))
    }
    o =
        0;
    for (b = this.faces.length; o < b; o++) k = [], u = this.faces[o], c = this.vertices[u.a], m = this.vertices[u.b], e = this.vertices[u.c], v = this.vertices[u.d], k.push(new THREE.UV(0.5 + Math.atan2(c.position.x, c.position.y) / t, 0.5 + c.position.z / f)), k.push(new THREE.UV(0.5 + Math.atan2(m.position.x, m.position.y) / t, 0.5 + m.position.z / f)), k.push(new THREE.UV(0.5 + Math.atan2(e.position.x, e.position.y) / t, 0.5 + e.position.z / f)), u instanceof THREE.Face4 && k.push(new THREE.UV(0.5 + Math.atan2(v.position.x, v.position.y) / t, 0.5 + v.position.z /
        f)), this.faceVertexUvs[0].push(k);
    this.computeCentroids();
    this.computeFaceNormals()
};
THREE.CylinderGeometry.prototype = new THREE.Geometry;
THREE.CylinderGeometry.prototype.constructor = THREE.CylinderGeometry;
THREE.ExtrudeGeometry = function (b, c) {
    if (typeof b != "undefined") {
        THREE.Geometry.call(this);
        var b = b instanceof Array ? b : [b], e, f = b.length, k;
        this.shapebb = b[f - 1].getBoundingBox();
        for (e = 0; e < f; e++) k = b[e], this.addShape(k, c);
        this.computeCentroids();
        this.computeFaceNormals()
    }
};
THREE.ExtrudeGeometry.prototype = new THREE.Geometry;
THREE.ExtrudeGeometry.prototype.constructor = THREE.ExtrudeGeometry;
THREE.ExtrudeGeometry.prototype.addShape = function (b, c) {
    function e(b, e, c) {
        e || console.log("die");
        return e.clone().multiplyScalar(c).addSelf(b)
    }

    function f(b, e, c) {
        var f = THREE.ExtrudeGeometry.__v1, h = THREE.ExtrudeGeometry.__v2, m = THREE.ExtrudeGeometry.__v3,
            k = THREE.ExtrudeGeometry.__v4, n = THREE.ExtrudeGeometry.__v5, o = THREE.ExtrudeGeometry.__v6;
        f.set(b.x - e.x, b.y - e.y);
        h.set(b.x - c.x, b.y - c.y);
        f = f.normalize();
        h = h.normalize();
        m.set(-f.y, f.x);
        k.set(h.y, -h.x);
        n.copy(b).addSelf(m);
        o.copy(b).addSelf(k);
        if (n.equals(o)) return k.clone();
        n.copy(e).addSelf(m);
        o.copy(c).addSelf(k);
        m = f.dot(k);
        k = o.subSelf(n).dot(k);
        m == 0 && (console.log("Either infinite or no solutions!"), k == 0 ? console.log("Its finite solutions.") : console.log("Too bad, no solutions."));
        k /= m;
        return k < 0 ? (e = Math.atan2(e.y - b.y, e.x - b.x), b = Math.atan2(c.y - b.y, c.x - b.x), e > b && (b += Math.PI * 2), anglec = (e + b) / 2, new THREE.Vector2(-Math.cos(anglec), -Math.sin(anglec))) : f.multiplyScalar(k).addSelf(n).subSelf(b).clone()
    }

    function k(b) {
        for (M = b.length; --M >= 0;) {
            aa = M;
            la = M - 1;
            la < 0 && (la = b.length - 1);
            for (var e = 0, c = w + u * 2, e = 0; e < c; e++) {
                var f = Z * e, h = Z * (e + 1), m = ka + aa + f, k = ka + aa + h, t = m, f = ka + la + f,
                    h = ka + la + h, p = k;
                t += W;
                f += W;
                h += W;
                p += W;
                H.faces.push(new THREE.Face4(t, f, h, p, null, null, z));
                z && (t = e / c, f = (e + 1) / c, h = n + o * 2, m = (H.vertices[m].position.z + o) / h, k = (H.vertices[k].position.z + o) / h, H.faceVertexUvs[0].push([new THREE.UV(m, t), new THREE.UV(k, t), new THREE.UV(k, f), new THREE.UV(m, f)]))
            }
        }
    }

    function m(b, e, c) {
        H.vertices.push(new THREE.Vertex(new THREE.Vector3(b, e, c)))
    }

    function h(b, e, c) {
        b += W;
        e += W;
        c += W;
        H.faces.push(new THREE.Face3(b,
            e, c, null, null, L));
        if (L) {
            var f = E.maxY, h = E.maxX, m = H.vertices[e].position.x, e = H.vertices[e].position.y,
                k = H.vertices[c].position.x, c = H.vertices[c].position.y;
            H.faceVertexUvs[0].push([new THREE.UV(H.vertices[b].position.x / h, H.vertices[b].position.y / f), new THREE.UV(m / h, e / f), new THREE.UV(k / h, c / f)])
        }
    }

    var n = c.amount !== void 0 ? c.amount : 100, o = c.bevelThickness !== void 0 ? c.bevelThickness : 6,
        t = c.bevelSize !== void 0 ? c.bevelSize : o - 2, u = c.bevelSegments !== void 0 ? c.bevelSegments : 3,
        v = c.bevelEnabled !== void 0 ? c.bevelEnabled :
            true, x = c.curveSegments !== void 0 ? c.curveSegments : 12, w = c.steps !== void 0 ? c.steps : 1,
        B = c.bendPath, A = c.extrudePath, y, D = false, C = c.useSpacedPoints !== void 0 ? c.useSpacedPoints : false,
        L = c.material, z = c.extrudeMaterial, E = this.shapebb;
    if (A) y = A.getPoints(x), w = y.length, D = true, v = false;
    v || (t = o = u = 0);
    var N, I, P, H = this, W = this.vertices.length;
    B && b.addWrapPath(B);
    x = C ? b.extractAllSpacedPoints(x) : b.extractAllPoints(x);
    B = x.shape;
    x = x.holes;
    if (A = !THREE.Shape.Utils.isClockWise(B)) {
        B = B.reverse();
        I = 0;
        for (P = x.length; I < P; I++) N = x[I],
        THREE.Shape.Utils.isClockWise(N) && (x[I] = N.reverse());
        A = false
    }
    A = THREE.Shape.Utils.triangulateShape(B, x);
    C = B;
    I = 0;
    for (P = x.length; I < P; I++) N = x[I], B = B.concat(N);
    var M, J, Q, O, Y, V, Z = B.length, K = A.length, X = [];
    M = 0;
    J = C.length;
    aa = J - 1;
    for (la = M + 1; M < J; M++, aa++, la++) aa == J && (aa = 0), la == J && (la = 0), X[M] = f(C[M], C[aa], C[la]);
    var S = [], p, ca = X.concat();
    I = 0;
    for (P = x.length; I < P; I++) {
        N = x[I];
        p = [];
        M = 0;
        J = N.length;
        aa = J - 1;
        for (la = M + 1; M < J; M++, aa++, la++) aa == J && (aa = 0), la == J && (la = 0), p[M] = f(N[M], N[aa], N[la]);
        S.push(p);
        ca = ca.concat(p)
    }
    for (Q =
             0; Q < u; Q++) {
        O = Q / u;
        Y = o * (1 - O);
        O = t * Math.sin(O * Math.PI / 2);
        M = 0;
        for (J = C.length; M < J; M++) V = e(C[M], X[M], O), m(V.x, V.y, -Y);
        I = 0;
        for (P = x.length; I < P; I++) {
            N = x[I];
            p = S[I];
            M = 0;
            for (J = N.length; M < J; M++) V = e(N[M], p[M], O), m(V.x, V.y, -Y)
        }
    }
    O = t;
    for (M = 0; M < Z; M++) V = v ? e(B[M], ca[M], O) : B[M], D ? m(V.x, V.y + y[0].y, y[0].x) : m(V.x, V.y, 0);
    for (Q = 1; Q <= w; Q++) for (M = 0; M < Z; M++) V = v ? e(B[M], ca[M], O) : B[M], D ? m(V.x, V.y + y[Q - 1].y, y[Q - 1].x) : m(V.x, V.y, n / w * Q);
    for (Q = u - 1; Q >= 0; Q--) {
        O = Q / u;
        Y = o * (1 - O);
        O = t * Math.sin(O * Math.PI / 2);
        M = 0;
        for (J = C.length; M < J; M++) V = e(C[M],
            X[M], O), m(V.x, V.y, n + Y);
        I = 0;
        for (P = x.length; I < P; I++) {
            N = x[I];
            p = S[I];
            M = 0;
            for (J = N.length; M < J; M++) V = e(N[M], p[M], O), D ? m(V.x, V.y + y[w - 1].y, y[w - 1].x + Y) : m(V.x, V.y, n + Y)
        }
    }
    if (v) {
        v = Z * 0;
        for (M = 0; M < K; M++) t = A[M], h(t[2] + v, t[1] + v, t[0] + v);
        v = Z * (w + u * 2);
        for (M = 0; M < K; M++) t = A[M], h(t[0] + v, t[1] + v, t[2] + v)
    } else {
        for (M = 0; M < K; M++) t = A[M], h(t[2], t[1], t[0]);
        for (M = 0; M < K; M++) t = A[M], h(t[0] + Z * w, t[1] + Z * w, t[2] + Z * w)
    }
    var aa, la, ka = 0;
    k(C);
    ka += C.length;
    I = 0;
    for (P = x.length; I < P; I++) N = x[I], k(N), ka += N.length
};
THREE.ExtrudeGeometry.__v1 = new THREE.Vector2;
THREE.ExtrudeGeometry.__v2 = new THREE.Vector2;
THREE.ExtrudeGeometry.__v3 = new THREE.Vector2;
THREE.ExtrudeGeometry.__v4 = new THREE.Vector2;
THREE.ExtrudeGeometry.__v5 = new THREE.Vector2;
THREE.ExtrudeGeometry.__v6 = new THREE.Vector2;
THREE.IcosahedronGeometry = function (b) {
    function c(b, e, c) {
        var f = Math.sqrt(b * b + e * e + c * c);
        return k.vertices.push(new THREE.Vertex(new THREE.Vector3(b / f, e / f, c / f))) - 1
    }

    function e(b, e, c, f) {
        f.faces.push(new THREE.Face3(b, e, c))
    }

    function f(b, e) {
        var f = k.vertices[b].position, h = k.vertices[e].position;
        return c((f.x + h.x) / 2, (f.y + h.y) / 2, (f.z + h.z) / 2)
    }

    var k = this, m = new THREE.Geometry;
    this.subdivisions = b || 0;
    THREE.Geometry.call(this);
    b = (1 + Math.sqrt(5)) / 2;
    c(-1, b, 0);
    c(1, b, 0);
    c(-1, -b, 0);
    c(1, -b, 0);
    c(0, -1, b);
    c(0, 1, b);
    c(0, -1,
        -b);
    c(0, 1, -b);
    c(b, 0, -1);
    c(b, 0, 1);
    c(-b, 0, -1);
    c(-b, 0, 1);
    e(0, 11, 5, m);
    e(0, 5, 1, m);
    e(0, 1, 7, m);
    e(0, 7, 10, m);
    e(0, 10, 11, m);
    e(1, 5, 9, m);
    e(5, 11, 4, m);
    e(11, 10, 2, m);
    e(10, 7, 6, m);
    e(7, 1, 8, m);
    e(3, 9, 4, m);
    e(3, 4, 2, m);
    e(3, 2, 6, m);
    e(3, 6, 8, m);
    e(3, 8, 9, m);
    e(4, 9, 5, m);
    e(2, 4, 11, m);
    e(6, 2, 10, m);
    e(8, 6, 7, m);
    e(9, 8, 1, m);
    for (var h = 0; h < this.subdivisions; h++) {
        var b = new THREE.Geometry, n;
        for (n in m.faces) {
            var o = f(m.faces[n].a, m.faces[n].b), t = f(m.faces[n].b, m.faces[n].c), u = f(m.faces[n].c, m.faces[n].a);
            e(m.faces[n].a, o, u, b);
            e(m.faces[n].b, t,
                o, b);
            e(m.faces[n].c, u, t, b);
            e(o, t, u, b)
        }
        m.faces = b.faces
    }
    k.faces = m.faces;
    this.computeCentroids();
    this.computeFaceNormals();
    this.computeVertexNormals()
};
THREE.IcosahedronGeometry.prototype = new THREE.Geometry;
THREE.IcosahedronGeometry.prototype.constructor = THREE.IcosahedronGeometry;
THREE.LatheGeometry = function (b, c, e) {
    THREE.Geometry.call(this);
    this.steps = c || 12;
    this.angle = e || 2 * Math.PI;
    for (var c = this.angle / this.steps, e = [], f = [], k = [], m = [], h = (new THREE.Matrix4).setRotationZ(c), n = 0; n < b.length; n++) this.vertices.push(new THREE.Vertex(b[n])), e[n] = b[n].clone(), f[n] = this.vertices.length - 1;
    for (var o = 0; o <= this.angle + 0.001; o += c) {
        for (n = 0; n < e.length; n++) o < this.angle ? (e[n] = h.multiplyVector3(e[n].clone()), this.vertices.push(new THREE.Vertex(e[n])), k[n] = this.vertices.length - 1) : k = m;
        o == 0 && (m = f);
        for (n = 0; n < f.length - 1; n++) this.faces.push(new THREE.Face4(k[n], k[n + 1], f[n + 1], f[n])), this.faceVertexUvs[0].push([new THREE.UV(1 - o / this.angle, n / b.length), new THREE.UV(1 - o / this.angle, (n + 1) / b.length), new THREE.UV(1 - (o - c) / this.angle, (n + 1) / b.length), new THREE.UV(1 - (o - c) / this.angle, n / b.length)]);
        f = k;
        k = []
    }
    this.computeCentroids();
    this.computeFaceNormals();
    this.computeVertexNormals()
};
THREE.LatheGeometry.prototype = new THREE.Geometry;
THREE.LatheGeometry.prototype.constructor = THREE.LatheGeometry;
THREE.PlaneGeometry = function (b, c, e, f) {
    THREE.Geometry.call(this);
    var k, m = b / 2, h = c / 2, e = e || 1, f = f || 1, n = e + 1, o = f + 1;
    b /= e;
    var t = c / f;
    for (k = 0; k < o; k++) for (c = 0; c < n; c++) this.vertices.push(new THREE.Vertex(new THREE.Vector3(c * b - m, -(k * t - h), 0)));
    for (k = 0; k < f; k++) for (c = 0; c < e; c++) this.faces.push(new THREE.Face4(c + n * k, c + n * (k + 1), c + 1 + n * (k + 1), c + 1 + n * k)), this.faceVertexUvs[0].push([new THREE.UV(c / e, k / f), new THREE.UV(c / e, (k + 1) / f), new THREE.UV((c + 1) / e, (k + 1) / f), new THREE.UV((c + 1) / e, k / f)]);
    this.computeCentroids();
    this.computeFaceNormals()
};
THREE.PlaneGeometry.prototype = new THREE.Geometry;
THREE.PlaneGeometry.prototype.constructor = THREE.PlaneGeometry;
THREE.SphereGeometry = function (b, c, e) {
    THREE.Geometry.call(this);
    for (var b = b || 50, f, k = Math.PI, m = Math.max(3, c || 8), h = Math.max(2, e || 6), c = [], e = 0; e < h + 1; e++) {
        f = e / h;
        var n = b * Math.cos(f * k), o = b * Math.sin(f * k), t = [], u = 0;
        for (f = 0; f < m; f++) {
            var v = 2 * f / m, x = o * Math.sin(v * k), v = o * Math.cos(v * k);
            (e == 0 || e == h) && f > 0 || (u = this.vertices.push(new THREE.Vertex(new THREE.Vector3(v, n, x))) - 1);
            t.push(u)
        }
        c.push(t)
    }
    for (var w, B, A, k = c.length, e = 0; e < k; e++) if (m = c[e].length, e > 0) for (f = 0; f < m; f++) {
        t = f == m - 1;
        h = c[e][t ? 0 : f + 1];
        n = c[e][t ? m - 1 : f];
        o = c[e - 1][t ?
            m - 1 : f];
        t = c[e - 1][t ? 0 : f + 1];
        x = e / (k - 1);
        w = (e - 1) / (k - 1);
        B = (f + 1) / m;
        var v = f / m, u = new THREE.UV(1 - B, x), x = new THREE.UV(1 - v, x), v = new THREE.UV(1 - v, w),
            y = new THREE.UV(1 - B, w);
        e < c.length - 1 && (w = this.vertices[h].position.clone(), B = this.vertices[n].position.clone(), A = this.vertices[o].position.clone(), w.normalize(), B.normalize(), A.normalize(), this.faces.push(new THREE.Face3(h, n, o, [new THREE.Vector3(w.x, w.y, w.z), new THREE.Vector3(B.x, B.y, B.z), new THREE.Vector3(A.x, A.y, A.z)])), this.faceVertexUvs[0].push([u, x, v]));
        e > 1 && (w =
            this.vertices[h].position.clone(), B = this.vertices[o].position.clone(), A = this.vertices[t].position.clone(), w.normalize(), B.normalize(), A.normalize(), this.faces.push(new THREE.Face3(h, o, t, [new THREE.Vector3(w.x, w.y, w.z), new THREE.Vector3(B.x, B.y, B.z), new THREE.Vector3(A.x, A.y, A.z)])), this.faceVertexUvs[0].push([u, v, y]))
    }
    this.computeCentroids();
    this.computeFaceNormals();
    this.computeVertexNormals();
    this.boundingSphere = {radius: b}
};
THREE.SphereGeometry.prototype = new THREE.Geometry;
THREE.SphereGeometry.prototype.constructor = THREE.SphereGeometry;
THREE.TextGeometry = function (b, c) {
    var e = (new THREE.TextPath(b, c)).toShapes();
    c.amount = c.height !== void 0 ? c.height : 50;
    if (c.bevelThickness === void 0) c.bevelThickness = 10;
    if (c.bevelSize === void 0) c.bevelSize = 8;
    if (c.bevelEnabled === void 0) c.bevelEnabled = false;
    if (c.bend) {
        var f = e[e.length - 1].getBoundingBox().maxX;
        c.bendPath = new THREE.QuadraticBezierCurve(new THREE.Vector2(0, 0), new THREE.Vector2(f / 2, 120), new THREE.Vector2(f, 0))
    }
    THREE.ExtrudeGeometry.call(this, e, c)
};
THREE.TextGeometry.prototype = new THREE.ExtrudeGeometry;
THREE.TextGeometry.prototype.constructor = THREE.TextGeometry;
THREE.FontUtils = {
    faces: {}, face: "helvetiker", weight: "normal", style: "normal", size: 150, divisions: 10, getFace: function () {
        return this.faces[this.face][this.weight][this.style]
    }, getTextShapes: function (b, c) {
        return (new TextPath(b, c)).toShapes()
    }, loadFace: function (b) {
        var c = b.familyName.toLowerCase();
        this.faces[c] = this.faces[c] || {};
        this.faces[c][b.cssFontWeight] = this.faces[c][b.cssFontWeight] || {};
        this.faces[c][b.cssFontWeight][b.cssFontStyle] = b;
        return this.faces[c][b.cssFontWeight][b.cssFontStyle] = b
    }, drawText: function (b) {
        for (var c =
            this.getFace(), e = this.size / c.resolution, f = 0, k = String(b).split(""), m = k.length, h = [], b = 0; b < m; b++) {
            var n = new THREE.Path, n = this.extractGlyphPoints(k[b], c, e, f, n);
            f += n.offset;
            h.push(n.path)
        }
        return {paths: h, offset: f / 2}
    }, extractGlyphPoints: function (b, c, e, f, k) {
        var m = [], h, n, o, t, u, v, x, w, B, A, y = c.glyphs[b] || c.glyphs[ctxt.options.fallbackCharacter];
        if (y) {
            if (y.o) {
                c = y._cachedOutline || (y._cachedOutline = y.o.split(" "));
                o = c.length;
                for (b = 0; b < o;) switch (n = c[b++], n) {
                    case "m":
                        n = c[b++] * e + f;
                        t = c[b++] * e;
                        m.push(new THREE.Vector2(n,
                            t));
                        k.moveTo(n, t);
                        break;
                    case "l":
                        n = c[b++] * e + f;
                        t = c[b++] * e;
                        m.push(new THREE.Vector2(n, t));
                        k.lineTo(n, t);
                        break;
                    case "q":
                        n = c[b++] * e + f;
                        t = c[b++] * e;
                        x = c[b++] * e + f;
                        w = c[b++] * e;
                        k.quadraticCurveTo(x, w, n, t);
                        if (h = m[m.length - 1]) {
                            u = h.x;
                            v = h.y;
                            h = 1;
                            for (divisions = this.divisions; h <= divisions; h++) {
                                var D = h / divisions, C = THREE.Shape.Utils.b2(D, u, x, n),
                                    D = THREE.Shape.Utils.b2(D, v, w, t);
                                m.push(new THREE.Vector2(C, D))
                            }
                        }
                        break;
                    case "b":
                        if (n = c[b++] * e + f, t = c[b++] * e, x = c[b++] * e + f, w = c[b++] * -e, B = c[b++] * e + f, A = c[b++] * -e, k.bezierCurveTo(n, t,
                            x, w, B, A), h = m[m.length - 1]) {
                            u = h.x;
                            v = h.y;
                            h = 1;
                            for (divisions = this.divisions; h <= divisions; h++) D = h / divisions, C = THREE.Shape.Utils.b3(D, u, x, B, n), D = THREE.Shape.Utils.b3(D, v, w, A, t), m.push(new THREE.Vector2(C, D))
                        }
                }
            }
            return {offset: y.ha * e, points: m, path: k}
        }
    }
};
(function (b) {
    var c = function (b) {
        for (var c = b.length, k = 0, m = c - 1, h = 0; h < c; m = h++) k += b[m].x * b[h].y - b[h].x * b[m].y;
        return k * 0.5
    };
    b.Triangulate = function (b, f) {
        var k = b.length;
        if (k < 3) return null;
        var m = [], h = [], n = [], o, t, u;
        if (c(b) > 0) for (t = 0; t < k; t++) h[t] = t; else for (t = 0; t < k; t++) h[t] = k - 1 - t;
        var v = 2 * k;
        for (t = k - 1; k > 2;) {
            if (v-- <= 0) {
                console.log("Warning, unable to triangulate polygon!");
                break
            }
            o = t;
            k <= o && (o = 0);
            t = o + 1;
            k <= t && (t = 0);
            u = t + 1;
            k <= u && (u = 0);
            var x;
            a:{
                x = b;
                var w = o, B = t, A = u, y = k, D = h, C = void 0, L = void 0, z = void 0, E = void 0, N = void 0,
                    I = void 0, P = void 0, H = void 0, W = void 0, L = x[D[w]].x, z = x[D[w]].y, E = x[D[B]].x,
                    N = x[D[B]].y, I = x[D[A]].x, P = x[D[A]].y;
                if (1.0E-10 > (E - L) * (P - z) - (N - z) * (I - L)) x = false; else {
                    for (C = 0; C < y; C++) if (!(C == w || C == B || C == A)) {
                        var H = x[D[C]].x, W = x[D[C]].y, M = void 0, J = void 0, Q = void 0, O = void 0, Y = void 0,
                            V = void 0, Z = void 0, K = void 0, X = void 0, S = void 0, p = void 0, ca = void 0,
                            M = I - E, J = P - N, Q = L - I, O = z - P, Y = E - L, V = N - z, Z = H - L, K = W - z,
                            X = H - E, S = W - N, p = H - I, ca = W - P, M = M * S - J * X, Y = Y * K - V * Z,
                            Q = Q * ca - O * p;
                        if (M >= 0 && Q >= 0 && Y >= 0) {
                            x = false;
                            break a
                        }
                    }
                    x = true
                }
            }
            if (x) {
                m.push([b[h[o]],
                    b[h[t]], b[h[u]]]);
                n.push([h[o], h[t], h[u]]);
                o = t;
                for (u = t + 1; u < k; o++, u++) h[o] = h[u];
                k--;
                v = 2 * k
            }
        }
        return f ? n : m
    };
    b.Triangulate.area = c;
    return b
})(THREE.FontUtils);
window._typeface_js = {faces: THREE.FontUtils.faces, loadFace: THREE.FontUtils.loadFace};
THREE.TorusGeometry = function (b, c, e, f, k) {
    THREE.Geometry.call(this);
    this.radius = b || 100;
    this.tube = c || 40;
    this.segmentsR = e || 8;
    this.segmentsT = f || 6;
    this.arc = k || Math.PI * 2;
    k = new THREE.Vector3;
    b = [];
    c = [];
    for (e = 0; e <= this.segmentsR; e++) for (f = 0; f <= this.segmentsT; f++) {
        var m = f / this.segmentsT * this.arc, h = e / this.segmentsR * Math.PI * 2;
        k.x = this.radius * Math.cos(m);
        k.y = this.radius * Math.sin(m);
        var n = new THREE.Vector3;
        n.x = (this.radius + this.tube * Math.cos(h)) * Math.cos(m);
        n.y = (this.radius + this.tube * Math.cos(h)) * Math.sin(m);
        n.z =
            this.tube * Math.sin(h);
        this.vertices.push(new THREE.Vertex(n));
        b.push(new THREE.UV(f / this.segmentsT, 1 - e / this.segmentsR));
        c.push(n.clone().subSelf(k).normalize())
    }
    for (e = 1; e <= this.segmentsR; e++) for (f = 1; f <= this.segmentsT; f++) {
        var k = (this.segmentsT + 1) * e + f - 1, m = (this.segmentsT + 1) * (e - 1) + f - 1,
            h = (this.segmentsT + 1) * (e - 1) + f, n = (this.segmentsT + 1) * e + f,
            o = new THREE.Face4(k, m, h, n, [c[k], c[m], c[h], c[n]]);
        o.normal.addSelf(c[k]);
        o.normal.addSelf(c[m]);
        o.normal.addSelf(c[h]);
        o.normal.addSelf(c[n]);
        o.normal.normalize();
        this.faces.push(o);
        this.faceVertexUvs[0].push([b[k].clone(), b[m].clone(), b[h].clone(), b[n].clone()])
    }
    this.computeCentroids()
};
THREE.TorusGeometry.prototype = new THREE.Geometry;
THREE.TorusGeometry.prototype.constructor = THREE.TorusGeometry;
THREE.TorusKnotGeometry = function (b, c, e, f, k, m, h) {
    function n(b, e, c, f, h, m) {
        e = c / f * b;
        c = Math.cos(e);
        return new THREE.Vector3(h * (2 + c) * 0.5 * Math.cos(b), h * (2 + c) * Math.sin(b) * 0.5, m * h * Math.sin(e) * 0.5)
    }

    THREE.Geometry.call(this);
    this.radius = b || 200;
    this.tube = c || 40;
    this.segmentsR = e || 64;
    this.segmentsT = f || 8;
    this.p = k || 2;
    this.q = m || 3;
    this.heightScale = h || 1;
    this.grid = Array(this.segmentsR);
    e = new THREE.Vector3;
    f = new THREE.Vector3;
    m = new THREE.Vector3;
    for (b = 0; b < this.segmentsR; ++b) {
        this.grid[b] = Array(this.segmentsT);
        for (c = 0; c <
        this.segmentsT; ++c) {
            var o = b / this.segmentsR * 2 * this.p * Math.PI, h = c / this.segmentsT * 2 * Math.PI,
                k = n(o, h, this.q, this.p, this.radius, this.heightScale),
                o = n(o + 0.01, h, this.q, this.p, this.radius, this.heightScale);
            e.x = o.x - k.x;
            e.y = o.y - k.y;
            e.z = o.z - k.z;
            f.x = o.x + k.x;
            f.y = o.y + k.y;
            f.z = o.z + k.z;
            m.cross(e, f);
            f.cross(m, e);
            m.normalize();
            f.normalize();
            o = -this.tube * Math.cos(h);
            h = this.tube * Math.sin(h);
            k.x += o * f.x + h * m.x;
            k.y += o * f.y + h * m.y;
            k.z += o * f.z + h * m.z;
            this.grid[b][c] = this.vertices.push(new THREE.Vertex(new THREE.Vector3(k.x, k.y,
                k.z))) - 1
        }
    }
    for (b = 0; b < this.segmentsR; ++b) for (c = 0; c < this.segmentsT; ++c) {
        var f = (b + 1) % this.segmentsR, m = (c + 1) % this.segmentsT, k = this.grid[b][c], e = this.grid[f][c],
            f = this.grid[f][m], m = this.grid[b][m], h = new THREE.UV(b / this.segmentsR, c / this.segmentsT),
            o = new THREE.UV((b + 1) / this.segmentsR, c / this.segmentsT),
            t = new THREE.UV((b + 1) / this.segmentsR, (c + 1) / this.segmentsT),
            u = new THREE.UV(b / this.segmentsR, (c + 1) / this.segmentsT);
        this.faces.push(new THREE.Face4(k, e, f, m));
        this.faceVertexUvs[0].push([h, o, t, u])
    }
    this.computeCentroids();
    this.computeFaceNormals();
    this.computeVertexNormals()
};
THREE.TorusKnotGeometry.prototype = new THREE.Geometry;
THREE.TorusKnotGeometry.prototype.constructor = THREE.TorusKnotGeometry;
THREE.Loader = function (b) {
    this.statusDomElement = (this.showStatus = b) ? THREE.Loader.prototype.addStatusElement() : null;
    this.onLoadStart = function () {
    };
    this.onLoadProgress = function () {
    };
    this.onLoadComplete = function () {
    }
};
THREE.Loader.prototype = {
    addStatusElement: function () {
        var b = document.createElement("div");
        b.style.position = "absolute";
        b.style.right = "0px";
        b.style.top = "0px";
        b.style.fontSize = "0.8em";
        b.style.textAlign = "left";
        b.style.background = "rgba(0,0,0,0.25)";
        b.style.color = "#fff";
        b.style.width = "120px";
        b.style.padding = "0.5em 0.5em 0.5em 0.5em";
        b.style.zIndex = 1E3;
        b.innerHTML = "Loading ...";
        return b
    }, updateProgress: function (b) {
        var c = "Loaded ";
        c += b.total ? (100 * b.loaded / b.total).toFixed(0) + "%" : (b.loaded / 1E3).toFixed(2) + " KB";
        this.statusDomElement.innerHTML = c
    }, extractUrlbase: function (b) {
        b = b.split("/");
        b.pop();
        return b.join("/")
    }, init_materials: function (b, c, e) {
        b.materials = [];
        for (var f = 0; f < c.length; ++f) b.materials[f] = [THREE.Loader.prototype.createMaterial(c[f], e)]
    }, hasNormals: function (b) {
        var c, e, f = b.materials.length;
        for (e = 0; e < f; e++) if (c = b.materials[e][0], c instanceof THREE.MeshShaderMaterial) return true;
        return false
    }, createMaterial: function (b, c) {
        function e(b) {
            b = Math.log(b) / Math.LN2;
            return Math.floor(b) == b
        }

        function f(b, c) {
            var f =
                new Image;
            f.onload = function () {
                if (!e(this.width) || !e(this.height)) {
                    var c = Math.pow(2, Math.round(Math.log(this.width) / Math.LN2)),
                        f = Math.pow(2, Math.round(Math.log(this.height) / Math.LN2));
                    b.image.width = c;
                    b.image.height = f;
                    b.image.getContext("2d").drawImage(this, 0, 0, c, f)
                } else b.image = this;
                b.needsUpdate = true
            };
            f.src = c
        }

        function k(b, e, h, m, k, n) {
            var o = document.createElement("canvas");
            b[e] = new THREE.Texture(o);
            b[e].sourceFile = h;
            if (m) {
                b[e].repeat.set(m[0], m[1]);
                if (m[0] != 1) b[e].wrapS = THREE.RepeatWrapping;
                if (m[1] !=
                    1) b[e].wrapT = THREE.RepeatWrapping
            }
            k && b[e].offset.set(k[0], k[1]);
            if (n) {
                m = {repeat: THREE.RepeatWrapping, mirror: THREE.MirroredRepeatWrapping};
                if (m[n[0]] !== void 0) b[e].wrapS = m[n[0]];
                if (m[n[1]] !== void 0) b[e].wrapT = m[n[1]]
            }
            f(b[e], c + "/" + h)
        }

        function m(b) {
            return (b[0] * 255 << 16) + (b[1] * 255 << 8) + b[2] * 255
        }

        var h, n, o;
        n = "MeshLambertMaterial";
        h = {color: 15658734, opacity: 1, map: null, lightMap: null, normalMap: null, wireframe: b.wireframe};
        b.shading && (b.shading == "Phong" ? n = "MeshPhongMaterial" : b.shading == "Basic" && (n = "MeshBasicMaterial"));
        if (b.blending) if (b.blending == "Additive") h.blending = THREE.AdditiveBlending; else if (b.blending == "Subtractive") h.blending = THREE.SubtractiveBlending; else if (b.blending == "Multiply") h.blending = THREE.MultiplyBlending;
        if (b.transparent !== void 0 || b.opacity < 1) h.transparent = b.transparent;
        if (b.depthTest !== void 0) h.depthTest = b.depthTest;
        if (b.vertexColors !== void 0) if (b.vertexColors == "face") h.vertexColors = THREE.FaceColors; else if (b.vertexColors) h.vertexColors = THREE.VertexColors;
        if (b.colorDiffuse) h.color = m(b.colorDiffuse);
        else if (b.DbgColor) h.color = b.DbgColor;
        if (b.colorSpecular) h.specular = m(b.colorSpecular);
        if (b.colorAmbient) h.ambient = m(b.colorAmbient);
        if (b.transparency) h.opacity = b.transparency;
        if (b.specularCoef) h.shininess = b.specularCoef;
        b.mapDiffuse && c && k(h, "map", b.mapDiffuse, b.mapDiffuseRepeat, b.mapDiffuseOffset, b.mapDiffuseWrap);
        b.mapLight && c && k(h, "lightMap", b.mapLight, b.mapLightRepeat, b.mapLightOffset, b.mapLightWrap);
        b.mapNormal && c && k(h, "normalMap", b.mapNormal, b.mapNormalRepeat, b.mapNormalOffset, b.mapNormalWrap);
        b.mapSpecular && c && k(h, "specularMap", b.mapSpecular, b.mapSpecularRepeat, b.mapSpecularOffset, b.mapSpecularWrap);
        if (b.mapNormal) {
            var t = THREE.ShaderUtils.lib.normal, u = THREE.UniformsUtils.clone(t.uniforms), v = h.color;
            n = h.specular;
            o = h.ambient;
            var x = h.shininess;
            u.tNormal.texture = h.normalMap;
            if (b.mapNormalFactor) u.uNormalScale.value = b.mapNormalFactor;
            if (h.map) u.tDiffuse.texture = h.map, u.enableDiffuse.value = true;
            if (h.specularMap) u.tSpecular.texture = h.specularMap, u.enableSpecular.value = true;
            if (h.lightMap) u.tAO.texture =
                h.lightMap, u.enableAO.value = true;
            u.uDiffuseColor.value.setHex(v);
            u.uSpecularColor.value.setHex(n);
            u.uAmbientColor.value.setHex(o);
            u.uShininess.value = x;
            if (h.opacity) u.uOpacity.value = h.opacity;
            h = new THREE.MeshShaderMaterial({
                fragmentShader: t.fragmentShader,
                vertexShader: t.vertexShader,
                uniforms: u,
                lights: true,
                fog: true
            })
        } else h = new THREE[n](h);
        return h
    }, constructor: THREE.Loader
};
THREE.BinaryLoader = function (b) {
    THREE.Loader.call(this, b)
};
THREE.BinaryLoader.prototype = new THREE.Loader;
THREE.BinaryLoader.prototype.constructor = THREE.BinaryLoader;
THREE.BinaryLoader.prototype.supr = THREE.Loader.prototype;
THREE.BinaryLoader.prototype.load = function (b) {
    var c = b.model, e = b.callback, f = b.texture_path ? b.texture_path : THREE.Loader.prototype.extractUrlbase(c),
        k = b.bin_path ? b.bin_path : THREE.Loader.prototype.extractUrlbase(c), b = (new Date).getTime(),
        c = new Worker(c), m = this.showProgress ? THREE.Loader.prototype.updateProgress : null;
    c.onmessage = function (b) {
        THREE.BinaryLoader.prototype.loadAjaxBuffers(b.data.buffers, b.data.materials, e, k, f, m)
    };
    c.onerror = function (b) {
        alert("worker.onerror: " + b.message + "\n" + b.data);
        b.preventDefault()
    };
    c.postMessage(b)
};
THREE.BinaryLoader.prototype.loadAjaxBuffers = function (b, c, e, f, k, m) {
    var h = new XMLHttpRequest, n = f + "/" + b, o = 0;
    h.onreadystatechange = function () {
        h.readyState == 4 ? h.status == 200 || h.status == 0 ? THREE.BinaryLoader.prototype.createBinModel(h.responseText, e, k, c) : alert("Couldn't load [" + n + "] [" + h.status + "]") : h.readyState == 3 ? m && (o == 0 && (o = h.getResponseHeader("Content-Length")), m({
            total: o,
            loaded: h.responseText.length
        })) : h.readyState == 2 && (o = h.getResponseHeader("Content-Length"))
    };
    h.open("GET", n, true);
    h.overrideMimeType("text/plain; charset=x-user-defined");
    h.setRequestHeader("Content-Type", "text/plain");
    h.send(null)
};
THREE.BinaryLoader.prototype.createBinModel = function (b, c, e, f) {
    var k = function (e) {
        var c, k, o, t, u, v, x, w, B, A, y, D, C, L, z, E, N, I;

        function P(b, e) {
            var c = J(b, e), f = J(b, e + 1), h = J(b, e + 2), m = J(b, e + 3), k = (m << 1 & 255 | h >> 7) - 127;
            c |= (h & 127) << 16 | f << 8;
            return c == 0 && k == -127 ? 0 : (1 - 2 * (m >> 7)) * (1 + c * Math.pow(2, -23)) * Math.pow(2, k)
        }

        function H(b, e) {
            var c = J(b, e), f = J(b, e + 1), h = J(b, e + 2);
            return (J(b, e + 3) << 24) + (h << 16) + (f << 8) + c
        }

        function W(b, e) {
            var c = J(b, e);
            return (J(b, e + 1) << 8) + c
        }

        function M(b, e) {
            var c = J(b, e);
            return c > 127 ? c - 256 : c
        }

        function J(b, e) {
            return b.charCodeAt(e) &
                255
        }

        function Q(e) {
            var c, f, h;
            c = H(b, e);
            f = H(b, e + aa);
            h = H(b, e + la);
            e = W(b, e + ka);
            X.faces.push(new THREE.Face3(c, f, h, null, null, X.materials[e]))
        }

        function O(e) {
            var c, f, h, m, k, n;
            c = H(b, e);
            f = H(b, e + aa);
            h = H(b, e + la);
            m = W(b, e + ka);
            k = H(b, e + ja);
            n = H(b, e + ea);
            e = H(b, e + da);
            m = X.materials[m];
            var o = p[n * 3], t = p[n * 3 + 1];
            n = p[n * 3 + 2];
            var v = p[e * 3], w = p[e * 3 + 1], e = p[e * 3 + 2];
            X.faces.push(new THREE.Face3(c, f, h, [new THREE.Vector3(p[k * 3], p[k * 3 + 1], p[k * 3 + 2]), new THREE.Vector3(o, t, n), new THREE.Vector3(v, w, e)], null, m))
        }

        function Y(e) {
            var c, f, h, m;
            c =
                H(b, e);
            f = H(b, e + ga);
            h = H(b, e + ya);
            m = H(b, e + ma);
            e = W(b, e + na);
            X.faces.push(new THREE.Face4(c, f, h, m, null, null, X.materials[e]))
        }

        function V(e) {
            var c, f, h, m, k, n, o, t;
            c = H(b, e);
            f = H(b, e + ga);
            h = H(b, e + ya);
            m = H(b, e + ma);
            k = W(b, e + na);
            n = H(b, e + za);
            o = H(b, e + ta);
            t = H(b, e + Aa);
            e = H(b, e + Fa);
            k = X.materials[k];
            var v = p[o * 3], w = p[o * 3 + 1];
            o = p[o * 3 + 2];
            var u = p[t * 3], x = p[t * 3 + 1];
            t = p[t * 3 + 2];
            var y = p[e * 3], J = p[e * 3 + 1], e = p[e * 3 + 2];
            X.faces.push(new THREE.Face4(c, f, h, m, [new THREE.Vector3(p[n * 3], p[n * 3 + 1], p[n * 3 + 2]), new THREE.Vector3(v, w, o), new THREE.Vector3(u,
                x, t), new THREE.Vector3(y, J, e)], null, k))
        }

        function Z(e) {
            var c, f, h, m;
            c = H(b, e);
            f = H(b, e + Da);
            h = H(b, e + U);
            e = ca[c * 2];
            m = ca[c * 2 + 1];
            c = ca[f * 2];
            var k = X.faceVertexUvs[0];
            f = ca[f * 2 + 1];
            var n = ca[h * 2];
            h = ca[h * 2 + 1];
            var o = [];
            o.push(new THREE.UV(e, m));
            o.push(new THREE.UV(c, f));
            o.push(new THREE.UV(n, h));
            k.push(o)
        }

        function K(e) {
            var c, f, h, m, k, n;
            c = H(b, e);
            f = H(b, e + Ha);
            h = H(b, e + qa);
            m = H(b, e + ra);
            e = ca[c * 2];
            k = ca[c * 2 + 1];
            c = ca[f * 2];
            n = ca[f * 2 + 1];
            f = ca[h * 2];
            var o = X.faceVertexUvs[0];
            h = ca[h * 2 + 1];
            var t = ca[m * 2];
            m = ca[m * 2 + 1];
            var p = [];
            p.push(new THREE.UV(e,
                k));
            p.push(new THREE.UV(c, n));
            p.push(new THREE.UV(f, h));
            p.push(new THREE.UV(t, m));
            o.push(p)
        }

        var X = this, S = 0, p = [], ca = [], aa, la, ka, ja, ea, da, ga, ya, ma, na, za, ta, Aa, Fa, Da, U, Ha, qa, ra,
            R, G, Ga, ha, ia, ua;
        THREE.Geometry.call(this);
        THREE.Loader.prototype.init_materials(X, f, e);
        b.substr(S, 8);
        e = J(b, S + 8);
        c = J(b, S + 9);
        k = J(b, S + 10);
        o = J(b, S + 11);
        t = J(b, S + 12);
        u = J(b, S + 13);
        v = J(b, S + 14);
        x = J(b, S + 15);
        w = H(b, S + 16);
        B = H(b, S + 16 + 4);
        A = H(b, S + 16 + 8);
        y = H(b, S + 16 + 12);
        D = H(b, S + 16 + 16);
        C = H(b, S + 16 + 20);
        L = H(b, S + 16 + 24);
        z = H(b, S + 16 + 28);
        E = H(b, S + 16 + 32);
        N =
            H(b, S + 16 + 36);
        I = H(b, S + 16 + 40);
        S += e;
        aa = t;
        la = t * 2;
        ka = t * 3;
        ja = t * 3 + x;
        ea = t * 3 + x + u;
        da = t * 3 + x + u * 2;
        ga = t;
        ya = t * 2;
        ma = t * 3;
        na = t * 4;
        za = t * 4 + x;
        ta = t * 4 + x + u;
        Aa = t * 4 + x + u * 2;
        Fa = t * 4 + x + u * 3;
        Da = v;
        U = v * 2;
        Ha = v;
        qa = v * 2;
        ra = v * 3;
        e = t * 3 + x;
        ua = t * 4 + x;
        R = y * e;
        G = D * (e + u * 3);
        Ga = C * (e + v * 3);
        ha = L * (e + u * 3 + v * 3);
        ia = z * ua;
        e = E * (ua + u * 4);
        ua = N * (ua + v * 4);
        S += function (e) {
            for (var f, m, k, n = c * 3, o = e + w * n; e < o; e += n) f = P(b, e), m = P(b, e + c), k = P(b, e + c * 2), X.vertices.push(new THREE.Vertex(new THREE.Vector3(f, m, k)));
            return w * n
        }(S);
        S += function (e) {
            for (var c, f, h, m = k * 3, o = e + B * m; e < o; e += m) c =
                M(b, e), f = M(b, e + k), h = M(b, e + k * 2), p.push(c / 127, f / 127, h / 127);
            return B * m
        }(S);
        S += function (e) {
            for (var c, f, h = o * 2, m = e + A * h; e < m; e += h) c = P(b, e), f = P(b, e + o), ca.push(c, f);
            return A * h
        }(S);
        R = S + R;
        G = R + G;
        Ga = G + Ga;
        ha = Ga + ha;
        ia = ha + ia;
        e = ia + e;
        ua = e + ua;
        (function (b) {
            var e, c = t * 3 + x, f = c + v * 3, h = b + C * f;
            for (e = b; e < h; e += f) Q(e), Z(e + c);
            return h - b
        })(G);
        (function (b) {
            var e, c = t * 3 + x + u * 3, f = c + v * 3, h = b + L * f;
            for (e = b; e < h; e += f) O(e), Z(e + c);
            return h - b
        })(Ga);
        (function (b) {
            var e, c = t * 4 + x, f = c + v * 4, h = b + N * f;
            for (e = b; e < h; e += f) Y(e), K(e + c);
            return h - b
        })(e);
        (function (b) {
            var e,
                c = t * 4 + x + u * 4, f = c + v * 4, h = b + I * f;
            for (e = b; e < h; e += f) V(e), K(e + c);
            return h - b
        })(ua);
        (function (b) {
            var e, c = t * 3 + x, f = b + y * c;
            for (e = b; e < f; e += c) Q(e);
            return f - b
        })(S);
        (function (b) {
            var e, c = t * 3 + x + u * 3, f = b + D * c;
            for (e = b; e < f; e += c) O(e);
            return f - b
        })(R);
        (function (b) {
            var e, c = t * 4 + x, f = b + z * c;
            for (e = b; e < f; e += c) Y(e);
            return f - b
        })(ha);
        (function (b) {
            var e, c = t * 4 + x + u * 4, f = b + E * c;
            for (e = b; e < f; e += c) V(e);
            return f - b
        })(ia);
        this.computeCentroids();
        this.computeFaceNormals();
        THREE.Loader.prototype.hasNormals(this) && this.computeTangents()
    };
    k.prototype =
        new THREE.Geometry;
    k.prototype.constructor = k;
    c(new k(e))
};
var ColladaLoader = function () {
    function b(b, e, c) {
        for (var b = la.evaluate(b, la, Z, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null), f = {}, h = b.iterateNext(), m = 0; h;) {
            h = (new e).parse(h);
            if (h.id.length == 0) h.id = c + m++;
            f[h.id] = h;
            h = b.iterateNext()
        }
        return f
    }

    function c() {
        var b = 1E6, e = -b, c = 0, f;
        for (f in ga) for (var h = ga[f], m = 0; m < h.sampler.length; m++) {
            var k = h.sampler[m];
            k.create();
            b = Math.min(b, k.startTime);
            e = Math.max(e, k.endTime);
            c = Math.max(c, k.input.length)
        }
        return {start: b, end: e, frames: c}
    }

    function e(b, c, f, h) {
        b.world = b.world ||
            new THREE.Matrix4;
        b.world.copy(b.matrix);
        if (b.channels && b.channels.length) {
            var m = b.channels[0].sampler.output[f];
            m instanceof THREE.Matrix4 && b.world.copy(m)
        }
        h && b.world.multiply(h, b.world);
        c.push(b);
        for (h = 0; h < b.nodes.length; h++) e(b.nodes[h], c, f, b.world)
    }

    function f(b, f, h) {
        var m = ya[f.url];
        if (!m || !m.skin) console.log("could not find skin controller!"); else if (!f.skeleton || !f.skeleton.length) console.log("could not find the skeleton for the skin!"); else {
            var k = c(), f = ja.getChildById(f.skeleton[0], true) || ja.getChildBySid(f.skeleton[0],
                true), n, o, t, p, v = new THREE.Vector3, w;
            for (n = 0; n < b.vertices.length; n++) m.skin.bindShapeMatrix.multiplyVector3(b.vertices[n].position);
            for (h = 0; h < k.frames; h++) {
                var u = [], x = [];
                for (n = 0; n < b.vertices.length; n++) x.push(new THREE.Vertex(new THREE.Vector3));
                e(f, u, h);
                n = u;
                o = m.skin;
                for (p = 0; p < n.length; p++) {
                    t = n[p];
                    w = -1;
                    for (var y = 0; y < o.joints.length; y++) if (t.sid == o.joints[y]) {
                        w = y;
                        break
                    }
                    if (w >= 0) {
                        y = o.invBindMatrices[w];
                        t.invBindMatrix = y;
                        t.skinningMatrix = new THREE.Matrix4;
                        t.skinningMatrix.multiply(t.world, y);
                        t.weights =
                            [];
                        for (y = 0; y < o.weights.length; y++) for (var J = 0; J < o.weights[y].length; J++) {
                            var z = o.weights[y][J];
                            z.joint == w && t.weights.push(z)
                        }
                    } else throw"could not find joint!";
                }
                for (n = 0; n < u.length; n++) for (o = 0; o < u[n].weights.length; o++) t = u[n].weights[o], p = t.index, t = t.weight, w = b.vertices[p], p = x[p], v.x = w.position.x, v.y = w.position.y, v.z = w.position.z, u[n].skinningMatrix.multiplyVector3(v), p.position.x += v.x * t, p.position.y += v.y * t, p.position.z += v.z * t;
                b.morphTargets.push({name: "target_" + h, vertices: x})
            }
        }
    }

    function k(b) {
        var e =
            new THREE.Object3D, c, h, m;
        e.name = b.id || "";
        e.matrixAutoUpdate = false;
        e.matrix = b.matrix;
        for (m = 0; m < b.controllers.length; m++) {
            var n = ya[b.controllers[m].url];
            switch (n.type) {
                case "skin":
                    if (ma[n.skin.source]) {
                        var o = new B;
                        o.url = n.skin.source;
                        o.instance_material = b.controllers[m].instance_material;
                        b.geometries.push(o);
                        c = b.controllers[m]
                    } else if (ya[n.skin.source] && (h = n = ya[n.skin.source], n.morph && ma[n.morph.source])) o = new B, o.url = n.morph.source, o.instance_material = b.controllers[m].instance_material, b.geometries.push(o);
                    break;
                case "morph":
                    if (ma[n.morph.source]) o = new B, o.url = n.morph.source, o.instance_material = b.controllers[m].instance_material, b.geometries.push(o), h = b.controllers[m];
                    console.log("DAE: morph-controller partially supported.")
            }
        }
        for (m = 0; m < b.geometries.length; m++) {
            var n = b.geometries[m], o = n.instance_material, n = ma[n.url], t = {}, p = 0, v;
            if (n && n.mesh && n.mesh.primitives) {
                if (e.name.length == 0) e.name = n.id;
                if (o) for (j = 0; j < o.length; j++) {
                    v = o[j];
                    var w = za[na[v.target].instance_effect.url].shader;
                    w.material.opacity = !w.material.opacity ?
                        1 : w.material.opacity;
                    v = t[v.symbol] = w.material;
                    p++
                }
                o = v || new THREE.MeshLambertMaterial({color: 14540253, shading: THREE.FlatShading});
                n = n.mesh.geometry3js;
                if (p > 1) {
                    o = new THREE.MeshFaceMaterial;
                    for (j = 0; j < n.faces.length; j++) p = n.faces[j], p.materials = [t[p.daeMaterial]]
                }
                if (c !== void 0) f(n, c), o.morphTargets = true, o = new THREE.SkinnedMesh(n, o), o.skeleton = c.skeleton, o.skinController = ya[c.url], o.skinInstanceController = c, o.name = "skin_" + U.length, U.push(o); else if (h !== void 0) {
                    t = n;
                    p = h instanceof x ? ya[h.url] : h;
                    if (!p || !p.morph) console.log("could not find morph controller!");
                    else {
                        p = p.morph;
                        for (w = 0; w < p.targets.length; w++) {
                            var u = ma[p.targets[w]];
                            if (u.mesh && u.mesh.primitives && u.mesh.primitives.length) u = u.mesh.primitives[0].geometry, u.vertices.length === t.vertices.length && t.morphTargets.push({
                                name: "target_1",
                                vertices: u.vertices
                            })
                        }
                        t.morphTargets.push({name: "target_Z", vertices: t.vertices})
                    }
                    o.morphTargets = true;
                    o = new THREE.Mesh(n, o);
                    o.name = "morph_" + Da.length;
                    Da.push(o)
                } else o = new THREE.Mesh(n, o);
                e.addChild(o)
            }
        }
        for (m = 0; m < b.nodes.length; m++) e.addChild(k(b.nodes[m], b));
        return e
    }

    function m() {
        this.init_from = this.id = ""
    }

    function h() {
        this.type = this.name = this.id = "";
        this.morph = this.skin = null
    }

    function n() {
        this.weights = this.targets = this.source = this.method = null
    }

    function o() {
        this.source = "";
        this.bindShapeMatrix = null;
        this.invBindMatrices = [];
        this.joints = [];
        this.weights = []
    }

    function t() {
        this.name = this.id = "";
        this.nodes = [];
        this.scene = new THREE.Object3D
    }

    function u() {
        this.sid = this.name = this.id = "";
        this.nodes = [];
        this.controllers = [];
        this.transforms = [];
        this.geometries = [];
        this.channels = [];
        this.matrix =
            new THREE.Matrix4
    }

    function v() {
        this.type = this.sid = "";
        this.data = [];
        this.matrix = new THREE.Matrix4
    }

    function x() {
        this.url = "";
        this.skeleton = [];
        this.instance_material = []
    }

    function w() {
        this.target = this.symbol = ""
    }

    function B() {
        this.url = "";
        this.instance_material = []
    }

    function A() {
        this.id = "";
        this.mesh = null
    }

    function y(b) {
        this.geometry = b.id;
        this.primitives = [];
        this.geometry3js = this.vertices = null
    }

    function D() {
    }

    function C() {
        this.material = "";
        this.count = 0;
        this.inputs = [];
        this.vcount = null;
        this.p = [];
        this.geometry = new THREE.Geometry
    }

    function L() {
        this.source = "";
        this.stride = this.count = 0;
        this.params = []
    }

    function z() {
        this.input = {}
    }

    function E() {
        this.semantic = "";
        this.offset = 0;
        this.source = "";
        this.set = 0
    }

    function N(b) {
        this.id = b;
        this.type = null
    }

    function I() {
        this.name = this.id = "";
        this.instance_effect = null
    }

    function P() {
        this.color = new THREE.Color(0);
        this.color.setRGB(Math.random(), Math.random(), Math.random());
        this.color.a = 1;
        this.texcoord = this.texture = null
    }

    function H(b, e) {
        this.type = b;
        this.effect = e;
        this.material = null
    }

    function W(b) {
        this.effect =
            b;
        this.format = this.init_from = null
    }

    function M(b) {
        this.effect = b;
        this.mipfilter = this.magfilter = this.minfilter = this.wrap_t = this.wrap_s = this.source = null
    }

    function J() {
        this.name = this.id = "";
        this.sampler = this.surface = this.shader = null
    }

    function Q() {
        this.url = ""
    }

    function O() {
        this.name = this.id = "";
        this.source = {};
        this.sampler = [];
        this.channel = []
    }

    function Y(b) {
        this.animation = b;
        this.target = this.source = "";
        this.member = this.arrIndices = this.arrSyntax = this.dotSyntax = this.sid = null
    }

    function V(b) {
        this.id = "";
        this.animation =
            b;
        this.inputs = [];
        this.endTime = this.startTime = this.interpolation = this.output = this.input = null;
        this.duration = 0
    }

    function Z(b) {
        return b == "dae" ? "http://www.collada.org/2005/11/COLLADASchema" : null
    }

    function K(b) {
        for (var b = S(b), e = [], c = 0; c < b.length; c++) e.push(parseFloat(b[c]));
        return e
    }

    function X(b) {
        for (var b = S(b), e = [], c = 0; c < b.length; c++) e.push(parseInt(b[c], 10));
        return e
    }

    function S(b) {
        return b.replace(/^\s+/, "").replace(/\s+$/, "").split(/\s+/)
    }

    function p(b, e, c) {
        return b.hasAttribute(e) ? parseInt(b.getAttribute(e),
            10) : c
    }

    function ca(b, e) {
        if (b === void 0) {
            for (var c = "0."; c.length < e + 2;) c += "0";
            return c
        }
        e = e || 2;
        c = b.toString().split(".");
        for (c[1] = c.length > 1 ? c[1].substr(0, e) : "0"; c[1].length < e;) c[1] += "0";
        return c.join(".")
    }

    function aa(b, e) {
        var c = "";
        c += ca(b.x, e) + ",";
        c += ca(b.y, e) + ",";
        c += ca(b.z, e);
        return c
    }

    var la = null, ka = null, ja, ea = {}, da = {}, ga = {}, ya = {}, ma = {}, na = {}, za = {}, ta, Aa = null, Fa, Da,
        U, Ha = THREE.SmoothShading;
    m.prototype.parse = function (b) {
        this.id = b.getAttribute("id");
        for (var e = 0; e < b.childNodes.length; e++) {
            var c = b.childNodes[e];
            if (c.nodeName == "init_from") this.init_from = c.textContent
        }
        return this
    };
    h.prototype.parse = function (b) {
        this.id = b.getAttribute("id");
        this.name = b.getAttribute("name");
        this.type = "none";
        for (var e = 0; e < b.childNodes.length; e++) {
            var c = b.childNodes[e];
            switch (c.nodeName) {
                case "skin":
                    this.skin = (new o).parse(c);
                    this.type = c.nodeName;
                    break;
                case "morph":
                    this.morph = (new n).parse(c), this.type = c.nodeName
            }
        }
        return this
    };
    n.prototype.parse = function (b) {
        var e = {}, c = [], f;
        this.method = b.getAttribute("method");
        this.source = b.getAttribute("source").replace(/^#/,
            "");
        for (f = 0; f < b.childNodes.length; f++) {
            var h = b.childNodes[f];
            if (h.nodeType == 1) switch (h.nodeName) {
                case "source":
                    h = (new N).parse(h);
                    e[h.id] = h;
                    break;
                case "targets":
                    c = this.parseInputs(h);
                    break;
                default:
                    console.log(h.nodeName)
            }
        }
        for (f = 0; f < c.length; f++) switch (b = c[f], h = e[b.source], b.semantic) {
            case "MORPH_TARGET":
                this.targets = h.read();
                break;
            case "MORPH_WEIGHT":
                this.weights = h.read()
        }
        return this
    };
    n.prototype.parseInputs = function (b) {
        for (var e = [], c = 0; c < b.childNodes.length; c++) {
            var f = b.childNodes[c];
            if (f.nodeType ==
                1) switch (f.nodeName) {
                case "input":
                    e.push((new E).parse(f))
            }
        }
        return e
    };
    o.prototype.parse = function (b) {
        var e = {}, c, f;
        this.source = b.getAttribute("source").replace(/^#/, "");
        this.invBindMatrices = [];
        this.joints = [];
        this.weights = [];
        for (var h = 0; h < b.childNodes.length; h++) {
            var m = b.childNodes[h];
            if (m.nodeType == 1) switch (m.nodeName) {
                case "bind_shape_matrix":
                    m = K(m.textContent);
                    this.bindShapeMatrix = new THREE.Matrix4;
                    this.bindShapeMatrix.set(m[0], m[1], m[2], m[3], m[4], m[5], m[6], m[7], m[8], m[9], m[10], m[11], m[12], m[13],
                        m[14], m[15]);
                    break;
                case "source":
                    m = (new N).parse(m);
                    e[m.id] = m;
                    break;
                case "joints":
                    c = m;
                    break;
                case "vertex_weights":
                    f = m;
                    break;
                default:
                    console.log(m.nodeName)
            }
        }
        this.parseJoints(c, e);
        this.parseWeights(f, e);
        return this
    };
    o.prototype.parseJoints = function (b, e) {
        for (var c = 0; c < b.childNodes.length; c++) {
            var f = b.childNodes[c];
            if (f.nodeType == 1) switch (f.nodeName) {
                case "input":
                    var f = (new E).parse(f), h = e[f.source];
                    if (f.semantic == "JOINT") this.joints = h.read(); else if (f.semantic == "INV_BIND_MATRIX") this.invBindMatrices =
                        h.read()
            }
        }
    };
    o.prototype.parseWeights = function (b, e) {
        for (var c, f, h = [], m = 0; m < b.childNodes.length; m++) {
            var k = b.childNodes[m];
            if (k.nodeType == 1) switch (k.nodeName) {
                case "input":
                    h.push((new E).parse(k));
                    break;
                case "v":
                    c = X(k.textContent);
                    break;
                case "vcount":
                    f = X(k.textContent)
            }
        }
        for (m = k = 0; m < f.length; m++) {
            for (var n = f[m], o = [], t = 0; t < n; t++) {
                for (var p = {}, v = 0; v < h.length; v++) {
                    var w = h[v], u = c[k + w.offset];
                    switch (w.semantic) {
                        case "JOINT":
                            p.joint = u;
                            break;
                        case "WEIGHT":
                            p.weight = e[w.source].data[u]
                    }
                }
                o.push(p);
                k += h.length
            }
            for (t =
                     0; t < o.length; t++) o[t].index = m;
            this.weights.push(o)
        }
    };
    t.prototype.getChildById = function (b, e) {
        for (var c = 0; c < this.nodes.length; c++) {
            var f = this.nodes[c].getChildById(b, e);
            if (f) return f
        }
        return null
    };
    t.prototype.getChildBySid = function (b, e) {
        for (var c = 0; c < this.nodes.length; c++) {
            var f = this.nodes[c].getChildBySid(b, e);
            if (f) return f
        }
        return null
    };
    t.prototype.parse = function (b) {
        this.id = b.getAttribute("id");
        this.name = b.getAttribute("name");
        this.nodes = [];
        for (var e = 0; e < b.childNodes.length; e++) {
            var c = b.childNodes[e];
            if (c.nodeType == 1) switch (c.nodeName) {
                case "node":
                    this.nodes.push((new u).parse(c))
            }
        }
        return this
    };
    u.prototype.getChannelForTransform = function (b) {
        for (var e = 0; e < this.channels.length; e++) {
            var c = this.channels[e], f = c.target.split("/");
            f.shift();
            var h = f.shift(), m = h.indexOf(".") >= 0, k = h.indexOf("(") >= 0, n;
            if (m) f = h.split("."), h = f.shift(), f.shift(); else if (k) {
                n = h.split("(");
                h = n.shift();
                for (f = 0; f < n.length; f++) n[f] = parseInt(n[f].replace(/\)/, ""))
            }
            if (h == b) return c.info = {sid: h, dotSyntax: m, arrSyntax: k, arrIndices: n},
                c
        }
        return null
    };
    u.prototype.getChildById = function (b, e) {
        if (this.id == b) return this;
        if (e) for (var c = 0; c < this.nodes.length; c++) {
            var f = this.nodes[c].getChildById(b, e);
            if (f) return f
        }
        return null
    };
    u.prototype.getChildBySid = function (b, e) {
        if (this.sid == b) return this;
        if (e) for (var c = 0; c < this.nodes.length; c++) {
            var f = this.nodes[c].getChildBySid(b, e);
            if (f) return f
        }
        return null
    };
    u.prototype.getTransformBySid = function (b) {
        for (var e = 0; e < this.transforms.length; e++) if (this.transforms[e].sid == b) return this.transforms[e];
        return null
    };
    u.prototype.parse = function (b) {
        var e;
        this.id = b.getAttribute("id");
        this.sid = b.getAttribute("sid");
        this.name = b.getAttribute("name");
        this.type = b.getAttribute("type");
        this.type = this.type == "JOINT" ? this.type : "NODE";
        this.nodes = [];
        this.transforms = [];
        this.geometries = [];
        this.controllers = [];
        this.matrix = new THREE.Matrix4;
        for (var c = 0; c < b.childNodes.length; c++) if (e = b.childNodes[c], e.nodeType == 1) switch (e.nodeName) {
            case "node":
                this.nodes.push((new u).parse(e));
                break;
            case "instance_camera":
                break;
            case "instance_controller":
                this.controllers.push((new x).parse(e));
                break;
            case "instance_geometry":
                this.geometries.push((new B).parse(e));
                break;
            case "instance_light":
                break;
            case "instance_node":
                e = e.getAttribute("url").replace(/^#/, "");
                (e = la.evaluate(".//dae:library_nodes//dae:node[@id='" + e + "']", la, Z, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null).iterateNext()) && this.nodes.push((new u).parse(e));
                break;
            case "rotate":
            case "translate":
            case "scale":
            case "matrix":
            case "lookat":
            case "skew":
                this.transforms.push((new v).parse(e));
                break;
            case "extra":
                break;
            default:
                console.log(e.nodeName)
        }
        b =
            [];
        c = 1E6;
        e = -1E6;
        for (var f in ga) for (var h = ga[f], m = 0; m < h.channel.length; m++) {
            var k = h.channel[m], n = h.sampler[m];
            f = k.target.split("/")[0];
            if (f == this.id) n.create(), k.sampler = n, c = Math.min(c, n.startTime), e = Math.max(e, n.endTime), b.push(k)
        }
        if (b.length) this.startTime = c, this.endTime = e;
        if ((this.channels = b) && this.channels.length) {
            f = 1E7;
            for (i = 0; i < this.channels.length; i++) {
                b = this.channels[i].sampler;
                for (c = 0; c < b.input.length - 1; c++) f = Math.min(f, b.input[c + 1] - b.input[c])
            }
            c = [];
            for (b = this.startTime; b < this.endTime; b +=
                f) {
                e = b;
                for (var h = {}, o = void 0, m = 0; m < this.channels.length; m++) o = this.channels[m], h[o.sid] = o;
                k = new THREE.Matrix4;
                for (m = 0; m < this.transforms.length; m++) if (n = this.transforms[m], o = h[n.sid], o !== void 0) {
                    for (var t = o.sampler, p, o = 0; o < t.input.length - 1; o++) if (t.input[o + 1] > e) {
                        p = t.output[o];
                        break
                    }
                    k = p !== void 0 ? p instanceof THREE.Matrix4 ? k.multiply(k, p) : k.multiply(k, n.matrix) : k.multiply(k, n.matrix)
                } else k = k.multiply(k, n.matrix);
                e = k;
                c.push({time: b, pos: [e.n14, e.n24, e.n34], rotq: [0, 0, 0, 1], scl: [1, 1, 1]})
            }
            this.keys = c
        }
        this.updateMatrix();
        return this
    };
    u.prototype.updateMatrix = function () {
        this.matrix.identity();
        for (var b = 0; b < this.transforms.length; b++) this.matrix.multiply(this.matrix, this.transforms[b].matrix)
    };
    v.prototype.parse = function (b) {
        this.sid = b.getAttribute("sid");
        this.type = b.nodeName;
        this.data = K(b.textContent);
        this.updateMatrix();
        return this
    };
    v.prototype.updateMatrix = function () {
        var b = 0;
        this.matrix.identity();
        switch (this.type) {
            case "matrix":
                this.matrix.set(this.data[0], this.data[1], this.data[2], this.data[3], this.data[4], this.data[5],
                    this.data[6], this.data[7], this.data[8], this.data[9], this.data[10], this.data[11], this.data[12], this.data[13], this.data[14], this.data[15]);
                break;
            case "translate":
                this.matrix.setTranslation(this.data[0], this.data[1], this.data[2]);
                break;
            case "rotate":
                b = this.data[3] * (Math.PI / 180);
                this.matrix.setRotationAxis(new THREE.Vector3(this.data[0], this.data[1], this.data[2]), b);
                break;
            case "scale":
                this.matrix.setScale(this.data[0], this.data[1], this.data[2])
        }
        return this.matrix
    };
    x.prototype.parse = function (b) {
        this.url =
            b.getAttribute("url").replace(/^#/, "");
        this.skeleton = [];
        this.instance_material = [];
        for (var e = 0; e < b.childNodes.length; e++) {
            var c = b.childNodes[e];
            if (c.nodeType == 1) switch (c.nodeName) {
                case "skeleton":
                    this.skeleton.push(c.textContent.replace(/^#/, ""));
                    break;
                case "bind_material":
                    if (c = la.evaluate(".//dae:instance_material", c, Z, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null)) for (var f = c.iterateNext(); f;) this.instance_material.push((new w).parse(f)), f = c.iterateNext()
            }
        }
        return this
    };
    w.prototype.parse = function (b) {
        this.symbol =
            b.getAttribute("symbol");
        this.target = b.getAttribute("target").replace(/^#/, "");
        return this
    };
    B.prototype.parse = function (b) {
        this.url = b.getAttribute("url").replace(/^#/, "");
        this.instance_material = [];
        for (var e = 0; e < b.childNodes.length; e++) {
            var c = b.childNodes[e];
            if (c.nodeType == 1 && c.nodeName == "bind_material") {
                if (b = la.evaluate(".//dae:instance_material", c, Z, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null)) for (e = b.iterateNext(); e;) this.instance_material.push((new w).parse(e)), e = b.iterateNext();
                break
            }
        }
        return this
    };
    A.prototype.parse = function (b) {
        this.id = b.getAttribute("id");
        for (var e = 0; e < b.childNodes.length; e++) {
            var c = b.childNodes[e];
            switch (c.nodeName) {
                case "mesh":
                    this.mesh = (new y(this)).parse(c)
            }
        }
        return this
    };
    y.prototype.parse = function (b) {
        this.primitives = [];
        var e;
        for (e = 0; e < b.childNodes.length; e++) {
            var c = b.childNodes[e];
            switch (c.nodeName) {
                case "source":
                    var f = c.getAttribute("id");
                    ea[f] == void 0 && (ea[f] = (new N(f)).parse(c));
                    break;
                case "vertices":
                    this.vertices = (new z).parse(c);
                    break;
                case "triangles":
                    this.primitives.push((new C).parse(c));
                    break;
                case "polygons":
                    console.warn("polygon holes not yet supported!");
                case "polylist":
                    this.primitives.push((new D).parse(c))
            }
        }
        f = {};
        this.geometry3js = new THREE.Geometry;
        c = ea[this.vertices.input.POSITION.source].data;
        for (b = e = 0; e < c.length; e += 3, b++) {
            var h = new THREE.Vertex(new THREE.Vector3(c[e], c[e + 1], c[e + 2])), m = h, k = b, n = aa(m.position);
            f[n] === void 0 && (f[n] = {v: m, index: k});
            this.geometry3js.vertices.push(h)
        }
        for (e = 0; e < this.primitives.length; e++) primitive = this.primitives[e], primitive.setVertices(this.vertices),
            this.handlePrimitive(primitive, this.geometry3js, f);
        this.geometry3js.computeCentroids();
        this.geometry3js.computeFaceNormals();
        this.geometry3js.computeVertexNormals();
        this.geometry3js.computeBoundingBox();
        return this
    };
    y.prototype.handlePrimitive = function (b, e, c) {
        var f = 0, h, m, k = b.p, n = b.inputs, o, t, p, v = 0, w = 3, u = [];
        for (h = 0; h < n.length; h++) o = n[h], o.semantic == "TEXCOORD" && u.push(o.set);
        for (; f < k.length;) {
            var x = [], y = [], J = {};
            b.vcount && (w = b.vcount[v++]);
            for (h = 0; h < w; h++) for (m = 0; m < n.length; m++) switch (o = n[m], source =
                ea[o.source], t = k[f + h * n.length + o.offset], numParams = source.accessor.params.length, p = t * numParams, o.semantic) {
                case "VERTEX":
                    o = aa(e.vertices[t].position);
                    x.push(c[o].index);
                    break;
                case "NORMAL":
                    y.push(new THREE.Vector3(source.data[p + 0], source.data[p + 1], source.data[p + 2]));
                    break;
                case "TEXCOORD":
                    J[o.set] === void 0 && (J[o.set] = []), J[o.set].push(new THREE.UV(source.data[p + 0], source.data[p + 1]))
            }
            m = new THREE.Face3(x[0], x[1], x[2], [y[0], y[1], y[2]]);
            m.daeMaterial = b.material;
            e.faces.push(m);
            for (m = 0; m < u.length; m++) o =
                J[u[m]], e.faceVertexUvs[m].push([o[0], o[1], o[2]]);
            if (w > 3) for (h = 2; h < x.length - 1; h++) {
                m = new THREE.Face3(x[0], x[h], x[h + 1], [y[0], y[h], y[h + 1]]);
                m.daeMaterial = b.material;
                e.faces.push(m);
                for (m = 0; m < u.length; m++) o = J[u[m]], e.faceVertexUvs[m].push([o[0], o[h], o[h + 1]])
            }
            f += n.length * w
        }
    };
    D.prototype = new C;
    D.prototype.constructor = D;
    C.prototype.setVertices = function (b) {
        for (var e = 0; e < this.inputs.length; e++) if (this.inputs[e].source == b.id) this.inputs[e].source = b.input.POSITION.source
    };
    C.prototype.parse = function (b) {
        this.inputs =
            [];
        this.material = b.getAttribute("material");
        this.count = p(b, "count", 0);
        for (var e = 0; e < b.childNodes.length; e++) {
            var c = b.childNodes[e];
            switch (c.nodeName) {
                case "input":
                    this.inputs.push((new E).parse(b.childNodes[e]));
                    break;
                case "vcount":
                    this.vcount = X(c.textContent);
                    break;
                case "p":
                    this.p = X(c.textContent)
            }
        }
        return this
    };
    L.prototype.parse = function (b) {
        this.params = [];
        this.source = b.getAttribute("source");
        this.count = p(b, "count", 0);
        this.stride = p(b, "stride", 0);
        for (var e = 0; e < b.childNodes.length; e++) {
            var c = b.childNodes[e];
            if (c.nodeName == "param") {
                var f = {};
                f.name = c.getAttribute("name");
                f.type = c.getAttribute("type");
                this.params.push(f)
            }
        }
        return this
    };
    z.prototype.parse = function (b) {
        this.id = b.getAttribute("id");
        for (var e = 0; e < b.childNodes.length; e++) b.childNodes[e].nodeName == "input" && (input = (new E).parse(b.childNodes[e]), this.input[input.semantic] = input);
        return this
    };
    E.prototype.parse = function (b) {
        this.semantic = b.getAttribute("semantic");
        this.source = b.getAttribute("source").replace(/^#/, "");
        this.set = p(b, "set", -1);
        this.offset =
            p(b, "offset", 0);
        if (this.semantic == "TEXCOORD" && this.set < 0) this.set = 0;
        return this
    };
    N.prototype.parse = function (b) {
        this.id = b.getAttribute("id");
        for (var e = 0; e < b.childNodes.length; e++) {
            var c = b.childNodes[e];
            switch (c.nodeName) {
                case "bool_array":
                    for (var f = S(c.textContent), h = [], m = 0; m < f.length; m++) h.push(f[m] == "true" || f[m] == "1" ? true : false);
                    this.data = h;
                    this.type = c.nodeName;
                    break;
                case "float_array":
                    this.data = K(c.textContent);
                    this.type = c.nodeName;
                    break;
                case "int_array":
                    this.data = X(c.textContent);
                    this.type = c.nodeName;
                    break;
                case "IDREF_array":
                case "Name_array":
                    this.data = S(c.textContent);
                    this.type = c.nodeName;
                    break;
                case "technique_common":
                    for (f = 0; f < c.childNodes.length; f++) if (c.childNodes[f].nodeName == "accessor") {
                        this.accessor = (new L).parse(c.childNodes[f]);
                        break
                    }
            }
        }
        return this
    };
    N.prototype.read = function () {
        var b = [], e = this.accessor.params[0];
        switch (e.type) {
            case "IDREF":
            case "Name":
            case "float":
                return this.data;
            case "float4x4":
                for (e = 0; e < this.data.length; e += 16) {
                    var c = this.data.slice(e, e + 16), f = new THREE.Matrix4;
                    f.set(c[0],
                        c[1], c[2], c[3], c[4], c[5], c[6], c[7], c[8], c[9], c[10], c[11], c[12], c[13], c[14], c[15]);
                    b.push(f)
                }
                break;
            default:
                console.log("Dae::Source:read dont know how to read " + e.type)
        }
        return b
    };
    I.prototype.parse = function (b) {
        this.id = b.getAttribute("id");
        this.name = b.getAttribute("name");
        for (var e = 0; e < b.childNodes.length; e++) if (b.childNodes[e].nodeName == "instance_effect") {
            this.instance_effect = (new Q).parse(b.childNodes[e]);
            break
        }
        return this
    };
    P.prototype.isColor = function () {
        return this.texture == null
    };
    P.prototype.isTexture =
        function () {
            return this.texture != null
        };
    P.prototype.parse = function (b) {
        for (var e = 0; e < b.childNodes.length; e++) {
            var c = b.childNodes[e];
            if (c.nodeType == 1) switch (c.nodeName) {
                case "color":
                    c = K(c.textContent);
                    this.color = new THREE.Color(0);
                    this.color.setRGB(c[0], c[1], c[2]);
                    this.color.a = c[3];
                    break;
                case "texture":
                    this.texture = c.getAttribute("texture"), this.texcoord = c.getAttribute("texcoord")
            }
        }
        return this
    };
    H.prototype.parse = function (b) {
        for (var e = 0; e < b.childNodes.length; e++) {
            var c = b.childNodes[e];
            if (c.nodeType == 1) switch (c.nodeName) {
                case "ambient":
                case "emission":
                case "diffuse":
                case "specular":
                case "transparent":
                    this[c.nodeName] =
                        (new P).parse(c);
                    break;
                case "shininess":
                case "reflectivity":
                case "transparency":
                    var f;
                    f = la.evaluate(".//dae:float", c, Z, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);
                    for (var h = f.iterateNext(), m = []; h;) m.push(h), h = f.iterateNext();
                    f = m;
                    f.length > 0 && (this[c.nodeName] = parseFloat(f[0].textContent))
            }
        }
        this.create();
        return this
    };
    H.prototype.create = function () {
        var b = {}, e = this.transparency !== void 0 && this.transparency < 1, c;
        for (c in this) switch (c) {
            case "ambient":
            case "emission":
            case "diffuse":
            case "specular":
                var f =
                    this[c];
                if (f instanceof P) if (f.isTexture()) {
                    if (this.effect.sampler && this.effect.surface && this.effect.sampler.source == this.effect.surface.sid && (f = da[this.effect.surface.init_from])) b.map = THREE.ImageUtils.loadTexture(Fa + f.init_from), b.map.wrapS = THREE.RepeatWrapping, b.map.wrapT = THREE.RepeatWrapping, b.map.repeat.x = 1, b.map.repeat.y = -1
                } else c == "diffuse" ? b.color = f.color.getHex() : e || (b[c] = f.color.getHex());
                break;
            case "shininess":
            case "reflectivity":
                b[c] = this[c];
                break;
            case "transparency":
                if (e) b.transparent =
                    true, b.opacity = this[c], e = true
        }
        b.shading = Ha;
        return this.material = new THREE.MeshLambertMaterial(b)
    };
    W.prototype.parse = function (b) {
        for (var e = 0; e < b.childNodes.length; e++) {
            var c = b.childNodes[e];
            if (c.nodeType == 1) switch (c.nodeName) {
                case "init_from":
                    this.init_from = c.textContent;
                    break;
                case "format":
                    this.format = c.textContent;
                    break;
                default:
                    console.log("unhandled Surface prop: " + c.nodeName)
            }
        }
        return this
    };
    M.prototype.parse = function (b) {
        for (var e = 0; e < b.childNodes.length; e++) {
            var c = b.childNodes[e];
            if (c.nodeType ==
                1) switch (c.nodeName) {
                case "source":
                    this.source = c.textContent;
                    break;
                case "minfilter":
                    this.minfilter = c.textContent;
                    break;
                case "magfilter":
                    this.magfilter = c.textContent;
                    break;
                case "mipfilter":
                    this.mipfilter = c.textContent;
                    break;
                case "wrap_s":
                    this.wrap_s = c.textContent;
                    break;
                case "wrap_t":
                    this.wrap_t = c.textContent;
                    break;
                default:
                    console.log("unhandled Sampler2D prop: " + c.nodeName)
            }
        }
        return this
    };
    J.prototype.create = function () {
        if (this.shader == null) return null
    };
    J.prototype.parse = function (b) {
        this.id = b.getAttribute("id");
        this.name = b.getAttribute("name");
        this.shader = null;
        for (var e = 0; e < b.childNodes.length; e++) {
            var c = b.childNodes[e];
            if (c.nodeType == 1) switch (c.nodeName) {
                case "profile_COMMON":
                    this.parseTechnique(this.parseProfileCOMMON(c))
            }
        }
        return this
    };
    J.prototype.parseNewparam = function (b) {
        for (var e = b.getAttribute("sid"), c = 0; c < b.childNodes.length; c++) {
            var f = b.childNodes[c];
            if (f.nodeType == 1) switch (f.nodeName) {
                case "surface":
                    this.surface = (new W(this)).parse(f);
                    this.surface.sid = e;
                    break;
                case "sampler2D":
                    this.sampler = (new M(this)).parse(f);
                    this.sampler.sid = e;
                    break;
                case "extra":
                    break;
                default:
                    console.log(f.nodeName)
            }
        }
    };
    J.prototype.parseProfileCOMMON = function (b) {
        for (var e, c = 0; c < b.childNodes.length; c++) {
            var f = b.childNodes[c];
            if (f.nodeType == 1) switch (f.nodeName) {
                case "profile_COMMON":
                    this.parseProfileCOMMON(f);
                    break;
                case "technique":
                    e = f;
                    break;
                case "newparam":
                    this.parseNewparam(f);
                    break;
                case "extra":
                    break;
                default:
                    console.log(f.nodeName)
            }
        }
        return e
    };
    J.prototype.parseTechnique = function (b) {
        for (var e = 0; e < b.childNodes.length; e++) {
            var c = b.childNodes[e];
            if (c.nodeType == 1) switch (c.nodeName) {
                case "lambert":
                case "blinn":
                case "phong":
                    this.shader = (new H(c.nodeName, this)).parse(c)
            }
        }
    };
    Q.prototype.parse = function (b) {
        this.url = b.getAttribute("url").replace(/^#/, "");
        return this
    };
    O.prototype.parse = function (b) {
        this.id = b.getAttribute("id");
        this.name = b.getAttribute("name");
        this.source = {};
        for (var e = 0; e < b.childNodes.length; e++) {
            var c = b.childNodes[e];
            if (c.nodeType == 1) switch (c.nodeName) {
                case "source":
                    c = (new N).parse(c);
                    this.source[c.id] = c;
                    break;
                case "sampler":
                    this.sampler.push((new V(this)).parse(c));
                    break;
                case "channel":
                    this.channel.push((new Y(this)).parse(c))
            }
        }
        return this
    };
    Y.prototype.parse = function (b) {
        this.source = b.getAttribute("source").replace(/^#/, "");
        this.target = b.getAttribute("target");
        var e = this.target.split("/");
        e.shift();
        var b = e.shift(), c = b.indexOf(".") >= 0, f = b.indexOf("(") >= 0, h, m;
        if (c) e = b.split("."), b = e.shift(), m = e.shift(); else if (f) {
            h = b.split("(");
            b = h.shift();
            for (e = 0; e < h.length; e++) h[e] = parseInt(h[e].replace(/\)/, ""))
        }
        this.sid = b;
        this.dotSyntax = c;
        this.arrSyntax = f;
        this.arrIndices = h;
        this.member = m;
        return this
    };
    V.prototype.parse = function (b) {
        this.id = b.getAttribute("id");
        this.inputs = [];
        for (var e = 0; e < b.childNodes.length; e++) {
            var c = b.childNodes[e];
            if (c.nodeType == 1) switch (c.nodeName) {
                case "input":
                    this.inputs.push((new E).parse(c))
            }
        }
        return this
    };
    V.prototype.create = function () {
        for (var b = 0; b < this.inputs.length; b++) {
            var e = this.inputs[b], c = this.animation.source[e.source];
            switch (e.semantic) {
                case "INPUT":
                    this.input = c.read();
                    break;
                case "OUTPUT":
                    this.output = c.read();
                    break;
                case "INTERPOLATION":
                    this.interpolation =
                        c.read();
                    break;
                case "IN_TANGENT":
                    break;
                case "OUT_TANGENT":
                    break;
                default:
                    console.log(e.semantic)
            }
        }
        this.duration = this.endTime = this.startTime = 0;
        if (this.input.length) {
            this.startTime = 1E8;
            this.endTime = -1E8;
            for (b = 0; b < this.input.length; b++) this.startTime = Math.min(this.startTime, this.input[b]), this.endTime = Math.max(this.endTime, this.input[b]);
            this.duration = this.endTime - this.startTime
        }
    };
    return {
        load: function (e, f) {
            if (document.implementation && document.implementation.createDocument) {
                document.implementation.createDocument("http://www.collada.org/2005/11/COLLADASchema",
                    "COLLADA", null);
                e += "?rnd=" + Math.random();
                var n = new XMLHttpRequest;
                n.overrideMimeType && n.overrideMimeType("text/xml");
                n.onreadystatechange = function () {
                    if (n.readyState == 4 && (n.status == 0 || n.status == 200)) {
                        Aa = f;
                        var o, p = e;
                        la = n.responseXML;
                        o = Aa;
                        p !== void 0 && (p = p.split("/"), p.pop(), Fa = p.join("/") + "/");
                        da = b("//dae:library_images/dae:image", m, "image");
                        na = b("//dae:library_materials/dae:material", I, "material");
                        za = b("//dae:library_effects/dae:effect", J, "effect");
                        ma = b("//dae:library_geometries/dae:geometry", A, "geometry");
                        ya = b("//dae:library_controllers/dae:controller", h, "controller");
                        ga = b("//dae:library_animations/dae:animation", O, "animation");
                        ta = b(".//dae:library_visual_scenes/dae:visual_scene", t, "visual_scene");
                        Da = [];
                        U = [];
                        (p = la.evaluate(".//dae:scene/dae:instance_visual_scene", la, Z, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null).iterateNext()) ? (p = p.getAttribute("url").replace(/^#/, ""), ja = ta[p]) : ja = null;
                        ka = new THREE.Object3D;
                        for (p = 0; p < ja.nodes.length; p++) ka.addChild(k(ja.nodes[p]));
                        c();
                        for (var v in ga) ;
                        v = {
                            scene: ka,
                            morphs: Da,
                            skins: U,
                            dae: {
                                images: da,
                                materials: na,
                                effects: za,
                                geometries: ma,
                                controllers: ya,
                                animations: ga,
                                visualScenes: ta,
                                scene: ja
                            }
                        };
                        o && o(v)
                    }
                };
                n.open("GET", e, true);
                n.send(null)
            } else alert("Don't know how to parse XML!")
        }, setPreferredShading: function (b) {
            Ha = b
        }, applySkin: f, geometries: ma
    }
};
THREE.JSONLoader = function (b) {
    THREE.Loader.call(this, b)
};
THREE.JSONLoader.prototype = new THREE.Loader;
THREE.JSONLoader.prototype.constructor = THREE.JSONLoader;
THREE.JSONLoader.prototype.supr = THREE.Loader.prototype;
THREE.JSONLoader.prototype.load = function (b) {
    var c = this, e = b.model, f = b.callback, k = b.texture_path ? b.texture_path : this.extractUrlbase(e),
        b = new Worker(e);
    b.onmessage = function (b) {
        c.createModel(b.data, f, k);
        c.onLoadComplete()
    };
    this.onLoadStart();
    b.postMessage((new Date).getTime())
};
THREE.JSONLoader.prototype.createModel = function (b, c, e) {
    var f = new THREE.Geometry, k = b.scale !== void 0 ? 1 / b.scale : 1;
    this.init_materials(f, b.materials, e);
    (function (e) {
        if (b.version === void 0 || b.version != 2) console.error("Deprecated file format."); else {
            var c, k, o, t, u, v, x, w, B, A, y, D, C, L, z = b.faces;
            v = b.vertices;
            var E = b.normals, N = b.colors, I = 0;
            for (c = 0; c < b.uvs.length; c++) b.uvs[c].length && I++;
            for (c = 0; c < I; c++) f.faceUvs[c] = [], f.faceVertexUvs[c] = [];
            t = 0;
            for (u = v.length; t < u;) x = new THREE.Vertex, x.position.x = v[t++] * e, x.position.y =
                v[t++] * e, x.position.z = v[t++] * e, f.vertices.push(x);
            t = 0;
            for (u = z.length; t < u;) {
                e = z[t++];
                v = e & 1;
                o = e & 2;
                c = e & 4;
                k = e & 8;
                w = e & 16;
                x = e & 32;
                A = e & 64;
                e &= 128;
                v ? (y = new THREE.Face4, y.a = z[t++], y.b = z[t++], y.c = z[t++], y.d = z[t++], v = 4) : (y = new THREE.Face3, y.a = z[t++], y.b = z[t++], y.c = z[t++], v = 3);
                if (o) o = z[t++], y.materials = f.materials[o];
                o = f.faces.length;
                if (c) for (c = 0; c < I; c++) D = b.uvs[c], B = z[t++], L = D[B * 2], B = D[B * 2 + 1], f.faceUvs[c][o] = new THREE.UV(L, B);
                if (k) for (c = 0; c < I; c++) {
                    D = b.uvs[c];
                    C = [];
                    for (k = 0; k < v; k++) B = z[t++], L = D[B * 2], B = D[B * 2 + 1], C[k] =
                        new THREE.UV(L, B);
                    f.faceVertexUvs[c][o] = C
                }
                if (w) w = z[t++] * 3, k = new THREE.Vector3, k.x = E[w++], k.y = E[w++], k.z = E[w], y.normal = k;
                if (x) for (c = 0; c < v; c++) w = z[t++] * 3, k = new THREE.Vector3, k.x = E[w++], k.y = E[w++], k.z = E[w], y.vertexNormals.push(k);
                if (A) x = z[t++], x = new THREE.Color(N[x]), y.color = x;
                if (e) for (c = 0; c < v; c++) x = z[t++], x = new THREE.Color(N[x]), y.vertexColors.push(x);
                f.faces.push(y)
            }
        }
    })(k);
    (function () {
        var e, c, k, o;
        if (b.skinWeights) {
            e = 0;
            for (c = b.skinWeights.length; e < c; e += 2) k = b.skinWeights[e], o = b.skinWeights[e + 1], f.skinWeights.push(new THREE.Vector4(k,
                o, 0, 0))
        }
        if (b.skinIndices) {
            e = 0;
            for (c = b.skinIndices.length; e < c; e += 2) k = b.skinIndices[e], o = b.skinIndices[e + 1], f.skinIndices.push(new THREE.Vector4(k, o, 0, 0))
        }
        f.bones = b.bones;
        f.animation = b.animation
    })();
    (function (e) {
        if (b.morphTargets !== void 0) {
            var c, k, o, t, u, v, x, w, B;
            c = 0;
            for (k = b.morphTargets.length; c < k; c++) {
                f.morphTargets[c] = {};
                f.morphTargets[c].name = b.morphTargets[c].name;
                f.morphTargets[c].vertices = [];
                w = f.morphTargets[c].vertices;
                B = b.morphTargets[c].vertices;
                o = 0;
                for (t = B.length; o < t; o += 3) u = B[o] * e, v = B[o + 1] *
                    e, x = B[o + 2] * e, w.push(new THREE.Vertex(new THREE.Vector3(u, v, x)))
            }
        }
        if (b.morphColors !== void 0) {
            c = 0;
            for (k = b.morphColors.length; c < k; c++) {
                f.morphColors[c] = {};
                f.morphColors[c].name = b.morphColors[c].name;
                f.morphColors[c].colors = [];
                t = f.morphColors[c].colors;
                u = b.morphColors[c].colors;
                e = 0;
                for (o = u.length; e < o; e += 3) v = new THREE.Color(16755200), v.setRGB(u[e], u[e + 1], u[e + 2]), t.push(v)
            }
        }
    })(k);
    (function () {
        if (b.edges !== void 0) {
            var e, c, k;
            for (e = 0; e < b.edges.length; e += 2) c = b.edges[e], k = b.edges[e + 1], f.edges.push(new THREE.Edge(f.vertices[c],
                f.vertices[k], c, k))
        }
    })();
    f.computeCentroids();
    f.computeFaceNormals();
    this.hasNormals(f) && f.computeTangents();
    c(f)
};
THREE.SceneLoader = function () {
    this.onLoadStart = function () {
    };
    this.onLoadProgress = function () {
    };
    this.onLoadComplete = function () {
    };
    this.callbackSync = function () {
    };
    this.callbackProgress = function () {
    }
};
THREE.SceneLoader.prototype = {
    load: function (b, c) {
        var e = this, f = new Worker(b);
        f.postMessage(0);
        var k = THREE.Loader.prototype.extractUrlbase(b);
        f.onmessage = function (b) {
            function f(b, e) {
                return e == "relativeToHTML" ? b : k + "/" + b
            }

            function n() {
                for (w in J.objects) if (!K.objects[w]) if (C = J.objects[w], C.geometry !== void 0) {
                    if (N = K.geometries[C.geometry]) {
                        var b = false;
                        W = [];
                        for (S = 0; S < C.materials.length; S++) W[S] = K.materials[C.materials[S]], b = W[S] instanceof THREE.MeshShaderMaterial;
                        b && N.computeTangents();
                        L = C.position;
                        r = C.rotation;
                        q = C.quaternion;
                        s = C.scale;
                        q = 0;
                        W.length == 0 && (W[0] = new THREE.MeshFaceMaterial);
                        W.length > 1 && (W = [new THREE.MeshFaceMaterial]);
                        object = new THREE.Mesh(N, W);
                        object.name = w;
                        object.position.set(L[0], L[1], L[2]);
                        q ? (object.quaternion.set(q[0], q[1], q[2], q[3]), object.useQuaternion = true) : object.rotation.set(r[0], r[1], r[2]);
                        object.scale.set(s[0], s[1], s[2]);
                        object.visible = C.visible;
                        K.scene.addObject(object);
                        K.objects[w] = object;
                        C.meshCollider && (b = THREE.CollisionUtils.MeshColliderWBox(object), K.scene.collisions.colliders.push(b));
                        if (C.castsShadow) b = new THREE.ShadowVolume(N), K.scene.addChild(b), b.position = object.position, b.rotation = object.rotation, b.scale = object.scale;
                        C.trigger && C.trigger.toLowerCase() != "none" && (b = {
                            type: C.trigger,
                            object: C
                        }, K.triggers[object.name] = b)
                    }
                } else L = C.position, r = C.rotation, q = C.quaternion, s = C.scale, q = 0, object = new THREE.Object3D, object.name = w, object.position.set(L[0], L[1], L[2]), q ? (object.quaternion.set(q[0], q[1], q[2], q[3]), object.useQuaternion = true) : object.rotation.set(r[0], r[1], r[2]), object.scale.set(s[0],
                    s[1], s[2]), object.visible = C.visible !== void 0 ? C.visible : false, K.scene.addObject(object), K.objects[w] = object, K.empties[w] = object, C.trigger && C.trigger.toLowerCase() != "none" && (b = {
                    type: C.trigger,
                    object: C
                }, K.triggers[object.name] = b)
            }

            function o(b) {
                return function (c) {
                    K.geometries[b] = c;
                    n();
                    O -= 1;
                    e.onLoadComplete();
                    u()
                }
            }

            function t(b) {
                return function (e) {
                    K.geometries[b] = e
                }
            }

            function u() {
                e.callbackProgress({totalModels: V, totalTextures: Z, loadedModels: V - O, loadedTextures: Z - Y}, K);
                e.onLoadProgress();
                O == 0 && Y == 0 && c(K)
            }

            var v, x, w, B, A, y, D, C, L, z, E, N, I, P, H, W, M, J, Q, O, Y, V, Z, K;
            J = b.data;
            H = new THREE.BinaryLoader;
            Q = new THREE.JSONLoader;
            Y = O = 0;
            K = {
                scene: new THREE.Scene,
                geometries: {},
                materials: {},
                textures: {},
                objects: {},
                cameras: {},
                lights: {},
                fogs: {},
                triggers: {},
                empties: {}
            };
            b = false;
            for (w in J.objects) if (C = J.objects[w], C.meshCollider) {
                b = true;
                break
            }
            if (b) K.scene.collisions = new THREE.CollisionSystem;
            if (J.transform) {
                b = J.transform.position;
                z = J.transform.rotation;
                var X = J.transform.scale;
                b && K.scene.position.set(b[0], b[1], b[2]);
                z && K.scene.rotation.set(z[0],
                    z[1], z[2]);
                X && K.scene.scale.set(X[0], X[1], X[2]);
                (b || z || X) && K.scene.updateMatrix()
            }
            b = function () {
                Y -= 1;
                u();
                e.onLoadComplete()
            };
            for (A in J.cameras) {
                z = J.cameras[A];
                if (z.type == "perspective") I = new THREE.Camera(z.fov, z.aspect, z.near, z.far); else if (z.type == "ortho") I = new THREE.Camera, I.projectionMatrix = THREE.Matrix4.makeOrtho(z.left, z.right, z.top, z.bottom, z.near, z.far);
                L = z.position;
                z = z.target;
                I.position.set(L[0], L[1], L[2]);
                I.target.position.set(z[0], z[1], z[2]);
                K.cameras[A] = I
            }
            for (B in J.lights) A = J.lights[B],
                I = A.color !== void 0 ? A.color : 16777215, z = A.intensity !== void 0 ? A.intensity : 1, A.type == "directional" ? (L = A.direction, M = new THREE.DirectionalLight(I, z), M.position.set(L[0], L[1], L[2]), M.position.normalize()) : A.type == "point" ? (L = A.position, d = A.distance, M = new THREE.PointLight(I, z, d), M.position.set(L[0], L[1], L[2])) : A.type == "ambient" && (M = new THREE.AmbientLight(I)), K.scene.addLight(M), K.lights[B] = M;
            for (y in J.fogs) B = J.fogs[y], B.type == "linear" ? P = new THREE.Fog(0, B.near, B.far) : B.type == "exp2" && (P = new THREE.FogExp2(0,
                B.density)), z = B.color, P.color.setRGB(z[0], z[1], z[2]), K.fogs[y] = P;
            if (K.cameras && J.defaults.camera) K.currentCamera = K.cameras[J.defaults.camera];
            if (K.fogs && J.defaults.fog) K.scene.fog = K.fogs[J.defaults.fog];
            z = J.defaults.bgcolor;
            K.bgColor = new THREE.Color;
            K.bgColor.setRGB(z[0], z[1], z[2]);
            K.bgColorAlpha = J.defaults.bgalpha;
            for (v in J.geometries) if (y = J.geometries[v], y.type == "bin_mesh" || y.type == "ascii_mesh") O += 1, e.onLoadStart();
            V = O;
            for (v in J.geometries) y = J.geometries[v], y.type == "cube" ? (N = new THREE.CubeGeometry(y.width,
                y.height, y.depth, y.segmentsWidth, y.segmentsHeight, y.segmentsDepth, null, y.flipped, y.sides), K.geometries[v] = N) : y.type == "plane" ? (N = new THREE.PlaneGeometry(y.width, y.height, y.segmentsWidth, y.segmentsHeight), K.geometries[v] = N) : y.type == "sphere" ? (N = new THREE.SphereGeometry(y.radius, y.segmentsWidth, y.segmentsHeight), K.geometries[v] = N) : y.type == "cylinder" ? (N = new THREE.CylinderGeometry(y.numSegs, y.topRad, y.botRad, y.height, y.topOffset, y.botOffset), K.geometries[v] = N) : y.type == "torus" ? (N = new THREE.TorusGeometry(y.radius,
                y.tube, y.segmentsR, y.segmentsT), K.geometries[v] = N) : y.type == "icosahedron" ? (N = new THREE.IcosahedronGeometry(y.subdivisions), K.geometries[v] = N) : y.type == "bin_mesh" ? H.load({
                model: f(y.url, J.urlBaseType),
                callback: o(v)
            }) : y.type == "ascii_mesh" ? Q.load({
                model: f(y.url, J.urlBaseType),
                callback: o(v)
            }) : y.type == "embedded_mesh" && (y = J.embeds[y.id]) && Q.createModel(y, t(v), "");
            for (D in J.textures) if (v = J.textures[D], v.url instanceof Array) {
                Y += v.url.length;
                for (H = 0; H < v.url.length; H++) e.onLoadStart()
            } else Y += 1, e.onLoadStart();
            Z = Y;
            for (D in J.textures) {
                v = J.textures[D];
                if (v.mapping != void 0 && THREE[v.mapping] != void 0) v.mapping = new THREE[v.mapping];
                if (v.url instanceof Array) {
                    H = [];
                    for (var S = 0; S < v.url.length; S++) H[S] = f(v.url[S], J.urlBaseType);
                    H = THREE.ImageUtils.loadTextureCube(H, v.mapping, b)
                } else {
                    H = THREE.ImageUtils.loadTexture(f(v.url, J.urlBaseType), v.mapping, b);
                    if (THREE[v.minFilter] != void 0) H.minFilter = THREE[v.minFilter];
                    if (THREE[v.magFilter] != void 0) H.magFilter = THREE[v.magFilter];
                    if (v.repeat) {
                        H.repeat.set(v.repeat[0], v.repeat[1]);
                        if (v.repeat[0] != 1) H.wrapS = THREE.RepeatWrapping;
                        if (v.repeat[1] != 1) H.wrapT = THREE.RepeatWrapping
                    }
                    v.offset && H.offset.set(v.offset[0], v.offset[1]);
                    if (v.wrap) {
                        Q = {repeat: THREE.RepeatWrapping, mirror: THREE.MirroredRepeatWrapping};
                        if (Q[v.wrap[0]] !== void 0) H.wrapS = Q[v.wrap[0]];
                        if (Q[v.wrap[1]] !== void 0) H.wrapT = Q[v.wrap[1]]
                    }
                }
                K.textures[D] = H
            }
            for (x in J.materials) {
                D = J.materials[x];
                for (E in D.parameters) if (E == "envMap" || E == "map" || E == "lightMap") D.parameters[E] = K.textures[D.parameters[E]]; else if (E == "shading") D.parameters[E] =
                    D.parameters[E] == "flat" ? THREE.FlatShading : THREE.SmoothShading; else if (E == "blending") D.parameters[E] = THREE[D.parameters[E]] ? THREE[D.parameters[E]] : THREE.NormalBlending; else if (E == "combine") D.parameters[E] = D.parameters[E] == "MixOperation" ? THREE.MixOperation : THREE.MultiplyOperation; else if (E == "vertexColors") if (D.parameters[E] == "face") D.parameters[E] = THREE.FaceColors; else if (D.parameters[E]) D.parameters[E] = THREE.VertexColors;
                if (D.parameters.opacity !== void 0 && D.parameters.opacity < 1) D.parameters.transparent =
                    true;
                if (D.parameters.normalMap) {
                    v = THREE.ShaderUtils.lib.normal;
                    b = THREE.UniformsUtils.clone(v.uniforms);
                    H = D.parameters.color;
                    Q = D.parameters.specular;
                    y = D.parameters.ambient;
                    P = D.parameters.shininess;
                    b.tNormal.texture = K.textures[D.parameters.normalMap];
                    if (D.parameters.normalMapFactor) b.uNormalScale.value = D.parameters.normalMapFactor;
                    if (D.parameters.map) b.tDiffuse.texture = D.parameters.map, b.enableDiffuse.value = true;
                    if (D.parameters.lightMap) b.tAO.texture = D.parameters.lightMap, b.enableAO.value = true;
                    if (D.parameters.specularMap) b.tSpecular.texture =
                        K.textures[D.parameters.specularMap], b.enableSpecular.value = true;
                    b.uDiffuseColor.value.setHex(H);
                    b.uSpecularColor.value.setHex(Q);
                    b.uAmbientColor.value.setHex(y);
                    b.uShininess.value = P;
                    if (D.parameters.opacity) b.uOpacity.value = D.parameters.opacity;
                    D = new THREE.MeshShaderMaterial({
                        fragmentShader: v.fragmentShader,
                        vertexShader: v.vertexShader,
                        uniforms: b,
                        lights: true,
                        fog: true
                    })
                } else D = new THREE[D.type](D.parameters);
                K.materials[x] = D
            }
            n();
            e.callbackSync(K)
        }
    }, constructor: THREE.SceneLoader
};
THREE.UTF8Loader = function () {
};
THREE.UTF8Loader.prototype = new THREE.UTF8Loader;
THREE.UTF8Loader.prototype.constructor = THREE.UTF8Loader;
THREE.UTF8Loader.prototype.load = function (b) {
    var c = new XMLHttpRequest, e = b.model, f = b.callback, k = b.scale !== void 0 ? b.scale : 1,
        m = b.offsetX !== void 0 ? b.offsetX : 0, h = b.offsetY !== void 0 ? b.offsetY : 0,
        n = b.offsetZ !== void 0 ? b.offsetZ : 0;
    c.onreadystatechange = function () {
        c.readyState == 4 ? c.status == 200 || c.status == 0 ? THREE.UTF8Loader.prototype.createModel(c.responseText, f, k, m, h, n) : alert("Couldn't load [" + e + "] [" + c.status + "]") : c.readyState != 3 && c.readyState == 2 && c.getResponseHeader("Content-Length")
    };
    c.open("GET", e, true);
    c.send(null)
};
THREE.UTF8Loader.prototype.decompressMesh = function (b) {
    var c = b.charCodeAt(0);
    c >= 57344 && (c -= 2048);
    c++;
    for (var e = new Float32Array(8 * c), f = 1, k = 0; k < 8; k++) {
        for (var m = 0, h = 0; h < c; ++h) {
            var n = b.charCodeAt(h + f);
            m += n >> 1 ^ -(n & 1);
            e[8 * h + k] = m
        }
        f += c
    }
    c = b.length - f;
    m = new Uint16Array(c);
    for (k = h = 0; k < c; k++) n = b.charCodeAt(k + f), m[k] = h - n, n == 0 && h++;
    return [e, m]
};
THREE.UTF8Loader.prototype.createModel = function (b, c, e, f, k, m) {
    var h = function () {
        var c = this;
        c.materials = [];
        THREE.Geometry.call(this);
        var h = THREE.UTF8Loader.prototype.decompressMesh(b), t = [], u = [];
        (function (b, h, o) {
            for (var t, u, y, D = b.length; o < D; o += h) t = b[o], u = b[o + 1], y = b[o + 2], t = t / 16383 * e, u = u / 16383 * e, y = y / 16383 * e, t += f, u += k, y += m, c.vertices.push(new THREE.Vertex(new THREE.Vector3(t, u, y)))
        })(h[0], 8, 0);
        (function (b, e, c) {
            for (var f, h, k = b.length; c < k; c += e) f = b[c], h = b[c + 1], f /= 1023, h /= 1023, u.push(f, h)
        })(h[0], 8, 3);
        (function (b,
                   e, c) {
            for (var f, h, k, m = b.length; c < m; c += e) f = b[c], h = b[c + 1], k = b[c + 2], f = (f - 512) / 511, h = (h - 512) / 511, k = (k - 512) / 511, t.push(f, h, k)
        })(h[0], 8, 5);
        (function (b) {
            var e, f, h, k, m, o, C, L, z, E = b.length;
            for (e = 0; e < E; e += 3) {
                f = b[e];
                h = b[e + 1];
                k = b[e + 2];
                m = c;
                L = f;
                z = h;
                o = k;
                C = f;
                var N = h, I = k, P = m.materials[0], H = t[N * 3], W = t[N * 3 + 1], N = t[N * 3 + 2], M = t[I * 3],
                    J = t[I * 3 + 1], I = t[I * 3 + 2];
                C = new THREE.Vector3(t[C * 3], t[C * 3 + 1], t[C * 3 + 2]);
                N = new THREE.Vector3(H, W, N);
                I = new THREE.Vector3(M, J, I);
                m.faces.push(new THREE.Face3(L, z, o, [C, N, I], null, P));
                m = u[f * 2];
                f = u[f * 2 +
                1];
                o = u[h * 2];
                C = u[h * 2 + 1];
                L = u[k * 2];
                z = u[k * 2 + 1];
                k = c.faceVertexUvs[0];
                h = o;
                o = C;
                C = [];
                C.push(new THREE.UV(m, f));
                C.push(new THREE.UV(h, o));
                C.push(new THREE.UV(L, z));
                k.push(C)
            }
        })(h[1]);
        this.computeCentroids();
        this.computeFaceNormals()
    };
    h.prototype = new THREE.Geometry;
    h.prototype.constructor = h;
    c(new h)
};
THREE.MarchingCubes = function (b, c) {
    THREE.Object3D.call(this);
    this.materials = c instanceof Array ? c : [c];
    this.init = function (b) {
        this.isolation = 80;
        this.size = b;
        this.size2 = this.size * this.size;
        this.size3 = this.size2 * this.size;
        this.halfsize = this.size / 2;
        this.delta = 2 / this.size;
        this.yd = this.size;
        this.zd = this.size2;
        this.field = new Float32Array(this.size3);
        this.normal_cache = new Float32Array(this.size3 * 3);
        this.vlist = new Float32Array(36);
        this.nlist = new Float32Array(36);
        this.firstDraw = true;
        this.maxCount = 4096;
        this.count =
            0;
        this.hasNormal = this.hasPos = false;
        this.positionArray = new Float32Array(this.maxCount * 3);
        this.normalArray = new Float32Array(this.maxCount * 3)
    };
    this.lerp = function (b, c, k) {
        return b + (c - b) * k
    };
    this.VIntX = function (b, c, k, m, h, n, o, t, u, v) {
        h = (h - u) / (v - u);
        u = this.normal_cache;
        c[m] = n + h * this.delta;
        c[m + 1] = o;
        c[m + 2] = t;
        k[m] = this.lerp(u[b], u[b + 3], h);
        k[m + 1] = this.lerp(u[b + 1], u[b + 4], h);
        k[m + 2] = this.lerp(u[b + 2], u[b + 5], h)
    };
    this.VIntY = function (b, c, k, m, h, n, o, t, u, v) {
        h = (h - u) / (v - u);
        u = this.normal_cache;
        c[m] = n;
        c[m + 1] = o + h * this.delta;
        c[m +
        2] = t;
        c = b + this.yd * 3;
        k[m] = this.lerp(u[b], u[c], h);
        k[m + 1] = this.lerp(u[b + 1], u[c + 1], h);
        k[m + 2] = this.lerp(u[b + 2], u[c + 2], h)
    };
    this.VIntZ = function (b, c, k, m, h, n, o, t, u, v) {
        h = (h - u) / (v - u);
        u = this.normal_cache;
        c[m] = n;
        c[m + 1] = o;
        c[m + 2] = t + h * this.delta;
        c = b + this.zd * 3;
        k[m] = this.lerp(u[b], u[c], h);
        k[m + 1] = this.lerp(u[b + 1], u[c + 1], h);
        k[m + 2] = this.lerp(u[b + 2], u[c + 2], h)
    };
    this.compNorm = function (b) {
        var c = b * 3;
        this.normal_cache[c] == 0 && (this.normal_cache[c] = this.field[b - 1] - this.field[b + 1], this.normal_cache[c + 1] = this.field[b - this.yd] - this.field[b +
        this.yd], this.normal_cache[c + 2] = this.field[b - this.zd] - this.field[b + this.zd])
    };
    this.polygonize = function (b, c, k, m, h, n) {
        var o = m + 1, t = m + this.yd, u = m + this.zd, v = o + this.yd, x = o + this.zd, w = m + this.yd + this.zd,
            B = o + this.yd + this.zd, A = 0, y = this.field[m], D = this.field[o], C = this.field[t],
            L = this.field[v], z = this.field[u], E = this.field[x], N = this.field[w], I = this.field[B];
        y < h && (A |= 1);
        D < h && (A |= 2);
        C < h && (A |= 8);
        L < h && (A |= 4);
        z < h && (A |= 16);
        E < h && (A |= 32);
        N < h && (A |= 128);
        I < h && (A |= 64);
        var P = THREE.edgeTable[A];
        if (P == 0) return 0;
        var H = this.delta,
            W = b + H, M = c + H, H = k + H;
        P & 1 && (this.compNorm(m), this.compNorm(o), this.VIntX(m * 3, this.vlist, this.nlist, 0, h, b, c, k, y, D));
        P & 2 && (this.compNorm(o), this.compNorm(v), this.VIntY(o * 3, this.vlist, this.nlist, 3, h, W, c, k, D, L));
        P & 4 && (this.compNorm(t), this.compNorm(v), this.VIntX(t * 3, this.vlist, this.nlist, 6, h, b, M, k, C, L));
        P & 8 && (this.compNorm(m), this.compNorm(t), this.VIntY(m * 3, this.vlist, this.nlist, 9, h, b, c, k, y, C));
        P & 16 && (this.compNorm(u), this.compNorm(x), this.VIntX(u * 3, this.vlist, this.nlist, 12, h, b, c, H, z, E));
        P & 32 && (this.compNorm(x),
            this.compNorm(B), this.VIntY(x * 3, this.vlist, this.nlist, 15, h, W, c, H, E, I));
        P & 64 && (this.compNorm(w), this.compNorm(B), this.VIntX(w * 3, this.vlist, this.nlist, 18, h, b, M, H, N, I));
        P & 128 && (this.compNorm(u), this.compNorm(w), this.VIntY(u * 3, this.vlist, this.nlist, 21, h, b, c, H, z, N));
        P & 256 && (this.compNorm(m), this.compNorm(u), this.VIntZ(m * 3, this.vlist, this.nlist, 24, h, b, c, k, y, z));
        P & 512 && (this.compNorm(o), this.compNorm(x), this.VIntZ(o * 3, this.vlist, this.nlist, 27, h, W, c, k, D, E));
        P & 1024 && (this.compNorm(v), this.compNorm(B), this.VIntZ(v *
            3, this.vlist, this.nlist, 30, h, W, M, k, L, I));
        P & 2048 && (this.compNorm(t), this.compNorm(w), this.VIntZ(t * 3, this.vlist, this.nlist, 33, h, b, M, k, C, N));
        A <<= 4;
        for (h = m = 0; THREE.triTable[A + h] != -1;) b = A + h, c = b + 1, k = b + 2, this.posnormtriv(this.vlist, this.nlist, 3 * THREE.triTable[b], 3 * THREE.triTable[c], 3 * THREE.triTable[k], n), h += 3, m++;
        return m
    };
    this.posnormtriv = function (b, c, k, m, h, n) {
        var o = this.count * 3;
        this.positionArray[o] = b[k];
        this.positionArray[o + 1] = b[k + 1];
        this.positionArray[o + 2] = b[k + 2];
        this.positionArray[o + 3] = b[m];
        this.positionArray[o +
        4] = b[m + 1];
        this.positionArray[o + 5] = b[m + 2];
        this.positionArray[o + 6] = b[h];
        this.positionArray[o + 7] = b[h + 1];
        this.positionArray[o + 8] = b[h + 2];
        this.normalArray[o] = c[k];
        this.normalArray[o + 1] = c[k + 1];
        this.normalArray[o + 2] = c[k + 2];
        this.normalArray[o + 3] = c[m];
        this.normalArray[o + 4] = c[m + 1];
        this.normalArray[o + 5] = c[m + 2];
        this.normalArray[o + 6] = c[h];
        this.normalArray[o + 7] = c[h + 1];
        this.normalArray[o + 8] = c[h + 2];
        this.hasNormal = this.hasPos = true;
        this.count += 3;
        this.count >= this.maxCount - 3 && n(this)
    };
    this.begin = function () {
        this.count =
            0;
        this.hasNormal = this.hasPos = false
    };
    this.end = function (b) {
        if (this.count != 0) {
            for (var c = this.count * 3; c < this.positionArray.length; c++) this.positionArray[c] = 0;
            b(this)
        }
    };
    this.addBall = function (b, c, k, m, h) {
        var n = this.size * Math.sqrt(m / h), o = k * this.size, t = c * this.size, u = b * this.size,
            v = Math.floor(o - n);
        v < 1 && (v = 1);
        o = Math.floor(o + n);
        o > this.size - 1 && (o = this.size - 1);
        var x = Math.floor(t - n);
        x < 1 && (x = 1);
        t = Math.floor(t + n);
        t > this.size - 1 && (t = this.size - 1);
        var w = Math.floor(u - n);
        w < 1 && (w = 1);
        n = Math.floor(u + n);
        n > this.size - 1 && (n = this.size -
            1);
        for (var B, A, y, D, C, L; v < o; v++) {
            u = this.size2 * v;
            A = v / this.size - k;
            C = A * A;
            for (A = x; A < t; A++) {
                y = u + this.size * A;
                B = A / this.size - c;
                L = B * B;
                for (B = w; B < n; B++) D = B / this.size - b, D = m / (1.0E-6 + D * D + L + C) - h, D > 0 && (this.field[y + B] += D)
            }
        }
    };
    this.addPlaneX = function (b, c) {
        var k, m, h, n, o, t = this.size, u = this.yd, v = this.zd, x = this.field, w = t * Math.sqrt(b / c);
        w > t && (w = t);
        for (k = 0; k < w; k++) if (m = k / t, m *= m, n = b / (1.0E-4 + m) - c, n > 0) for (m = 0; m < t; m++) {
            o = k + m * u;
            for (h = 0; h < t; h++) x[v * h + o] += n
        }
    };
    this.addPlaneY = function (b, c) {
        var k, m, h, n, o, t, u = this.size, v = this.yd, x =
            this.zd, w = this.field, B = u * Math.sqrt(b / c);
        B > u && (B = u);
        for (m = 0; m < B; m++) if (k = m / u, k *= k, n = b / (1.0E-4 + k) - c, n > 0) {
            o = m * v;
            for (k = 0; k < u; k++) {
                t = o + k;
                for (h = 0; h < u; h++) w[x * h + t] += n
            }
        }
    };
    this.addPlaneZ = function (b, c) {
        var k, m, h, n, o, t;
        size = this.size;
        yd = this.yd;
        zd = this.zd;
        field = this.field;
        dist = size * Math.sqrt(b / c);
        dist > size && (dist = size);
        for (h = 0; h < dist; h++) if (k = h / size, k *= k, n = b / (1.0E-4 + k) - c, n > 0) {
            o = zd * h;
            for (m = 0; m < size; m++) {
                t = o + m * yd;
                for (k = 0; k < size; k++) field[t + k] += n
            }
        }
    };
    this.reset = function () {
        var b;
        for (b = 0; b < this.size3; b++) this.normal_cache[b *
        3] = 0, this.field[b] = 0
    };
    this.render = function (b) {
        this.begin();
        var c, k, m, h, n, o, t, u, v, x = this.size - 2;
        for (h = 1; h < x; h++) {
            v = this.size2 * h;
            t = (h - this.halfsize) / this.halfsize;
            for (m = 1; m < x; m++) {
                u = v + this.size * m;
                o = (m - this.halfsize) / this.halfsize;
                for (k = 1; k < x; k++) n = (k - this.halfsize) / this.halfsize, c = u + k, this.polygonize(n, o, t, c, this.isolation, b)
            }
        }
        this.end(b)
    };
    this.generateGeometry = function () {
        var b = 0, c = new THREE.Geometry, k = [];
        this.render(function (m) {
            var h, n, o, t, u, v, x, w;
            for (h = 0; h < m.count; h++) x = h * 3, u = x + 1, w = x + 2, n = m.positionArray[x],
                o = m.positionArray[u], t = m.positionArray[w], v = new THREE.Vector3(n, o, t), n = m.normalArray[x], o = m.normalArray[u], t = m.normalArray[w], x = new THREE.Vector3(n, o, t), x.normalize(), u = new THREE.Vertex(v), c.vertices.push(u), k.push(x);
            nfaces = m.count / 3;
            for (h = 0; h < nfaces; h++) x = (b + h) * 3, u = x + 1, w = x + 2, v = k[x], n = k[u], o = k[w], x = new THREE.Face3(x, u, w, [v, n, o]), c.faces.push(x);
            b += nfaces;
            m.count = 0
        });
        return c
    };
    this.init(b)
};
THREE.MarchingCubes.prototype = new THREE.Object3D;
THREE.MarchingCubes.prototype.constructor = THREE.MarchingCubes;
THREE.edgeTable = new Int32Array([0, 265, 515, 778, 1030, 1295, 1541, 1804, 2060, 2309, 2575, 2822, 3082, 3331, 3593, 3840, 400, 153, 915, 666, 1430, 1183, 1941, 1692, 2460, 2197, 2975, 2710, 3482, 3219, 3993, 3728, 560, 825, 51, 314, 1590, 1855, 1077, 1340, 2620, 2869, 2111, 2358, 3642, 3891, 3129, 3376, 928, 681, 419, 170, 1958, 1711, 1445, 1196, 2988, 2725, 2479, 2214, 4010, 3747, 3497, 3232, 1120, 1385, 1635, 1898, 102, 367, 613, 876, 3180, 3429, 3695, 3942, 2154, 2403, 2665, 2912, 1520, 1273, 2035, 1786, 502, 255, 1013, 764, 3580, 3317, 4095, 3830, 2554, 2291, 3065, 2800, 1616, 1881, 1107,
    1370, 598, 863, 85, 348, 3676, 3925, 3167, 3414, 2650, 2899, 2137, 2384, 1984, 1737, 1475, 1226, 966, 719, 453, 204, 4044, 3781, 3535, 3270, 3018, 2755, 2505, 2240, 2240, 2505, 2755, 3018, 3270, 3535, 3781, 4044, 204, 453, 719, 966, 1226, 1475, 1737, 1984, 2384, 2137, 2899, 2650, 3414, 3167, 3925, 3676, 348, 85, 863, 598, 1370, 1107, 1881, 1616, 2800, 3065, 2291, 2554, 3830, 4095, 3317, 3580, 764, 1013, 255, 502, 1786, 2035, 1273, 1520, 2912, 2665, 2403, 2154, 3942, 3695, 3429, 3180, 876, 613, 367, 102, 1898, 1635, 1385, 1120, 3232, 3497, 3747, 4010, 2214, 2479, 2725, 2988, 1196, 1445, 1711, 1958, 170,
    419, 681, 928, 3376, 3129, 3891, 3642, 2358, 2111, 2869, 2620, 1340, 1077, 1855, 1590, 314, 51, 825, 560, 3728, 3993, 3219, 3482, 2710, 2975, 2197, 2460, 1692, 1941, 1183, 1430, 666, 915, 153, 400, 3840, 3593, 3331, 3082, 2822, 2575, 2309, 2060, 1804, 1541, 1295, 1030, 778, 515, 265, 0]);
THREE.triTable = new Int32Array([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, 1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1, 3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1, 3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1, 9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, 9, 2, 10, 9, 0, 2, 8, 4, 7,
    -1, -1, -1, -1, -1, -1, -1, 2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1, 8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1, 9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, 4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1, 3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1, 1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1, 4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1, 4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, 8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1, 5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1, 2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1, 9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1, 0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, 2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1, 10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, 4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1, 5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1, 5, 4, 8, 5,
    8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, 9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1, 0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1, 1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1, 10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1, 8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1, 2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, 7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, 9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1, 2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1, 11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1,
    -1, 9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1, 5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1, 11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1, 11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, 1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1, 9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1, 5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1, 2, 3, 11, 10, 6,
    5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, 5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1, 6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1, 0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1, 3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1, 6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1, 5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1, 1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, 10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1, 6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1,
    -1, -1, -1, 1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1, 8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1, 7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1, 3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, 5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1, 0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, 9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1, 8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1, 5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1, 0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1, 6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1, 10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1,
    10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1, 8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1, 1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1, 3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1, 0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, 10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1, 0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1, 3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1, 6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1, 9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1, 8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1, 3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1,
    6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1, 0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1, 10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1, 10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1, 1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1, 2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1, 7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1, 7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1, 2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1, 1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1, 11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1,
    8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1, 0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1, 7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, 10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, 2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, 6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1, 7,
    2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1, 2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1, 1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1, 10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1, 10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1, 0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1, 7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1, 6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1, 8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1, 9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1, 6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1,
    -1, -1, -1, -1, 1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1, 4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1, 10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1, 8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, 0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1, 1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1, 8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1, 10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1, 4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1, 10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 4, 9, 5, 11, 7, 6,
    -1, -1, -1, -1, -1, -1, -1, 5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, 11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1, 9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, 6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1, 7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1, 3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1, 7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1, 9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1, 3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1, 6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1, 9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1, 1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1, 4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10,
    -1, 7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1, 6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1, 3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1, 0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1, 6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1, 0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1, 11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1, 6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1, 5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1, 9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1, 1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1, 1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1, 10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1, 0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1, 5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1, 10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1, 11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1, 9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1, 7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1, 2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1,
    -1, -1, -1, -1, -1, 8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1, 9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1, 9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1, 1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1, 9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1, 9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, 5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1, 0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1, 10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1, 2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1, 0, 4, 11, 0, 11, 3, 4, 5, 11,
    2, 11, 1, 5, 1, 11, -1, 0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1, 9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1, 5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1, 3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1, 5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1, 8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1, 0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1, 9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1, 1, 10, 11, 1, 11,
    4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1, 3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1, 4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1, 9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1, 11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1, 11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1, 2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1, 9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1, 3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1, 1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1, 4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1, 4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 8, 7, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1, 0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1, 3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1, 3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1, 0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1, 9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1, 1, 10,
    2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]);
THREE.Trident = function (b) {
    function c(c) {
        return new THREE.Mesh(new THREE.CylinderGeometry(30, 0.1, b.length / 20, b.length / 5), new THREE.MeshBasicMaterial({color: c}))
    }

    function e(b, c) {
        var e = new THREE.Geometry;
        e.vertices = [new THREE.Vertex, new THREE.Vertex(b)];
        return new THREE.Line(e, new THREE.LineBasicMaterial({color: c}))
    }

    THREE.Object3D.call(this);
    var f = Math.PI / 2, k, b = b || THREE.Trident.defaultParams;
    if (b !== THREE.Trident.defaultParams) for (k in THREE.Trident.defaultParams) b.hasOwnProperty(k) || (b[k] = THREE.Trident.defaultParams[k]);
    this.scale = new THREE.Vector3(b.scale, b.scale, b.scale);
    this.addChild(e(new THREE.Vector3(b.length, 0, 0), b.xAxisColor));
    this.addChild(e(new THREE.Vector3(0, b.length, 0), b.yAxisColor));
    this.addChild(e(new THREE.Vector3(0, 0, b.length), b.zAxisColor));
    if (b.showArrows) k = c(b.xAxisColor), k.rotation.y = -f, k.position.x = b.length, this.addChild(k), k = c(b.yAxisColor), k.rotation.x = f, k.position.y = b.length, this.addChild(k), k = c(b.zAxisColor), k.rotation.y = Math.PI, k.position.z = b.length, this.addChild(k)
};
THREE.Trident.prototype = new THREE.Object3D;
THREE.Trident.prototype.constructor = THREE.Trident;
THREE.Trident.defaultParams = {
    xAxisColor: 16711680,
    yAxisColor: 65280,
    zAxisColor: 255,
    showArrows: true,
    length: 100,
    scale: 1
};
THREE.PlaneCollider = function (b, c) {
    this.point = b;
    this.normal = c
};
THREE.SphereCollider = function (b, c) {
    this.center = b;
    this.radius = c;
    this.radiusSq = c * c
};
THREE.BoxCollider = function (b, c) {
    this.min = b;
    this.max = c;
    this.dynamic = true;
    this.normal = new THREE.Vector3
};
THREE.MeshCollider = function (b, c) {
    this.mesh = b;
    this.box = c;
    this.numFaces = this.mesh.geometry.faces.length;
    this.normal = new THREE.Vector3
};
THREE.CollisionSystem = function () {
    this.collisionNormal = new THREE.Vector3;
    this.colliders = [];
    this.hits = []
};
THREE.Collisions = new THREE.CollisionSystem;
THREE.CollisionSystem.prototype.merge = function (b) {
    this.colliders = this.colliders.concat(b.colliders);
    this.hits = this.hits.concat(b.hits)
};
THREE.CollisionSystem.prototype.rayCastAll = function (b) {
    b.direction.normalize();
    this.hits.length = 0;
    var c, e, f, k, m = 0;
    c = 0;
    for (e = this.colliders.length; c < e; c++) if (k = this.colliders[c], f = this.rayCast(b, k), f < Number.MAX_VALUE) k.distance = f, f > m ? this.hits.push(k) : this.hits.unshift(k), m = f;
    return this.hits
};
THREE.CollisionSystem.prototype.rayCastNearest = function (b) {
    var c = this.rayCastAll(b);
    if (c.length == 0) return null;
    for (var e = 0; c[e] instanceof THREE.MeshCollider;) {
        var f = this.rayMesh(b, c[e]);
        if (f.dist < Number.MAX_VALUE) {
            c[e].distance = f.dist;
            c[e].faceIndex = f.faceIndex;
            break
        }
        e++
    }
    return e > c.length ? null : c[e]
};
THREE.CollisionSystem.prototype.rayCast = function (b, c) {
    if (c instanceof THREE.PlaneCollider) return this.rayPlane(b, c); else if (c instanceof THREE.SphereCollider) return this.raySphere(b, c); else if (c instanceof THREE.BoxCollider) return this.rayBox(b, c); else if (c instanceof THREE.MeshCollider && c.box) return this.rayBox(b, c.box)
};
THREE.CollisionSystem.prototype.rayMesh = function (b, c) {
    for (var e = this.makeRayLocal(b, c.mesh), f = Number.MAX_VALUE, k, m = 0; m < c.numFaces; m++) {
        var h = c.mesh.geometry.faces[m], n = c.mesh.geometry.vertices[h.a].position,
            o = c.mesh.geometry.vertices[h.b].position, t = c.mesh.geometry.vertices[h.c].position,
            u = h instanceof THREE.Face4 ? c.mesh.geometry.vertices[h.d].position : null;
        h instanceof THREE.Face3 ? (h = this.rayTriangle(e, n, o, t, f, this.collisionNormal, c.mesh), h < f && (f = h, k = m, c.normal.copy(this.collisionNormal), c.normal.normalize())) :
            h instanceof THREE.Face4 && (h = this.rayTriangle(e, n, o, u, f, this.collisionNormal, c.mesh), h < f && (f = h, k = m, c.normal.copy(this.collisionNormal), c.normal.normalize()), h = this.rayTriangle(e, o, t, u, f, this.collisionNormal, c.mesh), h < f && (f = h, k = m, c.normal.copy(this.collisionNormal), c.normal.normalize()))
    }
    return {dist: f, faceIndex: k}
};
THREE.CollisionSystem.prototype.rayTriangle = function (b, c, e, f, k, m, h) {
    var n = THREE.CollisionSystem.__v1, o = THREE.CollisionSystem.__v2;
    m.set(0, 0, 0);
    n.sub(e, c);
    o.sub(f, e);
    m.cross(n, o);
    n = m.dot(b.direction);
    if (!(n < 0)) if (h.doubleSided || h.flipSided) m.multiplyScalar(-1), n *= -1; else return Number.MAX_VALUE;
    h = m.dot(c) - m.dot(b.origin);
    if (!(h <= 0)) return Number.MAX_VALUE;
    if (!(h >= n * k)) return Number.MAX_VALUE;
    h /= n;
    n = THREE.CollisionSystem.__v3;
    n.copy(b.direction);
    n.multiplyScalar(h);
    n.addSelf(b.origin);
    Math.abs(m.x) >
    Math.abs(m.y) ? Math.abs(m.x) > Math.abs(m.z) ? (b = n.y - c.y, m = e.y - c.y, k = f.y - c.y, n = n.z - c.z, e = e.z - c.z, f = f.z - c.z) : (b = n.x - c.x, m = e.x - c.x, k = f.x - c.x, n = n.y - c.y, e = e.y - c.y, f = f.y - c.y) : Math.abs(m.y) > Math.abs(m.z) ? (b = n.x - c.x, m = e.x - c.x, k = f.x - c.x, n = n.z - c.z, e = e.z - c.z, f = f.z - c.z) : (b = n.x - c.x, m = e.x - c.x, k = f.x - c.x, n = n.y - c.y, e = e.y - c.y, f = f.y - c.y);
    c = m * f - e * k;
    if (c == 0) return Number.MAX_VALUE;
    c = 1 / c;
    f = (b * f - n * k) * c;
    if (!(f >= 0)) return Number.MAX_VALUE;
    c *= m * n - e * b;
    return !(c >= 0) ? Number.MAX_VALUE : !(1 - f - c >= 0) ? Number.MAX_VALUE : h
};
THREE.CollisionSystem.prototype.makeRayLocal = function (b, c) {
    var e = THREE.CollisionSystem.__m;
    THREE.Matrix4.makeInvert(c.matrixWorld, e);
    var f = THREE.CollisionSystem.__r;
    f.origin.copy(b.origin);
    f.direction.copy(b.direction);
    e.multiplyVector3(f.origin);
    e.rotateAxis(f.direction);
    f.direction.normalize();
    return f
};
THREE.CollisionSystem.prototype.rayBox = function (b, c) {
    var e;
    c.dynamic && c.mesh && c.mesh.matrixWorld ? e = this.makeRayLocal(b, c.mesh) : (e = THREE.CollisionSystem.__r, e.origin.copy(b.origin), e.direction.copy(b.direction));
    var f = 0, k = 0, m = 0, h = 0, n = 0, o = 0, t = true;
    e.origin.x < c.min.x ? (f = c.min.x - e.origin.x, f /= e.direction.x, t = false, h = -1) : e.origin.x > c.max.x && (f = c.max.x - e.origin.x, f /= e.direction.x, t = false, h = 1);
    e.origin.y < c.min.y ? (k = c.min.y - e.origin.y, k /= e.direction.y, t = false, n = -1) : e.origin.y > c.max.y && (k = c.max.y - e.origin.y,
        k /= e.direction.y, t = false, n = 1);
    e.origin.z < c.min.z ? (m = c.min.z - e.origin.z, m /= e.direction.z, t = false, o = -1) : e.origin.z > c.max.z && (m = c.max.z - e.origin.z, m /= e.direction.z, t = false, o = 1);
    if (t) return -1;
    t = 0;
    k > f && (t = 1, f = k);
    m > f && (t = 2, f = m);
    switch (t) {
        case 0:
            n = e.origin.y + e.direction.y * f;
            if (n < c.min.y || n > c.max.y) return Number.MAX_VALUE;
            e = e.origin.z + e.direction.z * f;
            if (e < c.min.z || e > c.max.z) return Number.MAX_VALUE;
            c.normal.set(h, 0, 0);
            break;
        case 1:
            h = e.origin.x + e.direction.x * f;
            if (h < c.min.x || h > c.max.x) return Number.MAX_VALUE;
            e = e.origin.z + e.direction.z * f;
            if (e < c.min.z || e > c.max.z) return Number.MAX_VALUE;
            c.normal.set(0, n, 0);
            break;
        case 2:
            h = e.origin.x + e.direction.x * f;
            if (h < c.min.x || h > c.max.x) return Number.MAX_VALUE;
            n = e.origin.y + e.direction.y * f;
            if (n < c.min.y || n > c.max.y) return Number.MAX_VALUE;
            c.normal.set(0, 0, o)
    }
    return f
};
THREE.CollisionSystem.prototype.rayPlane = function (b, c) {
    var e = b.direction.dot(c.normal), f = c.point.dot(c.normal);
    if (e < 0) e = (f - b.origin.dot(c.normal)) / e; else return Number.MAX_VALUE;
    return e > 0 ? e : Number.MAX_VALUE
};
THREE.CollisionSystem.prototype.raySphere = function (b, c) {
    var e = c.center.clone().subSelf(b.origin);
    if (e.lengthSq < c.radiusSq) return -1;
    var f = e.dot(b.direction.clone());
    if (f <= 0) return Number.MAX_VALUE;
    e = c.radiusSq - (e.lengthSq() - f * f);
    return e >= 0 ? Math.abs(f) - Math.sqrt(e) : Number.MAX_VALUE
};
THREE.CollisionSystem.__v1 = new THREE.Vector3;
THREE.CollisionSystem.__v2 = new THREE.Vector3;
THREE.CollisionSystem.__v3 = new THREE.Vector3;
THREE.CollisionSystem.__nr = new THREE.Vector3;
THREE.CollisionSystem.__m = new THREE.Matrix4;
THREE.CollisionSystem.__r = new THREE.Ray;
THREE.CollisionUtils = {};
THREE.CollisionUtils.MeshOBB = function (b) {
    b.geometry.computeBoundingBox();
    var c = b.geometry.boundingBox, e = new THREE.Vector3(c.x[0], c.y[0], c.z[0]),
        c = new THREE.Vector3(c.x[1], c.y[1], c.z[1]), e = new THREE.BoxCollider(e, c);
    e.mesh = b;
    return e
};
THREE.CollisionUtils.MeshAABB = function (b) {
    var c = THREE.CollisionUtils.MeshOBB(b);
    c.min.addSelf(b.position);
    c.max.addSelf(b.position);
    c.dynamic = false;
    return c
};
THREE.CollisionUtils.MeshColliderWBox = function (b) {
    return new THREE.MeshCollider(b, THREE.CollisionUtils.MeshOBB(b))
};
if (THREE.WebGLRenderer) THREE.AnaglyphWebGLRenderer = function (b) {
    THREE.WebGLRenderer.call(this, b);
    var c = this, e = this.setSize, f = this.render, k = new THREE.Camera, m = new THREE.Camera, h = new THREE.Matrix4,
        n = new THREE.Matrix4, o, t, u;
    k.useTarget = m.useTarget = false;
    k.matrixAutoUpdate = m.matrixAutoUpdate = false;
    var b = {minFilter: THREE.LinearFilter, magFilter: THREE.NearestFilter, format: THREE.RGBAFormat},
        v = new THREE.WebGLRenderTarget(512, 512, b), x = new THREE.WebGLRenderTarget(512, 512, b),
        w = new THREE.Camera(53, 1, 1, 1E4);
    w.position.z =
        2;
    _material = new THREE.MeshShaderMaterial({
        uniforms: {
            mapLeft: {type: "t", value: 0, texture: v},
            mapRight: {type: "t", value: 1, texture: x}
        },
        vertexShader: "varying vec2 vUv;\nvoid main() {\nvUv = vec2( uv.x, 1.0 - uv.y );\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",
        fragmentShader: "uniform sampler2D mapLeft;\nuniform sampler2D mapRight;\nvarying vec2 vUv;\nvoid main() {\nvec4 colorL, colorR;\nvec2 uv = vUv;\ncolorL = texture2D( mapLeft, uv );\ncolorR = texture2D( mapRight, uv );\ngl_FragColor = vec4( colorL.g * 0.7 + colorL.b * 0.3, colorR.g, colorR.b, colorL.a + colorR.a ) * 1.1;\n}"
    });
    var B = new THREE.Scene;
    B.addObject(new THREE.Mesh(new THREE.PlaneGeometry(2, 2), _material));
    this.setSize = function (b, f) {
        e.call(c, b, f);
        v.width = b;
        v.height = f;
        x.width = b;
        x.height = f
    };
    this.render = function (b, e) {
        e.update(null, true);
        if (o !== e.aspect || t !== e.near || u !== e.fov) {
            o = e.aspect;
            t = e.near;
            u = e.fov;
            var D = e.projectionMatrix.clone(), C = 125 / 30 * 0.5, L = C * t / 125,
                z = t * Math.tan(u * Math.PI / 360), E;
            h.n14 = C;
            n.n14 = -C;
            C = -z * o + L;
            E = z * o + L;
            D.n11 = 2 * t / (E - C);
            D.n13 = (E + C) / (E - C);
            k.projectionMatrix = D.clone();
            C = -z * o - L;
            E = z * o - L;
            D.n11 = 2 * t / (E -
                C);
            D.n13 = (E + C) / (E - C);
            m.projectionMatrix = D.clone()
        }
        k.matrix = e.matrixWorld.clone().multiplySelf(n);
        k.update(null, true);
        k.position.copy(e.position);
        k.near = t;
        k.far = e.far;
        f.call(c, b, k, v, true);
        m.matrix = e.matrixWorld.clone().multiplySelf(h);
        m.update(null, true);
        m.position.copy(e.position);
        m.near = t;
        m.far = e.far;
        f.call(c, b, m, x, true);
        f.call(c, B, w)
    }
};
if (THREE.WebGLRenderer) THREE.CrosseyedWebGLRenderer = function (b) {
    THREE.WebGLRenderer.call(this, b);
    this.autoClear = false;
    var c = this, e = this.setSize, f = this.render, k, m, h = new THREE.Camera, n = new THREE.Camera;
    c.separation = 10;
    if (b && b.separation !== void 0) c.separation = b.separation;
    (new THREE.Camera(53, window.innerWidth / 2 / window.innerHeight, 1, 1E4)).position.z = -10;
    this.setSize = function (b, f) {
        e.call(c, b, f);
        k = b / 2;
        m = f
    };
    this.render = function (b, e) {
        this.clear();
        h.fov = e.fov;
        h.aspect = 0.5 * e.aspect;
        h.near = e.near;
        h.far = e.far;
        h.updateProjectionMatrix();
        h.position.copy(e.position);
        h.target.position.copy(e.target.position);
        h.translateX(c.separation);
        n.projectionMatrix = h.projectionMatrix;
        n.position.copy(e.position);
        n.target.position.copy(e.target.position);
        n.translateX(-c.separation);
        this.setViewport(0, 0, k, m);
        f.call(c, b, h);
        this.setViewport(k, 0, k, m);
        f.call(c, b, n, false)
    }
};
define("three", function () {
});
define("dat/mahog/shaders/BookUniforms", ["dat/mahog/params", "three"], function (b) {
    return {
        near: {type: "f", value: 10},
        far: {type: "f", value: 1E3},
        transparency: {type: "f", value: 1},
        dim: {type: "f", value: 0},
        fogColor: {type: "v3", value: new THREE.Vector3(0, 0, 0)},
        fogNear: {type: "f", value: b.near},
        fogFar: {type: "f", value: b.far},
        isCover: {type: "f", value: 0},
        isOpened: {type: "f", value: 0},
        thickness: {type: "f", value: 0},
        tint: {type: "v4", value: new THREE.Vector4(1, 1, 1, 0.001)},
        tileSize: {type: "f", value: 0.0625},
        tileColumn: {type: "f", value: 0},
        tileRow: {type: "f", value: 0},
        texturemap: {type: "t", value: 2, texture: null},
        lightmap: {type: "t", value: 3, texture: null},
        enableLighting: {type: "i", value: 1},
        ambientLightColor: {type: "fv", value: []},
        directionalLightDirection: {type: "fv", value: []},
        directionalLightColor: {type: "fv", value: []},
        pointLightColor: {type: "fv", value: []},
        pointLightPosition: {type: "fv", value: []},
        pointLightDistance: {type: "fv1", value: []},
        morphInfluences: {type: "fv1", value: []}
    }
});
(function (b) {
    function c(b, c, e, h, n) {
        this._listener = c;
        this._isOnce = e;
        this.context = h;
        this._signal = b;
        this._priority = n || 0
    }

    var e = {VERSION: "0.6.1"};
    c.prototype = {
        active: true, execute: function (b) {
            var c;
            this.active && (c = this._listener.apply(this.context, b), this._isOnce && this.detach());
            return c
        }, detach: function () {
            return this._signal.remove(this._listener)
        }, getListener: function () {
            return this._listener
        }, dispose: function () {
            this.detach();
            this._destroy()
        }, _destroy: function () {
            delete this._signal;
            delete this._isOnce;
            delete this._listener;
            delete this.context
        }, isOnce: function () {
            return this._isOnce
        }, toString: function () {
            return "[SignalBinding isOnce: " + this._isOnce + ", active: " + this.active + "]"
        }
    };
    e.Signal = function () {
        this._bindings = []
    };
    e.Signal.prototype = {
        _shouldPropagate: true, active: true, _registerListener: function (b, e, m, h) {
            if (typeof b !== "function") throw Error("listener is a required param of add() and addOnce() and should be a Function.");
            var n = this._indexOfListener(b);
            if (n !== -1) {
                if (b = this._bindings[n], b.isOnce() !==
                e) throw Error("You cannot add" + (e ? "" : "Once") + "() then add" + (!e ? "" : "Once") + "() the same listener without removing the relationship first.");
            } else b = new c(this, b, e, m, h), this._addBinding(b);
            return b
        }, _addBinding: function (b) {
            var c = this._bindings.length;
            do --c; while (this._bindings[c] && b._priority <= this._bindings[c]._priority);
            this._bindings.splice(c + 1, 0, b)
        }, _indexOfListener: function (b) {
            for (var c = this._bindings.length; c--;) if (this._bindings[c]._listener === b) return c;
            return -1
        }, add: function (b, c, e) {
            return this._registerListener(b,
                false, c, e)
        }, addOnce: function (b, c, e) {
            return this._registerListener(b, true, c, e)
        }, remove: function (b) {
            if (typeof b !== "function") throw Error("listener is a required param of remove() and should be a Function.");
            var c = this._indexOfListener(b);
            c !== -1 && (this._bindings[c]._destroy(), this._bindings.splice(c, 1));
            return b
        }, removeAll: function () {
            for (var b = this._bindings.length; b--;) this._bindings[b]._destroy();
            this._bindings.length = 0
        }, getNumListeners: function () {
            return this._bindings.length
        }, halt: function () {
            this._shouldPropagate =
                false
        }, dispatch: function (b) {
            if (this.active) {
                var c = Array.prototype.slice.call(arguments), e = this._bindings.slice(), h = this._bindings.length;
                this._shouldPropagate = true;
                do h--; while (e[h] && this._shouldPropagate && e[h].execute(c) !== false)
            }
        }, dispose: function () {
            this.removeAll();
            delete this._bindings
        }, toString: function () {
            return "[Signal active: " + this.active + " numListeners: " + this.getNumListeners() + "]"
        }
    };
    b.signals = e
})(window || global || this);
define("third-party/js-signals.min", function () {
});
define("dat/mahog/BookInfo", ["third-party/js-signals.min"], function () {
    function b(b) {
        function e(b, c) {
            b[c] = false
        }

        e(b, "displayer_attached");
        e(b, "data_request_queued", true);
        e(b, "data_requested");
        e(b, "data_received");
        e(b, "thumbnail_requested");
        e(b, "thumbnail_received");
        e(b, "thumbnail_created");
        e(b, "thumbnail_applied", true);
        e(b, "fullsize_requested");
        e(b, "fullsize_received");
        e(b, "fullsize_applied");
        this.registerListeners = function () {
        };
        this.clearListeners = function () {
        }
    }

    return function (c) {
        this.data = c || {};
        this.status =
            new b(this);
        this.textures = {};
        this.bookDisplayer = this.id = void 0;
        this.applyThumbnail = function () {
        }
    }
});
define("dat/utils/urlArgs", [], function () {
    for (var b = {}, c = window.location.search.toString(), c = c.replace("?", ""), c = c.split("&"), e = 0; e < c.length; e++) {
        var f = c[e].split("=");
        f && f[0] != "" && (b[f[0]] = f[1])
    }
    return b
});
define("dat/mahog/utils", ["dat/mahog/params", "dat/utils/urlArgs"], function (b) {
    return {
        qrURL: function (b) {
            return "api/qr/" + b
        }, fullsizeURL: function (b) {
            return "api/image/" + b
        }, orbitToY: function (c) {
            return -c * b.shelfHeight / (Math.PI * 2)
        }, yToRevolution: function (c) {
            return -Math.PI * 2 * (c / b.shelfHeight - Math.floor(c / b.shelfHeight))
        }, yToOrbit: function (c) {
            return -Math.PI * 2 * c / b.shelfHeight
        }, indexToY: function (c) {
            return c / b.booksPerCircle * b.shelfHeight
        }, yToIndex: function (c) {
            return c / b.shelfHeight * b.booksPerCircle
        }, orbitToIndex: function (b) {
            return this.yToIndex(this.orbitToY(b))
        }
    }
});
define("text!dat/mahog/data/dominant_colors.json", function () {
    return "[[255, 255, 255], [1, 1, 1], [0, 0, 0], [255, 255, 255], [227, 7, 10], [255, 255, 255], [255, 255, 255], [81, 66, 117], [0, 0, 0], [255, 255, 255], [255, 255, 255], [159, 0, 0], [255, 255, 255], [24, 34, 44], [255, 255, 255], [50, 51, 38], [255, 255, 255], [250, 214, 135], [255, 255, 255], [161, 189, 209], [255, 255, 255], [100, 16, 18], [232, 24, 40], [223, 227, 230], [255, 255, 255], [255, 255, 255], [255, 255, 255], [3, 7, 8], [255, 255, 255], [255, 255, 255], [0, 0, 0], [0, 0, 0], [255, 255, 255], [19, 15, 12], [246, 159, 28], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [121, 73, 120], [153, 28, 31], [255, 255, 255], [0, 255, 0], [255, 255, 255], [255, 255, 0], [246, 243, 236], [0, 0, 0], [1, 1, 1], [0, 0, 0], [0, 139, 204], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 0, 0], [183, 184, 169], [0, 0, 0], [255, 255, 255], [255, 1, 0], [23, 117, 239], [255, 255, 255], [255, 255, 255], [255, 255, 255], [9, 8, 14], [40, 40, 88], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [34, 39, 42], [255, 255, 255], [0, 0, 0], [216, 56, 40], [255, 255, 255], [0, 195, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [5, 6, 8], [255, 255, 255], [1, 1, 0], [0, 0, 0], [255, 30, 25], [248, 200, 200], [255, 0, 0], [255, 255, 255], [254, 212, 74], [18, 12, 12], [255, 70, 0], [255, 255, 255], [255, 255, 255], [255, 243, 0], [255, 0, 0], [255, 255, 255], [35, 31, 32], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 232, 183], [255, 255, 255], [0, 255, 255], [255, 255, 255], [34, 32, 33], [0, 9, 8], [0, 0, 0], [239, 185, 255], [56, 50, 52], [255, 255, 255], [0, 1, 5], [0, 69, 41], [165, 207, 99], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [43, 24, 17], [255, 255, 255], [255, 255, 255], [237, 115, 94], [175, 147, 82], [0, 0, 0], [255, 69, 34], [255, 248, 0], [255, 243, 167], [255, 255, 0], [255, 255, 255], [239, 229, 214], [255, 255, 255], [255, 255, 255], [248, 232, 232], [68, 23, 27], [255, 255, 255], [255, 255, 255], [15, 8, 16], [16, 20, 19], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [254, 255, 255], [255, 8, 0], [250, 214, 135], [255, 255, 255], [254, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [1, 2, 7], [2, 205, 213], [255, 255, 255], [240, 247, 255], [1, 1, 1], [216, 152, 40], [90, 145, 138], [56, 56, 72], [154, 154, 154], [255, 255, 255], [255, 255, 255], [255, 255, 255], [232, 24, 40], [255, 255, 255], [255, 255, 255], [69, 39, 31], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [237, 33, 36], [0, 0, 0], [0, 12, 16], [7, 6, 4], [255, 255, 255], [34, 24, 23], [255, 255, 255], [25, 27, 22], [192, 31, 37], [0, 0, 0], [253, 253, 253], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [1, 2, 6], [243, 244, 213], [18, 18, 20], [0, 0, 0], [0, 0, 0], [255, 255, 255], [0, 0, 0], [255, 255, 255], [0, 28, 255], [255, 29, 36], [249, 230, 187], [209, 178, 0], [255, 255, 255], [255, 255, 255], [255, 244, 216], [255, 255, 255], [255, 69, 0], [255, 255, 255], [0, 0, 0], [126, 52, 54], [0, 81, 255], [255, 255, 255], [43, 38, 42], [24, 120, 184], [255, 255, 255], [255, 255, 255], [13, 12, 10], [0, 255, 255], [98, 148, 159], [23, 14, 31], [0, 0, 0], [255, 255, 255], [248, 232, 8], [255, 255, 255], [0, 0, 0], [178, 138, 5], [255, 255, 255], [3, 1, 2], [255, 255, 255], [255, 255, 255], [248, 243, 247], [255, 255, 255], [255, 255, 255], [254, 243, 213], [239, 232, 210], [255, 255, 137], [127, 27, 27], [255, 255, 255], [255, 255, 255], [7, 55, 116], [231, 232, 234], [255, 255, 255], [255, 255, 255], [254, 245, 108], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [155, 154, 156], [0, 0, 0], [255, 255, 255], [255, 255, 255], [79, 80, 84], [8, 8, 8], [255, 255, 255], [4, 2, 3], [255, 255, 0], [255, 255, 255], [95, 31, 34], [255, 255, 255], [183, 184, 169], [255, 255, 255], [255, 255, 255], [255, 255, 255], [252, 226, 41], [255, 255, 255], [119, 13, 25], [130, 175, 216], [255, 1, 0], [0, 0, 0], [255, 255, 255], [255, 255, 255], [88, 104, 136], [255, 255, 255], [6, 19, 24], [229, 227, 215], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 7, 8], [0, 0, 0], [0, 0, 0], [1, 1, 1], [255, 255, 255], [255, 255, 255], [111, 135, 181], [0, 0, 0], [59, 186, 218], [255, 199, 157], [223, 220, 214], [255, 81, 134], [255, 255, 255], [0, 0, 0], [255, 255, 255], [11, 11, 11], [1, 1, 1], [255, 255, 255], [14, 14, 14], [0, 234, 198], [255, 255, 255], [255, 255, 251], [8, 8, 8], [255, 17, 111], [255, 255, 255], [238, 227, 30], [238, 248, 247], [254, 254, 254], [255, 255, 255], [255, 255, 255], [39, 14, 16], [255, 26, 20], [255, 255, 255], [254, 253, 232], [255, 255, 255], [255, 255, 255], [255, 255, 255], [204, 223, 206], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [23, 32, 49], [255, 0, 0], [6, 8, 7], [238, 217, 0], [0, 144, 189], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [245, 29, 0], [253, 179, 22], [0, 0, 0], [255, 255, 255], [255, 76, 60], [255, 255, 255], [150, 143, 0], [0, 0, 0], [255, 255, 255], [0, 255, 255], [127, 100, 73], [255, 255, 255], [255, 255, 255], [234, 214, 163], [255, 255, 255], [255, 255, 255], [255, 255, 255], [12, 31, 149], [255, 255, 255], [16, 15, 13], [142, 156, 0], [255, 255, 255], [16, 18, 17], [15, 15, 65], [0, 0, 0], [179, 64, 180], [255, 255, 255], [19, 65, 89], [90, 151, 182], [19, 18, 16], [255, 255, 255], [255, 255, 122], [164, 89, 47], [255, 255, 255], [65, 174, 255], [0, 6, 15], [255, 255, 255], [20, 182, 76], [241, 51, 37], [200, 56, 24], [255, 255, 255], [255, 255, 255], [255, 255, 241], [153, 31, 20], [255, 255, 255], [213, 231, 219], [196, 216, 225], [255, 255, 255], [255, 255, 255], [137, 138, 129], [255, 255, 255], [255, 255, 255], [242, 225, 216], [255, 255, 255], [7, 11, 14], [254, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [198, 214, 214], [196, 196, 196], [248, 232, 200], [255, 255, 255], [255, 255, 255], [255, 255, 255], [8, 9, 11], [14, 21, 34], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 254, 249], [20, 18, 18], [254, 255, 239], [149, 54, 49], [255, 255, 255], [255, 255, 255], [255, 249, 234], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 253], [255, 255, 255], [19, 15, 12], [255, 255, 255], [46, 123, 163], [57, 154, 207], [255, 222, 157], [1, 29, 77], [247, 130, 35], [34, 11, 57], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [239, 255, 255], [246, 159, 28], [128, 62, 12], [0, 0, 0], [19, 119, 194], [255, 255, 255], [255, 255, 220], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [53, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [252, 223, 9], [255, 255, 255], [255, 255, 255], [255, 255, 255], [1, 1, 1], [255, 255, 255], [56, 56, 56], [255, 255, 255], [232, 234, 247], [255, 255, 255], [242, 241, 228], [254, 254, 254], [35, 31, 32], [233, 248, 249], [250, 254, 255], [255, 255, 255], [232, 225, 220], [255, 255, 255], [59, 63, 66], [249, 242, 189], [255, 39, 255], [0, 81, 122], [255, 255, 255], [0, 173, 239], [255, 186, 27], [255, 255, 255], [31, 30, 28], [255, 255, 255], [3, 3, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [37, 64, 142], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [249, 255, 205], [0, 121, 194], [167, 216, 29], [24, 200, 40], [41, 43, 40], [255, 255, 255], [250, 248, 227], [255, 255, 255], [255, 255, 255], [0, 166, 222], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 56, 82], [216, 216, 216], [43, 163, 255], [255, 255, 255], [255, 255, 30], [71, 71, 71], [255, 255, 255], [255, 255, 255], [24, 120, 200], [255, 255, 255], [255, 255, 255], [255, 255, 255], [250, 6, 8], [255, 255, 255], [0, 0, 82], [206, 172, 125], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [0, 160, 47], [35, 31, 30], [39, 102, 19], [255, 255, 255], [5, 6, 8], [255, 251, 240], [0, 0, 0], [216, 40, 40], [239, 49, 33], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [53, 112, 57], [255, 255, 255], [255, 255, 255], [211, 76, 56], [255, 255, 255], [255, 255, 255], [24, 24, 26], [248, 88, 40], [255, 255, 255], [0, 0, 0], [122, 128, 186], [255, 73, 16], [255, 255, 255], [78, 201, 242], [255, 255, 255], [11, 10, 15], [0, 0, 0], [255, 229, 0], [255, 255, 255], [255, 255, 15], [255, 227, 255], [72, 73, 69], [255, 255, 255], [255, 164, 155], [255, 21, 0], [8, 20, 8], [0, 0, 0], [255, 255, 255], [21, 24, 42], [255, 255, 255], [255, 255, 255], [255, 255, 255], [38, 51, 95], [255, 255, 255], [134, 24, 27], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [105, 154, 212], [24, 27, 30], [3, 7, 8], [226, 244, 255], [255, 255, 255], [255, 255, 255], [104, 200, 168], [23, 22, 0], [10, 10, 12], [153, 28, 31], [255, 255, 255], [255, 255, 255], [255, 221, 0], [57, 73, 124], [93, 0, 0], [111, 83, 49], [255, 255, 255], [255, 255, 255], [255, 240, 23], [3, 153, 126], [114, 90, 253], [203, 144, 53], [255, 255, 255], [15, 44, 255], [255, 255, 255], [0, 139, 204], [0, 41, 75], [255, 24, 33], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [91, 143, 157], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 33, 34], [252, 243, 225], [2, 0, 1], [0, 0, 0], [255, 255, 255], [255, 255, 255], [253, 255, 254], [246, 19, 0], [255, 255, 255], [255, 30, 25], [255, 255, 255], [255, 255, 255], [255, 255, 255], [188, 215, 40], [157, 205, 164], [255, 255, 255], [255, 255, 255], [255, 0, 0], [255, 255, 255], [255, 255, 255], [22, 51, 91], [0, 49, 242], [255, 255, 255], [255, 255, 255], [8, 10, 9], [255, 255, 255], [5, 6, 8], [255, 253, 232], [255, 255, 255], [255, 103, 135], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 20, 15], [255, 255, 255], [12, 0, 0], [255, 255, 255], [255, 198, 231], [0, 0, 243], [255, 255, 255], [8, 8, 8], [241, 90, 63], [206, 197, 142], [8, 0, 0], [255, 255, 255], [32, 17, 12], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [100, 126, 78], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [1, 1, 0], [35, 31, 32], [255, 255, 255], [184, 216, 24], [255, 255, 255], [0, 28, 255], [6, 24, 0], [254, 24, 0], [255, 255, 255], [255, 255, 255], [6, 24, 0], [255, 255, 255], [184, 216, 24], [210, 0, 9], [6, 24, 0], [255, 255, 255], [0, 0, 0], [255, 255, 255], [200, 216, 40], [255, 255, 255], [255, 255, 255], [6, 24, 0], [255, 255, 255], [6, 24, 0], [6, 24, 0], [255, 255, 255], [255, 255, 255], [6, 24, 0], [255, 255, 255], [6, 24, 0], [254, 242, 0], [255, 255, 255], [200, 216, 40], [255, 255, 255], [6, 24, 0], [6, 24, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [3, 7, 8], [233, 213, 200], [6, 24, 0], [147, 0, 0], [6, 24, 0], [255, 255, 255], [184, 216, 24], [6, 24, 34], [24, 200, 40], [255, 255, 255], [255, 255, 255], [6, 24, 0], [200, 216, 40], [40, 40, 40], [6, 24, 0], [255, 255, 255], [255, 255, 255], [6, 24, 0], [255, 255, 255], [0, 173, 239], [200, 216, 40], [6, 24, 0], [255, 255, 255], [255, 255, 255], [226, 246, 246], [6, 24, 0], [6, 24, 34], [239, 94, 39], [255, 255, 255], [255, 255, 255], [255, 255, 255], [6, 24, 34], [33, 43, 98], [6, 24, 0], [6, 24, 34], [6, 24, 34], [255, 255, 255], [255, 255, 255], [255, 255, 255], [254, 254, 254], [255, 255, 255], [200, 216, 40], [6, 23, 0], [200, 216, 40], [255, 255, 255], [255, 255, 255], [6, 24, 34], [6, 24, 0], [8, 88, 72], [255, 255, 255], [255, 255, 255], [253, 241, 189], [16, 17, 22], [223, 211, 197], [175, 30, 37], [0, 234, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 200, 1], [255, 255, 255], [255, 255, 255], [220, 27, 48], [39, 34, 100], [172, 36, 40], [255, 255, 255], [248, 253, 255], [236, 236, 236], [238, 232, 204], [176, 146, 71], [255, 255, 0], [240, 232, 211], [182, 216, 5], [255, 255, 255], [250, 247, 29], [255, 255, 255], [249, 240, 201], [255, 255, 255], [254, 232, 1], [246, 135, 17], [200, 224, 255], [255, 255, 255], [215, 200, 158], [255, 27, 48], [255, 255, 255], [255, 255, 255], [6, 24, 0], [8, 56, 8], [35, 31, 32], [4, 3, 8], [255, 255, 255], [187, 90, 21], [255, 76, 28], [231, 229, 170], [255, 255, 255], [6, 24, 0], [230, 226, 237], [254, 254, 254], [10, 10, 10], [255, 255, 255], [255, 255, 255], [255, 255, 255], [254, 242, 0], [255, 247, 224], [118, 56, 37], [255, 255, 255], [255, 255, 255], [206, 19, 67], [186, 3, 34], [255, 255, 33], [255, 255, 255], [255, 255, 255], [255, 255, 231], [255, 238, 237], [6, 24, 0], [255, 255, 255], [255, 255, 255], [254, 23, 0], [24, 88, 168], [13, 22, 21], [6, 24, 0], [193, 142, 85], [25, 27, 22], [255, 255, 255], [255, 255, 255], [112, 198, 47], [255, 255, 255], [254, 245, 230], [255, 255, 255], [255, 255, 255], [231, 219, 8], [83, 153, 208], [255, 255, 255], [231, 231, 231], [28, 44, 77], [150, 202, 76], [81, 35, 11], [255, 22, 42], [0, 0, 225], [82, 52, 14], [223, 76, 24], [255, 255, 255], [255, 255, 255], [1, 1, 0], [255, 255, 255], [255, 16, 16], [255, 255, 255], [255, 255, 255], [91, 87, 161], [255, 255, 255], [255, 89, 33], [210, 235, 239], [255, 255, 255], [186, 233, 251], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 0, 82], [255, 42, 43], [255, 255, 255], [249, 239, 79], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [50, 51, 53], [255, 255, 255], [6, 0, 0], [243, 232, 178], [255, 255, 255], [255, 243, 24], [246, 214, 0], [255, 202, 32], [255, 255, 255], [233, 213, 200], [238, 65, 48], [32, 18, 17], [255, 255, 255], [193, 228, 229], [255, 255, 255], [51, 88, 132], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 15, 13], [6, 24, 0], [255, 255, 255], [248, 248, 216], [247, 203, 16], [255, 30, 0], [255, 255, 255], [176, 163, 207], [222, 217, 239], [255, 243, 223], [255, 35, 47], [255, 255, 255], [255, 255, 255], [255, 0, 0], [191, 222, 20], [255, 255, 255], [255, 176, 0], [254, 56, 45], [255, 255, 255], [253, 252, 222], [255, 255, 255], [255, 255, 255], [255, 255, 255], [198, 222, 100], [255, 255, 255], [255, 255, 255], [255, 255, 255], [154, 1, 81], [255, 255, 255], [214, 177, 122], [255, 129, 49], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 255, 255], [255, 255, 255], [255, 255, 255], [220, 29, 36], [255, 255, 149], [255, 255, 76], [139, 173, 0], [21, 17, 14], [246, 189, 170], [255, 255, 255], [255, 252, 217], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [18, 16, 19], [231, 250, 255], [255, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [197, 38, 42], [96, 187, 70], [182, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [254, 252, 191], [255, 255, 255], [250, 244, 255], [209, 121, 112], [255, 0, 40], [0, 0, 0], [16, 17, 0], [255, 255, 255], [6, 24, 34], [255, 21, 20], [255, 255, 255], [22, 24, 23], [255, 255, 255], [255, 255, 255], [224, 76, 25], [255, 255, 255], [0, 0, 0], [255, 249, 233], [255, 255, 255], [35, 15, 14], [255, 255, 255], [255, 255, 255], [255, 255, 255], [6, 24, 0], [239, 233, 211], [229, 0, 0], [255, 255, 255], [237, 56, 151], [255, 255, 255], [236, 33, 39], [241, 228, 194], [255, 255, 255], [255, 255, 255], [255, 255, 255], [247, 247, 249], [255, 255, 255], [255, 255, 255], [255, 255, 255], [220, 69, 48], [255, 255, 0], [247, 21, 16], [0, 0, 0], [254, 232, 0], [255, 255, 255], [185, 30, 34], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 254, 0], [255, 255, 255], [11, 5, 5], [255, 255, 255], [255, 255, 98], [255, 255, 255], [6, 7, 9], [255, 255, 255], [255, 255, 255], [255, 255, 255], [24, 32, 25], [255, 0, 0], [255, 255, 255], [255, 255, 255], [255, 8, 0], [255, 255, 255], [255, 255, 255], [0, 87, 23], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [25, 28, 31], [255, 255, 255], [255, 255, 255], [83, 44, 0], [255, 255, 255], [255, 255, 255], [41, 24, 255], [255, 255, 255], [255, 16, 24], [255, 255, 255], [255, 255, 255], [216, 200, 104], [255, 255, 255], [238, 27, 42], [0, 29, 0], [0, 154, 0], [255, 255, 255], [176, 0, 0], [255, 255, 255], [1, 10, 27], [26, 27, 31], [0, 0, 0], [0, 255, 255], [255, 255, 255], [40, 8, 8], [255, 255, 255], [255, 255, 255], [124, 72, 155], [255, 49, 0], [255, 0, 0], [1, 1, 1], [0, 0, 0], [123, 208, 232], [255, 211, 255], [19, 20, 50], [0, 9, 8], [255, 255, 255], [46, 52, 45], [255, 255, 255], [255, 221, 0], [255, 255, 255], [0, 0, 0], [255, 255, 255], [13, 22, 101], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 1, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [5, 6, 8], [5, 6, 8], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [48, 65, 34], [255, 255, 255], [241, 215, 174], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [31, 21, 21], [255, 29, 16], [255, 255, 255], [255, 255, 255], [114, 36, 49], [0, 47, 57], [165, 29, 34], [255, 21, 0], [255, 255, 255], [19, 20, 19], [24, 24, 24], [255, 255, 255], [1, 27, 140], [255, 255, 255], [16, 7, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [20, 27, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [4, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 0], [158, 32, 40], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [50, 95, 148], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 24, 27], [6, 7, 9], [0, 0, 0], [255, 255, 255], [0, 0, 0], [255, 255, 255], [46, 47, 52], [6, 19, 0], [21, 19, 22], [255, 255, 255], [255, 255, 255], [3, 7, 8], [255, 85, 53], [255, 255, 255], [0, 0, 0], [154, 12, 0], [17, 14, 18], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 255], [80, 54, 52], [80, 81, 83], [255, 255, 255], [255, 0, 0], [0, 1, 6], [255, 255, 255], [255, 255, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [95, 93, 105], [255, 255, 255], [255, 255, 255], [255, 255, 255], [19, 13, 13], [255, 255, 255], [255, 255, 42], [255, 0, 0], [255, 0, 0], [255, 254, 0], [255, 1, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 221, 155], [75, 38, 0], [255, 255, 255], [255, 66, 27], [255, 255, 255], [255, 255, 255], [7, 6, 11], [255, 255, 255], [0, 0, 0], [255, 0, 0], [73, 138, 49], [255, 255, 255], [255, 255, 255], [255, 9, 10], [0, 255, 0], [255, 44, 34], [8, 8, 8], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 38, 34], [255, 13, 39], [255, 255, 255], [46, 52, 45], [0, 0, 0], [255, 255, 98], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [0, 111, 144], [255, 255, 255], [21, 22, 36], [21, 27, 43], [255, 255, 255], [248, 168, 56], [255, 255, 255], [255, 255, 255], [255, 74, 87], [255, 255, 255], [255, 252, 247], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 44, 29], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [181, 195, 230], [198, 184, 171], [255, 255, 255], [254, 245, 152], [238, 77, 48], [0, 89, 133], [255, 255, 255], [189, 216, 239], [54, 246, 79], [240, 241, 236], [255, 255, 255], [255, 0, 0], [5, 5, 5], [203, 239, 251], [255, 255, 255], [25, 21, 18], [255, 255, 255], [255, 255, 255], [0, 0, 0], [0, 0, 0], [255, 255, 255], [255, 23, 0], [255, 255, 255], [50, 133, 115], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 13, 16], [255, 255, 255], [255, 255, 255], [0, 255, 0], [255, 255, 255], [255, 255, 255], [255, 72, 0], [5, 6, 8], [4, 2, 3], [255, 255, 255], [0, 22, 48], [255, 255, 255], [255, 255, 255], [29, 214, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 131], [15, 18, 133], [255, 255, 255], [255, 255, 255], [26, 72, 161], [255, 255, 255], [8, 10, 8], [0, 0, 0], [0, 255, 0], [255, 255, 0], [255, 255, 255], [255, 255, 255], [251, 245, 223], [255, 255, 255], [0, 0, 0], [255, 255, 255], [0, 0, 0], [255, 255, 255], [161, 156, 42], [255, 255, 255], [255, 255, 255], [147, 196, 241], [0, 70, 255], [255, 255, 255], [255, 255, 255], [183, 17, 55], [1, 0, 0], [225, 233, 235], [255, 0, 0], [83, 44, 0], [255, 255, 255], [255, 255, 255], [255, 255, 40], [203, 0, 44], [255, 255, 255], [255, 255, 255], [16, 15, 13], [255, 255, 255], [2, 2, 2], [255, 183, 166], [255, 255, 255], [250, 248, 255], [1, 12, 66], [17, 13, 10], [255, 203, 5], [10, 8, 9], [255, 255, 255], [96, 86, 85], [255, 235, 249], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [31, 148, 188], [255, 255, 0], [255, 13, 39], [255, 255, 255], [223, 227, 230], [255, 255, 255], [50, 194, 220], [255, 16, 24], [0, 0, 0], [255, 255, 255], [0, 0, 0], [255, 255, 250], [255, 250, 243], [255, 255, 255], [255, 255, 255], [17, 20, 16], [255, 255, 255], [0, 0, 0], [115, 95, 94], [255, 255, 255], [1, 85, 0], [255, 255, 255], [13, 22, 101], [234, 167, 27], [255, 255, 255], [255, 255, 255], [0, 113, 189], [255, 255, 255], [48, 19, 16], [16, 17, 16], [101, 15, 54], [230, 228, 212], [255, 255, 255], [0, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [226, 231, 237], [34, 30, 0], [255, 255, 255], [24, 0, 0], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [0, 0, 255], [253, 255, 254], [255, 0, 0], [3, 7, 8], [255, 255, 255], [1, 1, 1], [41, 41, 41], [255, 255, 255], [255, 255, 255], [148, 215, 215], [255, 255, 255], [0, 0, 0], [255, 255, 255], [26, 27, 31], [255, 255, 255], [195, 181, 12], [255, 255, 255], [0, 0, 0], [255, 255, 255], [0, 0, 0], [0, 0, 0], [255, 255, 255], [255, 255, 255], [18, 40, 53], [255, 255, 255], [237, 27, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [230, 232, 73], [180, 32, 42], [255, 15, 13], [255, 49, 0], [19, 19, 255], [255, 255, 255], [255, 255, 233], [255, 255, 255], [70, 0, 0], [0, 0, 255], [0, 0, 0], [255, 255, 255], [253, 255, 254], [0, 0, 255], [255, 255, 255], [255, 255, 255], [255, 173, 255], [255, 244, 255], [0, 223, 171], [3, 7, 8], [255, 233, 0], [8, 182, 17], [16, 52, 108], [255, 255, 255], [255, 255, 13], [230, 244, 201], [237, 27, 36], [255, 255, 255], [255, 23, 22], [253, 250, 245], [255, 255, 255], [255, 15, 17], [0, 0, 0], [255, 255, 255], [255, 255, 255], [19, 20, 50], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [143, 27, 72], [255, 255, 255], [255, 255, 255], [30, 20, 18], [255, 255, 255], [91, 134, 62], [0, 0, 0], [255, 255, 255], [0, 0, 0], [255, 255, 255], [178, 169, 149], [8, 6, 18], [11, 12, 7], [29, 108, 175], [255, 255, 255], [0, 0, 0], [255, 0, 0], [255, 255, 255], [253, 253, 253], [212, 61, 40], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [221, 198, 96], [255, 255, 255], [0, 0, 0], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 0, 0], [255, 17, 15], [255, 255, 255], [255, 255, 255], [198, 220, 206], [255, 255, 255], [174, 32, 72], [255, 255, 255], [254, 177, 23], [11, 0, 0], [255, 255, 255], [33, 0, 0], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 0], [255, 237, 230], [204, 181, 232], [255, 1, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [179, 163, 60], [255, 255, 255], [255, 255, 255], [197, 219, 224], [255, 23, 39], [255, 0, 16], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 0], [255, 255, 255], [255, 75, 56], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 202, 255], [255, 255, 255], [255, 0, 0], [0, 255, 0], [255, 255, 255], [255, 75, 74], [255, 255, 255], [255, 255, 255], [1, 1, 1], [255, 255, 255], [255, 255, 255], [167, 226, 36], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [189, 37, 43], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [8, 24, 8], [255, 255, 255], [255, 250, 231], [255, 45, 39], [255, 255, 255], [255, 255, 255], [18, 20, 34], [228, 219, 179], [3, 7, 8], [255, 255, 255], [255, 255, 255], [255, 243, 255], [255, 255, 255], [255, 255, 13], [255, 255, 255], [0, 9, 8], [255, 250, 255], [255, 255, 255], [255, 255, 255], [0, 187, 181], [255, 255, 255], [121, 73, 120], [255, 16, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [0, 29, 0], [110, 154, 137], [255, 255, 255], [155, 31, 41], [255, 85, 95], [255, 255, 255], [0, 0, 0], [255, 255, 255], [136, 56, 72], [255, 255, 255], [255, 255, 255], [156, 194, 169], [10, 12, 15], [255, 255, 255], [255, 255, 255], [31, 1, 0], [255, 255, 255], [125, 35, 27], [0, 0, 0], [1, 3, 0], [255, 255, 255], [255, 253, 240], [255, 229, 255], [0, 0, 0], [0, 73, 36], [10, 10, 10], [255, 255, 255], [255, 255, 255], [255, 247, 0], [15, 12, 16], [255, 255, 255], [255, 255, 255], [255, 255, 255], [189, 22, 29], [255, 255, 255], [55, 0, 147], [40, 36, 15], [255, 255, 255], [255, 255, 255], [254, 254, 123], [66, 181, 225], [114, 36, 49], [255, 134, 146], [255, 255, 255], [255, 255, 255], [255, 0, 0], [255, 255, 255], [255, 255, 255], [0, 0, 0], [66, 224, 159], [247, 174, 46], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 0, 254], [248, 237, 205], [86, 104, 174], [251, 208, 7], [19, 20, 19], [255, 255, 0], [255, 255, 255], [255, 255, 255], [1, 1, 1], [255, 255, 255], [240, 226, 189], [255, 255, 255], [1, 27, 140], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [17, 15, 16], [255, 255, 255], [16, 7, 255], [255, 255, 255], [7, 6, 11], [255, 255, 255], [255, 255, 255], [126, 65, 34], [206, 175, 123], [0, 255, 255], [255, 248, 237], [255, 255, 255], [0, 255, 255], [0, 0, 0], [20, 27, 255], [255, 255, 255], [255, 255, 255], [0, 255, 255], [255, 0, 0], [255, 5, 0], [243, 251, 253], [248, 200, 216], [216, 216, 232], [255, 0, 112], [255, 255, 255], [255, 255, 255], [56, 40, 40], [255, 255, 255], [57, 44, 0], [41, 45, 0], [221, 123, 50], [0, 0, 0], [255, 255, 255], [255, 255, 255], [0, 8, 0], [255, 212, 59], [255, 255, 255], [232, 207, 127], [161, 127, 90], [27, 237, 240], [156, 32, 34], [255, 255, 255], [191, 202, 204], [255, 255, 255], [0, 133, 255], [255, 255, 255], [59, 137, 183], [254, 254, 7], [242, 233, 173], [52, 60, 60], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 226, 39], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 121, 33], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 151, 40], [0, 0, 0], [54, 38, 39], [248, 248, 232], [255, 255, 255], [255, 194, 152], [21, 16, 13], [202, 127, 2], [255, 255, 255], [0, 255, 255], [18, 53, 9], [10, 10, 10], [0, 255, 255], [255, 255, 255], [255, 255, 255], [255, 205, 181], [255, 255, 255], [255, 255, 255], [255, 255, 82], [255, 255, 255], [255, 255, 255], [129, 109, 51], [0, 0, 0], [50, 95, 148], [255, 255, 255], [255, 255, 255], [159, 137, 181], [255, 53, 96], [255, 255, 255], [97, 143, 156], [5, 7, 6], [255, 255, 255], [0, 0, 0], [255, 255, 255], [0, 22, 0], [255, 255, 255], [0, 0, 16], [255, 255, 255], [255, 255, 255], [240, 236, 246], [209, 210, 212], [255, 255, 255], [255, 255, 255], [32, 13, 17], [1, 1, 1], [0, 0, 0], [255, 255, 255], [6, 8, 5], [255, 255, 255], [5, 6, 8], [100, 113, 165], [0, 120, 137], [5, 6, 8], [255, 255, 255], [255, 255, 255], [255, 7, 0], [46, 47, 52], [255, 255, 255], [255, 255, 255], [11, 23, 255], [6, 19, 0], [255, 141, 64], [255, 198, 0], [0, 0, 12], [255, 255, 255], [255, 30, 0], [255, 255, 255], [255, 142, 198], [255, 255, 255], [255, 135, 13], [255, 16, 15], [1, 1, 1], [255, 206, 43], [255, 255, 255], [255, 255, 255], [69, 255, 255], [3, 7, 8], [255, 255, 255], [255, 255, 255], [0, 170, 0], [255, 255, 255], [255, 255, 255], [1, 149, 175], [255, 72, 69], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 30, 25], [255, 255, 255], [255, 242, 213], [255, 255, 255], [29, 55, 35], [3, 2, 0], [39, 40, 255], [255, 255, 255], [17, 14, 18], [255, 255, 255], [43, 48, 140], [255, 255, 255], [255, 255, 255], [92, 88, 53], [255, 255, 255], [255, 255, 255], [8, 0, 0], [44, 210, 212], [248, 44, 255], [255, 255, 255], [16, 7, 2], [255, 255, 255], [255, 255, 255], [0, 0, 0], [0, 78, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [0, 0, 255], [243, 247, 255], [255, 255, 255], [80, 54, 52], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 68, 0], [80, 81, 83], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 70, 0], [18, 20, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 243, 0], [0, 0, 14], [255, 255, 255], [255, 255, 255], [255, 255, 250], [255, 255, 255], [255, 255, 255], [255, 0, 0], [255, 8, 7], [37, 21, 255], [7, 6, 11], [255, 0, 0], [255, 30, 38], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 236, 164], [0, 1, 6], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 189, 217], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 31, 9], [255, 0, 0], [255, 255, 255], [255, 255, 255], [0, 218, 54], [255, 255, 255], [35, 31, 32], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [167, 214, 218], [255, 255, 255], [254, 252, 240], [12, 33, 16], [255, 255, 255], [0, 162, 228], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [110, 154, 137], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [0, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [220, 217, 195], [17, 19, 60], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 0], [255, 255, 255], [255, 255, 255], [191, 0, 0], [160, 59, 17], [56, 255, 49], [160, 59, 17], [255, 255, 49], [255, 255, 255], [160, 59, 17], [72, 179, 70], [72, 179, 70], [72, 179, 70], [160, 59, 17], [255, 102, 0], [58, 53, 49], [72, 179, 70], [72, 179, 70], [0, 137, 204], [160, 59, 17], [255, 246, 247], [60, 50, 49], [247, 255, 255], [72, 179, 70], [0, 0, 0], [255, 255, 247], [0, 137, 204], [255, 255, 247], [255, 255, 255], [59, 49, 48], [0, 85, 171], [255, 255, 49], [72, 179, 70], [0, 137, 204], [191, 0, 0], [0, 137, 204], [59, 56, 49], [255, 255, 49], [56, 255, 49], [255, 102, 0], [0, 85, 171], [191, 0, 0], [247, 255, 255], [191, 0, 0], [0, 85, 171], [255, 102, 0], [255, 102, 0], [0, 137, 204], [255, 255, 247], [57, 52, 48], [49, 58, 53], [191, 0, 0], [255, 255, 247], [56, 255, 49], [72, 179, 70], [191, 0, 0], [191, 0, 0], [49, 52, 255], [51, 255, 50], [255, 255, 247], [49, 58, 57], [0, 85, 171], [160, 59, 17], [191, 0, 0], [191, 0, 0], [191, 0, 0], [50, 50, 60], [72, 179, 70], [191, 0, 0], [191, 0, 0], [50, 50, 60], [191, 0, 0], [220, 212, 201], [42, 16, 8], [255, 102, 0], [0, 137, 204], [72, 179, 70], [255, 102, 0], [51, 58, 50], [49, 58, 55], [0, 85, 171], [160, 59, 17], [255, 255, 255], [255, 255, 49], [16, 18, 14], [255, 255, 247], [255, 102, 0], [0, 85, 171], [160, 59, 17], [255, 102, 0], [255, 102, 0], [0, 137, 204], [57, 52, 48], [59, 49, 48], [57, 58, 50], [160, 59, 17], [255, 255, 49], [55, 58, 49], [0, 85, 171], [191, 0, 0], [247, 255, 255], [255, 255, 255], [255, 102, 0], [191, 0, 0], [49, 52, 255], [60, 50, 49], [191, 0, 0], [58, 55, 48], [255, 255, 49], [0, 85, 171], [255, 255, 49], [0, 137, 204], [255, 102, 0], [255, 49, 48], [255, 102, 0], [48, 58, 49], [72, 179, 70], [58, 58, 50], [60, 50, 49], [0, 85, 171], [72, 179, 70], [0, 85, 171], [255, 255, 247], [191, 0, 0], [0, 85, 171], [48, 58, 49], [72, 179, 70], [0, 137, 204], [72, 179, 70], [55, 58, 49], [255, 50, 49], [255, 255, 255], [255, 102, 0], [255, 255, 255], [160, 59, 17], [255, 102, 0], [72, 179, 70], [160, 59, 17], [191, 0, 0], [255, 102, 0], [255, 102, 0], [255, 250, 48], [57, 58, 50], [72, 179, 70], [0, 85, 171], [191, 0, 0], [72, 179, 70], [255, 255, 247], [191, 0, 0], [255, 102, 0], [160, 59, 17], [0, 137, 204], [160, 59, 17], [255, 102, 0], [160, 59, 17], [255, 255, 255], [72, 179, 70], [191, 0, 0], [5, 255, 255], [72, 179, 70], [160, 59, 17], [52, 57, 50], [58, 58, 50], [255, 255, 255], [48, 255, 49], [191, 0, 0], [160, 59, 17], [72, 179, 70], [255, 255, 255], [57, 57, 49], [191, 0, 0], [191, 0, 0], [0, 85, 171], [0, 85, 171], [0, 85, 171], [255, 102, 0], [58, 55, 48], [0, 137, 204], [49, 255, 57], [72, 179, 70], [255, 102, 0], [255, 102, 0], [160, 59, 17], [255, 50, 49], [56, 28, 30], [72, 179, 70], [255, 255, 247], [49, 58, 53], [255, 102, 0], [52, 255, 50], [255, 255, 49], [160, 59, 17], [160, 59, 17], [0, 137, 204], [0, 137, 204], [0, 85, 171], [191, 0, 0], [0, 85, 171], [0, 85, 171], [57, 58, 50], [48, 58, 49], [49, 58, 57], [0, 85, 171], [58, 55, 50], [0, 137, 204], [0, 137, 204], [255, 255, 247], [0, 137, 204], [221, 206, 195], [72, 179, 70], [255, 255, 255], [191, 0, 0], [72, 179, 70], [72, 179, 70], [72, 179, 70], [160, 59, 17], [160, 59, 17], [0, 137, 204], [160, 59, 17], [160, 59, 17], [255, 255, 247], [0, 85, 171], [255, 255, 49], [59, 49, 48], [0, 137, 204], [160, 59, 17], [59, 56, 49], [160, 59, 17], [72, 179, 70], [0, 85, 171], [0, 85, 171], [55, 58, 49], [0, 85, 171], [255, 255, 247], [0, 85, 171], [225, 213, 170], [0, 137, 204], [255, 102, 0], [160, 59, 17], [160, 59, 17], [255, 255, 255], [160, 59, 17], [0, 85, 171], [72, 179, 70], [0, 85, 171], [56, 57, 49], [191, 0, 0], [58, 53, 49], [51, 58, 50], [255, 102, 0], [0, 137, 204], [0, 85, 171], [160, 59, 17], [72, 179, 70], [72, 179, 70], [55, 255, 49], [247, 255, 255], [160, 59, 17], [59, 49, 48], [0, 137, 204], [49, 255, 51], [255, 53, 49], [0, 137, 204], [255, 255, 247], [58, 55, 48], [191, 0, 0], [72, 179, 70], [0, 85, 171], [72, 179, 70], [255, 255, 255], [58, 58, 50], [191, 0, 0], [160, 59, 17], [0, 137, 204], [255, 255, 247], [160, 59, 17], [0, 137, 204], [0, 137, 204], [72, 179, 70], [255, 255, 247], [255, 50, 49], [191, 0, 0], [255, 255, 255], [59, 49, 48], [49, 52, 61], [0, 137, 204], [255, 102, 0], [255, 255, 255], [0, 137, 204], [255, 53, 49], [247, 255, 255], [255, 255, 255], [255, 102, 0], [59, 56, 49], [72, 179, 70], [72, 179, 70], [72, 179, 70], [57, 57, 49], [57, 57, 49], [0, 85, 171], [58, 58, 50], [191, 0, 0], [255, 102, 0], [255, 255, 255], [59, 49, 48], [72, 179, 70], [191, 0, 0], [255, 255, 247], [0, 85, 171], [0, 137, 204], [49, 255, 255], [255, 255, 247], [160, 59, 17], [160, 59, 17], [255, 255, 247], [0, 137, 204], [160, 59, 17], [0, 137, 204], [255, 102, 0], [72, 179, 70], [255, 255, 255], [255, 255, 255], [0, 85, 171], [57, 58, 50], [0, 85, 171], [255, 255, 255], [255, 102, 0], [255, 255, 247], [0, 137, 204], [57, 57, 49], [255, 102, 0], [49, 52, 61], [117, 107, 39], [255, 255, 255], [56, 57, 49], [0, 85, 171], [59, 56, 49], [191, 0, 0], [0, 85, 171], [72, 179, 70], [52, 58, 48], [255, 255, 48], [60, 50, 49], [0, 137, 204], [49, 58, 57], [51, 58, 50], [191, 0, 0], [57, 57, 49], [0, 137, 204], [255, 255, 247], [72, 179, 70], [0, 85, 171], [255, 255, 247], [255, 102, 0], [0, 137, 204], [55, 58, 49], [255, 255, 247], [0, 137, 204], [52, 255, 50], [0, 137, 204], [248, 249, 235], [0, 137, 204], [57, 52, 48], [52, 255, 50], [160, 59, 17], [225, 218, 198], [191, 0, 0], [0, 137, 204], [0, 85, 171], [191, 0, 0], [191, 0, 0], [191, 0, 0], [60, 50, 49], [0, 85, 171], [0, 85, 171], [255, 102, 0], [255, 102, 0], [255, 102, 0], [255, 255, 49], [255, 49, 48], [0, 137, 204], [57, 57, 49], [0, 85, 171], [191, 0, 0], [0, 85, 171], [191, 0, 0], [58, 55, 50], [255, 255, 255], [50, 50, 60], [0, 85, 171], [58, 55, 50], [58, 53, 49], [255, 255, 255], [255, 255, 49], [255, 102, 0], [0, 137, 204], [0, 137, 204], [255, 255, 255], [0, 85, 171], [191, 0, 0], [255, 254, 49], [0, 85, 171], [255, 255, 255], [255, 102, 0], [160, 59, 17], [255, 102, 0], [59, 56, 49], [59, 49, 48], [160, 59, 17], [0, 85, 171], [49, 57, 59], [255, 255, 255], [0, 85, 171], [0, 137, 204], [49, 58, 55], [160, 59, 17], [0, 137, 204], [52, 58, 48], [255, 49, 48], [48, 56, 58], [57, 52, 48], [72, 179, 70], [0, 137, 204], [255, 102, 0], [255, 255, 255], [0, 137, 204], [160, 59, 17], [255, 255, 255], [49, 58, 53], [51, 58, 50], [49, 255, 255], [58, 58, 50], [0, 137, 204], [191, 0, 0], [0, 85, 171], [52, 57, 50], [58, 53, 49], [72, 179, 70], [51, 58, 50], [58, 53, 49], [0, 137, 204], [0, 137, 204], [0, 137, 204], [255, 255, 255], [0, 137, 204], [72, 179, 70], [255, 102, 0], [59, 49, 48], [49, 58, 57], [255, 255, 48], [51, 255, 50], [72, 179, 70], [0, 85, 171], [72, 179, 70], [72, 179, 70], [61, 72, 56], [255, 255, 255], [0, 137, 204], [0, 137, 204], [0, 137, 204], [0, 137, 204], [191, 0, 0], [255, 255, 255], [72, 179, 70], [51, 58, 50], [0, 85, 171], [49, 58, 57], [255, 255, 255], [60, 50, 49], [58, 55, 48], [72, 180, 71], [72, 180, 71], [255, 255, 255], [0, 84, 170], [160, 59, 17], [153, 147, 129], [255, 101, 1], [0, 137, 205], [48, 58, 49], [52, 58, 48], [0, 137, 205], [0, 137, 204], [57, 52, 48], [160, 59, 17], [255, 255, 247], [255, 255, 247], [160, 59, 17], [160, 59, 17], [0, 137, 204], [255, 101, 1], [48, 255, 49], [190, 0, 2], [191, 0, 0], [160, 59, 17], [255, 255, 255], [160, 59, 17], [190, 0, 2], [0, 85, 171], [72, 180, 71], [0, 137, 205], [255, 102, 0], [253, 254, 246], [160, 59, 17], [72, 180, 71], [255, 255, 255], [72, 180, 71], [190, 0, 2], [0, 137, 205], [72, 180, 71], [0, 84, 170], [0, 84, 170], [255, 250, 247], [49, 52, 61], [255, 101, 1], [255, 255, 42], [34, 32, 33], [255, 255, 255], [255, 255, 255], [10, 4, 26], [239, 229, 214], [255, 255, 255], [251, 245, 223], [0, 9, 8], [255, 255, 255], [0, 0, 0], [98, 148, 159], [248, 232, 8], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 1, 0], [203, 204, 199], [40, 8, 8], [255, 255, 255], [255, 255, 255], [255, 255, 255], [90, 198, 208], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 195, 49], [0, 3, 5], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [253, 251, 252], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [82, 47, 129], [83, 83, 119], [255, 255, 255], [255, 29, 36], [255, 255, 255], [248, 232, 200], [0, 23, 0], [0, 7, 15], [6, 24, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [178, 162, 133], [255, 0, 0], [255, 0, 0], [0, 0, 0], [255, 0, 0], [5, 1, 2], [0, 0, 0], [242, 185, 56], [0, 87, 23], [94, 159, 186], [255, 255, 255], [255, 255, 255], [255, 30, 47], [255, 255, 255], [0, 255, 255], [212, 212, 174], [0, 0, 0], [0, 93, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [146, 26, 28], [0, 0, 0], [255, 255, 255], [255, 255, 0], [122, 144, 59], [255, 255, 255], [255, 28, 99], [161, 156, 42], [255, 255, 255], [0, 146, 43], [1, 0, 0], [243, 118, 152], [255, 255, 255], [1, 1, 1], [6, 6, 8], [255, 183, 166], [255, 203, 5], [255, 255, 255], [255, 255, 255], [0, 0, 0], [0, 0, 0], [42, 69, 138], [0, 0, 0], [255, 255, 255], [233, 245, 246], [0, 0, 0], [11, 12, 47], [255, 255, 255], [0, 0, 0], [187, 90, 73], [255, 14, 50], [162, 49, 45], [255, 255, 255], [45, 138, 117], [45, 138, 117], [35, 34, 203], [249, 247, 230], [248, 232, 184], [255, 255, 255], [237, 211, 36], [255, 255, 225], [255, 255, 255], [245, 235, 173], [255, 27, 26], [0, 255, 255], [255, 255, 255], [35, 31, 32], [0, 0, 0], [0, 0, 0], [255, 255, 255], [255, 0, 0], [25, 36, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [237, 27, 0], [255, 255, 255], [255, 255, 255], [255, 0, 0], [255, 255, 255], [255, 255, 255], [0, 0, 255], [255, 255, 255], [255, 233, 0], [111, 195, 195], [255, 255, 255], [228, 238, 255], [10, 10, 12], [255, 255, 255], [5, 0, 6], [255, 23, 22], [255, 255, 255], [0, 255, 255], [0, 0, 0], [255, 255, 255], [206, 206, 228], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 40, 78], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [252, 223, 9], [166, 71, 101], [255, 255, 255], [255, 255, 255], [13, 13, 11], [255, 255, 255], [165, 70, 154], [255, 255, 255], [127, 27, 27], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [152, 200, 72], [255, 255, 255], [242, 241, 228], [20, 48, 223], [242, 242, 242], [0, 0, 0], [25, 58, 62], [255, 255, 255], [197, 219, 224], [255, 255, 40], [142, 145, 0], [255, 202, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [19, 39, 74], [255, 255, 255], [255, 255, 255], [255, 255, 255], [99, 203, 232], [255, 255, 255], [255, 228, 124], [0, 0, 0], [0, 0, 0], [253, 252, 248], [255, 255, 255], [239, 243, 255], [255, 255, 255], [255, 255, 255], [24, 136, 200], [255, 255, 255], [255, 255, 255], [255, 255, 255], [209, 31, 42], [239, 214, 43], [241, 246, 0], [255, 255, 255], [229, 228, 224], [255, 255, 255], [255, 255, 255], [229, 227, 215], [0, 0, 0], [0, 0, 0], [255, 255, 255], [31, 21, 21], [255, 46, 49], [255, 255, 255], [35, 64, 142], [0, 0, 0], [1, 1, 1], [36, 95, 175], [0, 6, 17], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [243, 227, 227], [5, 6, 8], [255, 255, 249], [0, 0, 0], [255, 255, 255], [250, 254, 255], [40, 135, 255], [120, 56, 104], [86, 104, 174], [0, 0, 0], [255, 255, 255], [120, 56, 104], [14, 14, 14], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [247, 245, 0], [255, 255, 255], [0, 0, 0], [255, 255, 255], [245, 28, 213], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [22, 51, 91], [255, 255, 255], [0, 0, 0], [243, 243, 243], [4, 0, 0], [255, 255, 255], [255, 255, 255], [248, 248, 246], [255, 255, 255], [248, 88, 40], [0, 0, 0], [255, 255, 255], [0, 0, 0], [10, 10, 10], [23, 32, 49], [6, 8, 7], [6, 6, 6], [255, 255, 255], [255, 255, 255], [99, 74, 159], [255, 255, 255], [85, 24, 6], [129, 109, 51], [255, 0, 37], [164, 188, 255], [246, 234, 188], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 209, 205], [255, 255, 255], [255, 255, 255], [111, 195, 195], [255, 255, 255], [0, 195, 255], [232, 56, 40], [255, 255, 255], [255, 231, 225], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [254, 254, 252], [255, 135, 13], [255, 255, 255], [0, 5, 6], [41, 31, 22], [1, 3, 2], [255, 255, 255], [255, 255, 255], [255, 255, 255], [1, 56, 95], [0, 0, 0], [255, 255, 255], [255, 255, 255], [227, 231, 236], [255, 255, 255], [255, 255, 255], [255, 255, 255], [247, 245, 232], [255, 70, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 232, 236], [255, 37, 124], [255, 255, 255], [255, 8, 7], [255, 255, 255], [255, 243, 209], [255, 41, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [45, 75, 165], [0, 1, 1], [255, 255, 255], [12, 255, 255], [255, 255, 255], [255, 255, 255], [253, 255, 254], [255, 255, 255], [255, 255, 255], [255, 255, 255], [24, 24, 26], [255, 255, 255], [36, 54, 139], [255, 255, 0], [0, 0, 0], [255, 255, 255], [19, 176, 66], [255, 255, 255], [242, 225, 216], [255, 255, 255], [0, 0, 6], [255, 40, 26], [8, 72, 104], [131, 83, 135], [0, 178, 182], [255, 255, 255], [255, 8, 0], [254, 254, 242], [255, 255, 255], [255, 255, 255], [215, 202, 111], [0, 0, 0], [255, 255, 252], [255, 255, 0], [0, 255, 255], [255, 255, 255], [88, 8, 40], [0, 0, 0], [255, 255, 255], [240, 149, 192], [255, 255, 255], [253, 253, 255], [51, 58, 50], [255, 20, 255], [255, 255, 255], [193, 224, 25], [227, 34, 41], [0, 0, 210], [208, 28, 20], [53, 68, 68], [248, 247, 242], [255, 255, 255], [255, 255, 255], [26, 72, 161], [255, 255, 255], [35, 75, 25], [255, 255, 255], [255, 249, 227], [5, 108, 55], [255, 35, 39], [255, 35, 47], [255, 255, 255], [255, 212, 59], [255, 243, 230], [255, 30, 0], [255, 255, 255], [255, 255, 255], [148, 143, 198], [255, 255, 255], [59, 56, 49], [223, 227, 230], [255, 255, 255], [255, 255, 255], [255, 255, 247], [0, 0, 0], [49, 52, 57], [72, 180, 71], [216, 40, 40], [0, 78, 0], [0, 255, 255], [255, 255, 255], [34, 26, 0], [0, 1, 11], [206, 229, 70], [140, 148, 196], [246, 243, 255], [171, 210, 179], [30, 37, 39], [179, 77, 57], [172, 148, 121], [221, 205, 17], [81, 43, 72], [115, 139, 149], [255, 249, 255], [106, 44, 40], [241, 233, 216], [2, 3, 23], [4, 53, 100], [150, 56, 59], [255, 202, 24], [255, 8, 255], [255, 202, 24], [22, 26, 109], [152, 48, 49], [98, 81, 56], [71, 111, 115], [82, 68, 149], [255, 255, 255], [115, 36, 44], [0, 4, 71], [255, 255, 255], [205, 179, 146], [244, 158, 73], [160, 101, 62], [154, 157, 167], [255, 204, 25], [102, 156, 169], [160, 59, 17], [1, 22, 34], [122, 66, 54], [129, 43, 52], [32, 39, 77], [14, 13, 11], [255, 9, 210], [91, 59, 58], [0, 0, 50], [0, 0, 0], [1, 54, 48], [0, 0, 10], [244, 184, 135], [169, 129, 130], [195, 213, 228], [124, 38, 36], [17, 15, 37], [0, 0, 6], [24, 23, 33], [136, 8, 88], [222, 194, 154], [23, 61, 78], [255, 233, 197], [78, 101, 58], [255, 255, 255], [255, 255, 255], [137, 104, 110], [33, 27, 60], [255, 255, 255], [30, 41, 115], [255, 255, 255], [155, 49, 53], [213, 158, 102], [11, 0, 28], [29, 42, 46], [38, 69, 89], [101, 139, 209], [229, 171, 97], [15, 29, 159], [255, 236, 129], [247, 238, 157], [15, 17, 16], [237, 121, 72], [184, 190, 204], [255, 255, 255], [200, 143, 171], [82, 138, 208], [117, 116, 90], [142, 66, 174], [0, 0, 6], [253, 201, 0], [202, 71, 74], [0, 0, 5], [255, 255, 255], [240, 142, 85], [229, 50, 47], [59, 123, 173], [169, 178, 149], [0, 0, 2], [255, 255, 255], [239, 57, 57], [201, 173, 125], [255, 255, 255], [240, 0, 235], [59, 89, 135], [211, 0, 0], [255, 255, 255], [44, 67, 156], [27, 26, 25], [38, 93, 175], [0, 229, 0], [19, 15, 54], [255, 255, 255], [246, 241, 245], [0, 0, 10], [1, 0, 0], [102, 154, 188], [248, 168, 24], [74, 34, 33], [245, 245, 255], [252, 245, 203], [55, 73, 43], [177, 78, 42], [0, 9, 71], [216, 103, 64], [255, 255, 255], [41, 44, 100], [161, 152, 112], [27, 0, 135], [255, 255, 255], [0, 0, 2], [228, 234, 192], [147, 165, 177], [145, 45, 40], [255, 88, 255], [255, 255, 255], [0, 19, 61], [60, 77, 147], [255, 255, 255], [151, 145, 115], [14, 49, 96], [50, 64, 132], [128, 33, 28], [248, 0, 67], [0, 0, 52], [255, 255, 255], [61, 53, 49], [255, 255, 255], [212, 104, 98], [255, 255, 255], [97, 36, 84], [255, 255, 255], [189, 126, 116], [32, 56, 25], [109, 42, 96], [255, 255, 255], [255, 249, 207], [201, 239, 250], [164, 137, 115], [170, 176, 192], [30, 46, 79], [2, 0, 14], [151, 169, 232], [245, 120, 69], [255, 255, 255], [23, 64, 42], [38, 47, 106], [255, 255, 255], [255, 255, 255], [83, 163, 164], [215, 144, 82], [35, 94, 121], [130, 58, 66], [139, 205, 190], [10, 21, 33], [207, 170, 124], [255, 255, 255], [19, 20, 41], [255, 255, 255], [245, 197, 85], [69, 60, 47], [22, 52, 48], [136, 8, 88], [48, 91, 115], [233, 186, 132], [186, 206, 238], [94, 68, 68], [0, 0, 134], [255, 255, 255], [42, 39, 95], [43, 94, 95], [32, 64, 148], [125, 51, 37], [56, 57, 49], [248, 193, 117], [32, 0, 0], [255, 255, 255], [0, 0, 216], [60, 126, 190], [137, 140, 192], [133, 69, 59], [24, 19, 52], [174, 197, 223], [248, 168, 24], [47, 25, 28], [243, 118, 247], [51, 89, 152], [10, 44, 31], [146, 53, 43], [255, 255, 255], [162, 176, 185], [185, 22, 21], [235, 195, 160], [0, 0, 6], [123, 163, 162], [0, 0, 0], [95, 126, 255], [190, 210, 242], [215, 158, 139], [38, 45, 118], [126, 156, 219], [255, 255, 255], [136, 107, 65], [18, 22, 33], [139, 111, 81], [255, 255, 255], [174, 155, 85], [74, 87, 117], [0, 10, 47], [217, 194, 146], [0, 0, 5], [22, 54, 84], [69, 17, 27], [232, 230, 235], [187, 217, 255], [109, 45, 54], [150, 51, 31], [232, 209, 199], [31, 44, 97], [174, 155, 79], [228, 202, 178], [255, 255, 255], [28, 44, 68], [126, 180, 229], [131, 13, 8], [255, 255, 255], [144, 140, 130], [25, 27, 39], [179, 75, 69], [230, 139, 56], [253, 115, 68], [0, 37, 125], [192, 139, 29], [192, 136, 92], [239, 148, 74], [241, 234, 205], [0, 0, 2], [36, 79, 100], [0, 42, 43], [142, 42, 37], [238, 227, 226], [4, 4, 17], [227, 194, 157], [65, 37, 86], [255, 226, 215], [239, 174, 98], [167, 200, 217], [255, 255, 255], [255, 255, 255], [22, 23, 36], [39, 60, 123], [28, 26, 52], [0, 24, 12], [27, 69, 130], [230, 184, 105], [15, 26, 80], [155, 182, 159], [98, 45, 46], [244, 242, 248], [202, 89, 66], [3, 15, 65], [247, 241, 84], [255, 226, 212], [248, 168, 24], [29, 33, 98], [200, 184, 151], [255, 255, 255], [255, 255, 255], [31, 35, 63], [255, 255, 255], [114, 164, 228], [0, 0, 0], [246, 245, 119], [249, 245, 246], [95, 57, 126], [136, 112, 82], [20, 32, 102], [255, 255, 255], [121, 159, 179], [254, 166, 144], [45, 0, 227], [239, 240, 242], [174, 185, 235], [112, 99, 55], [179, 205, 235], [255, 118, 0], [255, 255, 255], [107, 130, 224], [85, 115, 188], [191, 230, 212], [78, 66, 173], [69, 20, 12], [255, 255, 255], [255, 255, 255], [171, 151, 123], [255, 255, 255], [18, 61, 16], [43, 42, 57], [35, 26, 66], [21, 23, 34], [216, 204, 128], [253, 202, 61], [213, 224, 145], [171, 159, 200], [14, 33, 0], [93, 128, 48], [255, 255, 255], [113, 104, 163], [142, 83, 42], [58, 67, 104], [138, 38, 38], [140, 47, 31], [255, 255, 255], [122, 135, 123], [236, 196, 125], [255, 204, 25], [229, 28, 32], [255, 255, 255], [255, 255, 0], [0, 12, 25], [38, 49, 90], [30, 63, 53], [255, 255, 255], [26, 27, 80], [6, 24, 106], [218, 116, 157], [255, 255, 255], [35, 42, 115], [255, 47, 255], [0, 0, 40], [35, 128, 122], [27, 26, 35], [252, 0, 255], [113, 95, 65], [251, 250, 255], [66, 142, 128], [46, 124, 209], [30, 28, 127], [188, 138, 0], [242, 0, 0], [159, 93, 133], [32, 52, 128], [238, 227, 182], [190, 228, 238], [132, 43, 70], [247, 244, 249], [11, 10, 16], [213, 200, 173], [235, 179, 210], [11, 11, 17], [38, 24, 16], [104, 118, 168], [255, 255, 255], [243, 159, 73], [141, 144, 156], [211, 76, 70], [255, 255, 255], [254, 254, 254], [255, 255, 255], [22, 111, 185], [27, 35, 71], [77, 27, 34], [175, 50, 51], [255, 255, 255], [52, 91, 65], [170, 166, 165], [12, 0, 2], [207, 229, 164], [252, 150, 128], [7, 37, 110], [156, 92, 77], [155, 66, 63], [205, 203, 198], [2, 2, 4], [0, 0, 137], [24, 22, 54], [240, 200, 86], [143, 53, 52], [229, 202, 181], [254, 142, 70], [192, 185, 167], [255, 255, 255], [36, 41, 90], [0, 0, 55], [255, 255, 255], [174, 115, 109], [159, 52, 54], [255, 228, 74], [192, 8, 14], [255, 255, 255], [244, 158, 73], [99, 21, 43], [255, 247, 16], [255, 242, 213], [13, 11, 22], [225, 200, 178], [255, 255, 255], [181, 130, 41], [242, 208, 59], [50, 107, 109], [17, 57, 64], [255, 255, 255], [31, 33, 36], [63, 42, 107], [83, 41, 45], [161, 188, 217], [175, 118, 110], [122, 169, 227], [253, 250, 255], [80, 125, 188], [248, 247, 253], [62, 62, 66], [121, 44, 94], [255, 255, 255], [29, 46, 134], [163, 189, 108], [151, 50, 43], [49, 128, 98], [81, 34, 36], [31, 12, 0], [255, 219, 175], [146, 34, 33], [67, 91, 143], [133, 53, 122], [121, 28, 30], [47, 66, 154], [60, 94, 71], [31, 40, 74], [178, 201, 139], [72, 10, 22], [242, 231, 56], [22, 243, 247], [249, 89, 78], [131, 47, 36], [255, 255, 255], [170, 196, 226], [191, 106, 26], [255, 255, 255], [151, 0, 213], [43, 25, 30], [35, 29, 69], [28, 110, 104], [106, 39, 40], [32, 25, 9], [76, 68, 107], [1, 0, 6], [255, 234, 132], [1, 0, 5], [117, 128, 190], [151, 10, 44], [255, 255, 255], [0, 0, 10], [0, 0, 5], [56, 57, 83], [0, 12, 53], [160, 149, 121], [255, 255, 255], [248, 246, 249], [247, 240, 210], [185, 223, 208], [255, 235, 139], [81, 43, 68], [13, 13, 15], [34, 67, 52], [240, 239, 250], [199, 67, 55], [43, 39, 54], [28, 33, 76], [103, 73, 132], [40, 84, 176], [0, 0, 0], [0, 0, 0], [221, 75, 61], [252, 212, 154], [183, 151, 118], [36, 55, 115], [212, 191, 166], [116, 40, 255], [255, 202, 99], [112, 50, 205], [28, 109, 63], [109, 52, 59], [182, 186, 197], [200, 195, 63], [90, 138, 200], [163, 167, 145], [181, 116, 84], [193, 135, 61], [55, 83, 127], [58, 114, 125], [244, 158, 73], [6, 24, 49], [0, 0, 0], [37, 0, 5], [255, 255, 255], [26, 38, 74], [153, 168, 255], [1, 26, 37], [66, 49, 106], [2, 159, 26], [0, 0, 11], [2, 1, 6], [255, 255, 255], [15, 17, 20], [158, 49, 43], [57, 101, 176], [106, 49, 119], [76, 28, 32], [35, 0, 188], [38, 35, 114], [136, 8, 56], [29, 28, 42], [232, 195, 161], [24, 119, 56], [254, 254, 254], [32, 21, 71], [255, 255, 255], [255, 255, 255], [62, 39, 64], [255, 255, 255], [38, 67, 130], [88, 104, 104], [0, 0, 5], [31, 43, 123], [255, 255, 255], [129, 31, 20], [204, 218, 180], [39, 41, 98], [224, 204, 175], [0, 0, 0], [251, 244, 198], [239, 237, 239], [255, 76, 255], [255, 255, 255], [255, 255, 255], [34, 41, 96], [14, 27, 80], [22, 21, 60], [16, 19, 31], [49, 255, 255], [208, 189, 177], [15, 0, 16], [94, 117, 211], [21, 54, 171], [52, 146, 208], [255, 255, 255], [0, 0, 114], [169, 174, 186], [138, 40, 27], [0, 3, 23], [254, 254, 254], [242, 241, 243], [255, 255, 0], [62, 57, 73], [243, 240, 255], [214, 84, 85], [181, 165, 209], [88, 38, 39], [67, 27, 24], [255, 255, 255], [3, 20, 98], [241, 80, 54], [10, 36, 155], [173, 122, 128], [1, 0, 5], [34, 29, 30], [76, 25, 44], [173, 185, 232], [255, 255, 255], [216, 26, 89], [0, 0, 0], [234, 220, 185], [21, 21, 82], [26, 26, 28], [89, 132, 166], [231, 173, 126], [255, 255, 255], [13, 17, 46], [245, 226, 180], [254, 255, 255], [255, 255, 255], [0, 1, 6], [45, 97, 145], [244, 234, 238], [127, 121, 132], [193, 38, 54], [176, 112, 50], [255, 254, 233], [7, 132, 89], [42, 38, 96], [249, 246, 249], [255, 255, 255], [234, 217, 223], [255, 255, 255], [255, 255, 255], [175, 202, 231], [11, 14, 23], [155, 158, 171], [175, 162, 143], [69, 127, 137], [133, 38, 32], [255, 255, 255], [160, 21, 24], [255, 254, 171], [244, 158, 73], [255, 17, 20], [0, 5, 32], [86, 96, 146], [0, 137, 205], [251, 241, 240], [182, 71, 73], [231, 129, 255], [182, 155, 137], [0, 0, 0], [0, 0, 254], [72, 180, 71], [40, 69, 172], [126, 136, 50], [240, 191, 147], [167, 162, 180], [22, 56, 49], [22, 68, 155], [137, 57, 55], [92, 79, 192], [31, 26, 106], [160, 41, 135], [74, 122, 122], [255, 255, 255], [0, 0, 13], [89, 70, 40], [72, 133, 204], [107, 60, 63], [160, 61, 167], [79, 65, 48], [0, 0, 0], [241, 207, 92], [243, 240, 246], [43, 0, 12], [24, 24, 36], [238, 237, 242], [8, 72, 248], [91, 81, 172], [194, 104, 79], [15, 24, 48], [203, 70, 76], [27, 29, 27], [67, 125, 189], [33, 44, 72], [208, 220, 255], [143, 0, 40], [255, 255, 255], [255, 255, 255], [248, 168, 24], [23, 31, 31], [255, 255, 117], [183, 0, 37], [199, 175, 142], [214, 225, 208], [239, 198, 132], [17, 64, 177], [113, 35, 31], [198, 128, 59], [255, 255, 31], [255, 255, 255], [0, 137, 205], [25, 42, 129], [238, 193, 68], [255, 255, 255], [1, 0, 5], [36, 43, 79], [255, 255, 255], [8, 104, 184], [41, 61, 159], [255, 255, 255], [255, 255, 255], [0, 7, 41], [191, 83, 48], [198, 173, 153], [211, 203, 58], [97, 148, 152], [30, 139, 119], [204, 148, 99], [8, 9, 13], [25, 147, 120], [57, 35, 76], [117, 157, 204], [136, 147, 197], [27, 44, 92], [255, 255, 255], [60, 94, 170], [175, 65, 65], [221, 82, 59], [237, 232, 182], [255, 255, 16], [250, 249, 255], [210, 0, 0], [0, 24, 21], [168, 162, 130], [22, 9, 12], [209, 228, 235], [225, 89, 123], [66, 176, 234], [255, 255, 255], [7, 7, 0], [238, 235, 230], [190, 124, 40], [91, 100, 118], [138, 168, 170], [255, 0, 0], [39, 26, 43], [42, 43, 88], [0, 0, 0], [255, 255, 255], [29, 125, 64], [193, 153, 118], [171, 149, 119], [255, 255, 255], [255, 255, 255], [249, 248, 255], [157, 161, 174], [205, 81, 67], [255, 255, 255], [210, 65, 0], [49, 86, 176], [41, 10, 9], [0, 0, 0], [93, 31, 31], [112, 0, 37], [231, 153, 93], [156, 156, 166], [41, 50, 122], [206, 10, 12], [255, 255, 255], [255, 253, 228], [25, 15, 0], [45, 0, 194], [43, 71, 92], [223, 207, 189], [0, 0, 0], [79, 132, 202], [29, 31, 97], [147, 157, 118], [201, 75, 255], [72, 0, 0], [18, 0, 53], [77, 130, 195], [0, 0, 10], [0, 0, 55], [255, 255, 255], [128, 118, 106], [217, 202, 167], [25, 24, 21], [146, 150, 68], [255, 241, 243], [255, 255, 255], [181, 46, 52], [66, 18, 36], [0, 165, 55], [5, 17, 88], [63, 80, 130], [32, 38, 72], [254, 254, 254], [243, 237, 249], [255, 96, 53], [0, 0, 0], [153, 140, 118], [36, 24, 66], [206, 19, 67], [29, 20, 14], [132, 155, 222], [194, 175, 189], [189, 157, 137], [117, 63, 45], [215, 106, 77], [185, 181, 185], [255, 0, 210], [82, 41, 111], [80, 107, 110], [20, 24, 30], [130, 58, 51], [104, 94, 70], [255, 255, 255], [255, 237, 67], [118, 127, 60], [0, 0, 2], [255, 255, 255], [0, 0, 6], [254, 69, 255], [39, 53, 16], [1, 0, 3], [237, 181, 91], [117, 40, 32], [255, 255, 255], [168, 204, 181], [224, 232, 255], [255, 133, 0], [179, 70, 47], [44, 58, 39], [75, 91, 127], [17, 18, 13], [255, 255, 255], [3, 12, 48], [198, 90, 69], [122, 27, 112], [0, 0, 5], [156, 56, 56], [111, 0, 104], [14, 41, 131], [236, 234, 239], [255, 255, 255], [109, 42, 50], [240, 194, 119], [249, 244, 251], [184, 120, 56], [0, 0, 0], [253, 77, 64], [63, 30, 55], [43, 183, 240], [212, 186, 161], [161, 75, 67], [230, 244, 172], [31, 58, 121], [17, 68, 125], [214, 68, 29], [90, 28, 67], [254, 254, 254], [241, 227, 194], [97, 23, 166], [28, 31, 44], [157, 161, 172], [174, 163, 139], [0, 94, 0], [50, 28, 77], [27, 59, 64], [255, 255, 247], [68, 184, 79], [2, 1, 15], [55, 27, 68], [151, 201, 242], [255, 25, 255], [76, 126, 193], [35, 29, 67], [175, 175, 255], [47, 79, 88], [255, 255, 255], [82, 32, 22], [40, 54, 100], [144, 63, 61], [54, 73, 140], [249, 243, 247], [247, 244, 251], [0, 0, 0], [240, 210, 147], [59, 45, 98], [46, 69, 143], [188, 154, 65], [34, 41, 112], [12, 23, 142], [23, 31, 84], [209, 223, 249], [174, 202, 226], [255, 240, 195], [27, 27, 39], [156, 161, 175], [255, 236, 162], [160, 172, 225], [88, 61, 150], [238, 223, 192], [255, 255, 255], [255, 220, 253], [44, 46, 25], [137, 184, 255], [0, 0, 18], [255, 255, 255], [172, 104, 0], [255, 255, 255], [255, 0, 0], [101, 44, 47], [12, 11, 40], [255, 255, 255], [0, 133, 167], [35, 59, 54], [255, 255, 255], [148, 47, 49], [102, 38, 40], [255, 213, 179], [0, 30, 0], [29, 28, 86], [255, 128, 191], [195, 204, 255], [223, 196, 162], [225, 74, 47], [255, 255, 255], [209, 95, 70], [247, 206, 127], [255, 255, 255], [0, 0, 0], [255, 255, 255], [28, 59, 104], [1, 0, 14], [203, 121, 39], [255, 255, 255], [255, 155, 255], [255, 255, 255], [36, 29, 61], [123, 40, 51], [246, 240, 252], [255, 202, 24], [241, 181, 123], [25, 50, 107], [126, 156, 210], [142, 109, 78], [252, 250, 255], [19, 26, 115], [255, 255, 255], [101, 132, 45], [255, 255, 255], [48, 76, 158], [176, 136, 48], [74, 66, 100], [255, 255, 255], [79, 61, 99], [0, 0, 0], [0, 5, 16], [20, 21, 31], [32, 51, 255], [255, 12, 19], [26, 42, 138], [0, 113, 95], [255, 255, 255], [244, 230, 82], [255, 182, 252], [255, 255, 255], [237, 174, 102], [35, 61, 119], [165, 0, 0], [244, 242, 255], [214, 80, 63], [205, 188, 159], [255, 255, 255], [32, 33, 56], [0, 25, 87], [0, 0, 47], [255, 255, 255], [62, 22, 21], [25, 17, 45], [239, 171, 114], [79, 37, 51], [0, 0, 6], [29, 35, 72], [2, 24, 25], [255, 0, 0], [27, 0, 128], [16, 18, 27], [7, 0, 16], [244, 158, 73], [22, 46, 141], [163, 168, 185], [252, 234, 227], [130, 105, 99], [255, 0, 0], [36, 56, 140], [69, 99, 124], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [130, 42, 31], [1, 0, 213], [49, 52, 90], [250, 247, 248], [0, 0, 5], [0, 0, 0], [176, 180, 189], [0, 6, 16], [229, 200, 207], [255, 217, 162], [172, 155, 113], [196, 214, 238], [235, 219, 185], [248, 247, 255], [233, 175, 178], [205, 172, 125], [9, 24, 57], [93, 93, 105], [13, 73, 105], [9, 23, 95], [62, 28, 88], [255, 255, 255], [35, 112, 207], [237, 233, 218], [13, 55, 52], [22, 24, 63], [255, 255, 255], [206, 196, 124], [247, 205, 40], [255, 255, 255], [18, 20, 51], [3, 0, 0], [88, 136, 184], [0, 0, 0], [0, 0, 2], [255, 255, 255], [15, 56, 199], [14, 29, 60], [141, 99, 75], [156, 53, 63], [80, 38, 40], [255, 255, 255], [28, 32, 103], [255, 45, 45], [23, 2, 0], [36, 243, 255], [52, 255, 48], [163, 45, 45], [21, 29, 77], [105, 83, 35], [37, 50, 59], [255, 202, 24], [255, 255, 255], [218, 196, 152], [75, 107, 171], [255, 255, 255], [210, 46, 95], [97, 120, 72], [255, 255, 255], [190, 165, 9], [136, 166, 238], [5, 9, 20], [162, 166, 178], [255, 241, 95], [248, 120, 40], [255, 255, 255], [38, 56, 245], [194, 0, 0], [221, 190, 170], [213, 74, 107], [235, 15, 22], [30, 35, 76], [213, 214, 238], [0, 0, 148], [92, 34, 60], [155, 50, 40], [22, 26, 51], [40, 40, 88], [62, 140, 192], [255, 255, 255], [255, 255, 255], [243, 236, 195], [252, 252, 255], [61, 66, 122], [205, 83, 43], [170, 133, 114], [0, 211, 194], [255, 255, 255], [21, 43, 51], [188, 67, 70], [255, 255, 255], [248, 245, 240], [156, 89, 72], [95, 22, 28], [150, 158, 178], [240, 6, 8], [14, 21, 73], [84, 150, 232], [211, 179, 147], [84, 43, 114], [255, 30, 34], [234, 221, 174], [142, 134, 175], [255, 254, 250], [57, 98, 150], [146, 57, 44], [100, 40, 41], [157, 162, 174], [56, 45, 109], [227, 223, 240], [239, 229, 189], [255, 255, 255], [192, 168, 101], [18, 22, 31], [123, 211, 198], [244, 241, 255], [255, 255, 255], [255, 255, 255], [242, 218, 130], [255, 255, 255], [255, 202, 24], [255, 255, 255], [121, 115, 138], [77, 144, 192], [10, 21, 83], [205, 108, 67], [15, 18, 24], [234, 216, 177], [130, 8, 6], [21, 50, 123], [46, 122, 189], [150, 38, 35], [248, 249, 239], [255, 255, 255], [255, 255, 255], [63, 90, 255], [28, 29, 43], [29, 41, 120], [20, 30, 72], [75, 76, 0], [208, 195, 159], [255, 255, 255], [255, 255, 255], [130, 40, 38], [82, 114, 194], [248, 152, 40], [95, 109, 141], [248, 184, 24], [249, 124, 255], [6, 28, 88], [26, 109, 185], [187, 209, 255], [191, 64, 47], [253, 255, 255], [31, 80, 110], [72, 39, 61], [62, 47, 63], [255, 246, 247], [255, 255, 255], [0, 102, 151], [219, 28, 76], [101, 12, 12], [188, 189, 212], [38, 49, 58], [166, 173, 183], [90, 100, 74], [255, 255, 255], [27, 43, 93], [12, 23, 94], [204, 177, 150], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [1, 0, 7], [255, 255, 255], [10, 128, 116], [255, 255, 255], [255, 255, 255], [18, 31, 83], [30, 30, 97], [157, 161, 193], [63, 98, 118], [164, 68, 64], [228, 105, 68], [242, 240, 255], [139, 36, 32], [242, 193, 255], [255, 255, 255], [0, 0, 0], [145, 116, 118], [255, 255, 255], [35, 65, 131], [127, 38, 38], [231, 183, 149], [190, 122, 78], [144, 172, 115], [194, 38, 58], [255, 255, 255], [253, 254, 188], [116, 136, 227], [25, 28, 32], [150, 47, 48], [0, 0, 0], [228, 239, 245], [20, 66, 107], [47, 98, 164], [42, 76, 133], [180, 57, 119], [203, 210, 176], [255, 255, 255], [1, 0, 5], [112, 126, 73], [23, 27, 55], [255, 255, 255], [162, 53, 54], [205, 182, 160], [71, 46, 108], [250, 188, 9], [255, 255, 255], [255, 255, 255], [255, 255, 255], [126, 49, 75], [41, 51, 149], [124, 159, 226], [255, 255, 255], [167, 177, 199], [23, 29, 116], [255, 255, 255], [57, 77, 146], [255, 48, 49], [52, 16, 17], [225, 213, 186], [255, 255, 255], [117, 39, 244], [201, 0, 49], [39, 124, 218], [47, 59, 86], [248, 168, 24], [189, 110, 49], [6, 31, 98], [1, 15, 76], [38, 48, 96], [2, 8, 40], [130, 53, 60], [17, 61, 27], [217, 113, 69], [160, 163, 181], [250, 216, 171], [88, 27, 31], [217, 193, 167], [22, 33, 36], [36, 38, 78], [109, 51, 66], [255, 255, 255], [255, 255, 255], [141, 125, 185], [255, 215, 243], [237, 241, 235], [179, 141, 170], [254, 254, 254], [161, 58, 66], [47, 20, 101], [0, 2, 7], [206, 212, 228], [26, 25, 30], [149, 185, 212], [182, 145, 93], [19, 27, 63], [255, 255, 255], [251, 250, 255], [246, 247, 202], [255, 255, 255], [60, 43, 93], [0, 8, 25], [219, 68, 113], [232, 189, 83], [31, 33, 64], [191, 210, 243], [210, 174, 204], [255, 255, 255], [23, 25, 255], [3, 13, 24], [255, 242, 211], [159, 165, 174], [255, 26, 34], [0, 0, 0], [228, 150, 97], [3, 0, 0], [221, 82, 59], [43, 51, 97], [244, 222, 192], [98, 40, 39], [217, 68, 60], [255, 255, 255], [0, 148, 44], [255, 255, 255], [0, 132, 204], [0, 127, 255], [255, 255, 255], [67, 94, 163], [255, 255, 255], [160, 59, 17], [63, 100, 80], [227, 87, 69], [130, 192, 228], [160, 51, 51], [145, 119, 98], [44, 80, 177], [242, 243, 248], [255, 255, 255], [245, 252, 255], [255, 255, 255], [126, 173, 218], [241, 237, 238], [255, 255, 255], [255, 255, 255], [163, 158, 30], [202, 103, 42], [255, 255, 255], [210, 223, 192], [1, 1, 7], [43, 50, 140], [255, 101, 1], [255, 255, 255], [250, 245, 251], [255, 255, 255], [32, 33, 102], [255, 216, 144], [246, 242, 250], [131, 118, 176], [221, 214, 29], [255, 255, 255], [0, 0, 0], [213, 171, 131], [11, 13, 26], [233, 225, 173], [129, 121, 162], [136, 8, 56], [0, 97, 255], [11, 11, 23], [253, 241, 24], [159, 175, 169], [255, 255, 255], [28, 38, 100], [159, 51, 42], [60, 115, 181], [70, 129, 180], [6, 27, 61], [14, 18, 76], [239, 179, 97], [163, 66, 43], [248, 233, 180], [0, 242, 241], [255, 255, 255], [230, 214, 178], [24, 93, 70], [255, 255, 255], [2, 0, 7], [43, 52, 115], [240, 191, 103], [255, 255, 255], [135, 0, 49], [0, 0, 0], [28, 22, 88], [255, 255, 255], [14, 14, 22], [9, 8, 0], [143, 48, 48], [225, 0, 57], [32, 122, 167], [255, 255, 255], [198, 181, 173], [44, 74, 160], [219, 191, 51], [255, 234, 255], [22, 25, 60], [83, 78, 145], [255, 241, 202], [110, 136, 125], [255, 255, 255], [138, 39, 37], [195, 121, 122], [172, 138, 132], [255, 255, 255], [72, 56, 152], [35, 88, 164], [15, 19, 27], [120, 40, 72], [255, 255, 24], [171, 59, 44], [29, 28, 35], [59, 56, 49], [17, 68, 80], [198, 158, 76], [0, 0, 5], [208, 213, 180], [24, 24, 34], [206, 191, 179], [140, 191, 243], [240, 101, 101], [189, 175, 138], [3, 74, 115], [0, 0, 6], [143, 47, 48], [148, 97, 23], [221, 186, 148], [255, 255, 255], [194, 80, 131], [78, 120, 62], [24, 24, 40], [0, 8, 40], [34, 48, 85], [247, 247, 247], [132, 77, 93], [255, 255, 255], [0, 149, 87], [74, 141, 66], [255, 78, 58], [254, 242, 97], [2, 103, 85], [163, 186, 228], [255, 255, 255], [0, 0, 2], [119, 57, 38], [255, 36, 255], [232, 196, 71], [33, 35, 40], [68, 28, 26], [200, 213, 220], [255, 255, 255], [255, 255, 255], [193, 193, 108], [255, 0, 0], [149, 54, 49], [245, 243, 255], [30, 43, 85], [151, 114, 78], [255, 255, 255], [34, 73, 32], [244, 158, 73], [116, 71, 47], [51, 70, 146], [255, 255, 255], [37, 63, 86], [234, 86, 42], [96, 159, 202], [22, 27, 126], [254, 137, 60], [30, 212, 226], [255, 255, 255], [255, 255, 255], [0, 5, 25], [0, 45, 255], [179, 202, 225], [1, 1, 0], [47, 29, 55], [255, 255, 255], [9, 21, 41], [255, 255, 255], [255, 101, 79], [237, 195, 141], [250, 221, 154], [248, 118, 193], [1, 0, 5], [255, 252, 253], [25, 63, 90], [243, 212, 179], [43, 57, 126], [23, 19, 61], [54, 68, 142], [26, 127, 52], [17, 15, 29], [224, 111, 69], [25, 21, 18], [252, 243, 109], [1, 21, 56], [183, 198, 176], [172, 199, 220], [136, 123, 107], [241, 205, 140], [33, 30, 92], [120, 109, 165], [101, 145, 63], [183, 136, 136], [255, 49, 47], [95, 33, 49], [255, 255, 255], [199, 146, 64], [0, 175, 214], [197, 192, 192], [254, 247, 157], [230, 19, 96], [164, 161, 116], [255, 255, 255], [46, 48, 88], [74, 25, 44], [124, 72, 68], [238, 42, 103], [0, 0, 0], [206, 154, 107], [22, 27, 24], [181, 72, 77], [255, 255, 255], [183, 125, 137], [149, 50, 44], [1, 1, 0], [255, 255, 255], [0, 0, 0], [255, 123, 172], [0, 0, 255], [255, 255, 255], [28, 21, 109], [32, 45, 78], [255, 255, 255], [253, 249, 237], [121, 160, 166], [209, 86, 125], [16, 16, 28], [255, 255, 255], [219, 0, 64], [251, 248, 231], [213, 166, 83], [178, 194, 218], [123, 25, 39], [243, 234, 150], [52, 40, 27], [245, 215, 173], [0, 0, 6], [255, 252, 195], [117, 18, 9], [161, 163, 133], [28, 25, 103], [172, 187, 220], [0, 0, 6], [228, 190, 0], [132, 127, 95], [255, 255, 255], [187, 1, 38], [8, 26, 95], [37, 34, 106], [255, 255, 255], [141, 161, 35], [141, 63, 64], [252, 188, 10], [255, 255, 255], [34, 61, 171], [12, 46, 26], [255, 62, 44], [255, 255, 255], [236, 27, 211], [255, 255, 255], [29, 0, 187], [43, 0, 129], [0, 9, 76], [190, 72, 45], [146, 52, 52], [73, 46, 116], [255, 255, 255], [255, 28, 30], [7, 4, 11], [210, 36, 49], [0, 0, 0], [255, 255, 255], [28, 36, 23], [2, 0, 3], [161, 91, 55], [169, 75, 75], [21, 21, 33], [251, 249, 253], [0, 0, 0], [168, 69, 0], [255, 31, 28], [0, 50, 206], [45, 157, 108], [255, 255, 255], [255, 255, 255], [152, 43, 46], [48, 27, 183], [143, 183, 205], [54, 50, 98], [184, 181, 185], [255, 255, 255], [239, 236, 234], [251, 242, 205], [22, 19, 20], [246, 235, 219], [28, 60, 80], [255, 255, 255], [248, 184, 24], [62, 79, 112], [20, 23, 37], [171, 149, 98], [138, 44, 44], [40, 100, 63], [148, 34, 70], [255, 255, 255], [154, 168, 197], [255, 255, 255], [255, 40, 252], [243, 210, 152], [30, 24, 103], [47, 74, 98], [105, 53, 45], [24, 33, 88], [229, 23, 26], [24, 37, 54], [19, 22, 31], [161, 165, 177], [44, 115, 168], [158, 59, 59], [11, 10, 16], [176, 183, 193], [2, 0, 11], [189, 232, 211], [95, 47, 94], [29, 47, 130], [0, 0, 254], [14, 17, 27], [236, 217, 184], [255, 255, 255], [14, 110, 149], [31, 87, 146], [160, 40, 50], [253, 245, 208], [255, 204, 25], [171, 98, 75], [139, 40, 42], [14, 16, 255], [15, 32, 76], [255, 255, 255], [231, 203, 163], [255, 255, 255], [240, 183, 196], [243, 136, 63], [255, 255, 255], [178, 69, 40], [153, 76, 60], [255, 255, 255], [244, 158, 73], [118, 29, 11], [16, 47, 68], [132, 173, 232], [7, 27, 34], [50, 73, 38], [146, 56, 61], [248, 168, 24], [247, 210, 170], [255, 245, 104], [255, 255, 255], [255, 255, 255], [223, 197, 156], [33, 83, 131], [30, 31, 0], [0, 0, 0], [220, 200, 189], [255, 255, 255], [244, 158, 73], [148, 43, 40], [248, 248, 200], [255, 255, 255], [255, 255, 255], [39, 63, 148], [98, 155, 215], [255, 82, 63], [36, 75, 155], [27, 35, 104], [255, 255, 255], [255, 255, 255], [76, 141, 234], [250, 247, 248], [195, 148, 101], [255, 255, 255], [230, 150, 93], [24, 16, 23], [25, 15, 20], [117, 132, 192], [242, 201, 146], [157, 179, 229], [240, 204, 169], [255, 255, 255], [0, 0, 2], [0, 146, 110], [104, 52, 66], [255, 255, 255], [0, 0, 0], [0, 0, 0], [136, 8, 88], [0, 118, 130], [32, 42, 90], [255, 255, 255], [158, 52, 49], [0, 0, 240], [74, 125, 191], [255, 255, 255], [30, 30, 42], [255, 255, 255], [178, 0, 13], [64, 103, 182], [84, 32, 45], [229, 194, 187], [217, 35, 47], [12, 0, 0], [150, 39, 57], [109, 77, 53], [255, 254, 255], [198, 122, 0], [0, 27, 50], [193, 60, 54], [17, 115, 135], [153, 146, 177], [255, 254, 254], [100, 56, 61], [255, 255, 255], [0, 0, 0], [106, 49, 191], [23, 43, 255], [193, 17, 33], [162, 133, 127], [35, 35, 45], [242, 229, 185], [255, 28, 25], [126, 55, 9], [237, 173, 88], [255, 255, 255], [29, 56, 117], [54, 97, 113], [0, 0, 0], [255, 255, 255], [255, 255, 255], [236, 165, 125], [233, 107, 56], [255, 255, 255], [227, 223, 238], [0, 15, 47], [100, 126, 126], [13, 12, 10], [63, 52, 19], [247, 245, 246], [255, 255, 255], [44, 83, 143], [3, 4, 16], [236, 229, 200], [255, 255, 255], [255, 255, 255], [94, 56, 39], [33, 36, 76], [237, 232, 229], [201, 175, 141], [125, 52, 59], [255, 255, 255], [0, 0, 0], [2, 0, 0], [215, 238, 244], [254, 255, 255], [43, 57, 91], [19, 30, 116], [11, 43, 106], [255, 255, 255], [0, 0, 2], [0, 37, 131], [243, 158, 54], [249, 246, 252], [132, 71, 72], [6, 6, 17], [0, 0, 5], [255, 202, 24], [242, 202, 146], [168, 177, 208], [24, 37, 81], [21, 234, 230], [255, 24, 40], [196, 68, 59], [37, 89, 82], [30, 37, 65], [255, 255, 255], [255, 255, 195], [55, 58, 49], [109, 44, 42], [117, 131, 150], [255, 144, 72], [147, 152, 165], [255, 255, 255], [239, 191, 0], [215, 211, 245], [215, 200, 164], [49, 35, 147], [47, 125, 129], [109, 30, 56], [8, 12, 24], [255, 255, 255], [145, 64, 127], [255, 11, 60], [0, 0, 6], [0, 0, 22], [206, 179, 163], [109, 34, 40], [30, 43, 95], [255, 255, 255], [255, 118, 202], [29, 54, 98], [225, 23, 52], [255, 255, 255], [255, 255, 255], [255, 255, 255], [127, 41, 39], [0, 0, 255], [255, 255, 255], [108, 55, 65], [73, 126, 142], [255, 240, 23], [213, 0, 56], [230, 228, 235], [58, 54, 75], [51, 76, 122], [0, 0, 0], [0, 0, 0], [255, 255, 255], [40, 34, 78], [255, 233, 194], [255, 255, 255], [0, 0, 0], [59, 34, 36], [28, 30, 45], [255, 255, 255], [165, 116, 115], [236, 191, 156], [246, 106, 86], [255, 160, 60], [190, 136, 48], [0, 0, 10], [240, 130, 255], [35, 91, 127], [148, 47, 40], [233, 213, 58], [155, 63, 184], [0, 0, 10], [13, 55, 70], [239, 195, 149], [128, 49, 56], [94, 18, 29], [15, 18, 63], [255, 255, 255], [61, 148, 150], [28, 139, 214], [255, 255, 255], [36, 27, 88], [132, 99, 94], [0, 157, 255], [195, 221, 243], [175, 168, 118], [49, 255, 53], [255, 255, 255], [147, 172, 216], [234, 232, 245], [255, 255, 255], [0, 193, 200], [255, 255, 255], [255, 255, 255], [252, 251, 255], [250, 239, 246], [65, 154, 178], [250, 248, 253], [21, 24, 29], [50, 62, 124], [255, 255, 255], [0, 0, 0], [1, 0, 0], [15, 15, 18], [166, 0, 0], [255, 255, 255], [28, 0, 0], [41, 13, 123], [255, 255, 255], [226, 131, 83], [141, 54, 54], [255, 255, 255], [196, 91, 77], [0, 0, 0], [153, 70, 59], [232, 209, 157], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [36, 36, 71], [0, 0, 12], [11, 45, 93], [24, 28, 63], [222, 194, 182], [0, 0, 167], [201, 163, 84], [37, 33, 61], [0, 0, 79], [9, 28, 255], [255, 255, 255], [160, 59, 17], [0, 26, 53], [0, 0, 188], [255, 255, 255], [255, 255, 255], [255, 255, 255], [190, 0, 2], [77, 111, 118], [255, 202, 24], [29, 21, 61], [0, 20, 49], [244, 158, 73], [151, 71, 64], [135, 114, 69], [255, 255, 255], [25, 41, 88], [198, 134, 86], [217, 194, 159], [255, 255, 255], [0, 0, 0], [233, 105, 91], [208, 68, 77], [0, 0, 0], [59, 138, 84], [116, 98, 140], [0, 254, 254], [255, 255, 255], [247, 226, 182], [238, 186, 87], [24, 36, 151], [242, 228, 187], [54, 84, 121], [255, 255, 255], [255, 255, 255], [155, 49, 53], [13, 48, 29], [243, 158, 73], [99, 44, 84], [25, 49, 162], [85, 51, 101], [240, 220, 192], [186, 116, 123], [145, 42, 35], [255, 255, 255], [4, 46, 52], [19, 22, 35], [13, 48, 135], [191, 67, 51], [194, 163, 138], [0, 0, 2], [26, 53, 109], [132, 39, 33], [255, 255, 255], [0, 0, 0], [28, 51, 92], [0, 119, 60], [255, 255, 255], [77, 128, 188], [205, 194, 174], [0, 0, 0], [253, 239, 201], [229, 169, 102], [255, 255, 255], [255, 255, 255], [44, 111, 104], [163, 55, 59], [131, 65, 38], [92, 38, 14], [230, 23, 80], [191, 113, 140], [212, 239, 214], [205, 185, 189], [9, 11, 16], [241, 224, 102], [255, 255, 255], [212, 228, 255], [182, 47, 42], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 204, 25], [252, 250, 207], [244, 232, 0], [0, 0, 0], [255, 255, 255], [42, 49, 82], [140, 143, 156], [162, 61, 43], [196, 153, 110], [46, 58, 103], [35, 42, 122], [26, 101, 183], [19, 61, 49], [184, 0, 0], [187, 179, 166], [255, 40, 51], [68, 130, 83], [255, 255, 255], [36, 23, 31], [255, 255, 255], [230, 83, 64], [46, 51, 125], [111, 38, 30], [208, 0, 2], [214, 206, 192], [126, 157, 140], [0, 0, 0], [255, 255, 255], [115, 130, 182], [166, 98, 33], [248, 244, 243], [130, 104, 99], [18, 34, 121], [249, 241, 219], [17, 34, 28], [244, 158, 73], [255, 255, 255], [43, 33, 70], [29, 91, 61], [1, 0, 6], [21, 72, 113], [255, 255, 0], [16, 84, 38], [0, 0, 0], [255, 255, 255], [159, 57, 60], [255, 255, 255], [0, 0, 222], [242, 243, 245], [218, 140, 68], [22, 28, 50], [0, 0, 0], [190, 174, 110], [130, 155, 219], [242, 214, 181], [255, 255, 255], [1, 1, 13], [51, 27, 35], [0, 0, 34], [146, 52, 53], [1, 0, 41], [28, 72, 185], [163, 56, 43], [13, 28, 38], [107, 48, 48], [33, 62, 110], [25, 209, 216], [2, 0, 13], [31, 59, 130], [158, 40, 36], [1, 0, 5], [161, 50, 47], [144, 207, 60], [179, 57, 39], [246, 229, 73], [22, 33, 66], [253, 255, 254], [255, 255, 255], [253, 253, 255], [250, 28, 0], [8, 0, 0], [245, 221, 191], [255, 255, 255], [13, 12, 22], [112, 117, 58], [255, 255, 245], [144, 127, 108], [209, 209, 145], [250, 133, 108], [30, 16, 58], [255, 255, 255], [11, 5, 5], [244, 242, 255], [255, 255, 255], [2, 27, 243], [248, 248, 200], [238, 197, 142], [0, 7, 53], [196, 17, 49], [255, 255, 255], [0, 177, 149], [223, 0, 95], [255, 255, 255], [255, 255, 255], [174, 114, 54], [77, 87, 117], [0, 53, 0], [164, 165, 182], [162, 142, 91], [255, 245, 235], [255, 255, 255], [0, 0, 6], [255, 239, 255], [177, 205, 237], [255, 255, 255], [5, 52, 40], [38, 35, 56], [212, 0, 0], [255, 255, 255], [71, 66, 32], [145, 161, 173], [255, 255, 255], [0, 15, 58], [25, 91, 0], [122, 134, 0], [236, 111, 89], [255, 247, 95], [247, 247, 249], [223, 84, 35], [126, 175, 201], [255, 255, 255], [186, 173, 193], [40, 54, 119], [255, 255, 255], [0, 0, 0], [248, 248, 255], [157, 101, 33], [135, 18, 17], [255, 255, 255], [33, 46, 118], [199, 63, 52], [253, 224, 5], [0, 0, 0], [255, 255, 255], [255, 255, 255], [254, 254, 254], [33, 29, 52], [35, 35, 46], [255, 186, 150], [113, 58, 47], [7, 18, 24], [255, 255, 255], [6, 39, 114], [0, 91, 179], [28, 28, 41], [173, 157, 115], [39, 54, 255], [204, 198, 232], [255, 255, 255], [223, 184, 143], [16, 57, 49], [255, 227, 187], [195, 134, 209], [245, 248, 255], [255, 255, 255], [196, 75, 60], [0, 7, 15], [3, 22, 255], [184, 183, 223], [255, 255, 255], [4, 17, 61], [36, 37, 73], [0, 0, 71], [0, 0, 2], [215, 219, 193], [47, 76, 146], [8, 11, 25], [255, 255, 255], [170, 65, 46], [255, 255, 255], [26, 27, 47], [31, 37, 88], [134, 164, 224], [34, 87, 106], [245, 208, 113], [220, 93, 87], [184, 63, 62], [255, 255, 255], [164, 184, 100], [22, 69, 121], [6, 41, 81], [181, 185, 196], [255, 255, 255], [150, 45, 42], [19, 30, 68], [255, 255, 255], [35, 55, 138], [61, 69, 136], [15, 63, 31], [255, 217, 119], [255, 255, 255], [38, 127, 25], [255, 255, 255], [198, 177, 154], [238, 233, 194], [215, 179, 143], [1, 0, 6], [33, 116, 161], [0, 13, 60], [249, 245, 246], [189, 62, 54], [168, 172, 186], [66, 124, 80], [231, 119, 73], [160, 186, 178], [51, 255, 50], [246, 244, 255], [233, 163, 0], [193, 180, 150], [255, 0, 0], [255, 255, 255], [112, 161, 147], [78, 142, 177], [255, 255, 255], [34, 38, 69], [32, 27, 59], [152, 104, 56], [17, 15, 74], [208, 72, 119], [12, 0, 6], [201, 103, 194], [82, 41, 61], [55, 72, 148], [241, 224, 156], [241, 237, 249], [0, 0, 103], [243, 241, 241], [208, 225, 246], [109, 153, 227], [255, 70, 112], [42, 38, 30], [39, 30, 62], [165, 185, 39], [45, 72, 90], [192, 109, 43], [148, 47, 49], [195, 176, 140], [217, 183, 112], [0, 0, 0], [22, 64, 91], [38, 37, 85], [190, 0, 2], [155, 158, 170], [0, 0, 13], [193, 208, 207], [30, 40, 73], [1, 1, 11], [9, 3, 13], [32, 47, 88], [68, 40, 144], [244, 158, 73], [137, 131, 0], [16, 15, 26], [255, 255, 255], [202, 160, 105], [255, 255, 255], [78, 85, 106], [173, 201, 211], [37, 45, 117], [29, 0, 0], [255, 255, 255], [75, 74, 53], [0, 0, 6], [124, 130, 188], [57, 88, 255], [244, 158, 73], [244, 210, 51], [255, 255, 255], [29, 45, 98], [0, 6, 42], [255, 255, 255], [255, 255, 255], [170, 111, 80], [73, 38, 62], [0, 0, 0], [255, 255, 255], [255, 247, 249], [1, 0, 13], [255, 255, 255], [163, 149, 113], [169, 130, 149], [255, 253, 130], [224, 124, 92], [48, 60, 96], [216, 223, 233], [35, 31, 138], [26, 52, 95], [33, 34, 43], [248, 242, 246], [40, 58, 133], [202, 165, 119], [73, 82, 180], [225, 179, 182], [29, 86, 114], [0, 0, 10], [245, 0, 0], [155, 165, 184], [255, 255, 255], [238, 235, 108], [101, 84, 162], [255, 202, 24], [236, 200, 169], [255, 255, 255], [255, 255, 255], [213, 105, 30], [95, 46, 68], [255, 202, 24], [255, 255, 255], [27, 35, 37], [22, 25, 34], [0, 43, 87], [18, 48, 50], [0, 0, 0], [34, 33, 64], [255, 25, 36], [0, 0, 0], [110, 78, 61], [0, 0, 23], [1, 1, 1], [0, 4, 0], [5, 23, 23], [157, 58, 53], [190, 132, 40], [154, 87, 77], [255, 255, 255], [174, 155, 185], [0, 0, 0], [136, 8, 56], [255, 236, 204], [25, 26, 56], [160, 54, 55], [54, 79, 156], [211, 179, 62], [255, 255, 253], [235, 205, 135], [225, 0, 0], [208, 178, 144], [203, 29, 24], [182, 102, 155], [38, 91, 60], [18, 100, 255], [18, 34, 255], [240, 181, 17], [166, 71, 52], [249, 241, 238], [246, 209, 154], [11, 22, 101], [248, 177, 61], [8, 12, 20], [255, 255, 255], [5, 24, 108], [255, 213, 212], [114, 37, 45], [123, 76, 82], [38, 26, 33], [206, 200, 24], [144, 53, 50], [82, 147, 255], [255, 26, 112], [255, 255, 255], [193, 166, 81], [158, 214, 239], [223, 157, 111], [1, 0, 140], [255, 247, 219], [8, 10, 22], [23, 34, 88], [32, 31, 89], [255, 255, 255], [116, 129, 173], [0, 0, 0], [71, 140, 197], [255, 234, 67], [215, 94, 67], [68, 87, 167], [255, 255, 255], [82, 43, 255], [237, 241, 247], [255, 255, 255], [163, 170, 181], [0, 1, 15], [239, 239, 239], [255, 255, 255], [254, 243, 163], [41, 39, 255], [106, 130, 173], [255, 255, 255], [50, 53, 171], [95, 39, 56], [222, 82, 63], [0, 0, 6], [42, 19, 11], [255, 255, 255], [0, 0, 11], [255, 156, 23], [255, 255, 255], [96, 89, 123], [255, 255, 255], [145, 152, 188], [53, 53, 126], [234, 96, 58], [213, 68, 41], [27, 79, 69], [181, 20, 43], [255, 230, 123], [242, 236, 219], [7, 5, 7], [44, 83, 143], [177, 151, 118], [239, 80, 60], [251, 133, 120], [43, 99, 88], [46, 91, 36], [38, 39, 76], [31, 47, 98], [0, 0, 0], [0, 0, 0], [101, 145, 217], [203, 176, 151], [237, 200, 0], [166, 170, 206], [44, 58, 112], [97, 142, 68], [227, 0, 25], [0, 19, 30], [125, 1, 61], [255, 255, 255], [0, 0, 0], [255, 49, 49], [186, 151, 120], [24, 40, 109], [255, 255, 255], [255, 255, 255], [0, 0, 65], [132, 100, 169], [168, 164, 159], [38, 60, 141], [187, 98, 51], [199, 212, 208], [255, 76, 54], [101, 101, 92], [98, 144, 75], [255, 255, 255], [56, 32, 55], [110, 123, 142], [235, 219, 193], [255, 255, 255], [132, 138, 172], [255, 219, 169], [21, 41, 163], [251, 245, 213], [255, 255, 255], [255, 255, 255], [242, 214, 174], [145, 166, 218], [255, 255, 255], [58, 97, 105], [123, 45, 34], [241, 252, 246], [93, 30, 25], [33, 37, 48], [44, 88, 133], [255, 255, 255], [254, 252, 255], [19, 120, 47], [255, 255, 255], [5, 3, 9], [255, 255, 255], [49, 49, 96], [255, 255, 255], [255, 255, 255], [255, 255, 255], [212, 180, 155], [255, 255, 255], [255, 255, 255], [195, 74, 68], [12, 42, 106], [24, 44, 139], [176, 0, 21], [239, 231, 231], [161, 164, 177], [50, 69, 145], [25, 32, 81], [0, 0, 6], [255, 255, 255], [255, 255, 255], [212, 155, 100], [146, 152, 164], [121, 25, 28], [92, 39, 51], [41, 34, 113], [26, 113, 188], [1, 143, 207], [5, 72, 99], [149, 40, 40], [188, 127, 72], [183, 139, 112], [230, 221, 175], [99, 49, 62], [124, 130, 0], [255, 247, 255], [9, 62, 83], [255, 255, 255], [240, 239, 241], [42, 86, 161], [1, 47, 64], [255, 118, 108], [60, 50, 49], [0, 0, 5], [151, 150, 38], [12, 0, 8], [23, 102, 44], [135, 98, 67], [17, 18, 61], [0, 0, 0], [11, 9, 13], [255, 255, 255], [224, 211, 217], [255, 255, 255], [201, 161, 100], [170, 65, 72], [255, 255, 255], [39, 60, 75], [255, 58, 3], [0, 12, 45], [163, 182, 74], [179, 192, 140], [8, 56, 104], [165, 137, 150], [142, 187, 220], [242, 202, 107], [133, 183, 223], [255, 255, 255], [130, 0, 216], [43, 14, 55], [45, 61, 98], [245, 29, 235], [255, 255, 255], [32, 66, 91], [0, 0, 0], [255, 204, 25], [255, 255, 76], [25, 7, 26], [0, 0, 10], [26, 20, 35], [219, 196, 44], [220, 210, 192], [195, 180, 138], [4, 27, 96], [255, 253, 251], [255, 255, 255], [6, 9, 22], [235, 157, 66], [255, 255, 255], [249, 217, 173], [149, 184, 182], [145, 125, 78], [255, 255, 255], [1, 0, 6], [255, 255, 255], [55, 157, 143], [143, 45, 29], [255, 255, 255], [255, 255, 255], [12, 15, 24], [252, 252, 252], [239, 247, 252], [48, 65, 139], [200, 206, 234], [0, 56, 73], [149, 48, 31], [0, 71, 83], [8, 74, 123], [27, 37, 73], [27, 25, 64], [0, 0, 13], [241, 213, 80], [132, 44, 60], [255, 255, 255], [255, 255, 255], [36, 48, 104], [36, 32, 101], [255, 255, 255], [0, 0, 0], [194, 200, 221], [255, 255, 255], [214, 183, 33], [215, 212, 199], [250, 244, 250], [136, 173, 105], [0, 255, 255], [93, 41, 47], [0, 0, 0], [123, 67, 53], [28, 84, 48], [234, 177, 46], [203, 66, 58], [41, 74, 67], [238, 237, 242], [0, 0, 243], [56, 74, 92], [255, 0, 0], [11, 13, 22], [118, 40, 51], [55, 57, 50], [71, 99, 111], [29, 63, 130], [181, 49, 42], [3, 21, 35], [248, 245, 255], [173, 177, 187], [215, 50, 66], [0, 0, 215], [222, 120, 62], [144, 42, 28], [97, 123, 52], [165, 180, 234], [0, 0, 0], [1, 0, 5], [235, 51, 101], [255, 255, 255], [254, 254, 254], [255, 255, 215], [147, 119, 73], [240, 228, 180], [209, 198, 159], [150, 117, 95], [240, 190, 100], [144, 66, 62], [214, 26, 31], [55, 46, 112], [34, 46, 104], [117, 103, 69], [0, 0, 0], [232, 199, 235], [70, 124, 195], [0, 4, 22], [15, 0, 0], [0, 0, 0], [37, 99, 255], [2, 0, 6], [244, 158, 73], [158, 146, 173], [181, 0, 0], [244, 0, 11], [165, 46, 48], [48, 61, 162], [255, 255, 255], [19, 28, 134], [0, 0, 255], [243, 244, 213], [18, 12, 11], [255, 255, 255], [255, 255, 255], [78, 56, 42], [118, 171, 198], [255, 235, 228], [1, 3, 15], [255, 255, 255], [0, 0, 0], [255, 255, 255], [136, 8, 88], [137, 109, 39], [255, 255, 255], [255, 74, 53], [48, 69, 146], [135, 140, 154], [247, 246, 247], [255, 255, 255], [109, 42, 56], [107, 124, 155], [226, 210, 177], [220, 195, 159], [0, 0, 0], [38, 37, 113], [43, 62, 103], [112, 48, 41], [112, 28, 93], [0, 0, 15], [48, 54, 92], [0, 0, 86], [53, 255, 255], [101, 24, 32], [1, 1, 1], [150, 255, 100], [255, 255, 255], [250, 246, 249], [12, 14, 20], [22, 26, 35], [255, 255, 255], [152, 59, 72], [30, 54, 165], [255, 252, 255], [170, 147, 104], [255, 255, 255], [39, 30, 82], [200, 181, 130], [123, 42, 56], [255, 208, 196], [204, 29, 76], [25, 45, 85], [25, 36, 255], [38, 32, 43], [255, 246, 0], [234, 108, 60], [16, 18, 26], [0, 0, 82], [255, 255, 255], [213, 190, 157], [255, 255, 255], [255, 255, 255], [136, 168, 136], [74, 21, 38], [29, 24, 65], [251, 247, 175], [147, 123, 78], [255, 255, 255], [241, 17, 0], [54, 58, 122], [14, 66, 105], [130, 98, 76], [8, 22, 103], [231, 189, 102], [14, 17, 28], [18, 36, 87], [255, 255, 255], [255, 255, 255], [0, 86, 185], [255, 255, 255], [57, 79, 115], [8, 29, 93], [24, 72, 152], [255, 255, 255], [26, 36, 116], [121, 141, 200], [94, 115, 43], [205, 65, 77], [167, 32, 122], [10, 30, 99], [196, 105, 90], [126, 146, 179], [243, 229, 184], [74, 35, 40], [18, 48, 45], [7, 48, 39], [255, 106, 0], [233, 127, 80], [28, 43, 99], [218, 96, 79], [250, 247, 255], [138, 162, 208], [233, 203, 194], [9, 31, 92], [134, 109, 66], [203, 87, 68], [21, 30, 68], [222, 1, 74], [53, 115, 107], [255, 255, 255], [114, 125, 120], [26, 21, 27], [244, 158, 73], [193, 146, 98], [207, 153, 193], [150, 195, 139], [218, 80, 38], [0, 0, 0], [248, 245, 247], [232, 92, 32], [255, 255, 255], [21, 19, 14], [94, 27, 31], [255, 255, 255], [59, 51, 91], [255, 255, 255], [30, 41, 103], [236, 194, 168], [255, 255, 255], [147, 157, 167], [16, 25, 93], [40, 88, 135], [27, 45, 77], [2, 49, 103], [255, 255, 255], [157, 187, 212], [50, 44, 118], [255, 255, 255], [155, 164, 77], [255, 255, 255], [4, 25, 106], [10, 0, 0], [60, 74, 148], [255, 255, 255], [48, 85, 167], [202, 212, 237], [11, 22, 15], [11, 74, 127], [29, 64, 84], [255, 255, 255], [9, 30, 59], [255, 255, 255], [234, 97, 78], [255, 255, 255], [0, 0, 5], [249, 226, 164], [0, 0, 34], [255, 255, 0], [81, 122, 32], [214, 189, 166], [24, 29, 80], [19, 60, 140], [245, 116, 51], [141, 113, 65], [255, 17, 12], [169, 122, 83], [255, 255, 255], [1, 0, 5], [18, 20, 47], [207, 19, 52], [194, 166, 147], [0, 0, 0], [240, 226, 135], [111, 145, 189], [41, 151, 211], [29, 42, 102], [0, 0, 0], [34, 48, 95], [0, 0, 6], [235, 203, 100], [88, 24, 24], [228, 118, 124], [12, 33, 116], [29, 31, 116], [255, 255, 255], [36, 75, 187], [255, 255, 255], [36, 92, 255], [255, 247, 211], [144, 182, 169], [95, 168, 79], [49, 49, 79], [255, 255, 255], [255, 242, 225], [16, 26, 98], [10, 63, 68], [0, 1, 57], [109, 127, 151], [61, 92, 156], [18, 21, 192], [255, 255, 255], [255, 255, 255], [255, 255, 37], [144, 177, 154], [255, 255, 255], [48, 46, 40], [215, 194, 152], [255, 202, 24], [255, 255, 255], [9, 9, 14], [241, 237, 200], [255, 255, 255], [238, 201, 0], [8, 104, 168], [52, 107, 196], [240, 199, 144], [238, 160, 110], [30, 28, 0], [1, 0, 5], [27, 8, 27], [14, 14, 23], [123, 140, 218], [238, 49, 97], [204, 147, 129], [46, 61, 97], [235, 230, 174], [3, 23, 55], [12, 27, 48], [230, 209, 167], [245, 163, 87], [243, 158, 73], [224, 208, 184], [149, 201, 238], [12, 30, 107], [1, 2, 14], [255, 255, 255], [212, 40, 65], [255, 255, 255], [189, 25, 31], [210, 173, 39], [153, 49, 52], [1, 0, 255], [255, 202, 24], [12, 48, 71], [202, 80, 70], [210, 202, 183], [30, 27, 21], [255, 255, 255], [87, 99, 135], [57, 70, 127], [192, 47, 66], [93, 151, 58], [130, 157, 198], [34, 71, 146], [249, 246, 255], [255, 253, 249], [186, 84, 49], [76, 26, 36], [57, 93, 137], [255, 0, 5], [106, 152, 172], [24, 25, 37], [25, 192, 229], [244, 244, 255], [166, 62, 43], [113, 102, 165], [23, 34, 138], [45, 108, 117], [242, 240, 245], [255, 255, 255], [242, 35, 102], [39, 56, 100], [255, 255, 255], [43, 53, 124], [0, 124, 132], [20, 45, 83], [250, 250, 61], [52, 57, 50], [100, 146, 113], [0, 0, 5], [255, 255, 255], [24, 16, 17], [40, 48, 95], [255, 255, 255], [18, 132, 63], [43, 9, 13], [148, 34, 70], [9, 12, 17], [72, 164, 150], [255, 255, 255], [149, 155, 170], [254, 249, 250], [243, 235, 197], [193, 231, 253], [99, 86, 126], [29, 44, 72], [104, 74, 117], [186, 158, 255], [67, 113, 199], [185, 189, 198], [0, 254, 156], [0, 0, 0], [164, 143, 119], [251, 232, 137], [53, 46, 117], [231, 134, 80], [148, 106, 88], [40, 136, 70], [255, 255, 255], [255, 255, 255], [145, 118, 68], [22, 51, 52], [232, 25, 27], [38, 54, 106], [23, 26, 39], [255, 255, 255], [63, 12, 11], [72, 35, 15], [187, 209, 236], [27, 59, 139], [228, 43, 40], [190, 38, 69], [19, 21, 26], [224, 115, 84], [130, 136, 168], [255, 255, 255], [200, 75, 58], [255, 255, 59], [27, 23, 71], [200, 96, 91], [3, 31, 99], [255, 44, 73], [255, 11, 19], [28, 27, 255], [74, 23, 20], [129, 172, 213], [28, 56, 121], [255, 255, 255], [162, 165, 182], [255, 255, 255], [33, 30, 73], [117, 44, 51], [25, 42, 48], [232, 215, 192], [255, 255, 255], [136, 71, 65], [255, 255, 255], [31, 31, 46], [0, 0, 10], [232, 167, 65], [26, 104, 186], [0, 0, 0], [53, 75, 143], [32, 25, 76], [255, 253, 251], [255, 190, 0], [219, 97, 84], [29, 31, 44], [255, 255, 255], [45, 45, 121], [153, 160, 170], [255, 255, 255], [115, 164, 176], [148, 60, 60], [255, 250, 255], [225, 209, 194], [215, 19, 102], [43, 53, 101], [0, 0, 19], [255, 252, 197], [203, 70, 43], [255, 255, 255], [206, 189, 163], [255, 255, 255], [255, 255, 253], [145, 126, 117], [208, 110, 56], [41, 19, 23], [255, 112, 49], [194, 193, 115], [1, 1, 1], [43, 75, 88], [71, 52, 91], [232, 87, 58], [12, 12, 9], [16, 32, 36], [2, 5, 79], [255, 255, 255], [6, 6, 0], [255, 255, 255], [10, 40, 99], [29, 43, 94], [241, 201, 44], [57, 52, 111], [216, 143, 71], [195, 178, 159], [25, 30, 52], [56, 238, 255], [0, 27, 48], [255, 255, 255], [244, 158, 73], [40, 59, 145], [25, 60, 72], [242, 238, 65], [32, 0, 26], [17, 20, 28], [255, 255, 255], [23, 97, 104], [8, 104, 184], [113, 164, 176], [255, 255, 255], [255, 213, 114], [255, 255, 255], [21, 27, 69], [213, 0, 0], [116, 0, 138], [240, 0, 221], [14, 11, 84], [209, 190, 69], [255, 255, 255], [86, 53, 65], [0, 71, 51], [0, 0, 0], [246, 242, 244], [255, 255, 255], [255, 26, 41], [29, 31, 68], [202, 137, 86], [147, 55, 60], [38, 255, 255], [249, 239, 255], [72, 34, 40], [255, 255, 255], [89, 30, 36], [188, 70, 61], [59, 100, 65], [225, 215, 193], [18, 34, 84], [130, 119, 92], [149, 80, 48], [255, 147, 99], [35, 31, 32], [135, 81, 157], [28, 22, 65], [96, 146, 181], [251, 1, 2], [255, 159, 255], [21, 31, 119], [68, 120, 70], [255, 249, 245], [46, 40, 118], [140, 46, 47], [155, 124, 139], [238, 165, 0], [146, 76, 54], [255, 29, 86], [255, 255, 255], [0, 0, 255], [243, 235, 197], [26, 25, 30], [255, 230, 130], [27, 38, 91], [119, 109, 74], [255, 255, 255], [255, 255, 255], [104, 129, 255], [113, 0, 0], [95, 96, 54], [195, 211, 149], [255, 237, 69], [53, 71, 143], [227, 0, 255], [112, 115, 58], [141, 132, 114], [178, 169, 217], [242, 209, 153], [255, 255, 255], [40, 24, 24], [113, 57, 53], [0, 0, 0], [253, 200, 67], [237, 236, 242], [255, 255, 255], [126, 115, 54], [146, 116, 97], [0, 28, 24], [120, 102, 86], [187, 187, 150], [255, 255, 255], [99, 118, 201], [24, 27, 108], [255, 255, 255], [25, 25, 25], [1, 0, 5], [255, 255, 255], [0, 17, 172], [255, 255, 255], [209, 213, 240], [52, 69, 86], [145, 53, 39], [255, 255, 255], [41, 57, 107], [255, 255, 255], [0, 0, 0], [243, 136, 92], [255, 169, 132], [249, 247, 253], [61, 118, 210], [252, 234, 198], [255, 217, 162], [255, 240, 214], [255, 255, 255], [196, 193, 255], [229, 0, 60], [236, 236, 224], [131, 156, 223], [0, 136, 178], [1, 64, 131], [131, 39, 40], [17, 22, 77], [1, 9, 63], [49, 63, 106], [36, 50, 91], [62, 111, 184], [134, 202, 36], [48, 41, 114], [171, 177, 188], [255, 255, 255], [41, 47, 74], [76, 37, 23], [0, 0, 10], [13, 56, 39], [255, 255, 0], [34, 22, 100], [4, 8, 37], [44, 61, 113], [255, 245, 32], [255, 255, 255], [255, 255, 255], [26, 26, 41], [1, 0, 5], [255, 204, 25], [5, 9, 21], [65, 62, 77], [206, 86, 131], [160, 59, 17], [255, 202, 24], [118, 156, 56], [210, 179, 149], [208, 68, 49], [201, 180, 137], [51, 49, 132], [19, 28, 44], [252, 225, 145], [83, 27, 134], [0, 0, 13], [48, 100, 82], [255, 170, 21], [205, 83, 62], [189, 116, 40], [144, 0, 0], [243, 239, 235], [169, 174, 190], [29, 27, 38], [237, 237, 93], [92, 14, 13], [255, 223, 123], [60, 26, 70], [100, 114, 213], [194, 226, 205], [50, 41, 98], [205, 127, 84], [28, 82, 69], [255, 255, 255], [93, 109, 125], [2, 4, 19], [0, 0, 0], [82, 114, 161], [144, 40, 35], [255, 255, 255], [221, 4, 33], [225, 206, 191], [255, 255, 255], [179, 149, 115], [255, 255, 255], [185, 0, 5], [16, 12, 0], [29, 134, 23], [255, 255, 255], [255, 255, 255], [126, 114, 0], [20, 24, 52], [136, 8, 88], [34, 70, 154], [255, 137, 25], [134, 165, 227], [255, 255, 255], [19, 27, 64], [236, 32, 25], [201, 133, 96], [123, 52, 53], [153, 52, 60], [157, 160, 165], [0, 15, 67], [70, 102, 176], [124, 48, 71], [255, 164, 85], [31, 51, 137], [205, 31, 222], [255, 229, 198], [180, 66, 44], [22, 23, 46], [255, 234, 95], [216, 86, 55], [75, 68, 143], [3, 49, 57], [233, 163, 56], [0, 0, 0], [14, 27, 120], [0, 0, 2], [1, 0, 5], [235, 224, 160], [28, 104, 127], [92, 127, 181], [151, 50, 46], [170, 175, 190], [255, 255, 255], [255, 249, 83], [248, 218, 111], [255, 202, 24], [215, 181, 155], [255, 255, 255], [51, 70, 119], [177, 194, 210], [133, 46, 39], [70, 17, 34], [122, 54, 118], [244, 188, 50], [159, 134, 136], [255, 255, 255], [233, 90, 48], [54, 56, 69], [255, 255, 255], [24, 55, 56], [171, 183, 217], [23, 52, 90], [172, 45, 38], [26, 34, 68], [81, 102, 45], [0, 0, 138], [174, 255, 255], [50, 116, 117], [106, 132, 205], [255, 255, 255], [18, 73, 76], [28, 47, 152], [101, 123, 181], [252, 222, 156], [0, 25, 82], [105, 117, 176], [195, 226, 255], [255, 255, 255], [8, 12, 21], [156, 50, 48], [140, 141, 158], [255, 255, 255], [48, 84, 68], [255, 255, 255], [13, 17, 26], [152, 40, 72], [40, 113, 136], [244, 112, 89], [107, 39, 31], [178, 125, 53], [25, 30, 45], [225, 244, 249], [158, 165, 178], [145, 42, 43], [108, 53, 53], [0, 0, 255], [255, 255, 255], [155, 91, 81], [255, 255, 255], [255, 255, 255], [252, 252, 252], [200, 174, 0], [40, 61, 91], [0, 0, 11], [31, 53, 244], [38, 37, 103], [10, 10, 20], [14, 12, 53], [207, 117, 0], [154, 200, 181], [75, 182, 195], [0, 0, 17], [169, 172, 181], [156, 177, 114], [0, 0, 83], [238, 229, 202], [107, 113, 139], [143, 15, 0], [168, 39, 32], [0, 3, 121], [13, 30, 160], [14, 14, 255], [219, 174, 80], [230, 195, 157], [245, 241, 236], [139, 77, 68], [255, 255, 255], [255, 167, 152], [70, 82, 131], [255, 253, 251], [5, 0, 10], [0, 0, 44], [24, 25, 29], [203, 64, 45], [255, 255, 255], [81, 41, 49], [251, 248, 207], [140, 175, 185], [67, 231, 142], [235, 177, 107], [255, 228, 192], [138, 127, 166], [37, 104, 142], [43, 68, 143], [1, 89, 101], [22, 48, 61], [0, 0, 0], [255, 255, 255], [1, 0, 5], [34, 70, 95], [23, 62, 158], [255, 97, 50], [49, 80, 255], [17, 18, 50], [87, 107, 173], [57, 102, 116], [42, 46, 87], [13, 63, 77], [242, 239, 232], [200, 119, 37], [254, 238, 194], [41, 37, 104], [224, 110, 55], [1, 0, 5], [244, 41, 37], [79, 116, 124], [0, 3, 24], [0, 0, 0], [214, 197, 169], [219, 240, 97], [6, 4, 4], [16, 21, 59], [1, 2, 14], [0, 0, 10], [232, 132, 103], [111, 130, 191], [255, 255, 255], [155, 195, 168], [207, 0, 0], [34, 53, 140], [254, 248, 224], [255, 255, 255], [255, 255, 255], [255, 255, 255], [20, 37, 70], [175, 147, 128], [23, 66, 120], [241, 186, 172], [254, 254, 254], [246, 149, 66], [155, 47, 47], [73, 35, 44], [24, 72, 152], [22, 14, 100], [88, 65, 47], [191, 203, 184], [131, 38, 35], [255, 255, 255], [205, 63, 60], [255, 255, 255], [227, 80, 69], [251, 252, 255], [248, 59, 53], [223, 78, 123], [210, 61, 54], [254, 254, 254], [0, 0, 0], [255, 255, 255], [160, 159, 165], [0, 0, 2], [123, 34, 39], [170, 180, 218], [37, 49, 130], [242, 233, 0], [146, 84, 123], [23, 24, 37], [255, 255, 255], [0, 171, 232], [255, 202, 24], [35, 41, 122], [38, 44, 35], [115, 126, 159], [1, 0, 5], [178, 149, 118], [16, 15, 21], [246, 241, 238], [255, 0, 0], [57, 67, 120], [134, 130, 178], [151, 140, 183], [226, 243, 180], [249, 212, 70], [236, 120, 66], [29, 34, 37], [68, 158, 161], [0, 0, 0], [141, 131, 185], [35, 3, 8], [103, 128, 160], [152, 40, 72], [62, 71, 255], [194, 66, 67], [11, 7, 5], [255, 255, 255], [236, 205, 195], [76, 133, 207], [247, 188, 120], [39, 40, 121], [115, 131, 179], [241, 198, 136], [171, 180, 229], [6, 29, 108], [174, 159, 158], [38, 98, 93], [68, 35, 40], [202, 38, 141], [36, 93, 120], [241, 194, 113], [255, 255, 255], [0, 0, 0], [0, 0, 0], [55, 79, 144], [0, 0, 67], [255, 255, 255], [15, 13, 27], [0, 0, 46], [94, 139, 209], [231, 76, 41], [255, 255, 255], [9, 51, 122], [101, 24, 74], [62, 0, 0], [231, 195, 169], [247, 206, 255], [51, 86, 168], [2, 0, 6], [0, 0, 12], [73, 98, 128], [38, 35, 124], [124, 103, 0], [192, 79, 45], [172, 175, 190], [31, 22, 15], [255, 255, 255], [222, 201, 177], [247, 246, 244], [99, 127, 207], [166, 171, 189], [255, 126, 109], [228, 228, 243], [64, 63, 97], [209, 39, 41], [136, 8, 88], [144, 170, 219], [27, 58, 81], [11, 29, 43], [28, 23, 35], [201, 149, 37], [56, 70, 105], [18, 100, 148], [255, 255, 255], [172, 32, 35], [157, 161, 173], [153, 154, 156], [106, 125, 255], [8, 11, 20], [240, 226, 153], [50, 57, 143], [187, 59, 122], [36, 113, 157], [54, 92, 121], [103, 129, 162], [104, 150, 219], [255, 215, 58], [13, 24, 66], [213, 10, 237], [213, 137, 85], [0, 0, 0], [40, 64, 142], [0, 1, 5], [169, 173, 185], [13, 15, 18], [249, 234, 203], [30, 40, 115], [252, 251, 250], [129, 223, 205], [192, 193, 235], [12, 15, 24], [55, 14, 14], [102, 45, 30], [0, 0, 0], [255, 255, 255], [27, 70, 48], [4, 4, 4], [169, 73, 85], [141, 41, 41], [0, 0, 0], [157, 144, 106], [138, 134, 189], [21, 23, 18], [87, 132, 87], [4, 29, 103], [147, 36, 33], [254, 254, 254], [255, 255, 255], [255, 255, 255], [255, 255, 255], [247, 130, 35], [255, 255, 255], [19, 15, 12], [246, 159, 28], [10, 10, 0], [128, 62, 12], [255, 255, 255], [0, 160, 216], [255, 243, 24], [250, 254, 255], [59, 186, 218], [255, 244, 84], [244, 113, 35], [255, 255, 255], [40, 40, 88], [255, 255, 255], [247, 130, 35], [255, 0, 40], [0, 0, 0], [255, 0, 0], [255, 255, 255], [255, 255, 255], [147, 142, 87], [16, 16, 8], [255, 255, 255], [255, 255, 255], [255, 228, 225], [24, 20, 24], [16, 9, 15], [135, 205, 213], [255, 255, 255], [255, 255, 255], [247, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 5, 40], [49, 58, 57], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 85, 55], [255, 255, 255], [255, 230, 200], [242, 249, 255], [93, 85, 86], [253, 239, 46], [255, 255, 255], [255, 255, 255], [191, 0, 0], [198, 184, 171], [16, 15, 17], [15, 14, 12], [0, 0, 0], [12, 0, 0], [255, 255, 255], [255, 255, 255], [255, 253, 210], [255, 255, 255], [254, 255, 255], [255, 243, 213], [158, 144, 101], [255, 252, 0], [1, 1, 1], [240, 228, 236], [0, 0, 0], [255, 255, 255], [255, 255, 255], [251, 248, 243], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [160, 59, 17], [0, 173, 93], [255, 255, 255], [0, 0, 0], [8, 8, 8], [12, 72, 57], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [0, 0, 0], [0, 0, 0], [255, 255, 255], [1, 0, 255], [0, 137, 205], [254, 254, 7], [255, 255, 255], [255, 255, 255], [247, 21, 16], [255, 255, 255], [255, 255, 255], [255, 255, 255], [203, 207, 206], [31, 148, 188], [168, 152, 152], [255, 255, 255], [255, 255, 255], [255, 255, 233], [1, 0, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 1, 22], [206, 175, 123], [243, 251, 253], [255, 255, 255], [94, 134, 43], [0, 0, 0], [255, 255, 255], [252, 228, 194], [255, 255, 255], [255, 255, 255], [255, 229, 0], [255, 255, 255], [255, 255, 255], [255, 0, 0], [237, 217, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [166, 222, 204], [0, 3, 8], [255, 255, 255], [132, 17, 24], [239, 255, 255], [1, 85, 0], [60, 41, 120], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [0, 0, 0], [232, 152, 56], [0, 0, 0], [49, 73, 111], [0, 255, 255], [247, 243, 231], [24, 23, 0], [255, 255, 255], [255, 0, 16], [252, 243, 225], [255, 255, 255], [41, 111, 163], [0, 81, 122], [53, 53, 53], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [9, 8, 14], [255, 255, 255], [255, 0, 0], [255, 26, 25], [255, 255, 255], [255, 255, 255], [43, 163, 255], [0, 8, 0], [0, 0, 0], [255, 255, 255], [157, 0, 157], [28, 14, 11], [255, 255, 255], [10, 8, 9], [89, 86, 177], [77, 47, 37], [255, 255, 255], [255, 255, 255], [53, 112, 57], [17, 43, 100], [204, 219, 219], [61, 52, 129], [255, 77, 46], [255, 255, 255], [112, 101, 157], [226, 203, 132], [255, 245, 173], [252, 243, 247], [47, 62, 134], [208, 179, 130], [55, 52, 117], [244, 158, 73], [47, 74, 31], [88, 41, 85], [122, 61, 44], [164, 200, 215], [236, 105, 77], [255, 255, 255], [255, 255, 255], [0, 0, 147], [255, 255, 255], [255, 0, 249], [133, 102, 92], [0, 0, 6], [255, 255, 255], [26, 24, 94], [212, 196, 199], [78, 123, 162], [0, 0, 0], [254, 252, 255], [255, 255, 255], [255, 204, 25], [124, 144, 134], [130, 78, 141], [23, 30, 109], [251, 230, 88], [255, 255, 255], [136, 185, 206], [36, 83, 161], [0, 0, 2], [255, 255, 255], [59, 50, 41], [255, 255, 255], [255, 245, 164], [243, 225, 195], [255, 255, 247], [255, 255, 255], [0, 0, 19], [25, 40, 50], [255, 253, 202], [23, 39, 255], [181, 168, 152], [128, 40, 31], [140, 216, 232], [255, 220, 126], [255, 255, 255], [163, 64, 61], [77, 112, 118], [166, 163, 190], [255, 198, 75], [30, 26, 40], [60, 57, 76], [255, 255, 255], [138, 71, 54], [251, 249, 255], [87, 100, 119], [255, 255, 255], [0, 0, 0], [243, 208, 176], [255, 255, 255], [237, 221, 200], [0, 11, 21], [237, 0, 241], [243, 193, 82], [0, 0, 255], [240, 236, 74], [146, 145, 159], [255, 255, 255], [244, 217, 196], [164, 164, 175], [255, 255, 255], [161, 162, 192], [255, 37, 43], [11, 30, 133], [139, 47, 47], [255, 255, 255], [250, 247, 255], [132, 61, 55], [255, 244, 247], [241, 237, 26], [255, 255, 255], [244, 204, 147], [223, 131, 46], [0, 0, 2], [35, 128, 122], [45, 134, 224], [82, 52, 73], [30, 28, 127], [130, 73, 85], [255, 255, 255], [244, 158, 73], [13, 129, 68], [244, 158, 73], [170, 55, 42], [255, 255, 255], [0, 0, 0], [195, 228, 0], [218, 232, 88], [14, 50, 38], [199, 24, 55], [101, 96, 95], [119, 125, 123], [0, 0, 2], [0, 0, 129], [108, 108, 119], [31, 50, 129], [133, 44, 40], [255, 255, 255], [238, 0, 0], [1, 12, 44], [249, 89, 78], [54, 37, 41], [159, 5, 59], [187, 50, 38], [255, 255, 255], [221, 84, 47], [245, 227, 122], [237, 96, 96], [255, 255, 255], [0, 0, 0], [255, 246, 215], [244, 158, 73], [22, 31, 255], [243, 241, 247], [255, 255, 255], [24, 41, 163], [37, 63, 75], [255, 255, 255], [235, 114, 105], [255, 255, 255], [195, 99, 48], [68, 182, 174], [2, 0, 0], [101, 116, 137], [185, 45, 34], [255, 255, 255], [255, 255, 255], [0, 0, 0], [149, 44, 38], [255, 255, 255], [28, 35, 51], [255, 255, 255], [23, 39, 160], [186, 107, 36], [244, 158, 73], [150, 138, 92], [86, 77, 108], [255, 255, 255], [76, 111, 118], [212, 197, 179], [34, 255, 255], [255, 240, 201], [255, 255, 255], [255, 255, 255], [0, 0, 0], [127, 175, 180], [255, 255, 255], [46, 84, 74], [117, 51, 47], [0, 0, 11], [255, 255, 255], [54, 51, 122], [28, 16, 24], [255, 255, 255], [0, 0, 0], [247, 244, 255], [166, 155, 147], [56, 143, 162], [30, 28, 128], [83, 155, 181], [255, 255, 255], [255, 58, 63], [244, 158, 73], [252, 238, 195], [91, 119, 31], [239, 206, 152], [255, 255, 255], [250, 209, 69], [1, 1, 5], [0, 18, 51], [244, 158, 73], [245, 240, 206], [255, 255, 255], [243, 159, 73], [255, 255, 255], [0, 0, 2], [0, 2, 33], [255, 246, 99], [22, 59, 68], [12, 0, 0], [255, 216, 131], [15, 40, 122], [255, 255, 255], [231, 228, 238], [12, 58, 65], [238, 211, 184], [117, 184, 255], [255, 255, 255], [255, 255, 205], [139, 189, 237], [4, 5, 17], [140, 51, 45], [22, 27, 60], [244, 158, 73], [201, 160, 15], [255, 255, 255], [32, 54, 138], [242, 127, 73], [87, 102, 162], [232, 0, 209], [3, 1, 7], [255, 255, 255], [255, 255, 255], [255, 255, 255], [140, 33, 24], [255, 255, 255], [160, 59, 17], [238, 237, 251], [69, 16, 28], [243, 203, 51], [141, 52, 24], [27, 72, 71], [38, 39, 58], [244, 158, 73], [0, 0, 2], [95, 97, 77], [28, 32, 70], [17, 34, 49], [149, 168, 73], [123, 57, 33], [255, 255, 255], [186, 118, 255], [108, 101, 142], [12, 22, 120], [0, 0, 10], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 84, 170], [242, 227, 125], [194, 52, 41], [149, 138, 142], [57, 100, 143], [243, 159, 73], [0, 0, 0], [234, 246, 77], [6, 45, 78], [250, 31, 38], [0, 0, 10], [100, 95, 149], [172, 160, 139], [22, 57, 183], [255, 5, 15], [244, 158, 73], [13, 107, 89], [92, 34, 60], [10, 13, 24], [32, 26, 74], [114, 136, 181], [67, 29, 40], [39, 32, 87], [255, 255, 255], [255, 255, 255], [33, 51, 57], [234, 90, 60], [238, 142, 67], [142, 67, 42], [48, 38, 150], [139, 140, 175], [51, 82, 128], [0, 0, 2], [245, 238, 215], [1, 235, 206], [255, 255, 255], [150, 38, 35], [35, 40, 98], [244, 158, 73], [255, 255, 255], [44, 57, 58], [50, 24, 43], [170, 143, 125], [171, 136, 54], [204, 188, 177], [255, 255, 255], [39, 29, 84], [40, 30, 98], [30, 30, 61], [194, 82, 43], [20, 42, 83], [0, 0, 0], [222, 231, 95], [90, 55, 86], [44, 56, 127], [243, 207, 116], [10, 54, 79], [255, 255, 255], [253, 187, 92], [24, 39, 93], [255, 255, 255], [162, 72, 60], [182, 184, 255], [255, 255, 255], [239, 203, 150], [47, 117, 199], [255, 241, 153], [255, 204, 25], [233, 175, 0], [127, 104, 255], [67, 94, 163], [255, 255, 255], [0, 0, 0], [255, 255, 255], [163, 158, 30], [127, 148, 175], [0, 0, 13], [166, 154, 104], [255, 255, 255], [243, 158, 73], [245, 32, 39], [86, 30, 36], [18, 38, 152], [255, 255, 255], [10, 8, 9], [9, 11, 22], [255, 255, 255], [125, 138, 183], [64, 100, 181], [81, 30, 65], [0, 0, 5], [243, 158, 73], [57, 46, 95], [194, 80, 131], [151, 141, 120], [21, 35, 154], [94, 42, 43], [22, 43, 155], [240, 240, 107], [255, 255, 255], [75, 41, 40], [255, 255, 255], [136, 112, 70], [51, 118, 123], [26, 38, 15], [240, 210, 157], [255, 255, 255], [220, 98, 64], [30, 28, 127], [188, 177, 139], [12, 17, 20], [45, 27, 75], [255, 255, 255], [255, 255, 255], [85, 45, 115], [255, 255, 255], [120, 109, 165], [13, 129, 68], [29, 25, 67], [8, 36, 94], [0, 0, 204], [172, 166, 180], [51, 133, 175], [224, 86, 53], [255, 255, 255], [247, 207, 98], [69, 202, 229], [0, 0, 0], [255, 255, 255], [182, 202, 212], [255, 255, 255], [255, 238, 176], [52, 105, 192], [15, 29, 134], [3, 42, 60], [255, 255, 255], [255, 255, 255], [16, 19, 27], [255, 255, 255], [0, 0, 0], [244, 158, 73], [255, 255, 255], [0, 10, 20], [142, 116, 172], [0, 0, 0], [255, 7, 14], [8, 21, 61], [45, 49, 161], [0, 146, 110], [23, 52, 91], [75, 154, 166], [243, 159, 73], [255, 255, 255], [37, 99, 166], [0, 0, 2], [23, 63, 117], [255, 255, 255], [43, 118, 201], [0, 19, 21], [94, 30, 31], [213, 0, 0], [90, 114, 160], [8, 14, 26], [141, 157, 172], [137, 162, 235], [232, 90, 54], [42, 38, 45], [27, 27, 32], [255, 255, 255], [193, 110, 71], [81, 135, 112], [248, 245, 255], [255, 255, 255], [5, 1, 0], [255, 255, 255], [37, 0, 21], [255, 255, 255], [188, 160, 139], [255, 255, 255], [26, 32, 0], [255, 255, 255], [250, 223, 78], [22, 56, 86], [248, 233, 202], [255, 237, 221], [250, 249, 255], [76, 151, 161], [218, 197, 0], [225, 214, 68], [243, 231, 229], [41, 48, 112], [134, 39, 36], [22, 24, 23], [255, 255, 255], [0, 157, 255], [255, 255, 255], [195, 221, 243], [0, 0, 2], [243, 159, 73], [243, 158, 73], [255, 255, 255], [241, 242, 244], [255, 255, 255], [36, 47, 130], [12, 27, 54], [170, 0, 27], [244, 158, 73], [0, 0, 0], [255, 255, 255], [11, 13, 25], [19, 20, 58], [77, 111, 118], [105, 30, 33], [115, 89, 82], [255, 255, 255], [238, 222, 207], [255, 255, 255], [255, 255, 255], [243, 158, 73], [255, 255, 255], [121, 49, 47], [6, 7, 19], [104, 248, 152], [244, 158, 73], [128, 3, 16], [255, 255, 255], [3, 12, 41], [255, 255, 255], [235, 178, 120], [255, 255, 255], [255, 255, 255], [16, 63, 64], [244, 158, 73], [247, 245, 248], [108, 147, 220], [130, 104, 99], [243, 38, 35], [244, 158, 73], [255, 255, 255], [28, 27, 37], [76, 113, 180], [25, 26, 57], [1, 1, 11], [147, 53, 52], [255, 255, 255], [244, 158, 73], [255, 255, 255], [207, 152, 109], [246, 241, 255], [0, 1, 24], [1, 76, 144], [9, 55, 62], [235, 107, 56], [254, 254, 254], [255, 255, 255], [37, 33, 34], [248, 246, 251], [249, 247, 251], [12, 15, 21], [255, 255, 255], [225, 107, 70], [15, 12, 19], [234, 236, 236], [145, 70, 100], [57, 78, 147], [46, 51, 115], [203, 179, 193], [89, 63, 129], [69, 27, 25], [1, 72, 54], [255, 255, 255], [255, 255, 255], [248, 222, 45], [179, 152, 156], [255, 217, 157], [255, 255, 255], [180, 187, 207], [0, 33, 45], [248, 32, 25], [254, 251, 250], [175, 196, 187], [39, 49, 87], [104, 99, 80], [77, 109, 172], [233, 163, 0], [112, 40, 45], [223, 227, 226], [185, 238, 198], [11, 11, 24], [157, 190, 221], [255, 255, 255], [9, 41, 35], [107, 24, 22], [255, 255, 255], [255, 255, 255], [255, 244, 248], [222, 70, 46], [4, 10, 22], [115, 103, 212], [255, 255, 255], [36, 30, 36], [101, 25, 30], [208, 203, 210], [155, 196, 152], [255, 255, 255], [213, 105, 30], [0, 0, 23], [0, 0, 0], [223, 156, 87], [20, 18, 29], [55, 61, 142], [16, 17, 21], [13, 28, 24], [23, 31, 57], [186, 205, 253], [242, 243, 239], [94, 115, 180], [255, 126, 203], [112, 27, 30], [244, 209, 112], [25, 30, 106], [255, 204, 25], [255, 255, 255], [179, 51, 44], [18, 48, 167], [197, 197, 91], [205, 75, 46], [30, 26, 38], [1, 1, 13], [188, 107, 60], [0, 0, 2], [0, 0, 2], [27, 27, 33], [255, 255, 255], [119, 135, 160], [255, 255, 255], [125, 117, 104], [255, 255, 255], [255, 255, 255], [236, 170, 137], [244, 158, 73], [0, 0, 0], [173, 123, 70], [208, 73, 40], [0, 0, 0], [255, 255, 255], [39, 57, 82], [252, 175, 61], [38, 53, 70], [39, 48, 86], [7, 7, 0], [252, 252, 252], [234, 246, 79], [28, 55, 129], [243, 158, 73], [57, 58, 98], [255, 255, 255], [51, 159, 255], [255, 255, 255], [255, 255, 255], [8, 9, 19], [21, 33, 83], [255, 248, 221], [244, 158, 73], [255, 255, 255], [255, 255, 255], [17, 15, 37], [243, 159, 73], [27, 79, 188], [79, 184, 156], [255, 255, 255], [0, 0, 2], [255, 255, 255], [36, 40, 44], [14, 27, 106], [255, 238, 204], [0, 0, 0], [163, 162, 174], [247, 210, 147], [223, 66, 51], [1, 0, 5], [22, 56, 174], [255, 255, 255], [255, 255, 255], [193, 158, 85], [255, 255, 255], [244, 158, 73], [5, 8, 13], [9, 10, 14], [255, 202, 24], [32, 78, 158], [255, 251, 251], [0, 0, 206], [159, 52, 65], [162, 121, 131], [255, 255, 255], [255, 255, 255], [195, 0, 51], [255, 255, 255], [125, 47, 77], [202, 198, 183], [248, 160, 26], [0, 0, 32], [33, 30, 79], [0, 0, 0], [255, 255, 255], [254, 254, 254], [10, 13, 25], [39, 30, 82], [255, 255, 255], [255, 255, 255], [246, 196, 70], [95, 144, 210], [100, 131, 220], [191, 55, 39], [244, 158, 73], [255, 255, 255], [28, 20, 33], [214, 137, 79], [30, 29, 64], [173, 199, 222], [31, 71, 200], [251, 252, 255], [255, 216, 166], [192, 192, 213], [233, 127, 80], [247, 245, 250], [244, 158, 73], [241, 211, 0], [18, 85, 105], [255, 255, 255], [145, 49, 32], [30, 52, 130], [149, 133, 158], [8, 12, 25], [244, 158, 73], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 17, 12], [148, 46, 40], [126, 59, 50], [59, 74, 106], [255, 255, 255], [129, 46, 36], [255, 255, 255], [197, 19, 55], [255, 255, 255], [167, 200, 236], [71, 73, 138], [0, 1, 57], [255, 255, 255], [25, 27, 36], [255, 255, 255], [244, 158, 73], [255, 252, 255], [22, 13, 44], [244, 158, 73], [243, 158, 73], [153, 133, 172], [255, 250, 255], [218, 67, 40], [36, 46, 137], [203, 213, 178], [255, 248, 161], [255, 255, 24], [113, 102, 165], [255, 255, 255], [255, 255, 255], [255, 255, 255], [232, 8, 8], [255, 255, 255], [27, 89, 98], [209, 197, 99], [244, 158, 73], [221, 191, 118], [255, 255, 255], [34, 33, 82], [255, 255, 255], [244, 158, 73], [37, 28, 72], [6, 22, 38], [237, 236, 235], [255, 202, 24], [53, 75, 143], [13, 107, 89], [215, 19, 102], [192, 73, 51], [3, 42, 50], [0, 0, 70], [244, 158, 73], [105, 39, 37], [0, 0, 6], [10, 11, 16], [244, 235, 205], [200, 168, 129], [8, 6, 0], [255, 255, 255], [255, 255, 255], [249, 248, 255], [255, 255, 255], [143, 53, 60], [255, 255, 255], [255, 255, 255], [245, 231, 113], [255, 255, 255], [152, 171, 202], [180, 217, 226], [28, 27, 37], [255, 255, 255], [243, 237, 248], [242, 209, 153], [236, 178, 120], [255, 255, 255], [0, 44, 47], [37, 30, 39], [245, 248, 255], [8, 5, 255], [110, 62, 61], [80, 39, 51], [0, 0, 2], [255, 255, 255], [0, 1, 14], [0, 0, 255], [133, 153, 178], [251, 252, 255], [145, 60, 55], [160, 59, 17], [51, 39, 100], [104, 128, 53], [48, 58, 49], [126, 141, 122], [255, 255, 255], [128, 47, 34], [241, 28, 26], [173, 199, 92], [255, 255, 255], [150, 106, 62], [183, 64, 46], [25, 25, 30], [192, 200, 121], [241, 26, 18], [248, 243, 247], [176, 31, 38], [72, 180, 71], [255, 255, 255], [190, 54, 38], [17, 18, 25], [255, 255, 255], [244, 158, 73], [0, 0, 0], [255, 255, 255], [255, 255, 255], [51, 85, 61], [244, 158, 73], [112, 141, 142], [18, 53, 152], [255, 255, 255], [174, 140, 102], [73, 18, 28], [0, 84, 170], [132, 30, 15], [20, 24, 28], [118, 80, 68], [127, 131, 154], [38, 43, 64], [255, 255, 255], [255, 255, 255], [0, 111, 174], [126, 102, 84], [33, 79, 101], [255, 255, 255], [104, 106, 101], [0, 84, 170], [172, 0, 209], [0, 0, 5], [2, 5, 76], [36, 78, 158], [0, 0, 5], [177, 153, 174], [0, 0, 0], [11, 13, 26], [255, 255, 255], [1, 0, 7], [0, 0, 5], [147, 134, 125], [255, 255, 255], [241, 184, 114], [243, 159, 73], [222, 122, 153], [122, 29, 21], [249, 241, 177], [188, 189, 177], [255, 255, 255], [28, 39, 57], [255, 255, 255], [229, 214, 193], [172, 177, 154], [14, 26, 74], [248, 190, 116], [204, 147, 69], [106, 33, 26], [12, 7, 34], [35, 57, 170], [208, 173, 154], [247, 252, 116], [26, 0, 100], [255, 255, 255], [255, 255, 255], [255, 78, 0], [0, 19, 29], [255, 255, 255], [0, 1, 5], [0, 0, 0], [216, 214, 215], [202, 31, 26], [218, 195, 0], [0, 90, 0], [255, 255, 255], [0, 0, 0], [255, 255, 255], [251, 248, 0], [50, 52, 49], [167, 165, 140], [40, 40, 40], [35, 15, 14], [255, 255, 255], [234, 221, 200], [241, 203, 143], [255, 255, 255], [0, 12, 16], [251, 246, 242], [1, 2, 6], [0, 0, 0], [0, 28, 255], [255, 255, 255], [22, 21, 21], [255, 255, 255], [239, 239, 239], [255, 255, 255], [255, 255, 255], [255, 255, 255], [242, 246, 249], [255, 255, 255], [255, 255, 137], [255, 0, 0], [30, 123, 193], [0, 0, 0], [255, 229, 0], [16, 31, 24], [51, 127, 141], [26, 22, 11], [0, 0, 0], [255, 255, 255], [255, 0, 0], [255, 255, 255], [255, 255, 255], [15, 7, 8], [255, 255, 255], [6, 19, 24], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 7, 8], [0, 9, 8], [221, 229, 239], [255, 220, 224], [255, 255, 255], [241, 236, 230], [255, 255, 255], [241, 238, 233], [4, 7, 11], [255, 255, 255], [23, 32, 49], [255, 255, 255], [0, 0, 0], [255, 255, 255], [0, 0, 0], [5, 6, 8], [255, 251, 240], [249, 230, 198], [255, 255, 255], [255, 255, 255], [19, 65, 89], [255, 255, 255], [0, 0, 0], [25, 27, 255], [226, 211, 193], [213, 15, 64], [255, 255, 255], [7, 12, 8], [164, 32, 38], [137, 138, 129], [248, 248, 248], [255, 255, 255], [255, 255, 255], [255, 255, 214], [250, 235, 142], [255, 255, 255], [13, 13, 11], [0, 0, 0], [241, 31, 42], [232, 248, 232], [254, 243, 239], [248, 8, 8], [0, 0, 0], [255, 129, 116], [242, 91, 34], [252, 249, 170], [0, 0, 0], [247, 247, 247], [234, 167, 27], [255, 0, 255], [248, 200, 8], [248, 245, 228], [255, 255, 255], [85, 255, 214], [255, 255, 255], [239, 4, 123], [255, 255, 255], [255, 255, 255], [235, 246, 252], [255, 255, 0], [255, 0, 0], [255, 255, 255], [0, 9, 8], [255, 255, 255], [248, 112, 90], [183, 184, 169], [255, 255, 255], [0, 178, 56], [107, 211, 248], [0, 0, 0], [0, 0, 0], [255, 255, 255], [212, 0, 200], [3, 3, 3], [255, 255, 255], [210, 216, 180], [35, 31, 32], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [17, 37, 255], [136, 200, 72], [239, 234, 219], [254, 255, 250], [22, 24, 23], [252, 203, 5], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [246, 213, 48], [255, 255, 255], [52, 53, 53], [255, 255, 255], [255, 255, 255], [205, 73, 71], [255, 255, 255], [95, 61, 52], [255, 255, 255], [1, 0, 14], [255, 243, 0], [255, 255, 255], [255, 195, 49], [0, 77, 0], [255, 255, 255], [255, 175, 255], [255, 255, 255], [6, 24, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [207, 112, 94], [255, 255, 255], [229, 255, 168], [253, 237, 237], [0, 0, 0], [255, 255, 255], [255, 255, 255], [253, 253, 253], [23, 42, 56], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 254, 253], [120, 174, 63], [233, 255, 253], [255, 255, 255], [237, 243, 235], [254, 253, 251], [255, 255, 255], [48, 0, 0], [253, 252, 222], [242, 239, 255], [88, 42, 38], [255, 252, 217], [255, 255, 255], [199, 234, 253], [255, 30, 47], [21, 18, 47], [255, 255, 255], [254, 254, 254], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [243, 118, 152], [2, 78, 40], [255, 255, 255], [255, 255, 255], [44, 50, 131], [255, 229, 202], [255, 255, 255], [255, 255, 255], [255, 255, 255], [1, 1, 1], [0, 0, 2], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 252, 217], [255, 255, 255], [255, 255, 255], [254, 254, 252], [247, 209, 72], [255, 255, 255], [255, 255, 0], [255, 255, 255], [0, 255, 255], [170, 194, 8], [255, 255, 255], [28, 44, 77], [108, 118, 128], [26, 0, 0], [255, 255, 255], [255, 18, 12], [116, 33, 30], [19, 19, 255], [202, 213, 196], [253, 252, 222], [253, 253, 193], [255, 255, 255], [6, 9, 23], [251, 243, 204], [254, 255, 255], [255, 255, 255], [120, 104, 88], [255, 255, 255], [0, 160, 216], [0, 0, 0], [0, 0, 0], [255, 255, 255], [172, 93, 52], [40, 24, 40], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [231, 235, 247], [0, 0, 0], [253, 235, 220], [6, 24, 0], [255, 255, 255], [168, 154, 155], [255, 255, 255], [255, 255, 255], [240, 229, 167], [52, 25, 34], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [115, 165, 214], [255, 255, 255], [0, 122, 57], [0, 0, 0], [220, 212, 103], [255, 255, 255], [218, 124, 52], [255, 18, 12], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 0, 0], [255, 255, 255], [229, 228, 224], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [3, 0, 0], [36, 95, 175], [255, 255, 255], [255, 243, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [6, 24, 34], [209, 169, 99], [255, 255, 0], [240, 223, 200], [255, 0, 0], [255, 0, 0], [189, 189, 186], [244, 245, 247], [255, 255, 255], [255, 255, 255], [6, 0, 0], [0, 0, 0], [0, 0, 0], [6, 24, 34], [206, 207, 18], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 252, 217], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [32, 65, 100], [15, 19, 49], [255, 255, 255], [6, 24, 0], [0, 0, 0], [169, 110, 108], [222, 153, 104], [159, 104, 118], [237, 56, 0], [169, 173, 131], [255, 255, 255], [6, 24, 0], [240, 242, 241], [255, 253, 217], [255, 255, 255], [0, 0, 0], [45, 181, 140], [255, 255, 255], [0, 0, 0], [255, 0, 11], [210, 172, 153], [255, 255, 255], [166, 217, 62], [255, 255, 255], [245, 120, 36], [255, 255, 255], [255, 253, 0], [148, 180, 193], [255, 255, 255], [255, 255, 255], [232, 239, 247], [0, 0, 0], [255, 255, 255], [255, 255, 255], [210, 101, 55], [0, 0, 16], [0, 0, 0], [255, 255, 255], [0, 0, 26], [255, 255, 255], [231, 234, 212], [255, 255, 255], [152, 216, 88], [255, 255, 255], [196, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [78, 7, 103], [255, 255, 255], [250, 250, 250], [255, 255, 255], [255, 101, 1], [255, 255, 255], [0, 137, 205], [255, 255, 255], [255, 255, 255], [0, 0, 0], [20, 20, 18], [107, 61, 47], [255, 255, 255], [0, 0, 0], [255, 255, 255], [0, 9, 24], [255, 255, 255], [255, 255, 255], [0, 0, 0], [144, 42, 38], [254, 0, 0], [255, 255, 255], [255, 255, 255], [222, 25, 34], [72, 179, 70], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 38, 34], [255, 255, 255], [255, 255, 255], [10, 6, 7], [255, 255, 255], [255, 255, 255], [0, 23, 0], [255, 255, 255], [1, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [238, 77, 48], [21, 65, 44], [255, 255, 255], [0, 0, 0], [0, 0, 0], [0, 255, 0], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 70, 255], [1, 0, 0], [225, 233, 235], [255, 255, 40], [255, 203, 5], [73, 255, 255], [255, 255, 255], [0, 0, 0], [223, 227, 230], [12, 72, 57], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 255], [255, 255, 255], [255, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [237, 27, 0], [255, 255, 255], [255, 15, 13], [255, 255, 255], [255, 255, 255], [3, 7, 8], [0, 0, 0], [255, 255, 255], [3, 7, 8], [255, 233, 0], [237, 27, 36], [255, 255, 255], [0, 0, 0], [255, 255, 255], [0, 0, 0], [0, 0, 0], [255, 255, 255], [6, 7, 9], [255, 255, 255], [255, 255, 255], [255, 255, 255], [181, 178, 126], [212, 61, 40], [3, 0, 0], [174, 32, 72], [1, 1, 0], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 5, 40], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 75, 74], [255, 255, 255], [255, 255, 255], [255, 255, 255], [167, 226, 36], [0, 0, 0], [255, 255, 255], [255, 255, 255], [189, 37, 43], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [0, 0, 0], [190, 18, 22], [255, 255, 255], [155, 31, 41], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [10, 12, 15], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 247, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [55, 0, 255], [255, 255, 255], [0, 0, 0], [0, 0, 0], [149, 0, 0], [1, 1, 1], [255, 255, 255], [240, 226, 189], [255, 255, 255], [255, 255, 255], [126, 65, 34], [0, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [27, 237, 240], [52, 60, 60], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 151, 40], [54, 38, 39], [21, 16, 13], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [97, 143, 156], [0, 22, 0], [0, 195, 255], [149, 176, 125], [212, 91, 44], [1, 1, 1], [255, 40, 40], [6, 8, 5], [255, 255, 255], [255, 255, 255], [1, 1, 1], [255, 206, 43], [255, 255, 255], [19, 9, 9], [255, 255, 255], [255, 255, 255], [255, 30, 25], [22, 22, 22], [29, 55, 35], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 0, 0], [8, 13, 16], [255, 255, 255], [255, 255, 255], [255, 70, 0], [255, 243, 0], [255, 8, 7], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [49, 58, 88], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [1, 1, 1], [255, 255, 255], [10, 6, 7], [248, 168, 56], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [35, 31, 32], [250, 214, 135], [51, 79, 100], [255, 255, 255], [161, 189, 209], [0, 9, 8], [255, 255, 255], [100, 16, 18], [255, 255, 255], [111, 146, 161], [0, 0, 0], [223, 227, 230], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [0, 34, 255], [255, 248, 237], [255, 255, 255], [255, 255, 255], [0, 0, 0], [253, 255, 254], [255, 255, 255], [121, 73, 120], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 0], [1, 0, 255], [255, 246, 219], [255, 255, 255], [1, 1, 1], [255, 255, 255], [0, 0, 0], [238, 238, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [183, 184, 169], [255, 79, 173], [255, 1, 0], [255, 255, 255], [23, 117, 239], [11, 23, 52], [255, 33, 34], [255, 255, 255], [255, 255, 255], [1, 3, 0], [0, 0, 0], [59, 186, 218], [255, 255, 255], [234, 232, 233], [40, 40, 88], [206, 175, 123], [189, 189, 186], [216, 216, 232], [255, 255, 255], [187, 32, 36], [255, 255, 255], [255, 255, 255], [0, 0, 0], [34, 39, 42], [255, 255, 255], [255, 255, 82], [255, 255, 255], [238, 217, 0], [255, 255, 255], [255, 255, 36], [255, 40, 40], [255, 255, 255], [50, 52, 22], [5, 6, 8], [255, 255, 255], [255, 198, 0], [255, 255, 255], [1, 1, 0], [252, 228, 194], [90, 198, 208], [0, 0, 0], [255, 30, 25], [74, 77, 59], [206, 197, 142], [8, 0, 0], [255, 255, 255], [255, 255, 255], [254, 212, 74], [18, 12, 12], [255, 70, 0], [255, 255, 255], [255, 243, 0], [173, 171, 122], [216, 40, 40], [0, 173, 93], [238, 36, 144], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [251, 253, 253], [0, 0, 0], [255, 255, 255], [255, 255, 255], [14, 4, 5], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [23, 22, 18], [0, 0, 0], [255, 255, 255], [245, 228, 0], [255, 255, 255], [225, 28, 212], [255, 255, 255], [255, 255, 255], [179, 144, 181], [255, 253, 255], [255, 9, 0], [255, 255, 255], [255, 255, 255], [37, 31, 34], [42, 62, 86], [232, 168, 200], [216, 2, 2], [255, 255, 255], [255, 255, 255], [255, 255, 255], [252, 241, 209], [255, 252, 214], [6, 7, 6], [39, 66, 93], [255, 255, 255], [197, 32, 46], [0, 255, 0], [255, 255, 255], [0, 0, 0], [0, 0, 0], [0, 0, 0], [255, 25, 27], [255, 233, 255], [255, 255, 255], [255, 255, 255], [0, 22, 255], [255, 255, 255], [255, 72, 0], [10, 12, 11], [255, 255, 255], [255, 255, 255], [255, 0, 0], [255, 255, 255], [255, 255, 255], [255, 0, 0], [24, 22, 29], [228, 25, 55], [255, 255, 255], [255, 255, 255], [0, 255, 255], [255, 255, 255], [1, 3, 2], [195, 215, 226], [255, 255, 255], [0, 110, 110], [0, 0, 0], [24, 34, 44], [255, 255, 255], [255, 255, 255], [255, 255, 255], [80, 51, 46], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [208, 225, 232], [8, 10, 9], [255, 255, 255], [255, 255, 255], [255, 0, 64], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [8, 168, 232], [255, 152, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 0, 0], [255, 0, 0], [0, 0, 0], [25, 9, 10], [255, 255, 255], [1, 1, 1], [0, 38, 21], [3, 3, 0], [255, 255, 255], [210, 218, 218], [220, 8, 8], [253, 250, 245], [255, 252, 208], [14, 11, 4], [255, 255, 255], [36, 8, 0], [255, 255, 255], [255, 255, 54], [4, 16, 16], [255, 8, 11], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 107], [219, 18, 21], [0, 0, 0], [255, 255, 255], [255, 255, 255], [117, 135, 149], [58, 162, 217], [255, 255, 255], [255, 255, 255], [255, 214, 124], [255, 255, 255], [255, 255, 255], [1, 3, 2], [171, 30, 36], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [17, 17, 73], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [56, 56, 56], [255, 255, 255], [35, 58, 57], [255, 255, 255], [255, 255, 255], [2, 2, 2], [255, 0, 0], [255, 255, 255], [0, 0, 0], [216, 214, 219], [15, 18, 27], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 58, 37], [255, 255, 255], [255, 25, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 18, 15], [255, 255, 255], [255, 255, 255], [0, 4, 0], [255, 32, 30], [255, 255, 255], [0, 255, 14], [0, 0, 0], [213, 170, 226], [255, 255, 255], [255, 255, 255], [255, 255, 255], [8, 20, 36], [8, 184, 200], [0, 0, 0], [255, 255, 255], [12, 8, 7], [255, 255, 255], [255, 255, 255], [255, 140, 56], [254, 252, 237], [231, 203, 143], [4, 5, 7], [255, 255, 255], [232, 231, 255], [2, 0, 19], [68, 86, 96], [255, 81, 39], [0, 0, 0], [225, 226, 228], [255, 255, 255], [255, 255, 255], [17, 21, 0], [255, 255, 255], [242, 89, 32], [8, 24, 40], [135, 205, 213], [255, 255, 255], [17, 18, 20], [0, 0, 0], [255, 255, 255], [255, 51, 255], [255, 255, 255], [255, 255, 255], [238, 235, 215], [207, 208, 200], [255, 255, 255], [255, 255, 255], [248, 248, 8], [255, 255, 255], [207, 34, 40], [115, 115, 115], [0, 0, 0], [255, 255, 255], [10, 8, 0], [13, 0, 0], [255, 255, 255], [218, 230, 244], [255, 255, 255], [255, 255, 255], [255, 217, 41], [255, 255, 255], [0, 15, 8], [0, 34, 255], [255, 61, 0], [255, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [235, 247, 243], [255, 255, 255], [0, 0, 0], [239, 57, 44], [255, 255, 255], [255, 220, 213], [241, 239, 218], [253, 242, 136], [246, 48, 138], [92, 128, 40], [27, 19, 23], [255, 255, 255], [113, 255, 0], [228, 56, 44], [255, 255, 255], [36, 33, 62], [77, 34, 15], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 8, 73], [255, 255, 255], [0, 0, 0], [230, 231, 218], [255, 255, 255], [255, 255, 255], [0, 0, 0], [22, 11, 16], [0, 114, 255], [255, 255, 255], [253, 253, 253], [249, 247, 242], [255, 255, 255], [255, 255, 255], [255, 163, 155], [227, 237, 239], [255, 255, 255], [0, 4, 7], [6, 7, 9], [255, 244, 222], [23, 43, 28], [2, 2, 2], [10, 12, 0], [46, 22, 20], [255, 255, 255], [0, 255, 0], [255, 102, 35], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [247, 245, 240], [238, 239, 237], [255, 107, 73], [213, 0, 0], [250, 132, 197], [68, 86, 96], [240, 36, 125], [255, 255, 255], [20, 13, 17], [35, 15, 17], [255, 255, 255], [255, 53, 45], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 247, 238], [255, 255, 255], [51, 21, 11], [255, 47, 91], [246, 243, 236], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 0, 0], [255, 83, 38], [34, 24, 24], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [68, 86, 96], [255, 255, 255], [255, 255, 255], [255, 255, 255], [143, 29, 101], [173, 48, 42], [239, 241, 236], [43, 41, 31], [245, 245, 245], [0, 0, 0], [255, 255, 255], [14, 19, 27], [30, 0, 0], [10, 10, 8], [1, 1, 1], [255, 65, 24], [255, 255, 255], [0, 0, 0], [254, 247, 156], [255, 255, 255], [0, 0, 0], [255, 253, 228], [255, 255, 255], [255, 255, 255], [21, 101, 155], [255, 255, 255], [255, 255, 255], [1, 1, 1], [14, 19, 39], [247, 245, 224], [255, 255, 255], [153, 55, 46], [0, 0, 0], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [0, 140, 115], [28, 30, 31], [255, 30, 39], [255, 5, 40], [146, 213, 225], [255, 255, 255], [44, 53, 0], [245, 0, 197], [23, 13, 11], [255, 255, 255], [241, 82, 61], [255, 255, 255], [255, 255, 255], [1, 1, 1], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 55, 18], [255, 255, 255], [255, 15, 14], [111, 111, 109], [255, 255, 255], [255, 255, 255], [150, 110, 61], [255, 255, 255], [255, 240, 146], [246, 247, 253], [255, 255, 255], [255, 255, 255], [255, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [161, 0, 239], [255, 8, 8], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 0, 0], [255, 255, 255], [255, 255, 255], [255, 247, 237], [0, 0, 0], [255, 255, 255], [255, 178, 146], [255, 0, 0], [255, 255, 255], [255, 255, 255], [0, 0, 0], [101, 86, 0], [255, 255, 255], [255, 255, 255], [228, 25, 55], [255, 255, 255], [33, 29, 30], [0, 255, 255], [255, 229, 181], [67, 48, 33], [255, 255, 255], [255, 255, 255], [17, 18, 255], [0, 0, 0], [0, 1, 22], [237, 45, 0], [255, 255, 255], [255, 255, 255], [0, 244, 0], [8, 184, 184], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [3, 3, 16], [255, 255, 255], [4, 8, 0], [255, 255, 255], [245, 235, 224], [241, 43, 51], [47, 17, 15], [44, 129, 196], [164, 219, 216], [255, 255, 255], [255, 255, 255], [0, 0, 0], [235, 237, 224], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 82, 0], [7, 7, 9], [255, 255, 255], [255, 255, 255], [190, 138, 142], [170, 44, 40], [0, 0, 10], [244, 225, 0], [17, 16, 14], [255, 255, 255], [255, 255, 255], [140, 167, 70], [78, 67, 65], [142, 111, 171], [255, 255, 0], [5, 24, 30], [0, 72, 149], [255, 255, 255], [255, 255, 255], [235, 246, 248], [24, 24, 26], [255, 255, 255], [216, 104, 40], [255, 255, 255], [0, 0, 0], [13, 17, 21], [255, 255, 255], [255, 255, 255], [255, 255, 255], [185, 135, 72], [255, 38, 38], [132, 2, 4], [255, 245, 124], [255, 225, 200], [255, 255, 255], [255, 255, 38], [197, 43, 43], [56, 51, 46], [61, 0, 0], [79, 10, 7], [255, 255, 255], [1, 174, 217], [248, 248, 216], [255, 255, 255], [40, 40, 88], [255, 255, 255], [232, 208, 234], [0, 0, 0], [1, 182, 209], [195, 32, 37], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [36, 32, 33], [255, 238, 236], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 0, 0], [0, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 20, 255], [255, 40, 40], [0, 0, 0], [187, 32, 36], [255, 255, 255], [255, 255, 255], [255, 255, 255], [23, 22, 17], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 27, 34], [255, 15, 11], [0, 0, 0], [255, 255, 255], [255, 0, 0], [9, 10, 15], [25, 16, 87], [255, 255, 255], [117, 217, 243], [255, 255, 255], [255, 255, 255], [10, 10, 244], [255, 255, 255], [6, 0, 0], [255, 255, 255], [1, 1, 1], [255, 255, 255], [255, 255, 255], [255, 255, 255], [115, 105, 161], [0, 0, 0], [255, 255, 255], [239, 237, 236], [255, 255, 255], [0, 116, 74], [255, 255, 255], [0, 11, 11], [255, 255, 0], [255, 255, 255], [244, 245, 239], [255, 255, 255], [225, 0, 0], [255, 255, 255], [0, 88, 168], [255, 255, 255], [228, 25, 55], [255, 255, 255], [0, 4, 0], [1, 143, 209], [11, 22, 39], [255, 22, 17], [255, 255, 255], [120, 216, 232], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [31, 0, 0], [255, 255, 255], [120, 14, 14], [255, 255, 255], [255, 255, 255], [18, 21, 30], [17, 130, 196], [54, 85, 0], [255, 255, 15], [35, 32, 19], [255, 255, 255], [6, 5, 10], [255, 255, 36], [24, 19, 16], [255, 156, 0], [0, 255, 255], [255, 255, 255], [0, 0, 0], [200, 152, 40], [56, 61, 62], [161, 208, 238], [249, 251, 250], [255, 255, 255], [255, 255, 255], [255, 255, 255], [240, 242, 241], [255, 255, 255], [255, 255, 255], [241, 210, 181], [200, 237, 222], [16, 20, 19], [255, 255, 255], [255, 255, 255], [125, 162, 170], [255, 255, 255], [8, 72, 88], [255, 255, 255], [255, 255, 255], [255, 255, 255], [252, 228, 194], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [219, 220, 217], [255, 255, 255], [255, 255, 255], [2, 4, 3], [255, 255, 255], [3, 7, 8], [0, 0, 0], [255, 255, 255], [255, 255, 255], [228, 29, 36], [23, 23, 23], [255, 255, 255], [255, 255, 255], [16, 24, 23], [255, 203, 217], [0, 186, 12], [255, 255, 255], [255, 255, 255], [228, 25, 55], [17, 19, 255], [255, 255, 255], [246, 221, 7], [3, 4, 0], [250, 23, 21], [255, 255, 255], [185, 147, 196], [255, 240, 209], [255, 255, 255], [255, 255, 255], [0, 22, 35], [216, 18, 12], [255, 255, 255], [255, 255, 255], [7, 8, 10], [166, 30, 34], [255, 199, 255], [255, 255, 255], [255, 255, 255], [255, 255, 101], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 250, 153], [255, 255, 255], [5, 5, 0], [253, 239, 46], [232, 233, 228], [255, 255, 255], [255, 31, 255], [0, 0, 0], [255, 255, 255], [0, 200, 209], [59, 50, 35], [141, 141, 0], [107, 110, 115], [0, 141, 255], [241, 85, 11], [255, 255, 255], [172, 208, 192], [255, 255, 255], [255, 255, 255], [230, 233, 226], [255, 255, 255], [255, 255, 255], [0, 0, 0], [248, 235, 18], [0, 19, 34], [255, 255, 0], [254, 223, 45], [40, 31, 21], [209, 204, 200], [255, 18, 0], [80, 17, 255], [167, 169, 38], [43, 47, 50], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [133, 0, 65], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [0, 0, 0], [8, 9, 11], [255, 227, 255], [255, 255, 255], [53, 164, 220], [255, 255, 255], [42, 53, 57], [255, 255, 255], [255, 255, 255], [255, 255, 255], [251, 247, 244], [0, 0, 0], [237, 38, 45], [255, 255, 255], [238, 28, 39], [211, 0, 0], [255, 255, 255], [69, 12, 13], [35, 190, 77], [255, 26, 20], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 168, 0], [255, 255, 255], [255, 255, 255], [0, 64, 58], [235, 230, 210], [255, 255, 255], [195, 203, 30], [251, 253, 253], [255, 255, 255], [0, 0, 0], [0, 0, 0], [0, 35, 100], [26, 210, 222], [255, 255, 255], [255, 255, 255], [127, 163, 215], [133, 129, 117], [255, 255, 255], [252, 214, 213], [0, 114, 63], [112, 230, 255], [255, 247, 192], [255, 255, 255], [255, 255, 255], [255, 255, 0], [243, 240, 255], [45, 112, 191], [255, 254, 252], [255, 255, 255], [232, 8, 8], [255, 255, 255], [5, 6, 8], [255, 255, 255], [255, 255, 255], [255, 0, 255], [0, 173, 207], [255, 255, 255], [235, 246, 252], [216, 40, 56], [255, 255, 255], [61, 101, 163], [242, 219, 237], [33, 29, 24], [45, 43, 44], [255, 26, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 248, 232], [255, 250, 251], [225, 229, 232], [199, 227, 248], [51, 70, 63], [130, 194, 57], [255, 87, 38], [255, 255, 255], [245, 246, 228], [255, 255, 255], [184, 25, 128], [255, 0, 0], [255, 255, 255], [0, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [128, 214, 247], [255, 255, 255], [255, 255, 255], [32, 172, 231], [207, 235, 247], [228, 224, 222], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [246, 137, 32], [255, 255, 255], [13, 12, 10], [255, 255, 255], [0, 0, 0], [10, 14, 17], [251, 253, 252], [255, 251, 239], [255, 255, 255], [0, 27, 56], [0, 0, 0], [255, 255, 255], [255, 254, 249], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [254, 254, 254], [255, 255, 255], [0, 49, 74], [255, 255, 75], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [178, 138, 5], [242, 246, 249], [15, 14, 12], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 235, 197], [34, 4, 6], [232, 232, 216], [8, 40, 88], [255, 229, 0], [0, 42, 66], [208, 195, 153], [8, 40, 88], [255, 93, 48], [0, 255, 255], [255, 255, 255], [255, 255, 255], [255, 0, 0], [201, 77, 76], [254, 254, 254], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 240, 16], [0, 137, 205], [216, 216, 216], [0, 0, 0], [255, 175, 0], [254, 254, 254], [238, 65, 49], [250, 6, 8], [222, 218, 215], [232, 56, 40], [255, 255, 255], [216, 40, 40], [0, 0, 0], [255, 255, 255], [5, 6, 8], [16, 15, 13], [255, 255, 255], [255, 255, 255], [200, 8, 24], [255, 255, 255], [0, 0, 255], [19, 18, 16], [255, 255, 255], [0, 0, 10], [4, 8, 11], [255, 255, 255], [242, 225, 216], [255, 255, 255], [255, 255, 255], [248, 168, 120], [255, 255, 255], [255, 255, 255], [0, 0, 6], [9, 73, 53], [152, 152, 152], [255, 255, 255], [230, 204, 133], [86, 151, 193], [6, 24, 34], [255, 255, 255], [215, 211, 214], [255, 255, 255], [255, 255, 0], [255, 255, 8], [255, 255, 255], [255, 255, 255], [224, 232, 11], [248, 232, 232], [0, 85, 139], [166, 222, 204], [255, 227, 237], [255, 251, 222], [0, 0, 0], [255, 246, 65], [255, 255, 255], [6, 24, 0], [247, 247, 247], [255, 255, 255], [255, 255, 255], [185, 185, 185], [255, 255, 255], [255, 130, 255], [0, 0, 0], [248, 104, 184], [21, 26, 0], [255, 31, 49], [254, 242, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [253, 255, 252], [121, 130, 67], [255, 255, 255], [255, 253, 246], [255, 255, 255], [255, 255, 255], [0, 0, 0], [0, 255, 255], [246, 240, 180], [255, 0, 177], [255, 255, 255], [255, 255, 255], [255, 0, 0], [204, 187, 68], [1, 1, 1], [255, 255, 255], [120, 184, 232], [218, 221, 230], [0, 0, 0], [216, 232, 248], [97, 94, 32], [255, 255, 255], [234, 209, 205], [16, 15, 13], [234, 235, 239], [255, 255, 255], [255, 255, 255], [154, 1, 81], [249, 245, 235], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [241, 241, 241], [255, 238, 103], [255, 255, 255], [6, 24, 0], [255, 255, 255], [40, 24, 24], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [254, 23, 0], [254, 242, 0], [211, 60, 42], [248, 184, 24], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 162], [254, 251, 232], [255, 255, 255], [255, 6, 120], [255, 255, 255], [166, 197, 199], [255, 255, 255], [255, 255, 255], [255, 255, 0], [255, 255, 255], [219, 190, 147], [255, 255, 255], [250, 162, 28], [223, 166, 182], [56, 44, 18], [17, 43, 100], [255, 255, 255], [255, 255, 255], [55, 64, 131], [216, 185, 204], [246, 246, 246], [7, 3, 6], [0, 249, 248], [255, 255, 255], [0, 0, 0], [56, 255, 255], [255, 255, 255], [255, 29, 36], [255, 255, 255], [255, 252, 247], [255, 255, 255], [0, 0, 0], [195, 165, 17], [255, 255, 255], [255, 255, 255], [255, 23, 0], [255, 255, 255], [255, 255, 255], [250, 214, 135], [255, 255, 255], [255, 255, 255], [122, 144, 59], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 255, 255], [16, 9, 15], [255, 255, 255], [255, 255, 255], [248, 200, 8], [255, 255, 255], [1, 1, 1], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 0, 0], [49, 64, 0], [255, 255, 255], [237, 237, 235], [255, 255, 13], [0, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 174, 219], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 39, 20], [255, 255, 255], [255, 255, 255], [245, 242, 223], [210, 35, 42], [66, 108, 190], [255, 255, 255], [255, 255, 255], [255, 255, 255], [204, 179, 155], [255, 255, 255], [248, 248, 232], [255, 255, 255], [0, 255, 255], [112, 120, 68], [255, 255, 255], [255, 255, 255], [255, 255, 255], [8, 31, 98], [0, 0, 0], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [124, 77, 64], [23, 21, 14], [255, 255, 255], [121, 7, 7], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [109, 24, 63], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [232, 200, 136], [255, 255, 255], [255, 255, 255], [255, 255, 255], [16, 190, 15], [16, 15, 13], [251, 244, 226], [255, 255, 255], [243, 31, 34], [255, 255, 255], [0, 1, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 0, 0], [0, 0, 0], [240, 231, 174], [1, 1, 1], [255, 255, 255], [246, 115, 35], [255, 255, 255], [1, 1, 1], [255, 141, 64], [83, 0, 30], [164, 186, 173], [255, 250, 239], [40, 57, 160], [255, 255, 255], [40, 36, 15], [255, 255, 255], [255, 255, 255], [234, 167, 27], [16, 7, 2], [228, 182, 96], [166, 190, 80], [248, 241, 223], [0, 0, 0], [254, 212, 74], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [2, 0, 0], [206, 194, 194], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [50, 194, 220], [0, 9, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 231, 40], [38, 37, 32], [255, 255, 255], [255, 255, 255], [255, 255, 255], [232, 207, 127], [255, 194, 152], [10, 10, 10], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 0, 0], [255, 254, 0], [255, 255, 255], [255, 255, 255], [255, 66, 27], [255, 255, 255], [7, 6, 11], [255, 12, 107], [255, 255, 255], [255, 43, 0], [255, 255, 255], [255, 44, 34], [255, 255, 255], [255, 13, 39], [255, 255, 98], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 74, 87], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [18, 67, 225], [255, 0, 0], [255, 255, 255], [255, 0, 0], [255, 0, 0], [23, 18, 16], [255, 255, 255], [255, 255, 255], [255, 255, 255], [18, 156, 255], [255, 13, 16], [255, 255, 255], [255, 255, 255], [255, 255, 255], [4, 2, 3], [255, 255, 255], [255, 255, 255], [255, 255, 255], [29, 214, 255], [255, 255, 193], [255, 255, 0], [3, 7, 8], [255, 255, 255], [255, 255, 0], [255, 255, 255], [183, 17, 55], [255, 255, 255], [255, 255, 255], [255, 53, 68], [255, 255, 255], [255, 207, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [20, 18, 19], [32, 0, 0], [255, 13, 39], [0, 0, 0], [255, 255, 250], [255, 255, 255], [255, 255, 255], [255, 255, 255], [51, 35, 255], [48, 19, 16], [255, 255, 255], [0, 0, 0], [0, 0, 0], [183, 17, 55], [17, 21, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [18, 44, 255], [255, 0, 0], [29, 19, 18], [255, 47, 91], [255, 255, 255], [255, 255, 255], [18, 40, 53], [255, 255, 255], [0, 223, 171], [237, 22, 29], [255, 255, 255], [255, 255, 255], [255, 255, 255], [5, 9, 10], [255, 39, 0], [255, 255, 255], [255, 255, 255], [143, 27, 72], [183, 17, 55], [255, 255, 255], [19, 17, 20], [255, 255, 255], [255, 28, 0], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 17, 15], [255, 255, 255], [255, 7, 14], [255, 255, 255], [15, 37, 37], [255, 251, 239], [1, 1, 1], [1, 1, 1], [255, 29, 67], [255, 255, 255], [255, 255, 255], [255, 23, 39], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 22, 29], [255, 0, 0], [255, 255, 255], [42, 24, 23], [255, 255, 255], [248, 255, 255], [0, 0, 0], [0, 0, 0], [255, 79, 173], [0, 0, 0], [255, 236, 255], [255, 45, 39], [18, 20, 34], [255, 255, 255], [5, 6, 8], [255, 255, 13], [255, 250, 255], [255, 255, 255], [255, 255, 255], [255, 10, 10], [255, 16, 0], [255, 46, 49], [255, 255, 255], [44, 129, 196], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [55, 0, 147], [255, 255, 255], [168, 108, 78], [13, 15, 255], [0, 0, 0], [255, 0, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 16, 16], [255, 255, 255], [255, 255, 255], [248, 200, 216], [255, 255, 255], [57, 44, 0], [41, 45, 0], [255, 212, 59], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 133, 255], [0, 0, 0], [255, 255, 255], [33, 0, 255], [255, 255, 255], [255, 255, 255], [209, 153, 255], [18, 53, 9], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [129, 109, 51], [159, 137, 181], [255, 53, 96], [216, 216, 216], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 144, 255], [255, 255, 255], [255, 255, 255], [5, 6, 8], [255, 255, 255], [255, 255, 255], [5, 6, 8], [255, 255, 255], [255, 7, 0], [255, 255, 255], [255, 30, 0], [255, 255, 255], [255, 255, 255], [255, 16, 15], [255, 20, 20], [255, 255, 255], [255, 255, 255], [255, 255, 255], [69, 255, 255], [255, 255, 255], [0, 255, 0], [1, 149, 175], [255, 72, 69], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [243, 247, 255], [255, 255, 255], [18, 20, 255], [255, 255, 255], [255, 255, 255], [174, 136, 1], [255, 255, 255], [255, 255, 255], [255, 255, 255], [7, 6, 11], [183, 17, 55], [255, 30, 38], [255, 255, 255], [255, 189, 217], [255, 255, 255], [0, 161, 206], [255, 255, 255], [0, 218, 54], [0, 185, 181], [12, 33, 16], [255, 255, 255], [255, 255, 255], [0, 162, 228], [8, 8, 8], [199, 227, 248], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [3, 7, 8], [17, 19, 60], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [239, 229, 214], [255, 255, 255], [212, 212, 174], [166, 222, 204], [249, 249, 232], [255, 255, 255], [21, 101, 155], [255, 245, 227], [255, 0, 0], [0, 0, 0], [255, 255, 255], [255, 1, 0], [23, 117, 239], [0, 0, 0], [0, 47, 57], [5, 24, 30], [254, 255, 255], [255, 255, 255], [1, 1, 1], [255, 255, 255], [0, 195, 255], [168, 255, 152], [27, 17, 36], [7, 7, 7], [255, 255, 255], [246, 247, 249], [234, 203, 141], [0, 0, 0], [7, 9, 8], [7, 133, 156], [12, 13, 8], [255, 255, 255], [254, 242, 0], [205, 218, 224], [18, 20, 24], [0, 0, 0], [255, 255, 255], [0, 26, 38], [6, 24, 34], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [254, 254, 254], [255, 255, 255], [255, 255, 255], [27, 25, 0], [232, 232, 120], [255, 255, 255], [255, 255, 255], [8, 8, 24], [255, 255, 255], [49, 73, 111], [255, 255, 255], [16, 10, 22], [255, 255, 255], [255, 255, 255], [255, 255, 255], [92, 180, 226], [255, 255, 255], [242, 226, 200], [255, 229, 20], [58, 56, 59], [210, 210, 0], [255, 255, 255], [255, 255, 0], [6, 24, 0], [11, 11, 11], [0, 0, 0], [12, 13, 21], [255, 255, 42], [255, 255, 255], [21, 27, 43], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [0, 47, 57], [255, 255, 255], [255, 255, 255], [90, 198, 208], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 0], [8, 10, 9], [255, 255, 255], [227, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [203, 224, 167], [0, 0, 0], [255, 255, 255], [255, 255, 255], [1, 1, 1], [0, 0, 0], [255, 29, 17], [10, 6, 34], [255, 255, 255], [72, 73, 69], [255, 39, 255], [255, 255, 255], [13, 13, 13], [255, 255, 255], [16, 15, 13], [255, 255, 255], [0, 0, 0], [3, 7, 8], [1, 85, 0], [0, 29, 0], [255, 255, 255], [0, 0, 0], [3, 7, 8], [226, 244, 255], [102, 28, 33], [0, 0, 0], [47, 62, 67], [255, 255, 255], [65, 65, 65], [13, 10, 19], [34, 36, 35], [255, 255, 255], [255, 255, 255], [248, 113, 32], [0, 0, 0], [255, 255, 255], [0, 0, 0], [120, 20, 119], [0, 0, 0], [0, 0, 0], [255, 1, 0], [0, 113, 189], [255, 0, 16], [0, 0, 255], [255, 255, 255], [10, 12, 15], [255, 255, 255], [255, 255, 255], [32, 1, 0], [224, 210, 176], [0, 0, 0], [232, 23, 55], [252, 243, 225], [255, 255, 0], [255, 255, 0], [255, 255, 0], [255, 255, 255], [52, 16, 103], [0, 0, 0], [231, 99, 50], [0, 0, 0], [255, 255, 255], [255, 255, 255], [9, 8, 14], [0, 0, 0], [24, 21, 136], [255, 255, 255], [0, 0, 0], [255, 255, 255], [0, 0, 0], [23, 25, 63], [35, 29, 34], [0, 0, 0], [0, 255, 255], [255, 255, 255], [255, 252, 0], [14, 6, 0], [255, 255, 255], [3, 7, 8], [255, 255, 255], [16, 15, 13], [211, 32, 38], [255, 255, 255], [18, 20, 19], [0, 0, 0], [2, 0, 0], [255, 255, 255], [255, 255, 255], [136, 0, 0], [0, 8, 0], [0, 0, 0], [0, 0, 0], [3, 6, 8], [255, 170, 255], [255, 255, 0], [237, 242, 245], [38, 91, 169], [255, 255, 255], [66, 134, 199], [0, 9, 8], [255, 255, 255], [255, 255, 255], [255, 5, 25], [43, 46, 43], [251, 251, 251], [165, 207, 99], [255, 255, 255], [0, 0, 0], [228, 200, 152], [255, 255, 255], [0, 1, 0], [255, 255, 255], [255, 255, 255], [23, 146, 221], [255, 255, 255], [175, 147, 82], [27, 69, 143], [255, 255, 255], [0, 0, 0], [247, 247, 239], [24, 88, 168], [255, 255, 0], [240, 228, 212], [51, 42, 31], [238, 39, 34], [255, 255, 255], [255, 0, 0], [255, 255, 255], [17, 12, 9], [228, 216, 200], [231, 218, 208], [216, 152, 40], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [58, 162, 75], [255, 255, 255], [255, 255, 255], [255, 0, 0], [255, 255, 255], [163, 147, 98], [255, 255, 0], [24, 20, 24], [255, 255, 255], [255, 255, 255], [251, 247, 236], [255, 251, 239], [214, 233, 237], [24, 57, 74], [43, 38, 42], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 12], [255, 255, 255], [0, 0, 0], [0, 0, 0], [137, 251, 123], [10, 10, 0], [255, 255, 0], [239, 236, 224], [255, 255, 255], [255, 255, 255], [255, 69, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [235, 244, 239], [0, 255, 255], [255, 0, 255], [255, 255, 255], [255, 254, 252], [255, 255, 255], [20, 20, 18], [0, 44, 65], [255, 255, 255], [255, 0, 0], [219, 6, 35], [0, 160, 216], [255, 255, 255], [0, 0, 0], [252, 252, 252], [205, 0, 0], [255, 255, 255], [0, 0, 0], [242, 217, 0], [0, 105, 45], [255, 255, 255], [255, 255, 0], [23, 66, 119], [255, 0, 177], [65, 40, 23], [255, 255, 255], [255, 255, 255], [22, 22, 24], [255, 255, 255], [221, 226, 231], [177, 51, 36], [255, 255, 255], [255, 255, 255], [61, 51, 47], [0, 237, 242], [120, 143, 149], [255, 0, 255], [255, 255, 255], [51, 105, 162], [223, 224, 229], [255, 255, 255], [38, 91, 169], [0, 0, 0], [199, 227, 248], [0, 0, 0], [255, 255, 255], [21, 120, 0], [7, 6, 4], [255, 255, 255], [255, 230, 0], [13, 9, 10], [0, 0, 255], [233, 0, 0], [0, 255, 255], [242, 242, 242], [191, 49, 45], [0, 255, 255], [229, 224, 26], [255, 255, 255], [0, 65, 0], [237, 27, 36], [255, 255, 255], [255, 255, 255], [12, 192, 106], [143, 218, 250], [255, 255, 255], [255, 255, 255], [0, 0, 0], [196, 196, 196], [253, 249, 246], [255, 0, 0], [255, 255, 255], [254, 254, 252], [0, 0, 0], [255, 254, 255], [255, 232, 167], [3, 7, 8], [255, 255, 255], [255, 255, 0], [247, 247, 247], [255, 255, 255], [255, 255, 255], [242, 146, 50], [153, 76, 64], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [247, 247, 239], [255, 255, 255], [242, 244, 239], [255, 255, 255], [4, 4, 4], [255, 85, 55], [255, 255, 66], [27, 255, 255], [0, 0, 0], [45, 224, 53], [60, 19, 17], [255, 255, 255], [1, 1, 1], [255, 255, 255], [0, 0, 0], [38, 255, 0], [196, 34, 58], [255, 255, 255], [26, 26, 27], [6, 7, 9], [111, 191, 70], [242, 249, 255], [255, 255, 255], [247, 36, 51], [175, 211, 36], [29, 20, 15], [206, 108, 43], [184, 168, 152], [127, 100, 73], [255, 255, 255], [22, 22, 24], [255, 255, 255], [255, 255, 255], [173, 28, 33], [23, 19, 18], [252, 43, 80], [0, 14, 41], [255, 253, 251], [255, 255, 255], [247, 245, 232], [43, 65, 78], [255, 255, 255], [255, 255, 223], [0, 83, 255], [255, 255, 255], [255, 0, 0], [255, 255, 255], [212, 225, 242], [41, 37, 38], [255, 255, 0], [255, 255, 255], [255, 255, 255], [255, 221, 0], [194, 29, 45], [242, 249, 255], [255, 255, 255], [226, 230, 0], [255, 255, 255], [0, 3, 5], [255, 215, 189], [1, 1, 1], [255, 255, 255], [255, 80, 34], [0, 0, 0], [255, 255, 255], [255, 255, 255], [18, 18, 18], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [247, 247, 221], [255, 255, 255], [255, 255, 255], [255, 255, 255], [39, 85, 136], [0, 0, 0], [250, 251, 194], [248, 248, 232], [16, 18, 17], [21, 27, 43], [255, 255, 255], [83, 83, 119], [255, 248, 255], [255, 29, 36], [8, 8, 10], [0, 35, 100], [248, 232, 200], [255, 255, 255], [207, 121, 108], [0, 23, 0], [84, 105, 159], [23, 21, 18], [6, 24, 0], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [232, 248, 232], [255, 255, 255], [230, 31, 41], [252, 202, 69], [248, 246, 234], [255, 0, 0], [255, 0, 0], [255, 5, 0], [255, 119, 50], [239, 229, 214], [255, 0, 0], [0, 0, 0], [255, 255, 255], [0, 87, 23], [94, 159, 186], [143, 216, 249], [16, 0, 0], [14, 18, 27], [247, 245, 230], [17, 12, 16], [255, 255, 255], [255, 152, 0], [255, 255, 255], [255, 255, 255], [255, 30, 47], [255, 255, 255], [0, 255, 255], [50, 52, 49], [254, 255, 255], [73, 3, 8], [8, 20, 8], [212, 212, 174], [0, 0, 0], [255, 255, 255], [0, 0, 0], [255, 255, 255], [27, 27, 27], [255, 255, 255], [198, 191, 149], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [122, 144, 59], [255, 255, 255], [255, 255, 255], [251, 245, 223], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 28, 99], [0, 146, 43], [1, 0, 0], [255, 255, 255], [243, 118, 152], [255, 255, 255], [0, 9, 8], [254, 254, 242], [50, 42, 46], [223, 242, 212], [23, 28, 22], [19, 15, 12], [255, 255, 255], [252, 15, 9], [217, 87, 5], [0, 16, 18], [31, 148, 188], [28, 17, 20], [255, 255, 255], [69, 107, 123], [223, 227, 230], [243, 231, 215], [255, 255, 255], [108, 155, 137], [16, 16, 16], [255, 255, 255], [206, 19, 67], [255, 255, 255], [233, 245, 246], [255, 255, 255], [239, 242, 247], [198, 219, 213], [255, 255, 46], [187, 90, 73], [255, 14, 50], [255, 255, 255], [254, 255, 255], [168, 152, 152], [255, 255, 255], [76, 69, 70], [255, 255, 255], [255, 255, 255], [25, 27, 255], [255, 255, 255], [249, 247, 230], [248, 232, 184], [255, 255, 0], [0, 0, 0], [255, 255, 255], [255, 27, 26], [255, 255, 255], [214, 134, 83], [0, 255, 255], [3, 7, 8], [255, 219, 99], [255, 255, 255], [255, 255, 255], [12, 45, 109], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [47, 58, 105], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 0, 0], [25, 36, 255], [0, 0, 0], [255, 255, 255], [255, 239, 233], [0, 34, 255], [255, 255, 255], [110, 154, 137], [255, 255, 255], [237, 27, 0], [255, 255, 255], [211, 198, 240], [255, 255, 255], [7, 10, 21], [255, 255, 233], [255, 255, 255], [0, 255, 255], [1, 1, 1], [24, 40, 72], [0, 0, 0], [255, 255, 255], [255, 255, 255], [12, 11, 7], [2, 2, 2], [168, 136, 88], [228, 238, 255], [10, 10, 12], [255, 23, 22], [52, 39, 33], [5, 5, 5], [255, 255, 255], [153, 28, 31], [239, 239, 239], [255, 255, 255], [206, 206, 228], [255, 255, 255], [255, 246, 215], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [254, 255, 255], [254, 254, 252], [255, 40, 78], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 0], [248, 243, 247], [252, 223, 9], [166, 71, 101], [255, 255, 255], [35, 31, 32], [255, 255, 255], [226, 32, 43], [0, 0, 0], [253, 253, 251], [255, 255, 255], [253, 255, 216], [165, 70, 154], [255, 66, 19], [0, 4, 0], [38, 37, 32], [0, 0, 0], [0, 233, 0], [127, 27, 27], [49, 73, 111], [255, 0, 0], [227, 239, 217], [12, 25, 34], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [0, 121, 194], [255, 255, 255], [255, 255, 255], [152, 200, 72], [2, 2, 2], [255, 255, 255], [255, 255, 255], [242, 241, 228], [242, 242, 242], [255, 255, 255], [0, 0, 0], [255, 255, 255], [236, 235, 13], [255, 255, 255], [255, 255, 255], [207, 198, 181], [197, 219, 224], [255, 255, 255], [0, 139, 204], [255, 255, 255], [255, 255, 40], [255, 16, 255], [254, 255, 255], [24, 21, 16], [18, 13, 10], [255, 202, 255], [0, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 147, 255], [246, 245, 251], [255, 255, 255], [255, 248, 232], [255, 250, 251], [255, 255, 255], [255, 255, 255], [248, 247, 217], [255, 255, 255], [255, 255, 255], [234, 235, 254], [255, 254, 224], [22, 23, 27], [0, 0, 0], [51, 31, 30], [255, 228, 124], [0, 0, 0], [253, 252, 248], [255, 255, 255], [255, 255, 241], [8, 24, 8], [255, 1, 0], [255, 255, 255], [255, 255, 255], [128, 50, 64], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [0, 1, 22], [255, 255, 255], [241, 246, 0], [90, 95, 124], [255, 255, 255], [252, 243, 225], [27, 35, 97], [0, 0, 0], [229, 228, 224], [255, 255, 255], [255, 255, 0], [232, 201, 33], [143, 28, 19], [0, 0, 0], [255, 255, 255], [255, 255, 255], [176, 29, 45], [0, 193, 0], [255, 255, 255], [255, 255, 255], [31, 21, 21], [47, 17, 15], [255, 46, 49], [35, 64, 142], [193, 173, 187], [0, 1, 94], [40, 40, 40], [99, 187, 74], [52, 16, 103], [255, 255, 255], [255, 255, 255], [0, 6, 17], [255, 255, 255], [114, 36, 49], [0, 0, 0], [255, 255, 255], [96, 130, 132], [255, 255, 255], [255, 255, 255], [255, 255, 255], [240, 149, 192], [125, 166, 217], [238, 0, 255], [237, 204, 89], [255, 255, 255], [255, 255, 255], [243, 227, 227], [0, 22, 0], [255, 255, 255], [250, 254, 255], [0, 0, 0], [248, 215, 124], [255, 255, 255], [244, 241, 255], [255, 255, 255], [24, 24, 24], [255, 255, 255], [120, 56, 104], [14, 14, 14], [255, 255, 255], [40, 40, 88], [255, 255, 255], [161, 29, 139], [255, 255, 255], [0, 0, 0], [75, 77, 81], [248, 65, 67], [231, 67, 39], [247, 245, 0], [255, 255, 255], [255, 0, 0], [0, 0, 0], [255, 255, 255], [255, 255, 255], [245, 28, 213], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [216, 216, 216], [255, 255, 255], [255, 255, 221], [255, 255, 255], [255, 255, 255], [255, 255, 255], [254, 255, 255], [255, 212, 59], [156, 32, 34], [255, 255, 255], [33, 0, 255], [255, 255, 255], [255, 0, 0], [1, 3, 2], [48, 111, 67], [165, 212, 232], [0, 0, 0], [255, 255, 255], [0, 0, 0], [0, 0, 0], [255, 255, 255], [248, 88, 40], [133, 116, 72], [255, 255, 255], [127, 147, 158], [250, 228, 181], [108, 155, 137], [255, 255, 255], [105, 115, 196], [10, 10, 10], [23, 32, 49], [6, 8, 7], [28, 74, 59], [255, 14, 0], [255, 255, 82], [255, 255, 255], [255, 255, 255], [35, 37, 32], [99, 74, 159], [255, 255, 255], [244, 244, 246], [0, 0, 0], [18, 13, 8], [211, 31, 32], [0, 0, 0], [0, 0, 0], [164, 188, 255], [0, 0, 0], [255, 255, 255], [255, 255, 255], [255, 255, 255], [238, 217, 0], [205, 144, 55], [0, 209, 205], [0, 195, 255], [254, 255, 255], [255, 231, 225], [255, 255, 255], [255, 255, 255], [255, 255, 36], [250, 244, 255], [255, 255, 255], [255, 255, 255], [253, 179, 22], [5, 6, 8], [143, 19, 81], [255, 76, 60], [0, 0, 37], [255, 102, 255], [239, 246, 230], [248, 248, 216], [255, 230, 200], [255, 255, 255], [4, 5, 0], [1, 1, 0], [16, 18, 16], [255, 255, 255], [41, 31, 22], [106, 46, 44], [255, 255, 255], [255, 255, 255], [255, 30, 25], [255, 255, 255], [22, 22, 22], [198, 170, 255], [0, 141, 255], [222, 243, 246], [0, 9, 8], [33, 37, 24], [8, 0, 0], [255, 255, 255], [0, 0, 0], [10, 9, 23], [251, 244, 228], [234, 167, 27], [255, 255, 255], [255, 255, 255], [255, 255, 255], [255, 0, 0], [0, 0, 0], [255, 255, 255], [227, 231, 236], [255, 255, 255], [255, 255, 255], [254, 212, 74], [255, 255, 255], [11, 12, 14], [0, 2, 1], [166, 30, 34], [12, 31, 149], [48, 29, 15], [255, 70, 0], [255, 255, 255], [255, 255, 255], [251, 251, 243], [255, 255, 255], [255, 232, 236], [255, 37, 124], [255, 255, 255], [253, 239, 46], [255, 8, 7], [0, 0, 0], [246, 246, 245], [120, 1, 33], [255, 255, 255], [25, 24, 20], [255, 255, 255], [255, 41, 0], [200, 218, 247], [105, 162, 83], [0, 121, 194], [243, 162, 238], [255, 255, 255], [255, 29, 255], [255, 255, 255], [16, 16, 18], [255, 255, 255], [255, 251, 255], [255, 255, 255], [45, 75, 165], [0, 1, 1], [255, 255, 255], [12, 255, 255], [0, 0, 0], [4, 5, 9], [255, 255, 255], [255, 255, 255], [255, 255, 255], [246, 226, 153], [253, 255, 254], [0, 255, 255], [255, 255, 255], [255, 255, 255], [255, 255, 255], [190, 134, 183], [32, 30, 70], [255, 255, 255], [35, 31, 32], [79, 62, 140], [19, 15, 12], [22, 24, 23], [255, 234, 232], [255, 255, 255], [36, 54, 139], [0, 1, 6], [0, 0, 0], [255, 255, 255], [255, 255, 255], [211, 53, 44], [255, 255, 255], [241, 241, 240], [0, 1, 3], [255, 255, 255], [15, 14, 12], [242, 225, 216], [255, 255, 255], [197, 172, 155], [216, 40, 72], [255, 255, 255], [50, 68, 148], [247, 154, 160], [0, 0, 0], [255, 255, 255], [228, 25, 55], [250, 152, 29], [255, 0, 0], [252, 191, 23], [162, 204, 233], [252, 191, 23], [255, 255, 255], [245, 130, 32], [0, 0, 0], [255, 0, 0], [0, 195, 124], [252, 191, 23], [255, 242, 0], [248, 170, 166], [89, 97, 198], [117, 188, 234], [237, 25, 47], [228, 25, 55], [41, 42, 46], [41, 27, 160], [128, 202, 45], [236, 236, 236], [228, 25, 55], [244, 243, 239], [35, 31, 32], [255, 255, 255], [255, 154, 159], [0, 0, 121], [219, 232, 153], [0, 0, 0], [238, 23, 54], [255, 255, 255], [255, 248, 0], [254, 232, 1], [252, 191, 23], [255, 255, 255], [247, 19, 22], [255, 255, 255], [252, 191, 23], [0, 199, 239], [251, 229, 179], [255, 32, 41], [0, 123, 94], [0, 0, 0], [2, 122, 94], [255, 255, 255], [228, 25, 55], [255, 255, 255], [228, 25, 55], [255, 255, 255], [228, 25, 55], [250, 237, 0], [0, 0, 0], [89, 145, 48], [255, 0, 0], [35, 31, 32], [228, 24, 55], [251, 248, 237], [2, 122, 94], [0, 0, 0], [255, 251, 222], [252, 31, 32], [17, 12, 9], [251, 122, 94], [253, 220, 43], [159, 157, 133], [255, 255, 255], [118, 179, 207], [51, 52, 54], [255, 255, 255], [244, 219, 12], [35, 31, 32], [75, 124, 191], [194, 223, 165], [43, 44, 46], [228, 25, 55], [255, 255, 255], [246, 154, 0], [150, 0, 0], [255, 255, 0], [2, 122, 94], [0, 168, 142], [255, 0, 0], [35, 31, 32], [251, 191, 22], [20, 18, 17], [0, 0, 0], [118, 6, 116], [247, 154, 160], [252, 191, 23], [252, 191, 23], [34, 24, 23], [255, 22, 20], [16, 15, 13], [251, 191, 22], [252, 191, 23], [51, 123, 173], [250, 200, 53], [71, 1, 4], [48, 68, 159], [254, 242, 0], [35, 31, 32], [0, 108, 166], [2, 122, 94], [255, 255, 255], [175, 184, 29], [180, 127, 59], [255, 197, 38], [252, 191, 23], [255, 255, 255], [85, 255, 214], [35, 31, 32], [33, 57, 94], [20, 18, 23], [8, 56, 136], [68, 72, 78], [255, 255, 255], [255, 255, 255], [49, 53, 57], [255, 255, 255], [251, 191, 22], [245, 245, 233], [128, 100, 184], [0, 238, 231], [232, 235, 154], [255, 72, 0], [35, 31, 32], [0, 0, 0], [255, 255, 255], [19, 74, 105], [43, 39, 45], [220, 171, 76], [228, 25, 55], [42, 89, 174], [224, 61, 78], [255, 231, 255], [248, 243, 247], [228, 25, 55], [252, 31, 32], [187, 25, 49], [232, 152, 56], [39, 0, 0], [255, 255, 255], [251, 191, 22], [0, 185, 74], [252, 191, 23], [239, 23, 34], [255, 255, 255], [37, 26, 21], [0, 0, 0], [255, 255, 255], [0, 102, 156], [252, 191, 23], [35, 29, 29], [65, 106, 188], [251, 191, 22], [228, 25, 55], [255, 255, 255], [24, 23, 0], [255, 255, 255], [101, 140, 21], [255, 255, 255], [99, 155, 105], [252, 191, 23], [255, 255, 255], [2, 122, 94], [247, 154, 160], [255, 255, 255], [170, 86, 173], [255, 241, 228], [255, 255, 255], [255, 255, 255], [186, 21, 27], [17, 16, 14], [255, 255, 255], [228, 25, 55], [210, 210, 201], [254, 254, 254], [252, 191, 23], [255, 255, 255], [255, 255, 255], [255, 255, 255], [247, 203, 16], [8, 56, 136], [35, 31, 32], [16, 15, 13], [252, 191, 23], [132, 255, 80], [255, 255, 255], [255, 0, 0], [154, 28, 32], [2, 122, 94], [52, 55, 56], [4, 8, 11], [252, 191, 23], [252, 191, 23], [139, 3, 5], [2, 122, 94], [228, 25, 55], [0, 0, 0], [242, 242, 242], [61, 137, 163], [0, 25, 55], [255, 255, 255], [255, 255, 255], [219, 220, 185], [252, 191, 23], [255, 255, 255], [255, 0, 5], [0, 123, 94], [31, 35, 164], [243, 244, 246], [255, 255, 72], [170, 19, 26], [228, 25, 55], [8, 56, 136], [228, 25, 55], [251, 191, 22], [220, 213, 94], [184, 224, 229], [255, 255, 255], [8, 56, 136], [0, 122, 94], [120, 153, 108], [189, 219, 255], [255, 255, 255], [252, 191, 23], [255, 255, 255], [228, 25, 55], [217, 226, 201], [255, 255, 255], [0, 143, 76], [35, 31, 32], [228, 25, 55], [252, 191, 23], [0, 123, 94], [255, 255, 255], [252, 191, 23], [255, 255, 255], [255, 255, 0], [255, 255, 255], [0, 212, 190], [0, 122, 94], [0, 123, 94], [246, 154, 159], [255, 255, 255], [242, 226, 200], [0, 239, 248], [8, 56, 136], [0, 0, 0], [255, 255, 255], [16, 15, 13], [248, 232, 232], [35, 15, 14], [228, 25, 55], [255, 255, 255], [67, 178, 60], [255, 255, 0], [255, 255, 255], [255, 154, 160], [0, 0, 0], [228, 0, 0], [252, 191, 23], [255, 255, 255], [8, 56, 136], [0, 168, 142], [247, 215, 228], [0, 0, 0], [102, 103, 105], [255, 255, 255], [255, 255, 251], [0, 0, 0], [255, 255, 255], [255, 247, 255], [252, 31, 32], [39, 43, 44], [231, 30, 38], [224, 76, 25], [254, 254, 254], [255, 255, 255], [255, 255, 255], [255, 255, 255], [252, 191, 23], [0, 25, 27], [255, 255, 255], [104, 200, 232], [247, 154, 160], [21, 21, 23], [210, 16, 66], [228, 25, 55], [255, 154, 88], [0, 0, 0], [255, 255, 255], [255, 255, 255], [252, 191, 23], [252, 191, 23], [255, 255, 255], [252, 191, 23], [30, 68, 53], [0, 0, 0], [255, 255, 255], [189, 136, 52], [228, 25, 55], [2, 122, 94], [0, 0, 0], [126, 206, 81], [231, 216, 197], [43, 45, 44], [179, 202, 105], [255, 255, 255], [0, 0, 0], [228, 25, 55], [228, 25, 55], [241, 236, 53], [255, 82, 71], [255, 255, 255], [65, 174, 255], [0, 0, 0], [0, 248, 245], [252, 191, 23], [255, 255, 255], [252, 191, 23], [0, 0, 0], [255, 255, 191], [228, 25, 55], [2, 122, 94], [8, 56, 136], [0, 0, 0], [252, 191, 23], [255, 255, 255], [255, 255, 255], [161, 29, 42], [33, 31, 21], [252, 191, 23], [8, 56, 136], [36, 27, 10], [255, 255, 255], [0, 0, 0]]"
});
define("text!dat/mahog/data/ids.json", function () {
    return '["-Ac81W-ZQDEC", "-sFkv-rGTJYC", "07LTDdpMZfYC", "0gLzGn-LYAQC", "1_BxUHJbK-8C", "1eVAVRRUnkAC", "1rW-QpIAs8UC", "2F1FheWJnhYC", "2T1NZUUM5JYC", "3_bJKlAOecEC", "3riJYW4TMeAC", "4e_QO0lA0FEC", "4lMynL91Mw4C", "53-gp__-Ni0C", "5sZdIZ0GBJ4C", "7-JfDlNcvhEC", "7VWZRVvoE0MC", "8QzD1qRZ3f0C", "9Oj3zPOMoiEC", "9z-9ufun9G4C", "a-apCPdumpsC", "ae89cJhLYJ4C", "afCxg5sogvAC", "AZ5J6B1-4BoC", "BATd_O0z-r0C", "btpIkZ6X6egC", "C-xXxfEAnzQC", "CYYnmQwmT2QC", "D79cOmmeQr8C", "dCq_E2MSODcC", "deaRm0KqhhsC", "dFlImpewmqUC", "dLo_GyEykjQC", "DpqPwAk8UvYC", "dxumVrUrpYcC", "dxXAi7rcRwEC", "ekJA6MZoH40C", "Eok8kGCq9rEC", "epDlSPRlP64C", "FEL8DlqjYEkC", "FN5wMOZKTYMC", "fnkCJBTdJekC", "FRx9Z-8oLKkC", "GKPktrYG7sUC", "Gqo5IlbVj2MC", "gszyGuchgQkC", "HpydZ7Xl1xwC", "IciSK2hKiQ4C", "injpY-EerZgC", "Iw_gHtk4ghYC", "JHxxM6mOAAQC", "KcOo6u5EKR8C", "kcsqGna7fBIC", "kEH1Js5RC_8C", "KosqNyzeyccC", "KPP6PhKAJgMC", "kSpQvfX1BSoC", "LBBhikJpLjwC", "lGS9Lbv0PdsC", "mAiJ8a_vk3QC", "Nhe2yvx6hP8C", "OfF0qpEoSrsC", "Ojqi8KbWuLwC", "PFYBPAS3LIEC", "qE2FPaaAa6wC", "RAUKBvP5OfgC", "rIj5x-C7D2cC", "rKq8bnUK3WoC", "rPoBYx7hRB4C", "rXeG6ivbdIcC", "sfC0p0Y9wY8C", "sTuE1RX6G7sC", "SWZ4FCf3LiQC", "T0u3mLgB7Q8C", "T5UpCOVOJboC", "tDi1X___kA8C", "TG5DXNXv2tAC", "Tu_2B0XdSW4C", "txhd-EAf4aoC", "ucpxOA3LDWcC", "uUenyaHxJfMC", "UvK1Slvkz3MC", "v2CrBj-MSg4C", "vRY8uYQUjDwC", "vzXz40IXEpIC", "W_5-RKxftbcC", "WcIJcNFzgqgC", "whdtOuA58e0C", "woDUFtbms-4C", "wQKyLoDT1RUC", "WrL9de30FDMC", "X4Z-6_UjUK8C", "yBDBEGBIUmgC", "Yz8Fnw0PlEQC", "z90HnZYAt20C", "ZfiREZrremoC", "ZfjzX7M8zt0C", "Ztp-cUw0jowC", "-3jZOkEF4hgC", "-Hw78nmNNhIC", "-o_a6Wh0hgEC", "0NP8hnGNjAsC", "0tQjH8yzrdcC", "0w2UpJzBamoC", "1amOE2BYvIYC", "1Mi8DZxNQEYC", "1MiZBNgHeawC", "1O3wuV4QBEAC", "1Qgt4oyMwJQC", "1qPnYFOtQC8C", "1T39-GfAWrUC", "1tqRGIihqw8C", "22p0JuQjciUC", "2CHxMUO08SAC", "2CU0N01MKq8C", "2jNwYjcIK6IC", "2JQW8SeseLQC", "2KERPNCkMC8C", "2KXCdI-p8xwC", "40eRknMj7W8C", "4kLJkLerSaAC", "4w0mcCMQfFoC", "58whfHOwXd4C", "5GjvwsQaJpsC", "5IH75VXZxU4C", "5NDU_8ntroUC", "5Oe6sjt3SWMC", "5rF_31RVTnMC", "5ta4u1iljDQC", "6-8joI_R2DsC", "60HJ7NklOGMC", "6BObU0ITL2MC", "6HDSdJtYpj0C", "6l2jAyf5IYsC", "6rfN-GeNlFgC", "74DRCVfzqkgC", "7A97laKeCecC", "7BUf0xhBN8EC", "7VWZRVvoE0MC", "86J0F9GsOAcC", "8fp1A2s6aQwC", "8jWTiB4UdQAC", "8QzD1qRZ3f0C", "8yD6wK7jE4gC", "94IMznRSTBcC", "9hvD2_TY0OUC", "9IQFh2qW9b0C", "9nFwTXKoS6gC", "9OgS6ILrV_8C", "9STXZ76dtkwC", "9WH1XR0NT0kC", "_am5au812vwC", "_M5RkbOs2EsC", "_MAXmVxrdasC", "_Q313x93xVIC", "_RWp0PuQ28wC", "_VXG8DuU830C", "_zr2nmsI0lUC", "a2iAh-KFdIgC", "Acvu5r1bmtIC", "afCxg5sogvAC", "auZXJuwLw8QC", "Aw4tOs-x85YC", "bFw4OjbdPdMC", "BNZ2-nzmQ_EC", "bQidDvWJsAUC", "BS6sAEtuuqYC", "BtNheyB7b_sC", "BvRtL2-qGC4C", "BZopNYe5-qcC", "c8WH6c7_RP4C", "CbJvlgHtDyMC", "CdvXLjqAcccC", "cfi0mLqWXGoC", "cl9kgQmqj54C", "cocVLbFkgyQC", "cQ0ciqF3F5gC", "CqjBCWV6Eu4C", "cr5TUCKGQ9YC", "cWWzQTVn6eoC", "CzEy6ernA3oC", "D4MTMYK4X6wC", "D5H6yvflq-wC", "D7_rJYZSi-sC", "DA3SRxogVOwC", "DDAg0LOkCjUC", "DduYXMlXgPgC", "deaRm0KqhhsC", "dELO9Pc3P50C", "Dga98586A0YC", "dKIo6D9yh3cC", "dOpZTJRfF04C", "DUcbyaGlYo4C", "dyNsQeKZ8hIC", "DZSFP5eMhDgC", "EaLYoCPqjrUC", "earytjxi6pEC", "EbquUB1D6B8C", "egD6t5_Hs_gC", "EQxgH5qLw3UC", "eTi6u-MS12kC", "eubyMCDFlu4C", "Ev4JvCyTfLkC", "evgsqlBVqr4C", "ezFPVu1MvaMC", "F5Y_QjkEu1UC", "F64IvLLwzM0C", "FCetHOb2j-MC", "Fdi-l1CsLSsC", "FIqEEO1Kc1EC", "fMtXDt1tS_EC", "fNl1sklg5RwC", "fs-cTvIegLgC", "fT8mMCUDlsMC", "FXPtglTFvKIC", "G0LZTx33-x0C", "g3x29UP5gnsC", "g44Fodu8NbAC", "G8GOS2_QwM8C", "g_1wN2RzTlcC", "GJG2O78xdbkC", "gLtfEvtrkCgC", "GoV9Aha9IhQC", "gsmalZyiNoYC", "gt7EQgH8-b4C", "gWu8_LXO6A8C", "GZWabG2SWj0C", "h6Yrv7Sixi4C", "hAWbMy0IvkkC", "HcDMKrh-_fEC", "HGnopNYgga4C", "hKzjNMFba5gC", "hR1beTwTgM8C", "hyeAO1KHjQoC", "i2Gfu-algOwC", "IDKNVdWVMlEC", "ifc8QVdWijMC", "iILGWUvHUpcC", "injpY-EerZgC", "IPJhaDPuGw8C", "itSPLM6udREC", "iUVuTbWUfQcC", "iWJsOlQvArIC", "ixaluvF7Mx8C", "j57S7Eo23kEC", "jhZ8R7lF_NcC", "jrOm0PEAQzMC", "JryN4EWam6gC", "jUW_qLMB9E0C", "jwjXltLIqRoC", "JwPsDrGz2oEC", "jYy2laAs_Q8C", "KD40sIOJ-SYC", "KF3fzxVYlpMC", "KosqNyzeyccC", "kV8Q3AiF14EC", "KvC7l-lo_JEC", "KVEq58n6iF8C", "KxLe4Y5_VqcC", "kXSKAfy5cQYC", "kyGTagqcyAcC", "l5WUWamxMGMC", "LBBhikJpLjwC", "lez8urgN7IsC", "LIoERdpnFUQC", "lj5woI0AjhsC", "lYgxhcsR8NYC", "MAyXHjLS7rEC", "MeO8b6S9lb4C", "mJ7-gzmDRo8C", "mJcOgKNGvzUC", "MKKPFqc3WqYC", "mNxe-SD0Qi0C", "mp6P88ff1YEC", "mpEBZLxaLJQC", "mRX160l72-UC", "n7eJZppCVjAC", "n856VkLmF34C", "n8jS9Wlgs24C", "n9IewwIPn-kC", "nej0pO6KHP4C", "nEjXAmEBAi8C", "nI3JXcSjvwsC", "NliRGM79z0sC", "NN5iI9oO3N0C", "O0WZTnDSDjMC", "oB4CDtS6N-8C", "oGseFpi7QG0C", "OmUJebLiytYC", "Oo-TBV4ezYMC", "OrJOvJljhNAC", "OyM3-IXdmJwC", "P7yZUMBcbxAC", "paSe7yZGUfEC", "pCP2VfWmEYwC", "PlnanYWr_lYC", "pUscmtndV7YC", "pWmV5Vx3cPwC", "Q9D80kbsKZ4C", "QKelKi8I-9YC", "qkubqKS3gagC", "qVmMyvApJHAC", "Qy7g-reIgaQC", "r3dgkm70ECEC", "R5Aczn9EZ4MC", "r7y3WIpuCD4C", "rA3Th92pTT0C", "RAw0oLs5os0C", "RC0iwqo53EgC", "Rhfi5GXwg60C", "RIPdMkiKipMC", "rjaedm_VqgAC", "RkiBDiK1b4IC", "rMrTE_JoI1QC", "rRQ-ln-SYnMC", "RtuUTyHr-5wC", "rUSEaBvq5sIC", "RW-mWK_XYZ4C", "s-IKDw_xNO4C", "s0YrhxJVw68C", "S1aY04SCeCcC", "SRFbLHcl808C", "sSLJnGMUw9wC", "sV2Zne7PFboC", "T-lmcZL_bXIC", "T53iIqrOcbIC", "t9QNVpO7X14C", "TNu0c8XiHc4C", "ToEsz_C6UsYC", "ts0EsIYrVc4C", "tU_CAUXWpCsC", "TXnD5iuM6DkC", "TYHPLULRAtAC", "u6_s98dIm30C", "uBJebCyhhmgC", "udN6caZEJesC", "UKdIMjjZDO0C", "uMq7puR-NrAC", "Up4x7U20ZVUC", "UPm7Nlxg-O8C", "uvr8XVTzrNcC", "vHx4ceDLapAC", "vyFFdl-1m-AC", "W8uJGI8se_QC", "wGgmGnc2TrEC", "WGqj5MIQ1KgC", "WhqeFP8kcOYC", "WjlMfoNKZoYC", "wlz-PwfSIdMC", "Wnc3V5m9kqgC", "wP22JQd-IjkC", "wQcMDdFC1QEC", "WrDB5XZbXZEC", "Wx00mzMRGH8C", "wYbOlD2Q_lwC", "WZEAkY1LdtAC", "XaozCbxSFbsC", "Xg-KfK7aFgcC", "xLx9wXQiHEwC", "xOi8USrW6M0C", "xv7381O0EskC", "YAv9Gv9ZIbcC", "YdtPYQHlJJIC", "Yf2UK6QUeAwC", "yHFQe17yggIC", "YLjHJNVZLnkC", "yoEZgkQxmsIC", "ySFeBcfG8AUC", "Yso319xUOF8C", "ytc1dnTiXUkC", "YuCyFqLYjyoC", "YUzwlDHiHPQC", "YV0IskcivVIC", "z-14BurnRNYC", "Z93OvsN2yq8C", "zbAJykg_ncAC", "zF6v7bX__SQC", "ZgVbSPYVs5sC", "ZI2qm9s7sZsC", "ZK8DGepq9DMC", "Zp_b7CdQnzwC", "-30E6Pjp4dwC", "-ydNYWGIussC", "0KIU3WhvK-gC", "1BnQaxG0YSUC", "1e_JFkI3DPMC", "1rW-QpIAs8UC", "26SwHFQblXwC", "2RB3j_YfEg0C", "2VEHl6rp1mAC", "2ZAptMWcCdwC", "3H2Xg5qxz-8C", "3NSImqqnxnkC", "3zWhu92ME1sC", "4-VCagWoBGAC", "4psb688KSskC", "4Z697q04X9wC", "5NfZvS8gCeQC", "66Dm4p1wxqUC", "7-uxOdOgbYwC", "7Ga0TEYaScIC", "7NeZeQ6qHq4C", "7NH5yNWMCFEC", "7X3JPMMPqYMC", "82-zKnPHa9YC", "8KFpjnioTW0C", "8Nc8FhxNF8IC", "8TyZAoyMiDsC", "92smAMgJiMUC", "9ne3r2XzbzEC", "_LhvHY7GACsC", "A3snVoXwD6oC", "ak5fLB24ircC", "akhuVP5NY-kC", "AmRxT9mHfkwC", "aWaehpOG8voC", "BmPPAjGaDuQC", "BVLBu5QR5YMC", "c-3MsLNC-vkC", "ceYlEs6gT3QC", "COJVopOZblIC", "cR2nhrCzyWwC", "d0tFXQur-q0C", "DCqFYOrGyegC", "dI66B5IY2X0C", "dIGizhIvCfcC", "dxumVrUrpYcC", "eoy-khRFxGUC", "eParwQ0YdrcC", "EZH-cSO-UkoC", "F21-T-BYprQC", "FFgY7hnWOWsC", "fH075AmvTVUC", "g0pn1ambbgkC", "G2AaD6PvdsMC", "G_GbZ6rDUrsC", "gHmb9E-w88kC", "gkaUu__vNDQC", "gKYeYvWpapQC", "GQIbnp4yQJEC", "Gqz3UF5FbI0C", "GVchqY1ZaB0C", "gZMTo93ZZtwC", "h2WTgw_Qs4kC", "h7NewH-XWgUC", "HGDhybuy45sC", "hsuhaO3oQ0kC", "i5lD4Y6Sbm0C", "Ia0W1gg3aqYC", "ib9Xzb5eFGQC", "iC-NUBtuGeQC", "ifocmqVPHUwC", "iLxklckK4tsC", "iM6sos2U554C", "in7BSJlU7z4C", "iykLVJAK49kC", "IzzooXGE6GgC", "jBFmkR5xy7UC", "JklJ0ZoJtmAC", "jNa10OYRlpsC", "JRzC5Z6wyLYC", "k-dTFB0B5CUC", "k0P11ZxGN3QC", "k7vW_dRCS3UC", "ka7VEMoenmMC", "kF26e_S6l_cC", "KF3fzxVYlpMC", "KZ227__Vyl8C", "l0qEwNqmRgcC", "L1j8ZO73fNgC", "lbOkUCVNSPoC", "lH4Mjm1YcakC", "LiC2foFeXQYC", "lNJ93YBrpzoC", "mfaoT7klxX0C", "mjasWuJANoYC", "mPfE_-GTAEsC", "Ms_VAVC4IJ0C", "n19OZlQi0NwC", "nEcVIiToC8kC", "np1RwDQfpjsC", "NuoltFFAIzUC", "oaQ9zYKu0qoC", "oFTYD9IHX5YC", "oILn8Im-GbsC", "oQoNLVqZzQYC", "oSsIfoDQHhgC", "oSXEwOdkpmAC", "p1hd3kN0odgC", "PG0ndz-nmywC", "PGMnEr9dLUoC", "PjeTO822t_4C", "poWks_q7X_oC", "q3XIFK4zQQcC", "qg61T_I1mwsC", "QgzBqhbdlvUC", "qJQ1BU83XQkC", "qR-d465uX3cC", "r23bFouhu1MC", "RiH9CEQZcOMC", "rJiV1q1SDHcC", "ro7X8HRyuEIC", "rPka_QG6Fp0C", "RRUkLhyGZVgC", "s6NB6m1nAK8C", "s9QEjj3Lx30C", "SfAgn7KXggIC", "SIexi_qgq2gC", "silrVTw9E2sC", "SvVb8TvuqEAC", "TyPO2Feqjf4C", "U77um_h_dgcC", "UglRu-CK0M0C", "UNxU-2s2sQYC", "UzRHdy2GTx0C", "vbGoBIu8UQAC", "vE5MERHPBU0C", "vmv3ZUg1UJUC", "VRFqzM3XB3oC", "wCnHmQnPNmwC", "wgCCzO5N4HkC", "x3IcNujwHxcC", "xCAD8ashi_UC", "xM7Yo1r1PhIC", "xmYBTQcF1TsC", "xQo7DTj-YnMC", "xqyj-xnch2AC", "xWjTZhw1MiUC", "yBDBEGBIUmgC", "YkHn8ogq9JMC", "yNFN1OpnkBkC", "YoVpW0zJIgYC", "YOVuQFXNcP4C", "yv5tR54Qs6sC", "Z1AJB-S8RK4C", "ZjYP5o18qQUC", "Zr6K7pxtc80C", "ZV-GPw5BYq0C", "-a6JfQ3qd0AC", "-aySX6b8FSoC", "-tRVlibWwrAC", "-ZacVHw7QhkC", "05capLEO2ygC", "07LTDdpMZfYC", "0JMqA3_JQ30C", "19vnyvh6Y8IC", "1HLKgQCccTsC", "370LF2kzw1UC", "5IaLGlxtqsAC", "6gfDfhmmHxMC", "6SF-8gmg_BcC", "7N_nmMFx98oC", "8H8WfZ_AyU8C", "8yG5UrYMQ-0C", "9wjlOC_WhHYC", "9yN1btNTj0IC", "_-xSfyrwxuYC", "_JDJ0H4BIzIC", "a2iAh-KFdIgC", "aaP4yQW2S9IC", "Bi4Z_-GmydcC", "BjOQVyNQLD0C", "c1wnePZ6wmcC", "c20ilAa3EMYC", "c3U-w4cqIMUC", "c5oks2yFukUC", "cFBUx1i73X8C", "ChLZ2Mdpdr8C", "CYYnmQwmT2QC", "DIxJQdDgS0QC", "dkYP9xtzUWQC", "E2TZw2z0MvUC", "Et9gd7otqj8C", "F5bpJ9vZhfwC", "fCunxPYp_OAC", "FN5wMOZKTYMC", "FWGsyxSc8ccC", "fzUyn3NCsZcC", "g63GBF-KPC4C", "GiFUTD1su7gC", "GxfgPMXA7SQC", "h7TLfHTGRMEC", "Hc_rTXEjeWsC", "Hjn8usbgSOwC", "hlJbtjEy7UYC", "iaHHHT4sa1MC", "IAuxsiYEdIUC", "IGRT4SQmq2AC", "iOpmCbDoyGgC", "Iu8XmX2xYXgC", "iUVuTbWUfQcC", "Iw_gHtk4ghYC", "j7YmVKxMJxQC", "jeCiIfB7da0C", "jHmjvIR9xZkC", "JjDVJGxtVqsC", "JrPYwt8yMokC", "JuG4iVilH3YC", "k9t-NCdfNH4C", "kAA7M72tFHcC", "kcsqGna7fBIC", "KIxo3jxM8b0C", "kSpQvfX1BSoC", "LaXY4ArFPgwC", "lw99Oii9R90C", "M-IRbSratpYC", "M1AUC4TY4u0C", "mBnlTKOVhi8C", "MmJeXfkFNKwC", "mRF4H71Bwd0C", "MRk0e0H27-oC", "MtNQKRG6jZ8C", "mTsznApVyEwC", "niZRM7N-1yUC", "NLGfv0jAgtgC", "NmF3c2A5k00C", "nu5L8RtxQ1kC", "NwwtNg5Xo4QC", "oI3sT-JddJQC", "orLvFmeh9JcC", "OtZGZNMHUA4C", "OYC_9Vlzcd4C", "P29bv8K6lXAC", "p8kbFmwUsdgC", "Q7Jk307w-XkC", "Q8g3Vx41ePwC", "QE364RkPna0C", "QmQiz87q0OkC", "Rdwosb3edv8C", "rKby_-We-AQC", "RsAz01zeAOgC", "rTyiMVQ105kC", "rY6NA51PBfYC", "s8rfmpJ0yYIC", "Sb8QwBX1rJsC", "sbiC0dSqrY0C", "sBPk89_MbRwC", "SxHnfLhyydoC", "t85ymw92is0C", "TfkaULToI2EC", "th8oeSCV6Q8C", "TkVqqMuZpwEC", "tmVAmITQrmIC", "tqL-dZ29ATcC", "UxpV536d5hEC", "uyHrEAEC_YMC", "VaPhkASeJ7IC", "VDin06S0V_8C", "veGXULZK6UAC", "VF588BtEzCcC", "VFPESwN4cwsC", "VSGv9ygG1poC", "vuVOwGOUVYEC", "VWwH9SboEQcC", "W2-1yYXtMF0C", "WGUNSP-LaNMC", "XZK2FzHiA8YC", "Y7cDOT_XaY4C", "YKGwdLQmVaQC", "ysEp2IhHrMUC", "YSMIxY6iEKMC", "Yz8Fnw0PlEQC", "ZfjzX7M8zt0C", "-lBr4WIvPz8C", "-Zc3V2oOqK0C", "0oXB7aFQ1FwC", "105JppJWUk4C", "1C3yNgqZnUkC", "2weL0iAfrEMC", "3NQhBTNKJB8C", "4msZ3cQHO8gC", "5f4Z1Cv2X84C", "75UTwaSKHiAC", "7XUSn0IKQEgC", "8IN3usGqzPYC", "9-8jnjgYrgYC", "9i1WgopfVToC", "_-xnEDNPxwYC", "_XzEs6TulJIC", "a_tWDLdD6B0C", "ANqnTECyE9oC", "b7WKUva_gjMC", "BkDxC_O1WisC", "crBzYLSu34gC", "CXhEJGQsJ34C", "dtSdrjjVXrwC", "EFqYStz7lV0C", "EUcGc6jEqvcC", "fCZB0yBckTgC", "fhhLFcOZGBEC", "Fp59VWEIzFgC", "g3M-uf5pruMC", "G78tE7JjgDcC", "GuA2REeoBiUC", "H4GTzba5m1kC", "h4LRlPf5q1kC", "heIAUbZj-s8C", "Hxtp87Gg-dgC", "I7-IP5P-gdMC", "ihYA7R1ZFWcC", "IQ3PJY7zs6EC", "j6CkhZ862q4C", "JHEM7lZOm1MC", "JM59G2oSN3EC", "jt7-35zypq8C", "JT_F4bJYStMC", "JypQSHAXNi0C", "ktm885vGIXEC", "kW0s1IrlbnIC", "LzgNHuKKGJIC", "lZRHFamrPTYC", "M3ha_ErsG8YC", "mShXzzKtpmEC", "MY2dCU2KPeEC", "nbiRSagoci8C", "nNj3pK2gna8C", "nTQNo45R158C", "NxykJ3b-zqwC", "p3pCgbJp_F0C", "P5ttR3SgsRQC", "P9e_9ks8I-0C", "p9vqjmOCdUoC", "PQzYdC3BtQkC", "pvZVbw84SH8C", "PYQivWd-i8gC", "r4s1QTHpQosC", "rNRlR4RGkecC", "RzDjk8u7rfAC", "S2-4gQKDKUUC", "sJl-nUYdZjgC", "sXZiavO78M4C", "TKh6fdlKwfMC", "trowcj1wZ44C", "tU63RcoRCZcC", "Uo9LDF_ZC-YC", "uxvYqDtwx2sC", "V1kKb0RKhlIC", "VENrFSQFco8C", "vV9TxTSGA3wC", "xa2-b3bsRMcC", "XcOqBdzZCsEC", "XDSERMVMLTAC", "XLvQZxX1GtUC", "yFn_v3LT934C", "YOVuQFXNcP4C", "ys_V0MftVWQC", "YWzdzzjOahIC", "ZM7ltPetQg0C", "zMRUsLNt8eAC", "-BGKavU8jB0C", "-Gw6kWP89dgC", "-l6PDMS0jQIC", "-LeUV2wr2BoC", "-XwouDKyJ2gC", "0aFx3bpLoN0C", "0FpnqTGxykIC", "0RmKcoqS8P4C", "0XVcWB-FHCYC", "10WaaHcY06IC", "13zK4DhnCH4C", "1_H1PmGEUHkC", "1C-luCqJVhEC", "1N2ccRmpdaAC", "1VesjYo46BIC", "2uChr44meR8C", "3-ZMNssUxDAC", "3fkAazdFhL8C", "3KzJr5_U4egC", "3OzdC24R7p0C", "3y88ESO9Og0C", "43gGM7InIYcC", "4EcBLlS-_7oC", "4JblsQKKp5UC", "4t4uujcNcJsC", "5b8QUomZemcC", "5BNqwkATVFQC", "5ek0v2_F5j4C", "5FFNoSioPmcC", "5IFW0O9roEMC", "5P2dgP6IIkMC", "5ujdLj5Qvq0C", "6GA3srKNFRUC", "6KZN7xPj1McC", "6Xv2D77awK4C", "7BUf0xhBN8EC", "7difwFYeDegC", "7eHHDm3IbQIC", "7GmtwLcqjRIC", "7j7pbvkhm0sC", "8ihq0DCczi4C", "8sZxihzL06EC", "8tSYa32W5iUC", "8yJfpmKv_OMC", "90M5Tw0530gC", "91myiffbyewC", "9IHZI00LUc0C", "9OEmdcwYhfEC", "9R-aGrYdyzgC", "_ClUwFV0Q_8C", "_DrJ1w-4rZEC", "aCESCcbcSV8C", "acZ8Y4SaGuoC", "ADCJDNtWqfUC", "AedT3DFLkzIC", "aeM8liycEVMC", "af1vAKzcNHgC", "ajuGcS1hnFAC", "bKVCtH4AjwgC", "bLbG-5tWKlEC", "BMdjgQUXPu8C", "bosadAZI2y4C", "BSb0GJ3ZNIwC", "bT7PO16NEz0C", "BTAqqy5HM9gC", "c4QF4q-BBXEC", "c_zntP2OimkC", "CEfOj7nPGwkC", "chWFFmyeXoYC", "ci8ZlvnjfEkC", "cirqwlWIdjUC", "CkoZ0LZNyH8C", "cm2uPFGXJKcC", "cocVLbFkgyQC", "cqeKBaTQgLEC", "cS5LIySXISkC", "csUCOBuW61cC", "CUFJ6Jw2WQ0C", "D5nXAbSifIgC", "D5rP9U6DKPsC", "d5VPrzefkeIC", "D6pn6mX0w5kC", "DBw__rjJe4IC", "Dga98586A0YC", "dgW10li4jkAC", "dHlP3pvh__QC", "DjlBsZyhaQcC", "dKyPYyWNVMsC", "dNSOkGbW_EkC", "DqgcpdVuRgcC", "dSarPnb4i6QC", "dWB3v1XBsK0C", "DWokDfcc8jcC", "DWzqgi6lcroC", "dyr8nTjVnc0C", "E32Rk9Hp-AYC", "e3DZmcYvLpMC", "E8-kZZ7PrAsC", "erLFYbSqVvQC", "eSs337bclSgC", "eTqHAtbAzg0C", "F-S2Y1UZoosC", "FJVDXIJtGZEC", "g5g_FVB5vEsC", "GCJzF4slNHgC", "gd9doP1MgecC", "gg0AYyb659cC", "gYHUqzqdzE0C", "GYnZqBjBDHoC", "gZxH7AAkzIUC", "h0hAXS9btasC", "H405zLofpJYC", "h_p6vykYQQ4C", "Ha7Z5Ccio34C", "hc0ULBqlgVgC", "he6PtCsPI0wC", "HhhT1gNKaQ8C", "hM7l02o63xQC", "hPWiQZt5aRcC", "HT6D2fD4qIwC", "hVHYgJ5JccMC", "HZDipGVmK8YC", "i04gvDRlG3IC", "I8KVxbDmAfkC", "iLy66hcmkJMC", "ImiebrbUA98C", "IQ3PJY7zs6EC", "iqLlcSlvflwC", "je2RIdOsqOwC", "jK7EyaxrqjcC", "jNA25QH8SXoC", "jo0QDroYDGkC", "jOw31xuUlkAC", "JpZwVmnzUngC", "jQtsA9RjiWMC", "JsdJh5twEzwC", "jYSY_XuKVBsC", "KqTFXw9g1zEC", "KTbGqfHdlX0C", "L0qppDj5PowC", "lBhgrgRZDQ4C", "LCBLklGJH6sC", "LRAIyOKxmxgC", "Lrtuyrh8h2gC", "LXUeNVWZyZ4C", "LYmgxcx_AW8C", "lyNwEPs-bKwC", "M04TpCjQiDwC", "M3HVRDMmID8C", "m51VTRVtPNIC", "m9BQIig6kekC", "MdG5lTFeHVwC", "megcGzrJb1YC", "Mj1pmBvYbFsC", "MKeKWwpCToMC", "MlOWsTGRARIC", "MNHHJtWRB34C", "mtWfTJo93kcC", "n1-FFBWOC9UC", "n5-6VmSLEVIC", "NA4w9AMKSfYC", "nADfM6NuoecC", "nb3ziIO-GEQC", "nOY0ZCY9itoC", "NsF40Xh9KHoC", "NxL_Z5FAVzwC", "o-NDKn-lbFYC", "o7aaimpuALYC", "O9EI6Kja3CUC", "oGbyGKMBfR0C", "OHnbtpjmY_AC", "OQ2nTaHMm1IC", "p6Es8-7f_X8C", "pAxH-S93nh4C", "PdRWRBi41S0C", "PHON1TlFtoAC", "pIrCoCG0jj0C", "PLNkIxzQ-0cC", "PV5UO1ELsSUC", "Q0VWgW9COOEC", "q2ZMsxvdeCQC", "qAo3q623slUC", "qd0SPoOqKfIC", "Qdd_BMDWW5oC", "QKb0KIOWwZYC", "qMWh5T02XGQC", "qOoqLMLp51kC", "QTjtaM_XjdAC", "qUfmLRZaSQcC", "Qwufwl4w3NMC", "rCQQ2ZSijUkC", "rfSZReWcp78C", "RIr285y9nRQC", "RndTqOYSseQC", "row2qL1qCoEC", "RRJvRT17EQIC", "RypoUoZjNkEC", "RYrsI5wMroIC", "spkEKSsfgSQC", "STmAPBqf5wMC", "sXq7k0XKJSQC", "T5KxjCQhc-8C", "T7raezEZ1bEC", "TCiRo20x3Q4C", "TCQQ6f-MrpgC", "TeCJplpETVoC", "TeilmkSRH_AC", "tf-MGA32GSIC", "ThOlFtXaq0cC", "tKLvPAScbiAC", "tqH-RUSTH40C", "TuoFvFXf3NYC", "U2pksdgrZUwC", "U8FQLBxjI2wC", "Uea0fuqZgqIC", "uNr6MXlefT4C", "UsMPRKldMzYC", "UTdSrpGonvYC", "uV_iy5VuVOEC", "UztZxSRJlV4C", "v-9Dqz6xYlkC", "V00KDCcEbfcC", "v5Wrowmc8csC", "v9FitTPWAk0C", "vErkAGvxVHYC", "vfU3Y7mKudwC", "VIBrGVtNqb8C", "VInqwHnDSd0C", "Vj7NTmylUlsC", "vM7j_cCzLPQC", "VQ8pGE3QYSMC", "VttvrPyt-EAC", "vxN6_lU84IoC", "wLg6sj_gF0kC", "wwikOB0tGKoC", "x1f94LvsI-UC", "xCA2GudEI6QC", "xh1zqeohaXAC", "Y-PzV7ZO7Y8C", "Y0xqbKSMB2UC", "YNnjSYuBGL4C", "YQLGVTN1SvYC", "YQzEvuNSAj4C", "Ys6KcOuCG24C", "YV0IskcivVIC", "YVWmKC8f_KwC", "z8j8Qrk4Ls8C", "ZbnLAfbazQ4C", "ZBpmk-NbkKQC", "zGaRpi4YdIQC", "zjgCC1ymlGQC", "Zt18aFbo91QC", "ZVvK7yp1FzkC", "ZY6bC2BPcIAC", "-GZj4J8xCJgC", "-L6Mta5ndNAC", "-PvkRdMbuy0C", "-qMYJX4_8aQC", "1FjUdrA-VFAC", "1Tny60vKmUUC", "1Y1BQkVqjtgC", "2eSpL8ZL5BIC", "2KRbyYAKQ6cC", "34L752pBlhsC", "4Debu8jRvrgC", "4PKQ8Pa0Ul0C", "4tURrenGW2kC", "4Uwrw19KVOoC", "4WqmTRin4ZMC", "5AJmojcmFE0C", "5o1ZHCjHkFkC", "6AWJpoorWoQC", "6pmBjSl35egC", "6tqHrOu-4cUC", "6VcdA01PPMcC", "6wh6ml1Pt6UC", "7mtBRAEfXvIC", "7xQpBzI4l58C", "8H91S2sw9QgC", "8IDEiNTtV7cC", "8UOzg674kdkC", "_6GePgDGGK0C", "_f6j6anyQ2MC", "_Qjfxl6_QgYC", "_sn-o-LMeskC", "A9KGpN073P0C", "abyFoVaEKYUC", "aDM4SKZCatcC", "aRDYXYZfvDkC", "B1zhqUEcPkgC", "BiAd4Q6aSEUC", "btpIkZ6X6egC", "BuxJD61uYOYC", "bzCJkaTSeHMC", "CCJhjoq9nBEC", "ccWmlymJEq0C", "CdTJvxJ77XsC", "ce89NOKPkL4C", "CP4yE9IHgLYC", "CrHWOtkHCwsC", "CWgf1t96jAkC", "dfInNTbJsk8C", "dFlImpewmqUC", "dH1sAxadZTcC", "DOLsxgRAqhQC", "dRkH_H-EFKMC", "DWqmN5NAiP4C", "e4_FQv-rmQgC", "eAyJAiQHkMIC", "egyCSa5tJTEC", "ep117AqTGW4C", "EqgV2wJhi1cC", "evvA09RzZ0oC", "Ff2HadKdyh4C", "FMU2sVYK10gC", "Fn8ysAJWUnIC", "Fp4S3oEXQAEC", "FrslsCdrL_oC", "fshvh3jWzOsC", "fSvZepCCABUC", "g63GBF-KPC4C", "gbIG-epQgyYC", "gBKtKIT-GvoC", "gqPNokxPgMcC", "Gz67bo-EgxkC", "h_hGQNs9GHwC", "hE0FKGDTurYC", "hFSx37SaQRoC", "Hl2xvndpcR0C", "HWMD4dsbRnMC", "I6BQ9yxgSaoC", "iDlrydEEJHgC", "If3o_UU9s24C", "Ifz6j6_T-s4C", "IHtQFK_sBqcC", "INyUQOZZl58C", "IUV--lkfN7kC", "J1FmPbrDgwIC", "JEj7x8eZC_oC", "jrnLxhfW7gMC", "JXm_CP3T5JcC", "K1-LL9vlxZcC", "k6mPvBQEm8QC", "k88UDDDvrS0C", "kBQNNPxuu70C", "kcsqGna7fBIC", "KfJmaUFwkMcC", "kMzH8iHyyrMC", "kO5794qbOe8C", "Ku8NG5OgmlEC", "kw2whCi_CgQC", "l_5NkzG68RUC", "L_u07lSB0bcC", "LHWE7tFmMT8C", "LP3pux703ukC", "lSybHLQbZ_kC", "lV44_bf5YnoC", "lw99Oii9R90C", "lzsQS5FeJkkC", "lZu2S7MMfT8C", "Mb9sHZJDpO8C", "MbW3_eSDGl4C", "Mg5jM9Bpz2YC", "mUEOJuwUAOkC", "nbITlF0ZiSMC", "nJ09OZlYngcC", "njWQqggGmRQC", "NuMx6tmf5iIC", "O1H7BVBsK9oC", "o2yNzFVc59cC", "Oe21i1ChvFwC", "OHclhBVv-X4C", "ot-0G0Q7lEYC", "oXz1ZblCUIUC", "ozol-RP_SK0C", "p76ueH9PWJAC", "P7Gio2slQFUC", "Ph5fp30QR9AC", "pK43Jn0RmTcC", "PllWy31yfN0C", "pt660yLyXqkC", "PvUsMAChACAC", "Q7Jk307w-XkC", "qL0GQnyPDw0C", "Qt70g8C3fXoC", "QUNoPBsxf7AC", "qZiRVmzf6I8C", "r0vgbVwxNsUC", "RA8s7kh-dSsC", "refaXw3PHeMC", "RFWfrsUueekC", "rIj5x-C7D2cC", "sCqTLoPnXp8C", "Sf2hhOWKUjwC", "sfdSGwRYwhIC", "sgYB8r45FHcC", "SNCdbj8pJg8C", "SOJtFIjyBWMC", "sosiolVa7uEC", "sxh_DW4s50wC", "sy6mx4xyvRQC", "T1I5uvZGzM0C", "t1kIollr8fQC", "tj4jpCbifaIC", "TOXraAXIqCUC", "tuspQELrwhIC", "tzItGpE83FUC", "u_ly5iCCR5kC", "uBQQmyyK6mAC", "ukRplJvGSD4C", "uNKImaUpW24C", "UNTaN-NqhpMC", "UvgGzh-6t8cC", "ux2wduAY-JcC", "UXn2vd-jsv0C", "V-HeFwF7UakC", "vaiHc4-caXYC", "vAMDDsz43RUC", "vkozsZ3-OwkC", "vV5TcbVYPfoC", "W-Zb18DC8d0C", "W9d41JPUobkC", "wtj4uu2Esr0C", "X4Z-6_UjUK8C", "xcOhW-8ceN4C", "xEKIryULO6wC", "xEYBhKlG-H0C", "xHWgnMsz8UIC", "xlXkiXE8cX8C", "y9LkuD5JLdgC", "y9S6PuuVJG0C", "Y9uJUlGwJIUC", "y_j7eSwRuVIC", "YCBFxU5rGzAC", "YJDL7vhpJvIC", "YoryriygeZgC", "YPWuR6Spo1MC", "YrET8yQqIM4C", "YX57ZkCEJNgC", "zBU58c4KpREC", "ZCyqpCqeIiEC", "ZEyWIM5tDCAC", "zezJOW8XFc0C", "ZfiREZrremoC", "ZfjzX7M8zt0C", "zIqZEjsSyIcC", "-4JaSBhEmmgC", "-76GjNpR9VUC", "-ejuRdu1o0sC", "-F7oqyLU8yEC", "-L6Mta5ndNAC", "-nwAWTMtiVMC", "-P3klEJmyYoC", "-PvkRdMbuy0C", "-RzDku2uRXIC", "-sapXk7dWcAC", "-swgfIGSElYC", "-TnVeCjM2BUC", "-VqbhDPE6RwC", "-vWT6E7gwRYC", "-xJpukMoY2kC", "02Xig2qmvr8C", "03ugn0KpZVkC", "07LTDdpMZfYC", "0E8JpmcAWgIC", "0J4QzTKvMWgC", "0mGCIWM1pOoC", "0pLN4o3jnX4C", "0qYJ1G5DCkYC", "0uRTfS1Tgn4C", "0yF95v_cIi0C", "0ZOQM0b3CIEC", "1bV993QDiRAC", "1CCCWMqPtzEC", "1CZjrwiEqWQC", "1eVAVRRUnkAC", "1h48H2_RlusC", "1KdwvK9lLVUC", "1nN5hXqGUpQC", "1nU7NLCQGQgC", "1PgKPuFIz1kC", "1QAHs3JSVnEC", "1Tny60vKmUUC", "1wA_9CKPlsYC", "1XfzbmbLnwMC", "1XtD9HhZbOQC", "1zUMv3Kv6b0C", "2-SeHlvtIXkC", "26GWYL2CpN4C", "28ZTgahpo5MC", "2hLRAkzKHjIC", "2X59P60QHnYC", "32yoIgkRJOcC", "34L752pBlhsC", "3E_xUWylr-UC", "3h9hkTsLvBsC", "3jVps2Z9LQcC", "3pu3QWtuQyEC", "3QPCicPagmkC", "3u6N2cT0bOAC", "3uni7ltr-EgC", "3Y3Koy1GyxwC", "3YJoqg9olpYC", "49Uk1oEf6JYC", "4CLIORno1rAC", "4coo9ddRaooC", "4F_TQ00gjfsC", "4GIvo8QVTLMC", "4gOtkoiJIjEC", "4GXEmkTTUpoC", "4hg0KpqgjcYC", "4IuaEfruDEwC", "4mOrEoLlJQMC", "4ny3c9qR8X8C", "4NynkhaQ8W8C", "4qonczmsK7EC", "4tvdBDk8JX4C", "4Uwrw19KVOoC", "586WOqyl34gC", "5B0VAeZsoVIC", "5ckoF81np3sC", "5d-kBuaNG9UC", "5gdqw3ax1KsC", "5H7RXIuvSE0C", "5n2e3UaU4PsC", "5ohxQyl4-O8C", "5uD_-xh13V4C", "5v08C5_ZZTAC", "5X7VZIx48PEC", "5XdIgMWhmcoC", "608lEnyfObkC", "6AWJpoorWoQC", "6AXV76B7GTIC", "6gMmbJoCPyEC", "6jfyVfKCmUoC", "6MtRNh_cgSMC", "6u_VRZHH4GIC", "6ue1tbd-dTQC", "6VJ7KzN1x_wC", "6wh6ml1Pt6UC", "7334_AEUgVgC", "74JpqIiLifEC", "7ER4mPFI9osC", "7EsxsEtV9sMC", "7gXh4VqSVUcC", "7ksTou2ZkUoC", "7mtBRAEfXvIC", "7slan0QnyRsC", "7SooukPjhjwC", "7Xf-oGYr5V8C", "7xQpBzI4l58C", "7ZbCilZXmmAC", "8fjvEUIapQIC", "8Fy9NHweW9QC", "8gelKH734-oC", "8H91S2sw9QgC", "8HdUyL1l1ksC", "8IDEiNTtV7cC", "8OXdc4vlzs8C", "8PBJOdv2H7EC", "8Pmi9jxgQxgC", "8rBdtCkit9AC", "8RDs6-P8UPAC", "8rOvpN2d9TsC", "8wfGMsWWZ-gC", "9gaTqmfdPQoC", "9JmKpUr-EFsC", "9P7h5rB2vQ0C", "9Q0_5ogipFsC", "9VYuMmcxSYcC", "9vZ64MLmVS8C", "_1CxStiRr08C", "_ALvS8AzgTAC", "_B4Bef8FTFwC", "_bPIMadGwewC", "_ceeVvxULncC", "_Cfi6UiyNlkC", "_eohr5XMnBAC", "_f5KcJAyhvoC", "_GGSLrAQYIsC", "_h4Jf64pDyAC", "_J18TXGiojQC", "_jeprgK5J6sC", "_jueZ7Tz8ywC", "_mur2PUOp8wC", "_NaVar4pJ6cC", "_oWNWR2vwysC", "_sn-o-LMeskC", "_u-czkvqm4sC", "_U9YvW-NfvIC", "_VH9YGAUbtAC", "_z7RaEmKC6cC", "_zhwTYftf-sC", "A-nGXqb5JSYC", "A8KuchLCcYkC", "abyFoVaEKYUC", "AD1Wke2hrG0C", "AfD1s_2f1FEC", "AHpEoxYiK9AC", "aJVuN5nq2qUC", "AKA7nDO9j48C", "AkeKKRbJcsMC", "akHTeRj4JOUC", "AkQjSsjvkTUC", "AlKRFqsOeZEC", "AoufDxH8x74C", "aov2z6vYpzMC", "aRDYXYZfvDkC", "asRKDggVx54C", "AUbEMUpDHjMC", "avi_Z6Gh8qwC", "AW747fOkrj0C", "aWmi9nbSr04C", "aWRCZ8rGnhkC", "AY1iHnq-xcQC", "AYi7qf0jsOAC", "AZ5J6B1-4BoC", "b0Hvl7Q_BuIC", "B1woUWB0zoEC", "B1zhqUEcPkgC", "B4dliT2lOZgC", "b592OcmrEiIC", "BBKEcM6M_BUC", "bBYG-E9nRykC", "BcCNJNcixZUC", "bCosFPTNyRwC", "BD5vHd29Ks0C", "BedB7RwA4ykC", "BeJOKgCPho4C", "BEKXF2zGG-sC", "bEWHe7swieAC", "BiAd4Q6aSEUC", "BJcgLVibkrEC", "bL0V6oCroGYC", "BNaURsY-nTAC", "bNO3yU4E1FsC", "BnqbHc7qE0UC", "bojZGsgacvsC", "bR0CXxMF2oQC", "brQZSNtn0KYC", "bX1nS36naX4C", "bZHl-c4Np9UC", "C7VKDEeOItoC", "C_-mi2hqGXQC", "C_bL0PRTQl4C", "CA6h2G_mJlIC", "cAAI89nNZEMC", "CaBAy2oYiNwC", "cAmLFWdaK-AC", "CArnmV7IE5UC", "cCo_JW12cPYC", "Cdg_NkdhoToC", "ce89NOKPkL4C", "CII4iT8yUVQC", "Cjfq3Sq4C5EC", "ClbxfqL67cwC", "COjPOyLC1NYC", "CQWlJiK5If8C", "CS6n6YeCWbkC", "cu1La-UW1uUC", "CUx9NFuHJMQC", "cW3PW9PbqPUC", "cWHKIyvyEksC", "cWQJJIgJNtUC", "CX1OBa0NxKMC", "CXFWZuxyUFQC", "CxSlyJOi1FgC", "Cyly4t2jHMsC", "CYYnmQwmT2QC", "cZ_F_J1308wC", "czC0Y_Va8BQC", "Czq_QLLkwK4C", "D-ctsVAeN-kC", "D1g9NcEBcEYC", "D58GqvTxupUC", "D8phz0hAtfIC", "DaDP_S-bMlgC", "DEussc1kYYYC", "dfInNTbJsk8C", "dkS7CMsi0CYC", "dla773aZfTIC", "DMA63zMS7lAC", "DNYRA70fpVsC", "DOLsxgRAqhQC", "dqi0a2CyavkC", "DqicTjD83CUC", "Dt67NJYFYL4C", "dX8tSRf1xuQC", "DXl5d3PpY04C", "dYMS5W6_Lb0C", "e2q53WFE7hEC", "E7Xw3-GDz4MC", "E8-kZZ7PrAsC", "e_meE2o7GMoC", "e_sTGVh4SRwC", "ECTrdkcRRZ8C", "eDl00TgFDCUC", "ego1raoSBfMC", "egyCSa5tJTEC", "eHAK8fdo0_cC", "EJFT88h-q0sC", "eK0SnBnpkA8C", "em3obwwfGUAC", "EMcjOKjbdNMC", "eN1eVGDOQ5YC", "ePwhbo8BwE0C", "eQajBqGgHkQC", "Esr4fKWU27AC", "ESr_AtJMl0AC", "ESyuaATJOd4C", "ETg4kBLS6psC", "EU9sFmi1U68C", "EuzmhRySiUMC", "evF6kdfndvYC", "EvFiS2rAlosC", "eXgmkezrzYcC", "ExTe994L0BQC", "EZSih0sBzi0C", "EzxwuTqqBhkC", "f-lv0GeeF8EC", "f0nW3qJ3tJIC", "F0v4zCQg10gC", "F2Z6uxeA0IsC", "Ffl0HCe_YV4C", "fFS2asmj4AUC", "fG49kbqrsgoC", "FIyaG5BdttAC", "fJelZ9wO11kC", "FJGUYgk2cvMC", "FjkctseJSHkC", "Fn8ysAJWUnIC", "fnSegQKAttUC", "FodGfz5li5wC", "fQ0GfacznJsC", "FshiVC33NhMC", "fTEk6vLjK-gC", "fu-kpQVvUNkC", "fVgPWLQWA4sC", "fvGy7lnl5e0C", "FykRZunc0NEC", "fyvF_1MmEMkC", "FzVlzvwrbY4C", "g-xFICaT2KgC", "g1-LVOkDfDcC", "G3-3WCuBIeMC", "G6OCU8VRYTUC", "gaWaX3c3xcUC", "gbIG-epQgyYC", "gBKtKIT-GvoC", "GCyjMr7CudIC", "gdB6wQBga2EC", "Get-rAnKUpUC", "GfZodTCFYrEC", "GgFI5pZBUu4C", "Ginqs7wJ1XAC", "GiUW7V-gdfMC", "GKfXoyCfh7EC", "GKPktrYG7sUC", "GmSGPMXp41MC", "gnEGziO0ASQC", "gQ-RkCsWFTYC", "gqPNokxPgMcC", "gRSux4SdN-IC", "gT60QdAov_MC", "GUCo0saVa8gC", "gV4SCyVYuYQC", "gVhJ1_WvDBsC", "GVHocBMsJa0C", "gVmCUL3kz8EC", "gWSU_QI39okC", "h017Dhvt9qIC", "h0oAFNvncUUC", "h3KoqdZ2jpYC", "H4pOe9pQtYIC", "H7HpQrVYspkC", "h8bNYcNwWgMC", "hb2mddOnmcgC", "Hbvw2UCKoZ4C", "Hc_rTXEjeWsC", "HcYjKlcm-pMC", "Hd3M2lQvCZQC", "hEUQWxM0nHsC", "HFotoS0lwvQC", "HnGJsP8JI8MC", "houLObK_Rh8C", "HPBrFPvlSbwC", "HPYLoLgJVKwC", "hTyf61os6q4C", "hx4zw8cp__UC", "hz_e_Ou2nIQC", "i-dzdN0xPvkC", "I1HMmRJtL2wC", "I6BQ9yxgSaoC", "IcBj0RlABDgC", "iDeDm27OnSwC", "IEQRxisj-nkC", "IHtQFK_sBqcC", "INvN7NgVFCIC", "invwNFgV7ooC", "INyUQOZZl58C", "iqVVCMpztugC", "iuc9opwJ7awC", "IUV--lkfN7kC", "iUyrNlDbzsIC", "IWvJms37_owC", "IwywDY4P6gsC", "iX5t60yJp4IC", "iXS0g4iuYzEC", "J1FmPbrDgwIC", "j1k-ALNh_AkC", "J21DrnAqy9YC", "j2l3OK6h8osC", "J2lPGw1Rtw4C", "J6DxZsLy38sC", "j7XsGbC7QKsC", "jaHqDitMkcwC", "jdsMvUHwV5YC", "JHxxM6mOAAQC", "JI6RrXDzH9UC", "JiDYXW7kIFsC", "JigkhryKpx4C", "jIqTj8wO9TAC", "JktSxVsXDZYC", "JNuRxUXjmWAC", "jOMGyirP81IC", "jVL9t0pASC0C", "jw7Ax9CcwjQC", "JxFIS87S148C", "k88UDDDvrS0C", "K8VvOPLwg-EC", "kaEecwxX7WEC", "KBFcMJ82jXIC", "kcsqGna7fBIC", "KDeCgbRa5jcC", "kflefDbfDOUC", "KgSgVDI8c2UC", "Kj5w6sZTJsoC", "kO5794qbOe8C", "KOJ6JcKqIbQC", "KqyijSJv8lwC", "kSpQvfX1BSoC", "Ku8NG5OgmlEC", "KXfziip0cCsC", "KyYHVPJfJsEC", "l_5NkzG68RUC", "la_e6cgLl-sC", "lCGyHH-9ThMC", "LecPI-LRELIC", "LEHGfCUDYfAC", "LgYDKal5OAcC", "LHtNad2Dr2MC", "liXVkOxFDqsC", "lLWuYEx1eQcC", "LMkii04pC1gC", "LMTMTcWUNWcC", "LOnmn5bytY8C", "Lsz51VJ7IVQC", "luHp2EJtQaEC", "LurjwBaxF8MC", "lV44_bf5YnoC", "LvtESY7aPcAC", "Lw86RxlWQnYC", "lw99Oii9R90C", "lXrnTDSacVMC", "lZqrZGDIFAIC", "lZu2S7MMfT8C", "m1axmPZi11YC", "m1Or0ficxlsC", "M4d-MQlEG2kC", "m8JVt054DKwC", "m_hkEz6T-x4C", "M_PLP_Kohd4C", "MblDTjG7ylUC", "mC7gkAtRC6sC", "MCP9XkskjIEC", "md6oFs29tVwC", "mDF-nk2IEg4C", "Mg5jM9Bpz2YC", "mim-M3zIAWUC", "mK6MS891avEC", "mKBy-_WBiugC", "MkTwWUbyx6UC", "mLqL7ulqj-oC", "MqMv2oNmNHcC", "MSXVXP_3cFMC", "Mt9NFfWXW7wC", "mtP0gwO7MEYC", "mU8uV6laLRAC", "mUsT853PvLcC", "MUvbLFS8Av8C", "muw8IPWgGUAC", "Mw1ky2bqh04C", "mZws9JrkC60C", "N-Kfa0UZcGUC", "n8osYvxSYh8C", "N8rTg0X-QIsC", "ncC8EF67bWAC", "NdFeQuMDINsC", "NesI-uoZwYQC", "ngZuhGcX_2wC", "nIuDdBIsS-MC", "nJIn7DinnV8C", "nJv2mifE1o4C", "njWQqggGmRQC", "nk-zDSq_6nQC", "NLwvH_ZRUh8C", "nLYzditxyIQC", "nm-BUiZMc3EC", "nO13fbQfeIUC", "nPDKveEbebMC", "nQ68hmToee0C", "nTw0jsvjg7AC", "NukmAj--nXgC", "NuMx6tmf5iIC", "NUX8dD_xxMoC", "Nwr-wjeRSmoC", "nxMbOcwxOj0C", "O7-V90OQVQsC", "o8FTqpgFivIC", "OB2HH37-I84C", "oB4OC53QYYkC", "OD7Ck6xrOoMC", "oGY9hNTcOSoC", "OHclhBVv-X4C", "OlI8KJzxBwAC", "OmUJebLiytYC", "Oo4lb9M-O5oC", "OO7VLVPMt_UC", "opqdY91BMrIC", "orWw5hZ8BsgC", "ot-0G0Q7lEYC", "oT7Ov516accC", "ou6rclxkFu8C", "owdvLQqC-dsC", "oXg0wOgdKDcC", "ozol-RP_SK0C", "p37VqBkJvL0C", "p3YW4rJ5ob8C", "p76ueH9PWJAC", "P7Gio2slQFUC", "PaGLM2GozFoC", "PbmmLSnghrEC", "PczyUV_YL2MC", "PE53nJcigosC", "pEKjhF_EUIwC", "pep9YQmYgJUC", "PGoBkEb5yf0C", "Ph5fp30QR9AC", "Ph9tE9_G7aoC", "phzzlIWxr3kC", "PiwPN3j2JXAC", "pKmJ0B8e7zUC", "pMo2v1U_VNcC", "PNjrRKR3sKoC", "PNW7TiM1BJ8C", "pOUhr4JDZbUC", "ppLI3zTIhQ4C", "PPNZYEL7pwgC", "pV8oTgZ6B3AC", "PvUsMAChACAC", "Pw-rcBpV-80C", "pwsF6n2rU-QC", "PxVsN849Cz4C", "Pybzv6lHV8IC", "q1EPx-ceN78C", "q2E_qQwNi84C", "Q3Rfm2JBti0C", "Q5QRRluMxecC", "q6zIspzVcPoC", "Q7Jk307w-XkC", "Q8k6Z7jH8a0C", "qa10pJ0PaMQC", "Qa8IoiT_3kAC", "QdiTkdgSoaYC", "QhWVUH9tNw4C", "QiO4D10VggwC", "QiTL547ISwIC", "QJqyBQlzZh0C", "qL0GQnyPDw0C", "qLfZf7f5_pkC", "QlLMwIkHVu8C", "Qms9PNSDEFoC", "Qn6XPK6_9PwC", "qPfokXOc4LwC", "QpXLNs8v_WEC", "qsijdHADx8IC", "Qt70g8C3fXoC", "QTlyR32YgJ4C", "QTQhoeH9gOAC", "QtTNYdNpJRkC", "qUgPnJLN4lEC", "qwGgE6LbWuoC", "QwptKz0-wL8C", "QXmmegPcncUC", "qZsoQyr70zkC", "r0hw66pmL8wC", "r0SqH14yQBIC", "r0vgbVwxNsUC", "R1cIsQiFoCwC", "R5-edU1taWAC", "RB0X01C7pg8C", "rBYgS_sNEh0C", "rC8VSWUV828C", "rFn1T6E0UJEC", "RFWfrsUueekC", "RgdA-8B8Jo8C", "rGEEFkQlnYkC", "rjTH9c476t0C", "rKq8bnUK3WoC", "RkZeR4-1O9EC", "RLpxnrnXXhYC", "RMd3GpIFxcUC", "RmvQfoKiPCQC", "RNmeL_6s3OsC", "rpWP3KPA5kIC", "rRYjYKrShPwC", "Rt70xjfLrfsC", "RV-fNYzEZlwC", "rVYbIigCAIMC", "rwrHxpn-ydMC", "rxlhF88yrg0C", "RZ_J2zSCsBMC", "RZavt1b_0BAC", "RZll-GR0Oi4C", "S5njq1FhUUgC", "s6ZPTdkgHlkC", "S7IcZd5UYmcC", "s87JIfNWSKgC", "s8zIH7dnYCsC", "sCqTLoPnXp8C", "Sds79NgjU7oC", "SEQr7Y2ESicC", "seXnMV9-vmkC", "sfdSGwRYwhIC", "sgYB8r45FHcC", "SIBukbtIZ6AC", "SIGIlqKAaW8C", "SIGkFwAmFKwC", "sN_FF1GBPosC", "SNdZ96QZ768C", "SOeYus07mmEC", "SOJtFIjyBWMC", "sosiolVa7uEC", "SoxnKRQyj10C", "suVX7iZ3Z2sC", "sW5w27ZLekoC", "SxQuvJbN0dsC", "T5UpCOVOJboC", "T97vHe-Q8OMC", "TBr8IVfeakoC", "TEp_QVl5lVEC", "TGfGcACdMmEC", "tHK2RxUm3xUC", "Ti7CSFe9WfQC", "tjnjQkoBnBMC", "Tmq3nTH_uu0C", "tMrWdiJa5kIC", "tNKtrgmE1fUC", "TqwIc4C2GSQC", "trfXmiUm5PgC", "TRYAQyzJGNkC", "tS7gOpmrcy0C", "TtJ0VT4AnMkC", "tu16MecA8cEC", "tuoHq4clR3sC", "tuSGXALbaLIC", "tuspQELrwhIC", "Tv77pfIsaVYC", "tW2dzj1LJQsC", "TX3-BA_UOo4C", "tzItGpE83FUC", "u1HkFE75cAYC", "u5CQpfaElJYC", "u7Pvlu1-1ngC", "U8r6PaETKA4C", "ubodMGnHnx0C", "UcAyzspqfycC", "uDg6E3p80tEC", "UDuEFOTuCFIC", "uevG9aAp1IwC", "ufNTEMTqAhYC", "uH_AITzNp1UC", "Ujyr6whVn20C", "ukRplJvGSD4C", "UlhGedGC668C", "uLXTjolpB_EC", "uNKImaUpW24C", "uODhydH-iWIC", "uQBf9FmAu-oC", "uQFpOTMEt9sC", "uqyMMARDscUC", "URoDbjKxx3oC", "US5aoykpdoAC", "USgMx6uKq7cC", "UTgWS01SxfkC", "UUODSqSSrZcC", "UvgGzh-6t8cC", "UvK1Slvkz3MC", "uVziYDsRDNsC", "uXAECz8bOlQC", "UxD9YbsMVhsC", "Uxwq3DdghtwC", "uYCcXSIMM8gC", "Uz3nMnT4hGsC", "Uzh4qLngklQC", "V-HeFwF7UakC", "v2RPoiRHX7EC", "V4-H6JHFEtQC", "v6fI550HlOsC", "V9UkDlzc1iwC", "v9W5x1mTOEgC", "vaiHc4-caXYC", "vAMDDsz43RUC", "veGXULZK6UAC", "vG8vLdk4EJYC", "vgX9GrngkIoC", "VgYTZXucs98C", "vjwfFOOm4ysC", "vkHCx--93jIC", "vkozsZ3-OwkC", "VlOXC3Pr2KkC", "vmTcK2ujm_IC", "vnEhQB8-uoEC", "VPE6Orsz1nIC", "vPm2kLSDeloC", "vqyMvavWsiAC", "VuaA_9dvD_EC", "vV5TcbVYPfoC", "VzamFijBMFwC", "vZc3cqjbzTMC", "W-Zb18DC8d0C", "w15KrP0xNPQC", "w25sx0G6nRsC", "w3b-1oa7NLQC", "w80iglnfDBgC", "W9d41JPUobkC", "W_8mE3eTSDkC", "WCG_-qi-DDEC", "We9pyCWAGOYC", "WeKvtiwft_MC", "whdtOuA58e0C", "WI0nPy7U0XIC", "wIEr8jXYBt8C", "wJ6vYEm1-AcC", "wk0YzGyyXzwC", "wlwCUad_Sw8C", "WNBFbIUssgAC", "wou23_QQyHgC", "wQKyLoDT1RUC", "WrL9de30FDMC", "WRlgDYVfP2kC", "WSCEgZsug1oC", "wtj4uu2Esr0C", "wvgF2t4wb2MC", "WwkTwI4f_XMC", "wxh2mBW9JP8C", "wZi7DZwwYJ0C", "wzPlQGKox1EC", "x2AEzRpvmywC", "X3rvKJrmYVwC", "X4Z-6_UjUK8C", "XaKz2uqbMzUC", "xbA4gFJBZ_UC", "XBWuaZBL8rcC", "Xc-DJNXsuacC", "xCnvVZMYajwC", "xcOhW-8ceN4C", "xcXnkKEOHIgC", "xd3X5x_-MOoC", "xEKIryULO6wC", "XelCxTJbKt4C", "Xh8GddJI8CEC", "xHWgnMsz8UIC", "xJ1j7mkgvlwC", "XJK18Kn5f7gC", "XjmvQlH55lIC", "xkkHhFuhPkMC", "XKQBdncI-RUC", "XLDFokaUJyoC", "XLFMJx8ekPkC", "XlxEL2OAq1MC", "XmEN-qK0bsMC", "xnUb0ToUgSwC", "XNvkUR5mKoAC", "Xozq7SGvyMoC", "xpKEExbb8DQC", "xrcH_BibabsC", "XRkDaOf0-uIC", "xsuY9Zhz28cC", "xTzN4tAcbWUC", "xVeVkhSLOFgC", "XVwOEeHTU4QC", "xWhaJJ0lZ-UC", "XzVLIY5L2swC", "y-YtcOzwf6MC", "Y3yDkC9IIukC", "y5OK4NA9_aoC", "y9LkuD5JLdgC", "Y9uJUlGwJIUC", "y_j7eSwRuVIC", "yDymY0juFzAC", "YEhxvTBNLhMC", "Ygw3cnsXV0gC", "yKKMZ0YNLR4C", "ykNznFLmV6wC", "YlRW1GtVrY8C", "YNboIkLuJzEC", "YNXPoQiZQDIC", "YoryriygeZgC", "ypuqwrePKJ0C", "YqJ-FqupAeQC", "YRUh6EtxyOYC", "YS80oPE7OpoC", "ys_e1Jaxh4UC", "yscEw6qeOE8C", "YSVeIm0jLy8C", "yUq1AXoC88kC", "YUsiaYPFcgsC", "Yw64dgRvc7EC", "YWwy374ei6IC", "Z2HZ7kIVskUC", "Z5VRwewA4rkC", "z6iODYzWf54C", "ZBkdrgIqguoC", "zCo8lr9bN8AC", "zezJOW8XFc0C", "ZfjzX7M8zt0C", "zgf3TFxEUUMC", "ZHwey8h5Kj4C", "ZiH-0QMl4EsC", "ZJO6ZuRE3-IC", "zMxUsres-coC", "ZX4JoRmrwyMC", "Zx94D5BWzbwC", "-hUUAAAAYAAJ", "-ThaAAAAMAAJ", "00kCAAAAYAAJ", "07QlAAAAMAAJ", "0_80AAAAMAAJ", "0bM7AAAAcAAJ", "0doNAAAAYAAJ", "0osEAAAAYAAJ", "0PAWAAAAYAAJ", "0qsRAAAAYAAJ", "139bAAAAQAAJ", "16fPAAAAMAAJ", "1G0jAAAAMAAJ", "1H4kAAAAMAAJ", "1qgTAAAAYAAJ", "1QoRAAAAYAAJ", "1V8CAAAAQAAJ", "27I0AAAAMAAJ", "2CNAAAAAYAAJ", "2GQ1AAAAMAAJ", "2vsEAAAAYAAJ", "2Zc3AAAAYAAJ", "3dwNAAAAQAAJ", "3e8OAAAAYAAJ", "3gUSAAAAYAAJ", "3H46AAAAMAAJ", "3LwYAAAAYAAJ", "3OAQAAAAYAAJ", "3OHOUzhs6qQC", "3PcYAAAAYAAJ", "3QMiAAAAMAAJ", "3tcOAAAAIAAJ", "3VEPAAAAQAAJ", "3wkOAAAAYAAJ", "3zsVAAAAYAAJ", "48MXAAAAYAAJ", "4cwNAAAAYAAJ", "4FkVAAAAYAAJ", "4HIWAAAAYAAJ", "4KgOkpSJeuwC", "4us0AAAAMAAJ", "4vEdAAAAMAAJ", "4wkOAAAAYAAJ", "50oCAAAAYAAJ", "54wEAAAAYAAJ", "5EIPAAAAQAAJ", "5gUXAAAAYAAJ", "5IoEAAAAYAAJ", "5IURAAAAYAAJ", "5KEAAAAAYAAJ", "5PRPaqgJu6oC", "5ujXAAAAMAAJ", "6gaRAAAAIAAJ", "6PE0AAAAMAAJ", "6uU_AAAAYAAJ", "6WESAAAAYAAJ", "7bU4AAAAMAAJ", "7CgDAAAAYAAJ", "7DcoAAAAYAAJ", "7dkNAAAAYAAJ", "7Ed1Guv4ZgkC", "7g4nAAAAMAAJ", "7ghLAAAAMAAJ", "7GM4AAAAMAAJ", "7jgdAAAAMAAJ", "7JhBAAAAYAAJ", "7jtaAAAAMAAJ", "7n8EAAAAYAAJ", "7p8NAAAAQAAJ", "7Tyq1m9078EC", "7UoHAAAAQAAJ", "7UxUkGUnd1YC", "828AAAAAYAAJ", "8AkXAAAAYAAJ", "8dkXAAAAYAAJ", "8GsCAAAAYAAJ", "8gU_AAAAYAAJ", "8LcOAAAAIAAJ", "8lcOMIkeNCYC", "8mo-AAAAYAAJ", "8nIqAAAAYAAJ", "8NZNAAAAYAAJ", "8WwUAAAAYAAJ", "99gDAAAAYAAJ", "9AI9AAAAYAAJ", "9bo2AAAAMAAJ", "9RUaAAAAYAAJ", "9SovAAAAYAAJ", "9wQWAAAAYAAJ", "9ywUAAAAYAAJ", "_0sqAAAAYAAJ", "_74XAAAAYAAJ", "__AYAAAAYAAJ", "_bkqAAAAYAAJ", "_JMKAAAAYAAJ", "_kEDAAAAYAAJ", "_NcDAAAAQAAJ", "_sIwAAAAYAAJ", "a1wHAAAAQAAJ", "A2YVAAAAQAAJ", "aBEXAAAAYAAJ", "Ae4WAAAAYAAJ", "AfQWAAAAYAAJ", "agcEAAAAYAAJ", "AgYnAAAAMAAJ", "ahNbAAAAMAAJ", "ak8-AAAAYAAJ", "aPdLAAAAMAAJ", "AWxEAAAAMAAJ", "awYRAAAAYAAJ", "aYYSAAAAYAAJ", "b74_AAAAYAAJ", "b7MXAAAAYAAJ", "bA-j9fLGI_wC", "bF81AAAAMAAJ", "bfBaAAAAMAAJ", "bFw1AAAAMAAJ", "BGEtAAAAMAAJ", "bH4EAAAAYAAJ", "bHwHAAAAQAAJ", "Bj8zAAAAYAAJ", "bo4EAAAAYAAJ", "bowEAAAAYAAJ", "bPRDAAAAYAAJ", "bQlHAAAAYAAJ", "btjVAAAAMAAJ", "buAQAAAAYAAJ", "buc0AAAAMAAJ", "BWoRAAAAYAAJ", "bXtaAAAAMAAJ", "c0U_AAAAcAAJ", "c1jYAAAAMAAJ", "c2c-AAAAYAAJ", "c_BJcZV_jj0C", "c_MEAAAAYAAJ", "CBAMAQAAIAAJ", "cbMSAAAAYAAJ", "cdkNAAAAYAAJ", "cFtbAAAAMAAJ", "Cg8XAAAAYAAJ", "CGpbAAAAQAAJ", "cjImAAAAMAAJ", "CmISAAAAYAAJ", "crMnAAAAMAAJ", "cRVEAAAAYAAJ", "cYHJHFS37m8C", "CyUQAAAAYAAJ", "d6r6mO0DWh0C", "d7NEAAAAYAAJ", "D8I8AAAAYAAJ", "dcxGAAAAYAAJ", "DeJgAAAAMAAJ", "DEUUAAAAQAAJ", "dgkoAAAAMAAJ", "Dj4XAAAAYAAJ", "DowhJYZmlW4C", "DPIVAAAAYAAJ", "dQ81AAAAMAAJ", "dtgDAAAAYAAJ", "dWlKAAAAYAAJ", "E18Bom4aEnIC", "e84OAAAAYAAJ", "eAGXOXy-MWwC", "EblDAAAAYAAJ", "EEMeAAAAMAAJ", "Eh0QAAAAYAAJ", "eJUKAAAAYAAJ", "EKJHAAAAYAAJ", "eKUwAAAAYAAJ", "emUtAAAAYAAJ", "eoxOAAAAMAAJ", "ePsgAAAAMAAJ", "EW89AAAAcAAJ", "exgRAAAAYAAJ", "EY0EAAAAYAAJ", "ey8EAAAAQAAJ", "EZ8Rd5IsjawC", "F4sEAAAAYAAJ", "F8ZEAAAAYAAJ", "FaoSAAAAYAAJ", "FfcYAAAAYAAJ", "fhUXAAAAYAAJ", "FIwEAAAAYAAJ", "FM-AAAAAMAAJ", "FtgDAAAAYAAJ", "FWQAAAAAMAAJ", "fz_91Zn161gC", "g1ugAAAAMAAJ", "g5IPAAAAQAAJ", "G7xfuc7lWvMC", "g9LiAAAAMAAJ", "GbUlAAAAMAAJ", "GEZaAAAAMAAJ", "GG8qAAAAYAAJ", "GkAZAAAAYAAJ", "gLCaAAAAIAAJ", "go0ZAAAAYAAJ", "gQsXAAAAYAAJ", "gSIZAAAAYAAJ", "GtAYVckH2FkC", "guFIqjynpO4C", "H0BKAAAAIAAJ", "h5UPAAAAQAAJ", "h8VCAAAAYAAJ", "H_XkAAAAMAAJ", "hBuind5qZakC", "hjoFAAAAYAAJ", "hlAHAAAAQAAJ", "hNoNAAAAYAAJ", "hoAEAAAAYAAJ", "HoJMAAAAYAAJ", "HvJaAAAAMAAJ", "hxwEAAAAYAAJ", "I2AtAAAAMAAJ", "i6tEAAAAYAAJ", "I7JiAAAAMAAJ", "i7wXAAAAYAAJ", "iAVPjpphQ90C", "ikk7AAAAcAAJ", "iywXAAAAYAAJ", "j0oYi3O_tvgC", "j5UgAAAAMAAJ", "j6auAAAAIAAJ", "j_sOAAAAIAAJ", "jaUCAAAAYAAJ", "JBM9AAAAYAAJ", "Jch56YUSRiQC", "JDotAAAAYAAJ", "jfUMub-wbrYC", "Jho_AAAAYAAJ", "JlEMAAAAYAAJ", "jq0TAAAAYAAJ", "JqYGAAAAQAAJ", "jR8-AAAAYAAJ", "JxI9AAAAYAAJ", "K1FbAAAAMAAJ", "k6g-AAAAYAAJ", "kDcDAAAAQAAJ", "kgd_kVh9-BgC", "KhMYAAAAYAAJ", "kJ5aAAAAMAAJ", "kLg8AAAAYAAJ", "KlsJAAAAQAAJ", "ko0NAAAAYAAJ", "kQ0mAAAAMAAJ", "KqtEAAAAYAAJ", "kRg_AAAAYAAJ", "KS9HAAAAYAAJ", "ksE6AAAAMAAJ", "kT8ZAAAAYAAJ", "Kt_TAAAAMAAJ", "kvAtAAAAYAAJ", "kvU_AAAAYAAJ", "KW0YAAAAYAAJ", "kWBAAAAAYAAJ", "kXUAAAAAYAAJ", "L_MEAAAAYAAJ", "La4aAAAAYAAJ", "lAYGAAAAQAAJ", "Lc0NAAAAQAAJ", "LcQXAAAAYAAJ", "LDhFAAAAYAAJ", "lDTuAAAAMAAJ", "lg4YAAAAYAAJ", "lgsXAAAAYAAJ", "ljIDAAAAYAAJ", "LnUTAAAAQAAJ", "losEAAAAYAAJ", "LtOmCdYVvh8C", "lwNbAAAAMAAJ", "lYkBhX6y39wC", "m54LAAAAYAAJ", "m9jVAAAAMAAJ", "M9oNAAAAYAAJ", "meQYAAAAYAAJ", "MH8EAAAAYAAJ", "Mjs1AAAAMAAJ", "Ml8Z1rQ74lIC", "mLs8AAAAYAAJ", "Mm8RAAAAYAAJ", "MQIwAAAAYAAJ", "mQVEAAAAYAAJ", "MRgXAAAAYAAJ", "mwswAAAAYAAJ", "MXQ6AAAAcAAJ", "mZ4TAAAAYAAJ", "mZURES_1HGcC", "N-sJAAAAIAAJ", "NBMCAAAAYAAJ", "neEIAAAAQAAJ", "Ni0dAAAAMAAJ", "Nk1OAAAAYAAJ", "NLoxfUPHoukC", "nPJaAAAAMAAJ", "NQ1AAAAAYAAJ", "OA8nAAAAMAAJ", "OAUnAAAAMAAJ", "OBlKAAAAYAAJ", "OBM3AAAAIAAJ", "OdUNAAAAYAAJ", "OEU_AAAAcAAJ", "OhstAAAAYAAJ", "OK8NAAAAQAAJ", "oLk8AAAAYAAJ", "oNEQAAAAYAAJ", "Oo83AAAAMAAJ", "OQ49AAAAYAAJ", "OrcnAAAAMAAJ", "oSFAAAAAYAAJ", "oUtOAAAAYAAJ", "p441AAAAMAAJ", "P6JGAAAAMAAJ", "p6o-AAAAYAAJ", "p9gDAAAAYAAJ", "p9gNAAAAYAAJ", "PA5YWOtJEq4C", "pGEvAAAAYAAJ", "PHI6AAAAcAAJ", "pJMrAAAAMAAJ", "pmAtAAAAMAAJ", "pn4EAAAAYAAJ", "PosEAAAAYAAJ", "PZP6WZKTl58C", "q7xEAAAAYAAJ", "q85EAAAAYAAJ", "Q8NEAAAAYAAJ", "q_08AAAAYAAJ", "QAHe1wTctRgC", "qaHRAAAAMAAJ", "qbV65PabTEYC", "QH4TAAAAQAAJ", "qHgKEqjdy-wC", "QKgVAAAAYAAJ", "qkZgAAAAMAAJ", "Ql0OAAAAQAAJ", "qL4qAAAAYAAJ", "QNpEAAAAYAAJ", "QPGBAAAAMAAJ", "qrwqAAAAYAAJ", "QSUZAAAAYAAJ", "QyQpAQAAIAAJ", "r-oJAAAAIAAJ", "R88TAAAAYAAJ", "RC8OAAAAYAAJ", "RDg1AAAAMAAJ", "RekoAAAAYAAJ", "rnEAAAAAYAAJ", "rog6AAAAMAAJ", "RqlEAAAAYAAJ", "Rrc-AAAAYAAJ", "rRwuAAAAYAAJ", "RUxQAAAAMAAJ", "RVQpAAAAYAAJ", "RwBbAAAAMAAJ", "Rx4DwJkT5l0C", "RxQ1AAAAMAAJ", "RYwEAAAAYAAJ", "s1gVAAAAYAAJ", "S1vRAAAAMAAJ", "s34EAAAAYAAJ", "S3JHAAAAYAAJ", "s6kLAAAAYAAJ", "sAvwDF6qvnIC", "SCVEAAAAYAAJ", "SdYQAAAAYAAJ", "SItpAAAAMAAJ", "SIYZAAAAYAAJ", "SmoVAAAAYAAJ", "sn8EAAAAYAAJ", "sOAQAAAAYAAJ", "sooVAAAAYAAJ", "sOPa9iabXr4C", "SYAEAAAAYAAJ", "SYIvAAAAMAAJ", "sZAZAAAAYAAJ", "T14ZAAAAYAAJ", "TAsOAAAAYAAJ", "tbCaAAAAIAAJ", "tBEqAAAAYAAJ", "tCgVAAAAYAAJ", "TFBOAAAAYAAJ", "tKf-ovCArycC", "tKoEAAAAYAAJ", "tlwpAAAAYAAJ", "TnMOAQAAIAAJ", "tQEwAAAAYAAJ", "trM8AAAAYAAJ", "troXAAAAIAAJ", "TucYAAAAYAAJ", "tyk6AAAAcAAJ", "U3gPAAAAQAAJ", "u4paAAAAMAAJ", "ua1ZAAAAMAAJ", "Uckq9uW7r7EC", "uK07AAAAcAAJ", "uNgDAAAAYAAJ", "utseAAAAMAAJ", "utvWAAAAMAAJ", "Uv8_AAAAYAAJ", "v1EHAAAAQAAJ", "V2EtAAAAMAAJ", "v2laAAAAMAAJ", "v6YWAAAAYAAJ", "V8k6AAAAMAAJ", "V9wqAQAAIAAJ", "vdAOAAAAIAAJ", "vjYIAAAAQAAJ", "vl4AAAAAYAAJ", "vPs6AAAAcAAJ", "vr0qAAAAYAAJ", "vT-JhEQSvx4C", "VwUXAAAAYAAJ", "W8ESAAAAYAAJ", "w9A98UIGNMAC", "wfIWAAAAYAAJ", "wKM6AAAAMAAJ", "wosDAAAAYAAJ", "wqU6AAAAMAAJ", "Wr1EAAAAYAAJ", "ws18cmj5ic0C", "wThMAAAAMAAJ", "wucgGgVliT0C", "WVseAAAAMAAJ", "wZAEAQAAIAAJ", "X3sbAQAAIAAJ", "x4oEAAAAYAAJ", "X4UtAAAAMAAJ", "XAICAAAAQAAJ", "xgnTteuZ694C", "xN45ZsUMgKEC", "XNgNAAAAYAAJ", "xO8WAAAAYAAJ", "xowEAAAAYAAJ", "Xqc6AAAAMAAJ", "XqsTAAAAYAAJ", "xSXEswj4D78C", "XV8XAAAAYAAJ", "Xw8WAAAAYAAJ", "XYRaAAAAMAAJ", "y40EAAAAYAAJ", "Y7sOAAAAIAAJ", "yas8AAAAYAAJ", "YDIDAAAAYAAJ", "YdjPAAAAMAAJ", "yGlKAAAAYAAJ", "YgMXAAAAYAAJ", "YiEEAAAAQAAJ", "yiQ3AAAAIAAJ", "yLESAAAAYAAJ", "yOQSvnydSzAC", "yrDRAAAAMAAJ", "YrMcAAAAMAAJ", "YuUyAAAAMAAJ", "YwYGAAAAQAAJ", "YXZbAAAAMAAJ", "YY4EAAAAYAAJ", "yY8GAAAAQAAJ", "YzbhAAAAMAAJ", "zEIqAAAAYAAJ", "ZF86AAAAcAAJ", "zgkwAAAAYAAJ", "ZMbWAAAAMAAJ", "zpwXAAAAYAAJ", "ZUzQAAAAMAAJ", "ZVZFAAAAYAAJ", "zX5BAAAAYAAJ", "ZZQpAAAAYAAJ", "-KtaAAAAMAAJ", "-MdHAAAAYAAJ", "4NpKAAAAMAAJ", "7wXy0iWQhmUC", "804IAQAAIAAJ", "85AqAAAAMAAJ", "adYISimWWB8C", "afgNAAAAYAAJ", "b5gXAAAAIAAJ", "bhEqAAAAYAAJ", "c_GqrxRZXO0C", "D2UJAAAAQAAJ", "GlQeAAAAYAAJ", "H5QYAAAAYAAJ", "hYsXAAAAIAAJ", "IkkZAAAAYAAJ", "k39vHp-5VeMC", "K3ERAAAAYAAJ", "K6U4AAAAYAAJ", "KKSeMHR3EFwC", "KYh-Oko3K8QC", "lAkOAAAAYAAJ", "ljEJAAAAIAAJ", "mNweaGcPNlQC", "mrc8AAAAYAAJ", "mSQpAQAAIAAJ", "N5H73sYXDxYC", "NmYJAAAAQAAJ", "oDQ_AAAAYAAJ", "OTcmIoJPZ8cC", "P2YJAAAAQAAJ", "P9AXAAAAIAAJ", "RMyA4SdL6e0C", "Ux0uD9EpS6AC", "v0kqtbR2RdAC", "Vm4iAAAAMAAJ", "VqgsAAAAIAAJ", "Y2AtAAAAMAAJ", "Y5tXt7aoLNoC", "yp4ZAAAAYAAJ", "Yvg3m1N3bWMC", "-GcEAQAAIAAJ", "dDUCAAAAQAAJ", "HR9AAAAAYAAJ", "-76GjNpR9VUC", "0tQjH8yzrdcC", "2KERPNCkMC8C", "4cAsr_eptg0C", "4yXOdjxolVAC", "5rF_31RVTnMC", "6P5RNn0NehsC", "9vZ64MLmVS8C", "_UNNPyZHBHoC", "cWQJJIgJNtUC", "eParwQ0YdrcC", "fs-cTvIegLgC", "g3x29UP5gnsC", "hKzjNMFba5gC", "IKSHVdYUzGEC", "injpY-EerZgC", "JHxxM6mOAAQC", "kOGSGjGmL0YC", "LBBhikJpLjwC", "lMQaeZb3_e4C", "RDTQs2y_h5QC", "RtuUTyHr-5wC", "RZll-GR0Oi4C", "TQ5rlfwgWyUC", "uf5x7GtHpjkC", "Wnc3V5m9kqgC", "Xqa9U42GP2cC", "yyaL8KoFHKIC", "-63xyvVTNwIC", "-A-wrak3BkAC", "-L2Z652rLYQC", "-MfC2j5hDFEC", "-vEXEPUJK4EC", "0ba36JZTUswC", "0dD9rHI5H5sC", "0HMvmNpuDf4C", "0iVqE9vAqloC", "0LUM-NINvEsC", "0NP8hnGNjAsC", "0Q6cMEkz8xkC", "0QmRFur9m7QC", "0Sb9rQ5Ewd4C", "0soTkTor_HMC", "1CCCWMqPtzEC", "1iaaMtRmIZMC", "1IjS2r3poyEC", "1s0fNs75eU0C", "1s_E7T5tdlEC", "2pxcG08a90UC", "2UyNR8wpDt8C", "2VqEXOH-b2YC", "2X59P60QHnYC", "2ZAptMWcCdwC", "3HDyoJBoLBQC", "3SB8yE4ndioC", "3zLSRa5lIyUC", "4_QEsBJLmy8C", "4GXEmkTTUpoC", "4In9TJ5L0VYC", "5_zAi06GKNwC", "5f1twMCxoqoC", "5gdqw3ax1KsC", "5L4An9lC3hwC", "5VhMcTIIoRoC", "5VMcW1f4fmMC", "6-EXBGEdjMIC", "61rslRcPoZ0C", "6c7jcmg3dEgC", "6pmBjSl35egC", "6S2GdoIPkKQC", "7EsxsEtV9sMC", "7VWZRVvoE0MC", "7Yhkld-Fr5wC", "7Ypg28yZ6aIC", "8aEwylFfsjIC", "8HDEs3wNLd8C", "8yG5UrYMQ-0C", "9AINECqE2lsC", "9b2VoLf4MzkC", "9jiJd8_5KnoC", "9L8MwyFsFvsC", "9mZvmEMwTKsC", "9ne3r2XzbzEC", "9nFwTXKoS6gC", "9P7h5rB2vQ0C", "9QCpUYKTwKwC", "9VYuMmcxSYcC", "_c95aA8dOLkC", "_Cfi6UiyNlkC", "_eohr5XMnBAC", "_mtzX3Gs9nUC", "_mur2PUOp8wC", "_rewTS4v-EsC", "_UKmhTR0ITkC", "_wKvp9btIvYC", "A9K5PSr_e4gC", "AfD1s_2f1FEC", "akHTeRj4JOUC", "AlGuOeb7pl0C", "axxlIDSbKg0C", "b6djRPYUZ8gC", "BBKEcM6M_BUC", "bJlyjzUWKCsC", "blQIWhUioFsC", "BNZ2-nzmQ_EC", "boA1HQSnefYC", "BQ5wbmtHFIcC", "bUba45txcJ8C", "Bulx3bJpc1QC", "BZopNYe5-qcC", "c2zhJMEYccQC", "C4Rqx1_fKLYC", "c8q-sGQ5GOEC", "C_bL0PRTQl4C", "cFhGyEREh4kC", "cJDfL_DR9GMC", "CkmPSW0uA38C", "cLec-hyjLJgC", "cMjSV6CDnOgC", "CpttRf7NQIkC", "cpW22SnQBXgC", "Crjx6NF9QAEC", "csc0gSSxSMIC", "cU-4O9xZmzMC", "CwYTKoE33jgC", "CxYXaAUJytUC", "D8UzeKZKKvgC", "d8WB2wJKKAgC", "DbuVW34eOEkC", "dELO9Pc3P50C", "DEussc1kYYYC", "DFzy1wgWL6IC", "dhr32lY_rt4C", "DNmjHtlFJUcC", "dyet0NcJMXEC", "DzlaPT_Bpz4C", "e2q53WFE7hEC", "e8aDEGSDCToC", "edFHvonqKX0C", "Ejp6LgTnSe4C", "eL6xymiJX04C", "em3obwwfGUAC", "ESr_AtJMl0AC", "eu-lSNjgkSIC", "eXgmkezrzYcC", "exPEZT-_rJUC", "f2D-5VU4K_0C", "fBazruOey4UC", "fCunxPYp_OAC", "fDjfkQYRwTcC", "fDzKNDKJPu0C", "Ffl0HCe_YV4C", "Fg5MjfVSQOkC", "fNl1sklg5RwC", "FOj7XJQuZGEC", "FPWSLAVs8jMC", "FS2DSJIHg9MC", "FVRqrE1V3fEC", "FZH5yr1VCfUC", "G4UH8cPE_VkC", "GCyjMr7CudIC", "GghRg6VmYPMC", "GifAXXyoO84C", "GIvkGVgSGokC", "gkaUu__vNDQC", "GoV9Aha9IhQC", "GVchqY1ZaB0C", "gxizgOuEebsC", "gZaqADTgdtcC", "h5ruQyEzfD0C", "h7283-AC8bQC", "H83nwxNyJMgC", "H_5zYEhiT3IC", "hE0FKGDTurYC", "HGnopNYgga4C", "HT7LP-hRhQ4C", "HwQD7Q7rhkwC", "hx4zw8cp__UC", "HxtpSewA1lAC", "I-RTiw0Z30MC", "ifc8QVdWijMC", "ifocmqVPHUwC", "IIgOBSIHmdsC", "IjJNEdgb7DwC", "IJOfUUtzn30C", "iRXHNkorlIUC", "itSPLM6udREC", "iUyrNlDbzsIC", "j1hzezxjN4QC", "J3gQzNyTyKIC", "JI6RrXDzH9UC", "JNgAP8k5KroC", "jNYDVy1Xt40C", "jOMGyirP81IC", "jPGAp_8TMZcC", "kaBCeLUbJtIC", "KAZvQcXJ0vEC", "KFWbc2tiav8C", "Kg-sqN8bu_IC", "KgSgVDI8c2UC", "Kq6EQGda_30C", "kqbwwzLe9_MC", "KRaNlo6MwskC", "KY7pygt5ImgC", "l4CEWzs7a88C", "lCMWQJPYQ8QC", "LdxfLieU0aEC", "LEXRtoAxEM8C", "lizAK72dCUMC", "lKq3n2S7I8kC", "LmCCGgBTqFAC", "lOREAqN6F48C", "LQUCLdA5sLQC", "LTNdsgWXzbQC", "lx7mQQ0mm0IC", "LxpcTkKOiJMC", "mDmcW9KR6r0C", "MF9KWcidqhcC", "Mh9n_9hsNmIC", "mJ7-gzmDRo8C", "MmJeXfkFNKwC", "mRX160l72-UC", "Mt9NFfWXW7wC", "mUEOJuwUAOkC", "mUYVmd01fuoC", "MwpER1ZbELcC", "MYII8Qi1-eoC", "N0GExYJKt0cC", "NHd1sxVg4XwC", "NPZYBrWZPVAC", "nRC9zn3nHIQC", "NWiG1MtLMioC", "Ny5I1aaSlSIC", "NzRpoHvMkS0C", "NzzLC__TwZkC", "o-W2-ayVm8IC", "of5TqT4nz4QC", "ofSWPafmlpAC", "OGU13cmmRUIC", "Ogzq_u_hOQQC", "OHqefo2QlCQC", "oiJW1KvR2MkC", "OKV8Nd7hKhkC", "On3XvILFah0C", "OP2Tp97s6AsC", "opqdY91BMrIC", "ORdZF5kVumIC", "oSXEwOdkpmAC", "p0dUyABx9SQC", "P7yZUMBcbxAC", "PbmmLSnghrEC", "Pc_nndglfn0C", "peudW5Nk940C", "poWks_q7X_oC", "PQh8kNVjYyQC", "PT96NDa3rOYC", "pV8oTgZ6B3AC", "Pyg-gr37IkwC", "Q1CEQ0AZh1kC", "q1JPyB4n7LgC", "Q2yO_wNMX74C", "Q5BuEKEe4pYC", "q6-Pgq6Bd0cC", "Q7Jk307w-XkC", "Q8g3Vx41ePwC", "qgJ4lh1zynwC", "QLSEY_GSuWIC", "QSzoTO6uw-sC", "QUNoPBsxf7AC", "R19P0tZxivIC", "rkRu9OJ6gWQC", "rMQkQxoUWXwC", "ROHwG0JvP-sC", "RoT8nuzZY6MC", "RqpYSuMLkacC", "rRQ-ln-SYnMC", "ryUDQKQHvRQC", "RZ_J2zSCsBMC", "s-IKDw_xNO4C", "S1aY04SCeCcC", "s63i21E9dr8C", "sAtrYgbkH5gC", "sbiC0dSqrY0C", "sbNgTt34a7AC", "SBT6pAV2oDAC", "sDh2VKlu28UC", "SEQr7Y2ESicC", "Si9Dgsb5BHAC", "SimBCSprSRUC", "sImIx4Fl_C0C", "SJe2yL_R6JQC", "SLwk6C7rVhgC", "SoxnKRQyj10C", "sQXNbuyxLb8C", "SUAwvChYnlwC", "Sv5OO0cJgSEC", "SW3Lmc_OJV4C", "sYzLfQ5In9AC", "SzOU6g8evBAC", "T0u3mLgB7Q8C", "T2Mp9EEd3ncC", "T53iIqrOcbIC", "t9XWY5VKJSkC", "tDi1X___kA8C", "tJtBDEjyGqwC", "tRHgqZAB8C0C", "U-fc5X0cUjwC", "U_XsG9AG6fsC", "UEqy0TZuT4IC", "uevG9aAp1IwC", "UFJC7ZobicUC", "UGHHAfRjnH0C", "Ugih6Tuam_sC", "ulWbH-4xtd8C", "URoDbjKxx3oC", "UUODSqSSrZcC", "uVr4HChPENYC", "vnFySPulSJcC", "VSGv9ygG1poC", "VWwH9SboEQcC", "VWyI9EAqpYsC", "vX0W3_MvZbMC", "W2JbNJSOA6oC", "W6AjlOPmznUC", "w8soxuejcaEC", "wFlu01q-wC0C", "whdtOuA58e0C", "wIEr8jXYBt8C", "WIXV1dms-8MC", "wk0YzGyyXzwC", "WpCOFC9f6H0C", "WsjanO7xW58C", "WULCfFrGFcwC", "WUuBNF1eSqwC", "WUyzf2cJzu8C", "wzPlQGKox1EC", "xc2N4ZOxtCYC", "xIcCXbnaKtgC", "xIp209jwYQ0C", "XRkDaOf0-uIC", "xsv8s0uId1oC", "xu-4HeilOhAC", "xuRUA92_Dc4C", "xxBV-d20EWQC", "y11kvNfIDh4C", "Y7du4IGkNagC", "YAC7D2qEu4kC", "YAv9Gv9ZIbcC", "ybOLU8HOjA4C", "yKKMZ0YNLR4C", "YkVmgI7YvxkC", "Yrehcfj2IVsC", "Yso319xUOF8C", "YSVeIm0jLy8C", "yUq1AXoC88kC", "yv5tR54Qs6sC", "z_7igwZUWX0C", "ZCAOHdptArYC", "ZDmAWWNzsZEC", "zejLZgD7VDsC", "ZHwey8h5Kj4C", "zmq2Wj1c8HEC", "ZOB2ex9u1tMC", "Zp_b7CdQnzwC", "ZrnT-eIoVp4C", "Zw9g-dT8eoMC", "Zwrx6vQxbJsC", "zzlNJFc4vngC", "2AcIZCyQSJ4C", "2paepcVm5OQC", "4YveGexFFDMC", "8jWTiB4UdQAC", "_uxrn_B6nQIC", "A8VCSfVYPXUC", "AikWxorjwGQC", "BtmfGBNcYEkC", "dVcZCGfVIe4C", "h2xxgNZCriwC", "haumLq0jxWcC", "HlzdO2mJQCUC", "il-v_WiwlWAC", "JdIRcVfYnz4C", "k6zNhshVrcoC", "KBNBgBEerZAC", "Obp2ZR6DlakC", "OFcR4TvqVoYC", "Pbau0vKNAbkC", "Q44VAAAAYAAJ", "Qe79lVUM-_QC", "qGYlK0eIz1wC", "rM7WpdtOBVUC", "rvCzitUx8T0C", "SxWznUkU1Q8C", "U8zhW9KiI8kC", "Yfn_BXJSu3QC", "1OHRziUwLsEC", "5-vJJ05fpH4C", "8Fy9NHweW9QC", "8RDs6-P8UPAC", "AmESXDfiId4C", "CUMCimMYu_oC", "D2YXySdvGBUC", "dDue614KRskC", "Fl2TlTNtPQQC", "LSup9PQoUyQC", "M04TpCjQiDwC", "QJqyBQlzZh0C", "QlLMwIkHVu8C", "QMpe1tnNw_MC", "ubodMGnHnx0C", "wFVpT3msHPQC", "xNeAB0U42wIC", "Y-CAUPszuWkC", "zagXen2NMCQC", "aOc0AAAAMAAJ", "AZ5J6B1-4BoC", "i1aG-J07IQoC", "jIoVAAAAYAAJ", "kdEWAAAAYAAJ", "MJbBqn3XWqAC", "pDsVAAAAYAAJ", "TF8XAAAAYAAJ", "tI9POJ_lt0cC", "vmTcK2ujm_IC", "ys_e1Jaxh4UC", "zF6v7bX__SQC", "ZT1ISWyvOIsC", "--ibAR9NbugC", "-1Y9ym5upKoC", "-3NrCV6J2KsC", "-4Pgj7M8hXgC", "-4SddBE1Jf0C", "-4WePVJ1wIYC", "-5fImMZMqNIC", "-5psJnxMC-AC", "-6UMvdimc98C", "-9aHZEHwiFkC", "-_9N_G37WtMC", "-_w_YYplL7YC", "-a9KHxkBTRYC", "-aRbCZD5meUC", "-ceFU75KyYQC", "-cGu6MzXGdMC", "-cjQ_VFIKFYC", "-dzQjAj3Qo8C", "-egio-BOBmwC", "-h6g9YQtqOEC", "-HYHXdQ3r20C", "-JK7pvrqVkIC", "-jn5U4kMP70C", "-k8vEgAN9jQC", "-LM59cdVOoIC", "-mNgBjHm6J8C", "-oiqw5U0jtwC", "-ooprFiVHV8C", "-Pc-cly_MM8C", "-pL56OcVubgC", "-PS1vVwZlsgC", "-pwMzSoZXfIC", "-qTi684jOfMC", "-RHh4GUmTbkC", "-rqyelbWrv8C", "-ru4OLlK_mYC", "-rWvh21kIiEC", "-S9N1h_RS-IC", "-SJ34Bo7JkMC", "-UcT6EIFG6wC", "-XcTWNLWmfoC", "-XGKFJq4eccC", "-xY35wmSePwC", "-xZfsQaaEfkC", "-yojHGlT30QC", "-zNdL180tAUC", "-ZSnoryMMEcC", "01FH6rqhAdoC", "02EylVe0DFgC", "05S8Ghpb2lYC", "06VR1JzzLNsC", "09eSEcXZfMgC", "0AtcI8aX9oUC", "0bMi22WDcvoC", "0C9tmV5ZkpoC", "0CbXmT94JagC", "0cOisn_j7mYC", "0COycjY-X18C", "0EfBgf9yr9IC", "0esmlyerDSkC", "0fbzCqQxbAMC", "0g97pJMu5_0C", "0hE74zyWyZ4C", "0HGaPH7KHH0C", "0hggJhQQQboC", "0IISbOC1hL4C", "0j-GAuXtcJ8C", "0J_dwCmQThgC", "0Je6or83PLIC", "0JEHHEq8VXoC", "0jmSmmjNosQC", "0KkogWPA6yEC", "0L_SH1ZcyDsC", "0ldowI6VgeMC", "0ljZSb-vhn8C", "0MfBUbPXnhUC", "0nAX4b41wigC", "0nBkuP48QjAC", "0NDxIWsNL4EC", "0npm-wVKye4C", "0NsMRapT6wYC", "0NSUmao2y_oC", "0o18v9h3pzkC", "0oaXBqUgLyQC", "0p0C7Y8lkH8C", "0pFGZM1Rpu4C", "0QEvzycAuzQC", "0rfvLAfHgf8C", "0RifYwKgPSkC", "0S4QxobZ-zkC", "0SCGVmOUh1kC", "0SP5CQnZCqcC", "0tyYN4G2UdYC", "0ulkXLmBB6MC", "0VV2a9fqsogC", "0WhvTFmRDCQC", "0WwkVUVl1wcC", "0x02wzd0vSEC", "0xG8XcpSsM4C", "0YNh9MEwvjMC", "0zKAg9_ZOs0C", "14j1SFs8W2YC", "160nucimkPcC", "18OA-2EH7i0C", "18TiYN9V_NwC", "19CaOeVNCEMC", "1A0Ek7Lh4x8C", "1A6owBxgNWEC", "1AudF25g9gUC", "1bFTj5SdZj4C", "1c7qn8yW7Y0C", "1CSFPgFIjQQC", "1cVjTTew6YcC", "1d7VM0OYgxYC", "1D9VuhtsX3sC", "1Dvix3Vp6IwC", "1Dw9122O0fcC", "1EnnWsMI7AAC", "1FLA-TN8Z8UC", "1GD9EJuZ-lAC", "1gDElomlm3kC", "1GKdgtGDMaUC", "1GYH63-fARUC", "1hssUnKAd0oC", "1iEHPtB7z0YC", "1ihWzPEfnHwC", "1j_bjwvCNy8C", "1jHpt9hdreoC", "1K9iHdLz0BQC", "1Kg9CvvTbWwC", "1l_AG7QjxbQC", "1LbmPEiFrd0C", "1LfvKSPY7p8C", "1MfnAhBwnLQC", "1MP0aRSQfpkC", "1nryStNrSIIC", "1OTbzCGIT2YC", "1q7teTeLoowC", "1qmVEYZVpqMC", "1QvQvXQurCYC", "1qwIfOyNkokC", "1ros72xtlOkC", "1rPknQQBGtUC", "1RrNMm-5zeIC", "1rVOwNDT6q8C", "1S_x40iLuXkC", "1SA4DTXdz-oC", "1SLjrKYIc58C", "1t_4SP8nLEcC", "1tfvtsCwTIsC", "1UMToaDBpX8C", "1v5o2uw0GJAC", "1vbW_2dDc9YC", "1VTpqPB699wC", "1wYMuHxDK8oC", "1WYZ51Ljh1wC", "1XQpFu7FGAQC", "1xwxFTU2jXYC", "1zFrYtQm0QwC", "1ZLRGbvpEWIC", "1zmhHT7lIc0C", "2-FJDJ_nAFwC", "20NWSX5PD0kC", "20v7lhXAkQcC", "219sHUkWF3oC", "24f2fyhIP-MC", "24qMnDsXwsgC", "24YDkYK3aqYC", "2553gQ8wUjkC", "26h4gMPmPtcC", "28llA7U-z78C", "29eHuTCVt5IC", "29mgL3HjD6MC", "2aLasS4OXXUC", "2Bt2rkbCArcC", "2Bt3uIUm59wC", "2BV5E85l8gwC", "2cGPtTQ_eJMC", "2dBA9kEx47MC", "2dqayoAkHiYC", "2Dus5Y3WuXMC", "2eAieKhtAgYC", "2eKRXgXfzDcC", "2fLp5OLd-xoC", "2fqYeA2vysoC", "2fzpu5w7uOIC", "2gB7w9XlNJAC", "2goK4HJO2VkC", "2h3jwRbgh80C", "2HS02CSh4nYC", "2IG1mdeOEQ0C", "2IlrLUp90BQC", "2iWvaQyc9WMC", "2Ix6kR6iN-UC", "2jJemY_31AYC", "2LXIPoESG9kC", "2LzRkWABC6sC", "2MDgpHemzl8C", "2MeFvILg4jYC", "2mVQBbt2IhoC", "2ndvJm_ZheMC", "2oNiyXm2EjoC", "2p1MDAUcSu0C", "2pfB84aGUnMC", "2Q5CVMfRwZkC", "2QduA19d_X8C", "2RZZkv6xN1sC", "2swMQcqFcRoC", "2TZB0WV2ZcIC", "2upIJbQvmVsC", "2USxB4t3L9IC", "2v6K1Ny71QEC", "2vE-LvK0CuUC", "2vPISwlI86MC", "2Vtz2U0YwfYC", "2w21xW6Vde4C", "2zCQwpUiBQ4C", "2ZlyuvWbEzgC", "2ZrrIjNxnzYC", "3-miZHcdkrsC", "32WbDlmSvpsC", "34TzVbxCItMC", "36j09FX4Ho0C", "386tCTzeb28C", "38KxG4A8M6oC", "39-p0VTOdc8C", "3_374h5dBk8C", "3_9fQ3P2AvIC", "3_PuMHrMo2EC", "3aIhHQYywI4C", "3ArOAow91GoC", "3c3y-7X-64sC", "3D8OYIZRwsAC", "3egTJ6Z7D4wC", "3F24Bn6VhuUC", "3Fp_29EN7KcC", "3fqYGB4mxLgC", "3fxJth8ZwqgC", "3guiSGdgTVgC", "3h_aBCo6i7AC", "3HiqvIUWgf4C", "3hnQHPbFJJwC", "3hONWeZgkNIC", "3jK9ZlXeYdAC", "3jN22xIA_bQC", "3kNEq6fWHtkC", "3lEMxqeDI5MC", "3MIZKq1ranYC", "3nJMjtyGp1YC", "3nM1F7y2P4sC", "3nsjbUfUGVcC", "3phhwh6iKH0C", "3q2Eq8zgmgEC", "3QyrAf9ZG9cC", "3r-vREFcj7cC", "3rZw-_EPVf4C", "3uaYUrb3Nh0C", "3vstCdOrqbUC", "3WOUyq5v1vMC", "3xklog5kVGMC", "3yBfin-sKnAC", "3Yik-OVE_HEC", "3YlSMGY1TdsC", "3ZbIPm4dIg0C", "4-bTU49pdzYC", "42D8PCCBJzkC", "42Wb1DeDZjcC", "430eDScz92cC", "43NxnhZ6FsoC", "43Od3MQLYlgC", "44r9DSS8KLkC", "46ymyCa1wxUC", "471OUKKACq8C", "47nrSBRxGCIC", "486z9lE-jdsC", "4_AgRbcIr6QC", "4_iJAoLSq3cC", "4_z4WYiQkWIC", "4Akl8rzi8bYC", "4aNoFpNfYeMC", "4ASrUa2wyaUC", "4AUbNnnOzSAC", "4aUsKOTquxsC", "4bxhMCnmH9AC", "4dZ2XSr8Q2cC", "4E2lRue5TDEC", "4EKH5xb_9noC", "4elkHwVS0eUC", "4fiy0MYLs7YC", "4g13OnwNmGkC", "4GHIciD_CuAC", "4GpPGl-79HgC", "4gTg6RtCcwQC", "4GTKnxS0B-YC", "4H5adAo97PYC", "4hAc96cz3GUC", "4hTRWStFhVgC", "4I6Xt87fcIEC", "4jqKPqwvtuYC", "4JqxfgmYR5cC", "4NoL4waMF5MC", "4nzKiXyBbpwC", "4Ob94oaPjLAC", "4OTWxs3Xde4C", "4Pc4HWtsNx0C", "4PCa-OIL34QC", "4PDdk1K_AWYC", "4pmUjowqAzoC", "4Q5KuGoCDnYC", "4qtSF3BUbjAC", "4R5XBB5OKMYC", "4ReQ21nFIugC", "4ru6F85wGK4C", "4srHsnlrlAwC", "4ur4EOhMKxgC", "4uwZ_1DB8l4C", "4UyjzqBHRjMC", "4Vo0HxFivFoC", "4Wzg6wFJ5xwC", "4xqVZn47PIEC", "4Yog2csUCFwC", "4YqLWN2wjyMC", "4zd2rtmcqT0C", "51hqhyw5yLoC", "527fvY25QWIC", "52NGYwngkEAC", "535UHUWJUckC", "54hwWFwzvioC", "56R_N48VhnkC", "57wpL-kZkMIC", "58mx6oVGhR4C", "5AO87IbZ9CMC", "5Aq2JES6y60C", "5AWb-FEssXMC", "5BcjJrvW_k4C", "5bjgMS_VZP0C", "5c_gqEyozHwC", "5cMpxa9oLMAC", "5d6sV9NBYssC", "5dGBCJpdiMcC", "5DtSTKa7bO4C", "5DTSzxqYJOYC", "5FwFRu-KpoIC", "5FX4p9_1WdcC", "5g3YDlPvbeMC", "5GppqmU13pIC", "5H5Xwb0TuBoC", "5HtUn_dUmSYC", "5InIv4DbrwYC", "5jgs0k-XgZkC", "5jmer_whYZYC", "5jUzOCHaYAcC", "5k1D1TO3iQEC", "5KD4r_CYSjoC", "5kKktfcO7MIC", "5KLXsi4Hh78C", "5l4LUWI4__AC", "5LlddZgi6iYC", "5M_3ELtQQIAC", "5madOAUfKZUC", "5mBLFoDjM4UC", "5MLnr1BvaIEC", "5NBEubMrYCMC", "5oqluDvU9KoC", "5pFr6qrQb-IC", "5Q8HJIFhYG4C", "5Qo7FyPk7NMC", "5rapCfxxAuwC", "5rPbbFDSf5UC", "5rpdrfA2T9YC", "5s4263Q-xGgC", "5sBfwX6MqLAC", "5ScMu8WQjdkC", "5SvMghMF9MMC", "5Tf1QlnRbSIC", "5trx1JKxflwC", "5vcRmfvu3IgC", "5XFBBCvU6GoC", "5ZE_KUbOduYC", "5ZmNcrZuAtQC", "5ZVQYNczX8cC", "60k0Q9tpmKYC", "60RXI4Ql0isC", "60Z7Nmd05FYC", "61XoxwU8-7kC", "62498N4bQBIC", "62lgnny7vBcC", "636vJjnZIIEC", "65oYmARUPfsC", "65r1hSAq-dQC", "65X8cs_dD2kC", "665bZ8pwh-QC", "66ObtMtso50C", "6_bKL2anJpIC", "6AQh8rnlh3kC", "6aWcWDC3TLIC", "6B1KbSMzyD0C", "6bkgqiot7Q0C", "6cilOe8HrQEC", "6d_CXeCtmiEC", "6DHvMpwEzMIC", "6eEa5vcPW04C", "6fsDrED0iX8C", "6guLi7s0cpQC", "6H7ulUGEEooC", "6h_rIembAowC", "6HxQEzZcULEC", "6I6DaTsb7o4C", "6I_XgRJaBL0C", "6ik1kifDF_oC", "6iLhjabWnl8C", "6jhV6vRcbnEC", "6L4oue__6GgC", "6MazKMAhAPYC", "6mZJ3084ouAC", "6nGNXGARG1IC", "6NUSbK-8bpQC", "6omp1WoHuxMC", "6p4usBy65FAC", "6P_kU72NBJUC", "6PMJl92rdnsC", "6PZjdLGhui4C", "6qLYEzQdEQ4C", "6QOxw11Ay7sC", "6SB17J_nFI4C", "6SbuTgPmLLcC", "6SUMel5m5Z4C", "6TZ357AOYYkC", "6UmIXBfhCGAC", "6VdyB4rKOicC", "6VXkHAfQ3wIC", "6wFHth05xkoC", "6wRUX7MkwoMC", "6wS_ijD6DSgC", "6Xg_4XutcF8C", "6yJgat3DGpQC", "6yoK7Vc4It0C", "6ZnrAf_6qnsC", "71BIq6WlZHIC", "74fnsRmeeZcC", "74IxULN0gMIC", "75lu6O9COfkC", "75MFGEDPaEkC", "75VcWvFHayoC", "75XbPC-KNrYC", "78FYunWVxRMC", "7_kOF_M1-KUC", "7AFwtCfB7acC", "7an9QXLFAjUC", "7AVkLNqAXNgC", "7bdvut8WP7cC", "7bTaHr0aRLQC", "7d1sPO13R1EC", "7eepHa_auJYC", "7ejh1RnNDt4C", "7G_PDrC4i44C", "7GIZt27ghV4C", "7GKlsIIKIFwC", "7glfIaLXXl0C", "7HBjQKtkJfEC", "7Hm_x32WxHIC", "7JleDMZzqAkC", "7K7btCVXqEcC", "7Ka1tCuCSe8C", "7kmTeOjHIqkC", "7KoHDheyeLwC", "7koU8I73-ZAC", "7l73MSV5egEC", "7lVwqywir4cC", "7nApdqEwVUgC", "7nVx9drTk10C", "7oROVAHE4a0C", "7OVLn9anvUUC", "7Pn5L3ughJkC", "7Q9Aa2V0lAIC", "7qDcC963BiUC", "7QthwQXdgrcC", "7spIVm2l22EC", "7T_pCvdDUaUC", "7tsLoy-EqqcC", "7ubpShS_NNoC", "7uKs4fKOotUC", "7vC8lb2LmXEC", "7WrCSCqMk5gC", "7wZDnZ_SiO4C", "7X8bKjnsHO8C", "7xLbhRJ16k0C", "7XoCr6MnKBwC", "7yNyE-KnjlQC", "7ZlBLYPr5QwC", "8-jO2cfz-VwC", "8159Iuor26YC", "81eLz91JljEC", "823-9jxPCpAC", "84uZ3ZHG6T8C", "85UFLsRW8roC", "8_9uh4yBAl4C", "8atLfmOFeuQC", "8bmry5hlWh4C", "8CugkWQbJysC", "8DOn30Qyw30C", "8ewCpaBQyUQC", "8fdJR9HWZqMC", "8fZ8-kK0hw4C", "8HDKuioUCpYC", "8i65CApWCnUC", "8JG5zJYz7CUC", "8jYwuP_CjhgC", "8Kf1No-4hQgC", "8L8KKh5wi5YC", "8Mj32gB7y3IC", "8mUAIXRsBLoC", "8nelbdOwdq4C", "8noJOaaVU6kC", "8O5x8sSAx4MC", "8oS85GWI8OoC", "8oWTPPpsUMQC", "8P4SGL5aoW4C", "8pODWye3Ob8C", "8POir4-AgKEC", "8pQROr5O0_0C", "8qg3Oetnx0AC", "8qHS392kglMC", "8qjgCKbYltcC", "8rtOsFjVFz0C", "8SBem707Yt4C", "8SkFHEBeEqkC", "8tUVMSsC9wAC", "8usCJVZY1vkC", "8uYCrSyHP5sC", "8v2CpAHixHcC", "8vUDE1eb62QC", "8W9Tfg8FKskC", "8yiDXnF7Ov4C", "8yW-cyScA3QC", "94JNerM50YQC", "959sKkDoLhoC", "95Kog5v4ZxkC", "96I7DN6USWQC", "98eI044RjlwC", "98neg1g3TVwC", "9aIS36Ls1BUC", "9AYE6k0JlNoC", "9BsQnk11wU4C", "9byEjVLRTo0C", "9cCm0OfLJNoC", "9Cgg_vy7564C", "9CHY2Gozh1MC", "9D17GGcyTSAC", "9DK7ks9IWXEC", "9dwxo6JrZucC", "9E-Nnf6Fwg4C", "9FcHJ2mMNDMC", "9gtbYzuaEEYC", "9GZxaRT8xxwC", "9HfzJ7pC5hIC", "9hMP5ZMu6bIC", "9HwlumbzHh8C", "9Ih79U3L6XkC", "9ins05KVIIUC", "9JL12VkSsCEC", "9jV2bzHyu9MC", "9kjJTZCFsTEC", "9LwpJ6vDsdMC", "9M7dSx9LZe4C", "9nzblUF0eAUC", "9OMcWS5K-JMC", "9onchuJ-bFkC", "9Ovgjh1n6j0C", "9qSiBeZ9g9YC", "9sVoO8hU54UC", "9ULQh89IINgC", "9Uqbhvte5XsC", "9Vd-omTdYlAC", "9vDpbW34qqIC", "9VGdzQAgkCYC", "9VjP5GOScxwC", "9Vq50oaOocgC", "9VujMtI10RwC", "9vXYz7yEG9YC", "9W_VB5TjxxoC", "9Wpi2Hlm4MwC", "9wQEaXEixGEC", "9xLVEPR-ax8C", "9xUzU2cj1dwC", "9y7YwwpBoaUC", "9YlO33BHSHYC", "9zAb6Y6pX0sC", "9ZzWRz9x8mwC", "_-9MFr6cPVoC", "_-bp1p3HgPgC", "_63ta-thTJMC", "_7GjfLUd1WwC", "_7RD2jwMU2wC", "_98d1xdtxC8C", "__3JqZOEp5EC", "__gCuLAZ8uMC", "_BACCuQFqRIC", "_bgzRnh4uvMC", "_CK8U_bzgKQC", "_eddVnC3paoC", "_EHHasGKCGsC", "_ExE6OQPiGgC", "_f9zqlrcyO8C", "_FCJWkq9KrQC", "_GnJbq2iFUkC", "_hPWVrQRMf4C", "_iAlLypvvfoC", "_ibuYRplNHQC", "_Jk8MqimEX8C", "_JpZrM94YR4C", "_ku7YLTev3kC", "_lRFOjkbwZQC", "_LTiSkrUhBEC", "_mle6G_iil0C", "_n7CFCn4Bp8C", "_n_epREv668C", "_nyan_kWIAgC", "_nz0jK0MJlkC", "_o7aIHckJyUC", "_OG54CMBjAIC", "_oL0dCJFmisC", "_P5W5ErBQRYC", "_pK_qTbfTboC", "_RWMbWAFgKkC", "_thyQHEuT4EC", "_UhVaWHDKOoC", "_Uwy3JDboDwC", "_VfWsBMSLi0C", "_VR8JnUErcsC", "_VUf45FZR7cC", "_WT-4kawqfwC", "_WZJrC81yFQC", "_Ybt_zNozBQC", "_zn3mGYYu-QC", "_ZVFWAQUossC", "A-xmIRhRqTwC", "a1s71u3ecbkC", "a1xVJU0TTUsC", "a2YtdM1kNOcC", "A37cr4HAPPUC", "a3BwzpHgqxEC", "a3CzoaCAFuUC", "A3KRKpQmDTQC", "a3vpnWCjI9gC", "a4EHi8i8vKcC", "A4FlatJCro4C", "A4KSlbYtIe0C", "A6TPi6fp-uoC", "a70HDMVS3goC", "A7fvvz9Puf8C", "A7ZC50U1oRAC", "a94RqsnuXKwC", "a99LnCcGJ5cC", "A9IxOrv-R4QC", "a9JI4DQz1EcC", "aA8SOiFWxZgC", "Aa_Y8uZAhBMC", "AAbqWAMDbIYC", "ABbCI7z4UwMC", "ABp6Tv-fI-sC", "AbpcegyuZXEC", "ACbAE5UBipkC", "aCZqlP1sQ1sC", "aDdiSKR9FM0C", "aDHKcmoCTPEC", "aDubQFDT-RkC", "aeJHQL1pcXQC", "AFBraBMN6_AC", "AfBzWL5bIIQC", "aFkVv3pStR4C", "aFSCzaM9udYC", "aGAEWDI3SR4C", "aGfLOwZpiVoC", "AGLf_DHdLnwC", "aHGkzwyTamYC", "ahrnGNSpsqwC", "AHVDtveqlpMC", "Aih1JWFo-V4C", "AIKDH1Cj2ywC", "ainFnR-j40oC", "AIOAx6dQvDsC", "aIWeYVc0oF8C", "AJDI7v4LQ8YC", "AjGP0FxZPjIC", "aJpvNKQuIhgC", "akCti9PoMtEC", "AkdV09wlYrEC", "akSN21Lmk08C", "AKVCLBIHI-MC", "aL0Hac3Vkt0C", "AlSJt1fr4gcC", "ALX9A1_RphsC", "aLyWOYcC3zAC", "AmG4eysFl-QC", "aMnfXh7vR5wC", "AmVYKzTrAwAC", "ANqfqIU-CcsC", "aOcP4_I5BY0C", "aoqB4n95pSoC", "AqvCtK1kMooC", "ar4-mvqsDpgC", "arsC3XaMc8AC", "aRXw5s8dIa0C", "ASADBUVAiDUC", "asfMR1SHK3MC", "aSlsTWM5vKkC", "aSVMepyMsgkC", "at_a1W2T-cMC", "aTHN_UCm-j4C", "AtJFLz50tKwC", "ATTwQVlUWq8C", "aUg2zQ9JpHQC", "aUp2tCXJXvAC", "AUpDiXOndHUC", "aUpXCkefjzYC", "aUSi3pnKFBoC", "Av3TOpuoAnYC", "AvNcbH1YJPsC", "Aw4AbukNCzwC", "AwB4KfFK8sYC", "AWBwHDU24agC", "AWT5lQojEAcC", "AX9nvlKGHk8C", "AyNAatS5qqwC", "Ays4piyTwq4C", "AzF2gSsVKwAC", "AzPA1HkjlngC", "b-jYDn0W4jgC", "B0wtpZfwHN0C", "B0wUhmZ-NTYC", "b1a83Kk4DesC", "B1BFDofS5SoC", "B3JKLQKkStwC", "b3lBRbqekB0C", "b4v3Y26PCXEC", "B5wmGGlP1EIC", "B6JtLrtLaCIC", "B6R4wOfCIp0C", "b70POfydeDAC", "b7t1qbZ_QFcC", "B8d9iJ8apgkC", "B8I5SP69e4kC", "b9zjAJfAFa8C", "B_nl_2GbkJ4C", "ba_b6tQkhv4C", "bAnMckqrfeoC", "BAoRdCd8TmUC", "bBefvXbMFBYC", "BbFxn48V63YC", "bbumz_zoKV4C", "bBVDgM-P9FoC", "bcefaXa6Q1kC", "BCfA2O2fTwoC", "BcFbVTfg_W0C", "Bcl8jLxcXboC", "BdeTbmRuc00C", "bdhRK0tS48AC", "BDt96S0N65AC", "bE0GRAGGUrMC", "beFcfAQa99kC", "bEHuIhK7J7MC", "bf2HhCbOAHIC", "bfaha7FaYhwC", "bFEOaD-mxC8C", "bgd-Xz5ZT38C", "bGFplIW399wC", "bghSgDwrzToC", "bgnHHqPg6R8C", "BgyurV3ICEMC", "bH3B2P9XcRQC", "bh6QDsR5tpUC", "BhWn8Iz8LR0C", "bIdjWgGc_2IC", "bIfMKp_mfesC", "biT8dZq4PuYC", "BjOJBR54jkIC", "bjPId1bPwo0C", "BjT9KvXEfywC", "BK-LtH8d0esC", "BKIY52Z8pgMC", "BKRO6PnCH88C", "bKVCtH4AjwgC", "bL4TmnauSkAC", "bl8trXhzTS0C", "BLACCNPoWdcC", "BLkGyV8RhaYC", "blLlgCHPB0sC", "bm3VNPlOTQoC", "Bnfbypa3BswC", "BNg8tdL2IdQC", "bNO2fqChNnQC", "BnsPcZW4G7YC", "BNXcn77NIhgC", "BOrep3yRZ_QC", "bOU08nfl1IoC", "Bpe0K_52NisC", "bPIcDjVeFGsC", "BpSGbZ1FlMsC", "bPT9BEcB9yMC", "bqjywa-XgVUC", "bqk8lFZbwuMC", "Bqm1_Xe9ry0C", "bQs3aed0XpAC", "bQTvg2fenkYC", "BR_zWeWMyvkC", "bRelf6_a_vgC", "bRHIrE_15IQC", "brHZvvgElL4C", "BrztZcFdZiAC", "BSTNdiLXE24C", "bt7t6ns2KKUC", "BtDz3DX-wrAC", "Bteluw-7IuEC", "btiYGZoxIqgC", "Buh064bRpcIC", "buhJIDwSfvAC", "BUJFpYcaUnQC", "BvIi0x57o1IC", "BvOjlSpjHlIC", "BvR5XGRoUp0C", "bw9TzuCg-XYC", "bWam1RUmr3oC", "bWjUf040CJ0C", "BXjz9OQ9244C", "BXrHqqUYu0QC", "BXUFSlTjS0MC", "bXWadNV-6u8C", "bXwlMj4U7DMC", "BXxL19gkswcC", "By4_hzAoz2kC", "ByGCiNwH134C", "bYP72LvvVwkC", "bYVEgXbiunkC", "BYWO2bedmg8C", "bzmmbxAm71wC", "BzNdfTTR05sC", "BZzefDlot_UC", "c-3traD-fqwC", "c-uDXSRWKtYC", "c-umCCjv3SYC", "c11HBwElG-4C", "c2b6jQ8g3sAC", "c35YVifvGekC", "C39nU_byNRcC", "C3jKDBqihB8C", "c4HfcwdQOx4C", "c4Uo4t786NsC", "c4YgBy8UPcsC", "C5WIK1vtjtMC", "c6pIcEenHasC", "C9HN6kAsf7wC", "c9P0pzEobeIC", "c9pTsKXcDawC", "c9qVVZnC7zUC", "c9xHWQFTL6oC", "c_A_wfFe-CoC", "C_E4lDNIR1QC", "c_lN_q15ZiEC", "CabxBb9clOIC", "caEQOhtS3hAC", "CaERQZBhilYC", "CaP6lLd0dwAC", "CAvUH3oP2eoC", "CB0dA-ZFWAcC", "cb2xefiR0D0C", "Cb6qWgecAW4C", "cBnMKPwfW10C", "CBTrm7jkzpsC", "CBvLF7bfQD4C", "ccjm9l0QB7gC", "cCQTcs4l1JsC", "cCuFrbe6vmkC", "cd4Z3HcEO0QC", "Cd5-_TCGx4YC", "CDkv3NDfwVoC", "Cds_cZtYcScC", "ceHgmfCMoasC", "ceKTSaO_9X8C", "CEnAWRgbntsC", "CfdJBs11wvsC", "cfHQCqaLYN0C", "CfnHttupr28C", "CfNq5z1tAEEC", "CFp8EVv7if8C", "CFPrzcHtzSsC", "CFTr0KgoL8EC", "cGJPWgPMCNQC", "cgMCSrDxKGAC", "ch_1YF1-KBcC", "cHAkoOH2DMUC", "chi2uKo8ZxMC", "cHoIAP6CTkoC", "cIcKnR6xSrEC", "cIFiNRH3oWsC", "cIjjp65FSXYC", "cIyvVjQb_pcC", "CJ-0e0aOVWsC", "cj8od4sef7wC", "CjCwAFaDRHwC", "cJif5Dq9CyQC", "cL7u1-hoh_sC", "cldKKwvF284C", "ClLma1ICDlMC", "ClNVt6WTbb8C", "ClWhWKmi0TUC", "Clyj7FsJ-o4C", "cM1bbraEf-wC", "cM_nIqO2C6cC", "CmFIQ7IxOSwC", "CMLtWJG2rLEC", "CmT_hQsgbmUC", "CmUAxTtJ9zkC", "CN2J7TYQbX0C", "Cnok6Lc7iSkC", "cNRpm1CDonkC", "Cntm93auIewC", "cOEJR5fIGEYC", "cOgcKVnLYfkC", "CorzOY37E0wC", "cOsjF0LQ4WwC", "COT8nZsi6zYC", "Cpn5r4pZl-oC", "Cpo_2d7tixUC", "CQ0EbEkT5R0C", "CQN5a45npM0C", "cQqB_hiupPgC", "cQUnrIAaETIC", "cqYYnh2MVr0C", "cr7dpSLxZy0C", "cRCPp2i9OvsC", "CrIcAjAOsE8C", "cRlHpXV8AbIC", "CRnR87UQbMwC", "cS2P6PlrSgwC", "csMB1KOk-gcC", "CsULPe9EgpkC", "CsUSjmbYMTYC", "cTcDy6hSxakC", "ctgEoKKPpZoC", "cTIDvEUe5M8C", "ctjsg8adGaYC", "CtuGKiTX0W4C", "cTz3Jefso-EC", "cUDLrfCvQiAC", "CUIyI8S26BQC", "CuLIcpvh0E4C", "CUPytpxAQy8C", "Cvgt-6bCw1sC", "Cvm8DVwnPYgC", "cVOLHzwR4oAC", "cVPwYwrr6iIC", "CvWN_1APPXEC", "cw9wjb7egFYC", "cx01PMJfsv8C", "cX18oqSNkjwC", "Cx2vq7VlIXkC", "CxkAwssQTXcC", "CxQtw38sy1oC", "CZ69KrLXC30C", "cz6HU8c_08AC", "CZfPnHEerUEC", "cZNeFYLdxRUC", "D-bqdwkPGfMC", "D-sEvbguNukC", "d0iR5mS_zckC", "D1tkJQHg8g0C", "D1vnFannII4C", "D1ydYIWVoGEC", "d3bH0MfA-s8C", "d3bVUgvRfuUC", "d6pegMjbh_MC", "D8c1-Fv7h4UC", "d9bEk7ikuf8C", "d9VWRpdQHa4C", "d_3DSXAfBjgC", "d_Kua_fO8WoC", "d_LpdqXksIEC", "Da7QsXAp2KAC", "Da86QO7OFmMC", "dAeNUVbKYZMC", "dB5Ze26QulcC", "dbhDwMRcf3gC", "DBKEpJmhfIQC", "DBmmIBF7QVUC", "DBQufQNi1NQC", "DbraAOMCglwC", "Dc_6-SREBYEC", "dcaoPhSdJwwC", "DcELPMMgF54C", "dCyscToVVJkC", "dD3IDjLA1PAC", "DD8rqgXH_IMC", "DDas282zyFoC", "degnTau2SCYC", "DejCbO1mvCYC", "DepEk9KiKHsC", "dFlv3zn_2-gC", "dftQW8wGYMAC", "dFWN0snaFrkC", "dG0I00OuLIYC", "dgJP6B7WqHsC", "DgLsKo7b80kC", "DGmPXx0nWwQC", "dH5YF-Taks0C", "dHLL9X8XCZkC", "dHojfMulawgC", "DhpA9dhtQZYC", "DhpKxQT8n74C", "DI5YIApq2vQC", "DiGNzXnAjigC", "djG2jb-B7wUC", "djQDeb2wd7EC", "Djr-9RvWNtgC", "DjSLzk3CX24C", "DK_DLjGY80IC", "Dk_moRw2Q7cC", "DKah0Hn3XwYC", "dKHiwNqBUdoC", "DKwK76kPQt8C", "dlpWT0J7s94C", "DmcHmv_3bRIC", "dmI4eW8qvOYC", "DMJ_O5RaymkC", "DmQBgx20PP8C", "Dn1cbtf1EGkC", "dN2h8uLDfHMC", "DN6kyW8Ca44C", "Dn8kGUQdQuoC", "DnCWgeoalKQC", "DNzYBE-otp0C", "DohJGXw-I2sC", "DoHq1DrnfzQC", "DOJxZvrWwI0C", "DOLD2wgkb3wC", "domPQ29OEacC", "dOTparP8u64C", "Dp9CZHPlkwcC", "DpAuk5SvwlsC", "dPijFCaOncoC", "dPT9-WijqI8C", "DQEm1m-yEGkC", "dQFBTKi4aYsC", "dqRhjQVSm7MC", "dQUzctUAMDYC", "dQWOY1QeuFsC", "DQwSI4mEcqEC", "DRzA4j9SvMEC", "DS1CXLcOFDUC", "dSAHJCmGqbsC", "dsMzPEBfpjgC", "Dt_XdDY-VbMC", "DtLgoas9kAwC", "DTTF3ufqLjkC", "DTWZLMGFFgkC", "dUgzGsEMhoUC", "DujYWG8TPMMC", "duUJEp4WbQ8C", "DUwMDknxu-kC", "DuWRmiB3QRMC", "dVBoRh77mwAC", "dvCpl1mBef0C", "dvPX1ljtXnwC", "dvQbGVVYfRsC", "dW3MS88NZR0C", "DwfmIaoLWLgC", "DWmtB9szhFsC", "DwWpvfGhDJ4C", "dWx8yejRSncC", "DX0zfCzuuxgC", "DX1JcMNgz7AC", "dXnlwi2M5ysC", "Dxo1Qm2SJPIC", "dy33QZD4XU0C", "DyF5zrlztJgC", "dyTox6KgOeAC", "dYZyzp-I9hQC", "dZ2wQGn69BkC", "dziWBc9bbesC", "dzTY5Nf-IvMC", "E0-t9ZaBm_kC", "e0KEphnVexsC", "e0rixLVIlVUC", "e0WEjH2EDmYC", "e1_oKxr5eJ4C", "e1MKMiwPJkcC", "E1nPKuOF5KUC", "E1UQ9VEX7qAC", "e31CwftjgdkC", "e3TV6jdCc64C", "E4Aj3o80jRUC", "e4qyRM4WA60C", "e5-b0sEOz-oC", "e58nW0zCKKUC", "e5_yHiOT4QMC", "E8-Tv_oreLMC", "E8l48-DZln0C", "e8vVyX2ikzsC", "e9hmN8prjWcC", "E_5TjwpQuSYC", "e_fNo1nVkhUC", "E_HCwwxMbfMC", "E_hncSqZ7goC", "E_KHeqwctTQC", "E_TZvz6qRqEC", "e_ZxZaahQt8C", "Ean4raPg4loC", "eB2ACRDcxlAC", "ECDSra1prI0C", "ecLQy_-7BiAC", "EcwSRllC_okC", "ECZBTmAEG5cC", "eE48-YnJfwkC", "EE6BmZJN4-gC", "EeD7Y5RBHgQC", "efF7PRNFoTQC", "effyPdL2NggC", "eFIZYpxKuFEC", "eFK1EFIPqI8C", "EFqxt01Nwg8C", "EFR46h9YDCoC", "EfTQANaCeXsC", "EfUlyxSlBYMC", "EFwE6RwAuoEC", "EgclZLFSTUkC", "eGHoO5tG_nsC", "Eh-xe5o-6K8C", "Ehb1MTESpuMC", "EhfdKJLrGLAC", "eHgwsL-vZiUC", "eHIMLGwiTvQC", "eHN7J-6aNOgC", "EHsRgwWtk14C", "EI9S88rMxDEC", "EIbxfCGfzgcC", "EjCncRsUgHgC", "eJkALfK8M_IC", "eK1N_aPZ0ogC", "Ek623DbKy4IC", "EkBtyXWfoxsC", "EKUyRL6x6uoC", "EkyTTvjNRZAC", "ELgd2EnTZbwC", "elNtT39MEXEC", "eLTIJ3AE5K8C", "eM1vHNOSSLgC", "eMK29sYgRkEC", "EMUiAgplnKMC", "ENbwTd9dVRgC", "enZcYyGQIKEC", "Eo0xcLkycIwC", "EoDh3KdviUMC", "eOGwcJ4NYncC", "EojH3awYyHMC", "EoZ6ZhT9lBwC", "Ep4qonrFOQEC", "EPBl0u9SVLEC", "Ept9BBfz2tUC", "ePz5Jw4M1G4C", "Eq5STLb0fO4C", "EQJgKCbP-v8C", "eqKPCxpqQOUC", "eQOtX07lJcsC", "EQpanEMpfYEC", "eRCRwf0SRR4C", "eRievpkUWQkC", "ERoAm13YF8IC", "eRuTokPwUa4C", "ErYz2d6gY6kC", "esRQjcWyrTwC", "etrlevyLof0C", "eukfBSKh8s4C", "EvkY9m79rlIC", "eVQPSr8nWekC", "evTo5YGZO0MC", "eW0Zrxp07HAC", "EW1Kkhb6n3AC", "Ewc2cyySU84C", "eWcNS4HPvpAC", "ewiGTwfA8ssC", "ewLMKATa0gwC", "eWwDEkWUxMgC", "ExGgBlCFbkkC", "exXk4Fm_pOoC", "Ey6BJlwygssC", "EyQosEtLlOMC", "EySzx3TuNdAC", "EZC1Ye-Oo5IC", "f-HQhhMFUkwC", "f-rkLLtY6H0C", "f-RuzV0i8TgC", "F-rwIWBVyYcC", "F-RY0fDsun0C", "F0aqlEBEWkwC", "F0mUte90ATUC", "F10tYokQD9kC", "F157RUqNSXYC", "F1IOWavdlooC", "f1iQwHzJeh8C", "f1UlXrOFgLgC", "f2hyf0QoB_0C", "F4hRy1F1M6QC", "F5_kVFwCazQC", "f5a5-Ib4hHcC", "f5tFDQMnLHwC", "F6aJtNcwyw8C", "F6gFtTTQktYC", "F6nx06oYabUC", "F6tJl6mVOmsC", "F75UStxhkkgC", "f7a5KxIcznAC", "F7CRxEsVDPgC", "F7IqEFlwXkkC", "F_4zWthNQjMC", "f_bTDVhQGgIC", "f_ViRN4litIC", "fapATeBaFuMC", "fB09Jo4niQUC", "fBCqF_bIaq0C", "fC0ZfSFwlGwC", "fCcP6lFS4l8C", "fco4osDhkKoC", "FCriMwwYPV4C", "fD56E-G_xtgC", "Fd8F9dBdcesC", "FdPFkAsDJVgC", "fE2quB852jcC", "Fe35NUMG7PoC", "feaP99EP7qMC", "FeVe--XHelEC", "ff30hEbK72AC", "FfAWQh9ybFYC", "ffdtbrNuaMQC", "FFSNOAzSRRoC", "FFV9NEUIewkC", "FgbDyllfOvYC", "FGkQODpSS8cC", "fGmk3NEFuO4C", "Fgo-tF4Ko90C", "fgxiezARYdQC", "fh2jW0S7w-cC", "fH7bDuYLQuwC", "FhpnSb-IuOQC", "FHWCqMcirnIC", "Fi8mroRSCSIC", "fIo_5qn2o9kC", "Fiolx9qMANMC", "fiOMox-7gTAC", "fIqGGfeRBuYC", "fj-ryrSBuxAC", "FK7ribUaJpIC", "FKb8wL3gUKIC", "fKXaYqo3bx8C", "flaI_VVftE0C", "FllyRnur8loC", "Flp9WXMHl7MC", "FLuHOd0yA7UC", "fmc0r2y-22YC", "FMLUGVui7ZMC", "fMULJZsTTWkC", "FNEcGO3CE3wC", "FNOtkFTYV4wC", "FNQd9jEmBfAC", "fNZUj6md9ZUC", "FoF7ChJwwxwC", "foFiHPRRc8YC", "fOSGJMirZ-QC", "FOzQLFvO-TYC", "fQ7UcdtVp9UC", "FqADDkunVNAC", "FQlgRiO4anwC", "fR4N__Pb408C", "FrLXpwIZ76IC", "frTY9Rp3TdYC", "FSjxitCb7zkC", "FSM7SCIiwjQC", "FspJxw0-ETUC", "fSs-Lnk-FdEC", "fsTBXJPVmzgC", "Fsua44ixWTUC", "Ft6qGWDysl8C", "FtjZ6hzP56wC", "fUol0UXx4rQC", "fuq94a8C0ioC", "fURd0Tspwt8C", "fv1P6kkUCJIC", "fvo2oenGUfYC", "FvpO3khvlX4C", "FVSNqmjpE64C", "fw3XxD0BHfgC", "FWLRXbPTC6oC", "Fwlt7N5UZwYC", "fwPtaCpO84UC", "fXKNHh6Fj-EC", "fxkWKWW29sgC", "fXT7sPDDjRMC", "FxWYa9-6KFgC", "FY1QFdG_hWMC", "fyDwxO_VuVEC", "fYlIEPXSi34C", "FYMVNMlz130C", "fYRbsK9_tIsC", "fZebM83rGrAC", "fZPcGedgSqwC", "fZr_tlFtVlMC", "FzxZ2YgfD_0C", "g-IoEnhfOYEC", "G-pnMUtTsuYC", "G0kMXkW6S64C", "g0r4WgTIhoEC", "G1i8tzrJ1nMC", "g1QHBOBzo9kC", "G24-ZSfNr34C", "g33mIXKIykIC", "G3bGAAhRcTIC", "G3lHg_uBcLYC", "G3W-hsO0Se8C", "g42RGQFvFKQC", "g4A4yTP-TZ4C", "g5-rg_wWoTUC", "G52EfFF4uQYC", "G5F1tbJcEcQC", "G62P2UNKancC", "G67WBcKiyfsC", "G6bPsjIoQRgC", "g71HD_LypocC", "G7Z4RdEAbB0C", "g8ugKhOSyuwC", "G9sZf7D24a8C", "G9WBMa1Rz_kC", "G_8DeR6vSREC", "g_dfEmUIjGMC", "g_JJG_kSCkMC", "g_K0HqWU538C", "g_Kp2jOkDj4C", "g_S1HnZ_DwQC", "gAasB1B_2RwC", "gAgA6Uoe8rEC", "gaP66nrOT6QC", "GaWtd5zJfB8C", "gBcCK8XX0HsC", "gBVThe2w7O4C", "GcfWbkEzwmgC", "Gcsz0c39QzgC", "gDkl_VliBRsC", "GDpsUbHGfxEC", "GdRDldOlrawC", "ge63yWT1Jh8C", "gEeKsYhnB3gC", "geGQYwp-tC8C", "GEYIRkKv3N0C", "gF3Orr5FW2MC", "GfagN_c7kHoC", "gfosqprkt84C", "Gfrd-On5iFwC", "GG2osAta-gIC", "GG7ihqiDfEgC", "GHbKVdz0US4C", "GHgWuuohd_0C", "GHocqremTkAC", "Gi29tN6MgswC", "Gi2nNkMLlB0C", "GiXy0_5y0iMC", "Gj_s6K3rGnAC", "gjHbpWCWObYC", "gjmRMSVmOM8C", "GK6aU0VUgXcC", "gLINZTfo4q0C", "GlmSvzw4yO8C", "GlsRJG0Wv44C", "Gm0rtSQhsqMC", "Gm6rlJaoUyUC", "GMELuWd6eowC", "gMgWtKBHly0C", "gmgxWRokQkYC", "gMNE7Egw-0oC", "gMV_uHkuuhQC", "gMyoix4eabsC", "gN1fWNxFOpkC", "gN7t338bmDwC", "gNBeDixTabkC", "gnshgsLyFckC", "GNsue2JEQigC", "GOf8H53N2S8C", "goiKKGuC4w8C", "gOlJgcpAuF4C", "GOPQn8x7CWQC", "gOreWZwKWrYC", "gow3DxwxgEcC", "gp7EquTzSBcC", "GPdMResNFOkC", "gPHjjrNWaQwC", "GphNKJvn7aMC", "gPKEXnUTF48C", "gptMDMPRG_kC", "GpvBc61vwqsC", "GQ77yT_qt0EC", "GQGJ3Ow1N-gC", "GRaZnzm6avoC", "GrHMph5SUrsC", "GSSNC1P4BlYC", "gtd3lAtcz28C", "GtEwY53Nx7wC", "GViLsAsZMeAC", "gvkh_emQHkgC", "gvSz7ipNnTMC", "GWgdn-U_kRcC", "gWhf3WFS-FsC", "GwJO1p7nsg0C", "gwSzTVp4K-YC", "gWuT5dW_-n8C", "GxC3w77TCYYC", "gXez_eYk59cC", "Gxi21X4yFckC", "GYNs63lQGUwC", "GYSxKPQ9db4C", "Gz5Jhh-BkO4C", "Gzjj9mSPAGEC", "h-H5Ss75T-MC", "h-v-y9SzGQMC", "H0LnK7ELmwwC", "H1E-EV19VREC", "h1xzw-srDvIC", "H28iGCH19IEC", "h2cV8_ebXhIC", "H2t1O8vkIJIC", "h2UR_DQnsG0C", "h3P1koY9OtkC", "h4g1ZN13EBQC", "H5h5PxnwNyEC", "H5JDad0NO3kC", "h6XG5Dg7dUUC", "h7A74b_8x8cC", "H8RcOH7aZnwC", "ha2jMwKX0DwC", "HaBHzd-VzYEC", "hAEHNznGeXoC", "haJh0MARCywC", "HaNL-mjos94C", "HAxIoUSLLMMC", "HbHaf10rZb4C", "hblx8fw5GoIC", "hbNOan-tY3wC", "hbz7X90tZtkC", "HD0CT7WqwWQC", "HDBdFBkFC6QC", "HDHAt-fviPkC", "hdoEpslpoi8C", "HdQZbAIXlycC", "HeAXLBJeUO4C", "hEIVV2REz_wC", "heMeM6Ca13oC", "hEqF8WFVYO4C", "HestSXO362YC", "hEZN_ll8vTEC", "Hf29RRC82H8C", "HF37vLFfYGgC", "hG2JWfNr0hQC", "hGeLsgsEhm4C", "hgscfLr5dCsC", "hgucJFj4adYC", "HgWWWv62BLMC", "hgXbebNQ918C", "hgZOV9vxvyQC", "HHJtGY5skf0C", "HhwifKDS9ZkC", "HIcfQr37mIMC", "Hiclc2KYaUcC", "hIJsvrXcswkC", "HIuRezqOUNwC", "hiY-wWTOdFwC", "HiYK_b6uu0oC", "HjDPRIC6QhwC", "HJexhW3C0TIC", "hJNp0GHQvPoC", "hK-_lL2c6roC", "hKCorSddfYIC", "HKfPdJDAyfEC", "HKphymCGhlsC", "hlbSrcGnhRIC", "HlhvoI2T_YYC", "Hm0FthKQuDAC", "Hm4b2XIZwMcC", "hMFecLAIM8QC", "HmFNOLfs-KoC", "hMv_9ZjMRrEC", "Hn_Vorrsv-oC", "hNpWUTs1QkQC", "hNvRVcLCgc8C", "HO60dGlf-lMC", "hoAYu1WxtrQC", "hoya5L_WctQC", "hpCQzNmvvHAC", "hPsfiopl08UC", "hq7DvqIwmbAC", "hqSCkysc7hIC", "hsenzAimpCgC", "HtUHrHlvcKYC", "HTy5GsUWgO0C", "hu2XWXmlZDUC", "huBRQ5Z6020C", "HUCFqFU-xBwC", "HUgP3InN37cC", "HUGsq_23hC8C", "hupeuMVYj2sC", "hUqzwC6RWRAC", "HurESoDQljcC", "hv4S5PPzggEC", "HV8NIZ-NbCIC", "hVupJKgpmzcC", "HW7zAmsuvQoC", "HwC8gF6F-7gC", "hwJQOwg-MGYC", "hXCi_DViuqwC", "hxf4h-HJU9AC", "HXUNz8hnnNwC", "HYShm6Q-lkEC", "HyyYMH-0I_sC", "Hz1jfmQ47tMC", "HZ3XCz-LrngC", "hzBJHOw9MmoC", "hZSi8EN4zgkC", "hZYGqOZbWcoC", "i-A1_UzfaYIC", "i03DqaR5kngC", "i0as8wwA51EC", "i10GqpzQvd8C", "i17KR1dhTTAC", "I1jxgTFq4JEC", "I1oOcpvsmOkC", "I1pE68kvpXcC", "I1RDqTYimL0C", "I2A0X4ZAVs8C", "I2jCJnMD96IC", "I2x_hrAV-toC", "I37XTdpG9voC", "i3mP7paNg68C", "i3vDCXkXRGkC", "I3YPskM9ygEC", "i4nmYgQDx1AC", "i4uuzh0r-9MC", "I57EF0rALpcC", "i5fKpFIR95IC", "i5GAf0Tit_MC", "i5MP574eUB0C", "I5OlMVqGBKAC", "i5sVopbSUigC", "i5xPLt4TBhUC", "i6-rsPcw7nwC", "I93wHcKkkxsC", "I9gXed3hj_0C", "I9p_m7oXQ00C", "i9RevNyPg20C", "I9yZKs30ChMC", "IA-C9T4ekAQC", "ia3RRTlLkXgC", "Ia3XMdZ2bOkC", "iahDFfxz65UC", "iaUAJo2Rjj0C", "IB0NsrW2KVMC", "IbHfDN-E0KoC", "ibM2xIvpQvIC", "iBpOzwAOfHYC", "IBPsQFc0TrMC", "iBS7a-HZVmUC", "IcdPGTpcQ6UC", "ice0iBehDTQC", "icraAr_CUacC", "Ict1i48rcaQC", "Icxfcg43NswC", "IcxFeiSD8xMC", "ICYTHtzte0UC", "ICZ1TFX9kiYC", "IdNz020y6RoC", "ieBUz8TwIYEC", "IeWxeVx7MFMC", "iEY-2kLVjkYC", "If2xFIsLAxoC", "IFGrnP1OGI0C", "IFM4VrHJlPoC", "ih89HAkmZ8YC", "ihDdAWPakwgC", "ihqYRudK3nYC", "iHS5AiZMJ-IC", "Ii4oNrOSvuoC", "iI9xFYwnTt0C", "iirHge-GkdkC", "IIVa4C8WZ1sC", "IivhUAX7nUoC", "IJBNvCsXfnIC", "IKAb-bSQ3bgC", "iKIFlxm-6eUC", "ikJfKaz0lEEC", "Iks2Zj6NFNYC", "ikv9cLfBsNMC", "iLiNY2ujuKoC", "iLmnzTUcYicC", "iLO-HYqgp8kC", "ilTEo-xrfXAC", "IM2rnd-Hw14C", "IMc94shnupsC", "ImDwjP5XNjMC", "iMsAfs6UJB4C", "imT9VsCi1d8C", "IMZYtRKxsdMC", "iN-VrQp4n8MC", "inbRbkubLJ8C", "inE-47w6bwcC", "inHnAqSCz2oC", "iOJYfBwzrnQC", "iolgETGRgScC", "ioPIqdVSRfkC", "IOrrnHK5lQsC", "ioyvuitdXHcC", "Ip8oWMRlSncC", "IpcT3uYlUFwC", "IPi-mn4-rrIC", "IPNXfV2-DhcC", "iPVjCpHtGSYC", "IpYQJCmoRmEC", "IQ7se2TyYboC", "iQCaKLhr6sIC", "Iqh1gPKVVisC", "iqjGZUxK5tkC", "IQJNU72KQykC", "IQK8z3xn7kUC", "IQy_4-ClC_oC", "IR-YmujBeaMC", "ir0g_PW5lAYC", "IsX5wxrcSRMC", "itdBdt8OvMwC", "ITHmTXzq1ooC", "itO3t_YeG60C", "itYPTUVhI_AC", "IU_8JDjxL34C", "iUHIE5ee52cC", "iUIe8LVs11sC", "IUNxvi0kbd8C", "Iv5Lg8P5l4oC", "iVRA5mPDyRcC", "ivVx2Db9aVAC", "iVyeJy3h5SEC", "IWk2-9ElTSoC", "iwMdXfkinrIC", "iX5BUALnh1oC", "IX5mo9ylOF0C", "iXtjiaaJnisC", "IYQmn4Vh8vkC", "IYs875dv5yAC", "iyXjE3ff3TIC", "Iz9kUx2khRwC", "iZHL-HOTvowC", "iZWBuG8M_N0C", "IzWhVs9zTHoC", "J-hSMdljW0cC", "J-qC1ajmTI4C", "j0moeTJXy3EC", "j1jq0wpxGWMC", "J1mZL49w1ywC", "j1uEon9_2aoC", "J1xc0cRKLhcC", "J1YSmHfP_U0C", "j38pCZhXKQ8C", "j5-UoSnKj-QC", "j5ReTLmAf8cC", "J65nNxyoKVQC", "J6h59KLeyGkC", "J6k4-N5lPX8C", "j7M8eF3eUzUC", "J87b_-vDhqsC", "j8bdlF8-2sIC", "J8pmzeUZ5ZcC", "J93scO5FyBgC", "J_a0AxvnKlcC", "j_tM-g68VOMC", "jA0KwEkrthYC", "JAz4lv4QLZMC", "JbByInfcxLAC", "jbeNYxZipBoC", "JBEQiZB2wPQC", "jbfEnb5eLhYC", "jbn_6jI9_JQC", "JBrXmLW4VDMC", "JBVQzRpi8SkC", "jCIIGTXQSogC", "JcMCmBnpHGsC", "JdPcnVD2J0gC", "jDuFeO9tlbkC", "JDY4CRR1uKsC", "JEBFQEiIuwEC", "JeTwQB5doD4C", "JFbTRDPlBNAC", "JFmbHaQUBPEC", "JFTVGT5IR5cC", "jFyzF3PJEZIC", "Jgsu-aIm3ncC", "jh4wn4X92UwC", "jHA_uXY299AC", "JhbDnT74kWEC", "jhFlES6Q218C", "JIgSXZ-HvyEC", "JIoY7PagAOAC", "jjlx8b2p3sMC", "jjTIpsqChmQC", "JK1lVtA_PGUC", "jK_AZCTX7toC", "Jl4ud7djPwMC", "JlFAbFifpGwC", "jlLHipHyxAAC", "JlQxM5V_pJcC", "jm7PeIvsrIoC", "jMkBN8SNLsMC", "JmS8Gb-SS1wC", "jn-mpa5yX8YC", "JN3U6cBoS3QC", "jN5uWgPvmDUC", "jn8hQqLNwPwC", "jNfgb4yYdoQC", "JnTSGlEnRWAC", "jnvKUOa_iMAC", "Jo3K5-IeRWAC", "JOdMnMK-2hMC", "JogLxVrWcoQC", "JONPZKNltBAC", "JP4P2Jl0GpEC", "jplzD3-L4pIC", "jQ45aH5LwKkC", "Jqo4bK5JLFgC", "jQw6Khkvc9oC", "jr4rCPLDip4C", "JRdGj7H4zy0C", "jRt8EQYNjmMC", "Js4hlR3b3EoC", "jsR1vbobV68C", "JStjWz_4d6wC", "Jsv1cKrM3NAC", "jSVd-uYjgHoC", "Jtj8_7WxpUkC", "Jtl4io4ruJUC", "jtlSDmiSV7cC", "jtp216JpYZgC", "jtRC6wAGeGoC", "Ju4iAEEFIYoC", "juX1nCMWkPkC", "jVESdBSMasMC", "JW-E4s398vQC", "JW6kHqxt2DgC", "Jw7tkk8xgCcC", "JWhodvqODe0C", "JWy0WEUCnWcC", "JXaElDfCQwsC", "jXe5XQJWqmkC", "jxhKtuDgLyoC", "jXKTSQrTLO8C", "jxV-jRfSz74C", "JXVwa-WOk9wC", "JyB9mIB6B_AC", "jyIhGgBGatYC", "jYIUu6cmYcUC", "JYsqDEprk7YC", "jyU_oLjkAvkC", "Jz0Yy053WS4C", "jzEqRY71zv0C", "k-6iK3uhbrsC", "k-vTiKL3GcsC", "K1bCtwc8XsMC", "K1D4SMM9LfsC", "k1Smynbdy_IC", "K29Bmkzqb-YC", "k38jM8SnUUwC", "k3mIFeG3gvkC", "k45F1fFu68sC", "k4_TCFU5L0cC", "k4KPnqH9WoYC", "K52_YvD1YNwC", "k6_R9jr1DLMC", "K7Nk3uDppF4C", "K7S2Y_DjsiAC", "K8RFMTng47kC", "K8XUetN4mJoC", "K9Hg3Rpf054C", "K_BuQw1SV_8C", "K_EYPw4RjRIC", "k_FzHdZwIA4C", "kaBuyXHFTfgC", "Kal3FT7SkbEC", "KaOW-jF_fXEC", "kaQFxHnmI-EC", "kAwvotBDTp8C", "kB5A-peO5mUC", "KBc3sv6Fo5gC", "Kc28ocJWCSMC", "kcXggMBRpYAC", "kCxV_vK6wncC", "KCz7N-GYKRcC", "Kd38N3odqJMC", "kD5qi3MyEHYC", "kdnkOJCHVvYC", "Kdplby1KebAC", "Ke7_cl6tQ1EC", "KeCx5rnVLKcC", "KEjMEwY_2pkC", "KfddjxF9No0C", "KFgCx_40DIUC", "KFlpxcQftwoC", "kFO12ZB_mpIC", "KFSt4jWFGwEC", "KFYO5sISo1oC", "kgESTBANJLIC", "KgHe3aSjEcwC", "KGv8e8gdb2IC", "KGXsBYRUqzgC", "khYVsKMvQZIC", "KiGRzqMgVC4C", "kin6TnKBZu0C", "kJbVO2G6VicC", "kjwVASsTUm0C", "kk-99kM1cbMC", "kKMynY5oDkgC", "kkuWM3tFA3UC", "kKVdwsscK0IC", "kLT7OIBKf_YC", "klx0xib6jFUC", "kMuc9Lb-3mkC", "kn5Ryzk_804C", "knaD9dttHJQC", "KNCH0KSlbv0C", "KngKYpdjwhYC", "KnvA8lal8hQC", "kNvyj-B59G0C", "knYfPoZjv1AC", "knzNIfmU2F0C", "KO0tMOWl5AEC", "kOjy3FQqXPQC", "kp9RTYomf6EC", "KpZwmRvbDXEC", "kQ18q7wtP6gC", "KqOst6a4bfUC", "kQq6wVOadbAC", "KqrukTiOoEMC", "KqZ51wR3uR4C", "kriZx5ucLZsC", "kSchquQcPwwC", "kShqtsGF24oC", "kt2uGKE8ck4C", "KtdiNYJJGyIC", "kTKo3TshDQ4C", "kto37M4olh4C", "KtPviLCuTuQC", "ku86wsnoDU0C", "kUAOn7mzr30C", "kUy8RIr2MMAC", "kuYFuUqzNBMC", "kvBhFm6SvUcC", "KVG8xj9eTyAC", "kw-Qi9kZwFgC", "kw_pn3OgVhkC", "KweDHm1QDmIC", "kX-uGcqfwEYC", "KX2EdmIr3EMC", "kxWz41WGZpQC", "kYb8P4cq_wcC", "KZFM0k8qgYMC", "kZJtiNrah-EC", "KZOJnieBC6cC", "kZRj36dHqYgC", "L-J80UHCYQwC", "l-R1g21wQmQC", "L-vqegJp9uIC", "L197GSrjYtIC", "L1N2Kq4Z5kMC", "L2RoHnh9WNgC", "l3biFpfZ6IYC", "l3mnXqi9MWwC", "l58QIv-wk_sC", "L5j0jl7GeGYC", "l5SOyJFFih4C", "l79kzRCL-64C", "L7V53j6oTE0C", "L8hfLzs0ryoC", "L8pRWa8msOYC", "l9qQKuBX1z0C", "L9sYq3XSLmIC", "l_xdnKxeYIkC", "LaNm1-VpDysC", "lB7yJWfdAlMC", "lBg47Qr7fX4C", "lbm2ahVO7JsC", "LCcoKnYJFi4C", "Lceu5SUx6iQC", "lCnIv3nz_gwC", "lcQnVWof86UC", "lCTRxp5h3cEC", "lcvGBooqMuIC", "LD62S7iA-6sC", "Ld6XYa6OV0EC", "LDbgAIq0rwAC", "LDcMr4avqQAC", "LdLKhHv1j7AC", "Le7KpGpgARoC", "LebT9J_W-JsC", "lEHIudUSWGsC", "LF9lcajLNncC", "LfyjwoRbGEQC", "LG3FQBlcuK0C", "lg8vy0i-4AMC", "lg9ziwYFWYgC", "Lgc8PkmB7kYC", "lgKz1Znda54C", "lGmrFlbK6ScC", "lgnvT8PFeQ0C", "lGnw2Lr2ye4C", "LH1jO4vBdL4C", "lh5Bq5-qF20C", "lh6piycs8loC", "lH6Sy-O13e4C", "lhffXhoB9v8C", "lHyYDF1gkcEC", "lI4hPO8u3ecC", "LIKJxwW1NPAC", "Lj1Qc8d2TFEC", "ljV5N2JDcdkC", "lKfbWTS_R20C", "lKfRTntxOSoC", "LkqcpRLrQmMC", "LLAmiykEu18C", "LlUTCGOyrLEC", "LlVPRiFaZYsC", "Lm50mS8oSv8C", "lM7bzrLCFxwC", "Lmcz0uwHj_8C", "Lmd5DJdGoPcC", "lmh-U0QOZpQC", "ln0sKggjlrIC", "LNCv7A05JWoC", "LnmPuPokrB0C", "lNuglcm8NocC", "LNvsdBdQ8HsC", "Lnx_1kPlpWYC", "loMc5HzF-usC", "LoStMjYjce8C", "LOX7iN7Q874C", "lpD5anvUaRUC", "lPGd_VV1tL0C", "lpShSdi7LUQC", "lpxDz2CAn50C", "lQiQma87RSsC", "Lr1uX7tFPoMC", "LrfdAXb2C9oC", "lrMnF60qYA0C", "lrwpUNex3WkC", "LtQsfa2WI6IC", "LtWDVZxiK6EC", "lu4JDcJtuk0C", "LUatB5OLh2QC", "lUdzKl-iG6QC", "LUI2fLpxIRwC", "luZug_PZn-kC", "lV3eeUs3LaMC", "Lv4kQT_AaT8C", "LV5cJRRPFF0C", "lvpbVPlChVEC", "lvqoRgaFTqAC", "LVS6bNvtqjAC", "lvSwwhtCwEoC", "LvU89BnfBfwC", "lvVnqd1tU88C", "lvxwS2c7FSsC", "lw86IpC5eZAC", "lWeAPI5g-WQC", "lwhhrGEkt_AC", "Lx-iIBVAX9wC", "LX7d801yKO8C", "LXWVVH_O5eYC", "LY7yjuEUqFcC", "LYavsnnx0jEC", "lydhPqDc0msC", "lYYtBxmaqn8C", "lZFhc7FCOnwC", "lzODsbstIJ8C", "LZZz6Gelw3oC", "M-B8XedeL9sC", "M-X_jS-Qeu0C", "m0GY_gNBqJkC", "M16vady03FwC", "M17DnRMSvMQC", "m1d5dkEp6qwC", "M1uKv97BQVgC", "M2GfO8IOq8cC", "m3gIdLgiEiIC", "M3S8TS_impUC", "m3ua0VRh74kC", "M4EO-Zotb4AC", "M5Apnd4a90YC", "M6_uZrk7lyIC", "M6AE8xih0fYC", "M8FjmaH-0V4C", "m8p4SxNNk1YC", "m91WYFCk5hoC", "m9I3UtyjnEMC", "m9RmPYnRSJoC", "m__Q6kmVoGAC", "mbBn8u1bNesC", "mbOLybqcWBkC", "mbwl-fgW71QC", "MCcAiE2RtwgC", "MCE7Pr1i3QwC", "MCNTv8mckdMC", "McO7ExAvcGkC", "Mdg6J1rzc3gC", "mdlEPkDNnTcC", "MDNUCJqwKZ0C", "MDRm_3niAL0C", "mERZP4q_dtwC", "Mev4LxWr-KIC", "MF8WnvUtyZ4C", "MFbm2SRUUNsC", "MFGj_PT_clIC", "MFUW8xkxTwAC", "MFUXSJjOTv8C", "MFxxpv1t1wgC", "mG-VRWgfpuYC", "mG_b5im7yEcC", "MgIytsae7OoC", "mh7Q58oo05MC", "Mh9ZKiE4S7gC", "mhYfL6Dn5g8C", "mIJu6Q1MxxUC", "mIpG7ZgQAwAC", "MiU4l3QO4dsC", "mIuDg1IBMj8C", "mJa0kAVqn5cC", "MJbE5ma65bgC", "MJcz9QFkMfwC", "mjs33MDiZ18C", "mK2QhS11JtsC", "mKFc0zsz_sUC", "mKIYLIm5yvgC", "mKMrtZyDSZkC", "ML3jtMUzRZgC", "MmapyLSVIgcC", "MMC2-KIY4UIC", "MmGkqaROdZ4C", "Mn9lrAQ_nxUC", "MNh8tx8W9_cC", "mnLO4l5Kk64C", "mO-hFM-NSNkC", "mO0KpMMUjNIC", "MOb9thbs-IcC", "MpDur-nHqa4C", "mpRgiga3tAkC", "mPXuTKlYVR0C", "mQmreUfiEJ4C", "MREAPapn82QC", "MrHaC5HAva8C", "MrS7NW0zzPMC", "MrT8xBCG3jAC", "MsjMXc0y9GgC", "mSLhDt_XIUQC", "msR0SGcs0sUC", "Mt4RB5JO4qYC", "MTNaD4rT5VgC", "mtPwaQbaXk4C", "mtyPMWgtKLMC", "MU9TN2h17C0C", "MujUlI7X9IUC", "mulgp5hb0XkC", "muwB6-puoWcC", "mVCfkE38VhAC", "mVF4mKK45gIC", "MvKnU4gHFvYC", "MVrYj9uQOUkC", "MvX7y3Rb4osC", "mw13wpsdZEcC", "MW200xjK49cC", "MWkv47DIFw8C", "MwkYUxyipDwC", "mWoSs0GgomgC", "MWRuvcsE43MC", "MWsCvdQi16UC", "mx5CfeeEkm0C", "mx8kL7iCR-AC", "mXdagZIBcXIC", "Mxge8wUpd7EC", "my1E7YMLa7QC", "MY5laQPdyqUC", "mYeFaO3Z92kC", "mYlSEszWRbQC", "mYO6uQLfMwwC", "Mzh6KxczlxgC", "MzQXH5NneSMC", "N-2kR2I6dMIC", "n-NWU0HayegC", "N0esKvW8vyoC", "n0J2v9y4ANMC", "n1oIK_VG6FsC", "N3uj_afjTyQC", "N3x1PyJmbz4C", "n3YC435gKFIC", "N4O5BpmVOR4C", "n4PRP3xLUzcC", "N5o7qYSSkKIC", "N8u-XDDX3ckC", "n8znlyDQMzQC", "n9tTHnRGZn4C", "n9zYjuvb7ykC", "N_c9iWm8DRMC", "NA9NybGyQE4C", "naa9VVsldpYC", "nASZmG3lM-MC", "nAv1gIZTgogC", "NB-ab2V1frAC", "Nb0tNFc5Y90C", "Nb5MWsRQ5fsC", "nBgNFx8P6B4C", "NblvDRP3eCYC", "NbmL9ftadNoC", "nBWIJiVv1_8C", "nbX5DfBNkXsC", "nCu8oe2i5y0C", "NDDz4WIxDvYC", "nDTc9NRAkNMC", "nE0bz0HYOogC", "NEX_8ydGrYMC", "Nf4qm1thuzYC", "nF5keLQPaSwC", "nfb690TbBRwC", "NFKwTvQjVHEC", "Ngqtp8ORGuUC", "nGyIxBpVbHIC", "NHNhj4dE1rwC", "NHOepipqw5MC", "ni05jo2PfQEC", "NilW70Yol74C", "nj9aaD4RrgsC", "NJHMuVxjF64C", "NjiG3mI5eg0C", "njTri1942n4C", "nJyWqsH3qUwC", "nk45JPhubdQC", "NkgV7ZM2HJMC", "nkisnllbM7YC", "NKpitRCwolgC", "NkubXK90GtwC", "nKZduhuEPCgC", "NkZQP-XUlwoC", "NL-7y-hjodYC", "NLRI6hzr01AC", "NLTA_L_nKf4C", "nLvjQkBajocC", "nMr_gZQQYlsC", "nn004oTBKLAC", "NNM1-tB1dfoC", "NNMf3_4WlX8C", "no8fn7hjg8MC", "nOC8XE6uE40C", "NOq2brjH2UcC", "nOvhwcESksMC", "NOXxlusWLtgC", "NP-QlBzYETwC", "nphkjxI5lScC", "nPOOVH6SHD8C", "NPpbY3vMrK4C", "NPxwcIKd1kQC", "NQ8EkEiYf_sC", "nQcNPnXaotsC", "nqJ5umM9C7QC", "NQu2oSdsA5gC", "nRCGMfqp9acC", "nrlceeqlj3EC", "NrpGnrVET_MC", "nrQCRrdku24C", "ns2k0z-4FPEC", "nslURExrg1sC", "nsPX7hErWWYC", "NtHhpIjIFMEC", "Ntn27W4nT7wC", "NtyI0b1CiDkC", "Nu3s4NA7gOoC", "nUgLVyPlO7EC", "nuh9ozVsxZMC", "nVn2yaeZm_wC", "nWHJMJoP1gQC", "nX3MXt0hiv0C", "nxd_45ba6Z4C", "nXDMAfrcyjUC", "nXuXVJqQrfIC", "ny0rmFLTKuwC", "NyHVgeaCrlMC", "nYkrTWDj5twC", "nyNPWOj-dsEC", "o1lW82-iMVgC", "O2U65rfH1NQC", "o4-BACWBJWYC", "o417BiZhN_0C", "O4bRW1VjD4gC", "o4Ju-uaw49UC", "O59l36u3Ji0C", "o5c0OysdfaEC", "O5fjMLG47WgC", "o5mtVZ53LqkC", "o5UNCmS0W4oC", "o74HqDeVAeoC", "o7FkYz8ay5AC", "o7hlmXxZtXwC", "O7mlylpFtVYC", "O8UdHCAPoqIC", "OB75l5upMJQC", "oBeL__RZP38C", "ObnB2K0Pm-gC", "oBoadQqqY6cC", "oBrM4fMi6B4C", "oBY9qYnYTgoC", "obYhbzN-dY0C", "oByKSad59WAC", "OC2kpcgpvikC", "oC7cyJ4CYVAC", "OC9RIohfJrUC", "OCEweX1U3MEC", "ODMOAai7YlIC", "ODTL3SUB46kC", "oe9S6SgfeSsC", "OESLT2EXllwC", "oF9XRMu7IUUC", "ofNvqyY50fQC", "OFp8ipPu5g0C", "OGHIo78EX5YC", "OgJwtLxVOj0C", "ogLg_TL7OygC", "OgXJ1JGsPpgC", "ohIY00toUIkC", "Oi9vfDvIuBUC", "oicpUw1BgE0C", "oiWZ5EgQ79QC", "OixOjFAE2UEC", "oj3sFUtE5T4C", "oJ7qCzCI1NIC", "oK7EQtgW7mkC", "okYh0Z3GsTsC", "OLDMJhksIKkC", "OLHXNOpxklsC", "oLKj_i7I0YsC", "oLR898PUrOcC", "OlUsahLKzBEC", "On3PnFHC9J8C", "on8LkQpHPTEC", "ONojNh1lqW8C", "OO-67enEAxUC", "oOcJq-c0_u4C", "OoI89q6qJi8C", "oOMXh9TsiRwC", "OOPVMKFveVEC", "oPa2r3UrjI8C", "OPE20Pj5yqoC", "OpqDQCu4-BIC", "OQ4i9z1_JEkC", "OQfA4OqoFtIC", "oQGrgpcyMhoC", "oqkC3PTplRsC", "OQngDQK-7lQC", "OQSpUZUN6hgC", "Or9jdsdChNoC", "OrAJCAIZ-2QC", "orjvjrj77_wC", "OroCOEqkVg4C", "oRwio-c6lfAC", "OrYmMwlbdrwC", "oS4bMeaUxzAC", "OSIc5_l8RmEC", "OskAy9XOnIsC", "OspnCGC6KY8C", "OT8bN8OmUpwC", "OTqu7UOxGsIC", "oU_-6ikmidoC", "OuE0x5z2RPoC", "Ouh5eCWqs5wC", "oUL6i_pYfNsC", "oULb1kQ2TwAC", "oUm1vvjselQC", "OuP7i2DhADwC", "OvNp8Df5XukC", "OW-jfra0aAwC", "owp3UkZCojgC", "owtSfDkt_cQC", "oX8nJShwb5wC", "ox91llFB5j4C", "oxfoF_gasvsC", "oXip2MZZrrkC", "OxSYUYpb1B0C", "OXyB0QkBg-kC", "oYBYq7CCH2gC", "OYIt6Zb0kzoC", "OYNgWRQuWLMC", "OypfoLO_6WgC", "OzoCM4221KoC", "oZPVXSW9l1gC", "oZS5zFNW5yUC", "P-48zO2V-jEC", "P-f3K3jxvckC", "P-mMbsaKdJ4C", "P0N_3rRZNe4C", "P0sP87s4f-IC", "P0xs_9NSIy8C", "P1jauDDocM0C", "p1WjYOltEOoC", "P1zI5itcG7wC", "p2Hxcbxl0OoC", "P32krFgmdzgC", "P3Z6wfs5pnQC", "P4cXo_cMIDAC", "p4G9UHazucsC", "p5E1LVJ2C-0C", "P6Qv0MdH40MC", "p6WIqdRdxe8C", "P73DrhE9F0QC", "p7e_mYbJIdgC", "P7Piq3OsQ1MC", "P7TCSLpJ7AYC", "P8xpTj3Dm-kC", "p9gXGWJfMyUC", "p_JsCMUQK04C", "PafpN9Q0_VAC", "paIrc_5Ok_sC", "pajrkLcM6d0C", "PawYMB9KYS8C", "Pb8qTzqOKbAC", "pBU9nTKzW-cC", "pcO1LSjcXd0C", "PdbfGALpRF4C", "PdjBFEEz0o0C", "pDOqZfQ5tqUC", "pDUXtSVArzkC", "pDy8yULq2CAC", "PEjhtik7W8IC", "pePU3MRBaNwC", "PEtwS6Wzi30C", "pghpw1e91e0C", "pI1j1wKgEYQC", "PIrRsZeTE_cC", "PIrZKlCeTM8C", "piuLmFNoHeQC", "PjvV6z2p-PEC", "PK5BOWbRiTsC", "PKBwjrXavKEC", "PkD2ElfiUj4C", "PKnlhkJjaOoC", "PL7vc_L7zRMC", "PlkYkdwAas8C", "pLx66Ql8wyQC", "pMbmbQsE6hEC", "PMKc8Ed8qoIC", "pmkhm0NHK9YC", "pMM5mFUvS10C", "pmZDPkJNc-QC", "PnvFYd-zUlcC", "PO5L2EA8f4QC", "po6tX53X3zQC", "PpGBuOOQyPgC", "pPNsEPSMb68C", "PpQOI-_72LkC", "ppS7-RcigG0C", "PQH8BklvQVIC", "pQMAsT7HlEsC", "pqRcT7sFYYYC", "Pr0lKluK4qwC", "pRiVTCTW6_cC", "prIX-LvPysYC", "PrOKEcZXJ58C", "PRW7HzOj4L0C", "Ps7JHG_PzvwC", "pSKvaLV6zkcC", "PsQ7zEi9AGsC", "pSUI1mAkepIC", "PuKKbUuGlQ4C", "PupnPhJkMF0C", "PUUpOUJlZogC", "pVBgdC_NWBIC", "pVvmrDZftNYC", "PVx4khyYhmIC", "pW1gin3ibSIC", "PW3r-DzcJA0C", "pwJQ-HgHnb8C", "pWlzUhdHpnEC", "PWp0mkyFuYsC", "pWrM-VeH4XsC", "PXJhH0WwBowC", "PXKOHbczKo4C", "PxtAKv81HbkC", "pXYRK0789mcC", "Pyjt9xhNKJ4C", "PYUws7DjE8UC", "pZFsVmB3sWkC", "pZJizvcWJOgC", "Q04oaR0abbgC", "Q15FWAcrf-QC", "Q1JMZxYPNcYC", "q1RJDFYWHgMC", "q24lR-f9sZ0C", "q2jOf2a3-5EC", "Q2rs9Bt83KQC", "Q3mSVp_MG5AC", "Q4QQAjtLP80C", "q5kQVxb9QVgC", "Q8BtyHu3DjMC", "q8De-srS5FEC", "q8JBo23nTxwC", "Q9R6Tjwd1_4C", "q_Pv_2bdL-8C", "QAaJo4q0JyQC", "qaifkrtG1YQC", "qAIpjYAzwxIC", "qAIy2I-DdkkC", "qArUQHMdg9YC", "QayKpFqlUwgC", "QbC7tDGlecEC", "qbdnVEd5nukC", "QbT7zBaX0pUC", "QC18oeN_txsC", "QcYl_ylrHmcC", "QDdPkSM50DkC", "QDmJ4OIdAF0C", "QdT2iJFvvgsC", "qdwDV8khUrcC", "qEBYKPN2KCEC", "qf0qyxvObVkC", "qf5rCsR_UZYC", "qFE13saB5KMC", "qfG5xgE6aScC", "QFHB2D4XH8UC", "QfuSKd7Ga_UC", "qfX5J84X4bsC", "QglOxmN4afEC", "Qgtab_u5XIIC", "qhDFuWbLlgQC", "qhhXHNKgvU8C", "qhkmf5oGVhsC", "qHqKJz1J6ZwC", "qHR4w0mYE14C", "QHr6DN2BWRUC", "QhtkLnl6PJ4C", "qi3VYphlGwYC", "qInweiKq68UC", "qiq2M4k7U6oC", "QIQXbqdKUtkC", "qixxVyYBVVAC", "qjVaD1OQbxEC", "QjYtNJZmWLEC", "QJzLeR562BsC", "qKGtuqvUhN8C", "QKjhgCNu1D4C", "QKuiIqgSfjoC", "qLl9ityyFaYC", "qLNfpb1hBWwC", "qLRf__fvjWQC", "qlwvoG_2LI4C", "QLxmwtlCKNIC", "qLZKdz7z8j0C", "QM-gzY4ATMEC", "qm9Sg7WWeFUC", "QmDLXgyH2A4C", "QmGk50yV2eMC", "qMivHGPGxqkC", "qmq-iCFviEYC", "qMRLwuhEvYQC", "qNdUuj8CQ_sC", "QnlvkNsQYIIC", "QNM4japF5g4C", "QO4V75fio5IC", "qO4zMwjqcgwC", "QO5ijIGPH0kC", "qOAlpGp1qXcC", "QOhPfuPo2ZQC", "QOsZ6WTKmXcC", "qOtFI1aylisC", "QOVvzsPnJRQC", "QOxF33PYoxQC", "Qprp911qk4oC", "QPTqaKLu-soC", "QPTzkU6u8moC", "QQH8as7ZaasC", "QqhubYvGmowC", "qQMewsDjq1cC", "qr_QTbMh4UYC", "qRFmgHgIJaAC", "QRryyAYOYYkC", "QruIGhiAVpkC", "QrWoRDvQVBoC", "Qs2bpmiNsN4C", "QSGOsmZ5srUC", "QsgZ_CitOCAC", "qShdefxAAjUC", "qt_9Q4K5Bz8C", "QtfndLdZhnAC", "qThSUMiDXr8C", "qTlunjb8t3wC", "quPX3vBkk58C", "qUrsy4blU2AC", "qv5D6shGGFQC", "qvAWw3g1TZAC", "Qvhru7bg5-8C", "qVmHL2M5I9oC", "qvo8Q74rPA4C", "QvvCpFvg6HIC", "qWCDCrim38YC", "QWmPBVImnd0C", "QWsJDMvIV7sC", "QxaITfanaUcC", "qXmjRsQYG2oC", "qXMwCbPE5mkC", "QXtFK0OT2XMC", "qy96yDeMgP8C", "QYCzHR80dmwC", "QYJzYQumaQkC", "qywzPsRB07UC", "Qz9VOE6vO0kC", "Qz9vxAeQZBMC", "QZEcG2VDUNYC", "qZNcOygYKL0C", "qzNvw-PgRJMC", "QZRAeYQR-VcC", "qZW2GgDXbIUC", "QzX8THIgRjUC", "r-2XRCAihmEC", "R-EQzoT34W4C", "R-K1rkqmEaQC", "R-QkDxkqbJoC", "r0_is9ZWV4QC", "R0d76m-Be10C", "R0dVznNGP4AC", "r0F1U5paODcC", "R1C-ninfheEC", "R1fZcc7fF_wC", "r2IsVOmNqGkC", "R3996-ouQX0C", "R3a_1OGpqO8C", "R3BIOfKssQ4C", "R3YtlswCJscC", "r4GIU2wJCAEC", "R5Z8uU9hREEC", "r69Z4urx_VAC", "r6pwHeHIq2wC", "R7Fb8Cz0sBUC", "r9dsrSJ5xXAC", "R_3rEJCX7CwC", "R_e6YP7ijeQC", "R_ZetzxFHVwC", "ra5rRLh-RkcC", "raaCI-J4COoC", "raHLd5-V2sAC", "RAJUz6k_QIEC", "ral_pGRWutsC", "RaQh5A4yv4QC", "RAuMY88cbW0C", "Rb1wrlmXojEC", "RB3gn9LNgUgC", "rB8eMRkjqN8C", "rBJd5vKWLDAC", "rBraWo3i2BcC", "Rc1rBhBiixcC", "rcD0_Dvs7ngC", "RcR5vQwxOkQC", "rD5AnQWPEGsC", "RdBFUqvReBIC", "Rdik4zbN6aAC", "RDwWK0ARwSwC", "rE7e3lG1KYwC", "rEo78qB7RAsC", "reT27U7wl9MC", "rETcT8tlEroC", "revtcXHZbjkC", "Rf5wnXgT46oC", "RFfmHNZ_SQIC", "RfW8huqkCIMC", "RGmHAVPhmRwC", "rhE-0gXNbN8C", "rhVOVKp0-5wC", "riAM_mNkE-4C", "RIR0uMgooPoC", "RITAHjToj5wC", "riwVQHtihE4C", "rJe4-_qtl7wC", "rJFBka6kGZwC", "RJSSmdgguOgC", "RkMFf4mnEVwC", "RkpAjLSjI9wC", "RlhZc4HAS5oC", "rlIvpU-Qp38C", "rLrJ-_78SB0C", "RlRzBsraB7EC", "rlVLx87ZDmwC", "rmdgHuGg3wUC", "rmhJrD0HcmMC", "RmPQGSawe7MC", "rmsUs_KDgHAC", "rNAaZbheYa0C", "rnmvt4dCYC8C", "RNNTon-z4p4C", "rPD8iteD_hoC", "RPgFnXPnfD8C", "rQ9xJe_hNLUC", "RqGcY4499DMC", "RqMp5TsWCqkC", "rqQxHHD8_V4C", "RQv_wAM_UkkC", "RQXjQyIqVjcC", "RraibLZPj8sC", "rrrWd4MsVIAC", "RRxqU3A0GrUC", "RsafPfUjC6EC", "rsBdQfPx83oC", "RSH2f0kqAXoC", "RtAu3fji7ewC", "ru-Qep42Zj0C", "rU4AuxUochEC", "rUFJsks11vIC", "rUfXM1bdw9sC", "ruKyUjnt84sC", "ruR6ds7RIpEC", "rUV-Za6EbCoC", "RvR6I6VzpzMC", "rvuhHvq0QkAC", "rW56njaMNlwC", "RWfXBObw_-cC", "RwGtZCyX6BEC", "rwHtreArk_YC", "RwhYP9n_0h4C", "RWPrAFvARUQC", "RwZOApBh9-cC", "rXiTv6JhZc4C", "Rz3SQBiOBHIC", "RzAW_XaV5sYC", "rzWqrQzSN10C", "s-lRvCbKN9oC", "s0ZhQfrW0gwC", "s1L2mh1xX6AC", "S246o6LpxOQC", "s2Bu-k4GvscC", "s2YlBHk21pIC", "S36-Rb4D2DEC", "s3SJ_1sVGeIC", "s4a1jAstmLoC", "S4a835HkJpoC", "s4D3ZQeVOzYC", "S57-VvGDLNkC", "S65k1nHzjBEC", "s6YFm0pgW94C", "S7e3XNHSMxgC", "S80tNVmTCZsC", "sa_cnttyB3wC", "Sakj3vPu9TEC", "SAyPFNMrvlgC", "sbAo3RkWIUsC", "sbDxkzAn6KMC", "SbGdnS5QyU4C", "sBsU14_crsUC", "SBuAXRPCZzYC", "SBWymtSXoT4C", "SChbFApNDc8C", "SCjBWElj0pQC", "ScRuEWv344gC", "ScVA18ol9isC", "SCzETlXk39YC", "sDLVKZlOGfMC", "SDnCJn-99_8C", "sDUEiJuHaW0C", "sEe_6MRg5xQC", "sFc5eUkookMC", "sfD1teRZUIQC", "SFlEcdkCVqQC", "SfzscM8izq0C", "Sgc4rRfAJWMC", "sgQQDC_inA8C", "SH1J_jFnpCgC", "shnh1HnwyKoC", "sI_UG8lLey0C", "SIexi_qgq2gC", "sIstJfeO2PAC", "sjH3emOkC1MC", "sjlWRAygGoYC", "sJQm214GM4UC", "sK5CJFpb2DAC", "SK5opOtSfpMC", "sKcVfinygvsC", "skf3LSyV_kEC", "skGjjKeIZ1QC", "SKnDnyQe-KgC", "sksDN84VxvAC", "sLrONAxBAgAC", "SM5hR32GSScC", "SMD-bjQppX8C", "SMfrLWPyWYkC", "sNkgg-3dF30C", "sNOWKhznU8kC", "sNpznNsnaZsC", "sNye5hpqJ5AC", "sOCvpTNDhiUC", "sOKZKESWys0C", "SoQ4ymzN-EwC", "SOsKxQ3rRVAC", "sp5WbjwKXsgC", "spGyXLNREukC", "spjgeb-TvukC", "SqM46zulAGwC", "SQQpUldtMKwC", "sQQrjCIkDE0C", "SR8p7v8vjEgC", "srEHyeOFw1QC", "SrJ920Iab0AC", "srlF0JUIBZEC", "srS13ScitwsC", "sSb2HrG0mdoC", "ssMbhqrP_hcC", "SsMUCl5j8X4C", "STAM4cTZ9JkC", "stplInkzoXwC", "STxlycWlVS0C", "Suc98NDaPMQC", "suGmGoDCWEkC", "SUUGxP5lF_QC", "suxeIoWNkGIC", "svEHBagPG_AC", "sVv2Tnf4czUC", "SvyhDobp8rYC", "sW0cJ0e9yrEC", "Sw2LE0OatnoC", "SWuWFcmRUM8C", "swxxuGuhQ5wC", "SYAQjOwA6lIC", "SYf8ytGrkqgC", "SYV-79W3oZsC", "sywjT24pBb8C", "SYZmxOI-sPEC", "sZ-Llo2emYwC", "sZ2KMp2z4vIC", "sZbKiwpLwR8C", "T-05AqadLgMC", "t-6YPniKgVkC", "t1_hnB01TKkC", "T304Ttec_9kC", "t3JbuFVWg8kC", "t4-YKz4p-UwC", "T4dZFR6Nf7wC", "T4vQw1RNkQ8C", "T5-f-dJQUKEC", "t5HbRxAEsDMC", "t5otQOxwTE8C", "t6hGd9yD1EIC", "T6mzmh4-gpcC", "t6PV6XUf6OMC", "T7CKj8bqVlwC", "T7Yn7JGorsoC", "T88qX5DHAn4C", "T8cJSr5V55sC", "T8n6NPUUVMgC", "t8PP_-KPEGAC", "T_CEYYJDtkUC", "t_F21VosYjIC", "t_i5CZKbhyIC", "Tbd0chRC7mEC", "TBHj8ZkXNG8C", "tBnjnSrsN2cC", "TcLqxN_GIHsC", "TCLWhJPI7FoC", "tCrccf0xttgC", "TCsbd7G-EFkC", "TDB8Aba5zSkC", "TDea9oyayNYC", "tDSIplwvSk8C", "tEEhsawqlM0C", "teHWSd0m5-kC", "TFlVe4ySsKQC", "tfOQ4dzVxUEC", "TFQrki145qwC", "TFz2WpwXspAC", "TGmDJz6mQ80C", "tGpIslO17UAC", "Tgwb_Y8ogvMC", "THnJrNvETr0C", "thortsX3HVoC", "tIhdDxTBwHMC", "tIkfrx4_hQwC", "TIzgnSAaj6MC", "TJDGTP9Sa5UC", "tk6cdwQRAWUC", "tK7-l0GhlJIC", "Tk954r7MojYC", "TkQ68EbRP4wC", "TkULPY-xMNsC", "Tl-O1prFDRwC", "tl7Iyvd38NwC", "tLGUxAapcL4C", "TLLBZhvO_MUC", "tLWQ4T8FmIkC", "tm-OYOeGdk4C", "TMgBNRU5JfAC", "tMhB-WKYp3AC", "TMrqtlz6zbQC", "tMYmiHg8gXMC", "TnBZi6PC9_AC", "tnOxBZL4yJUC", "tO-_dys5t0cC", "TOjmK9C9hNsC", "tojSqawVI70C", "ToOj6GxJw_sC", "tosbUp8kF9oC", "tOse262foFAC", "ToXws9n6TW8C", "tPGu98BABRIC", "TpRbGJKrw9AC", "tpUyKIEQXqsC", "tqbtgVk2DOwC", "tQFGe8VEmYkC", "tQFYJjDEwhIC", "tRg3Kpg92V8C", "TRXrMWY_i2IC", "tSegrigeLXwC", "tSL2mAl4dU8C", "tSNkXVpB1SkC", "TStnYlfQpJcC", "tsZPJ6k-2v8C", "TT_6siOxmjcC", "tTn7hDPhLCUC", "TTNPxMigCK4C", "TtYex8ky_MEC", "TU_YnC-fEZ4C", "tuHKpihaIw4C", "tUqG4yDPMaMC", "TVcaPfZ2ovIC", "tVJCs7kV5YUC", "tVo8itBJzwQC", "tVoGmBBXoB4C", "tvVRO2ar-lAC", "TVWasr-C3UcC", "tw-YGBovG8kC", "TW_G-pfyZb4C", "tWZkzAIRwOAC", "txE355KzgNkC", "tXhS4axKY7YC", "txIGOpjLaW4C", "TXj3AklQkmUC", "txz0YTg8N0QC", "TyKLxN9KUYkC", "TYYp48ytAK0C", "tZDwTDHQoMAC", "TzEXzR_3DIIC", "TzHbh5yCVPMC", "TZi4PnwV1vYC", "Tzix2jithpQC", "tZWnNPKg1K8C", "tZxaDhb71gcC", "U-2azvBELrIC", "u-BaZR9pXuIC", "U-dZalMj4MAC", "u-m9gKxRAc0C", "u0qOoHAWFmoC", "u0yHE5npw6EC", "U1RQksZ3OIoC", "U2M_rxC-yasC", "U3oeSJVTm1YC", "U4EcY2ax3BgC", "U58Wh30Smi8C", "U5hXpnwUmW4C", "u7ktCK5kqmEC", "u8Pksn_0bwMC", "u8pxT1gWEroC", "U8To1emV5ckC", "u8YQW0EBfh8C", "u91fA8PDRF0C", "u9Gf9e0wpsgC", "U9mcooAQF6oC", "u_I614Pw3C8C", "UAMGGFlcNBoC", "UAPferUlb4UC", "UArOY5U5pj0C", "UASe7zvIkYgC", "ub2nh7fU8zcC", "UbAipP9ATlUC", "uBaQK8nGY3YC", "uBbfizzKTDoC", "ubdfzyM0mvYC", "ubEptMpxCl8C", "ubH00CZv_YYC", "uBhYtCAKZ8IC", "Ud2goDsqfBIC", "ud3bOWYoug8C", "udeqm_uHGcEC", "Udl9U-0OY9gC", "uDN-qvOrCikC", "UdQBSffyTTwC", "udTfyoUKl_4C", "ue_JYo-k0_wC", "UelxdTWV4YQC", "uFBreFpwPzgC", "uFLwcEZMrOcC", "uFRchGZDu5cC", "UFzSXj2LlVYC", "UG9uh94xJGIC", "UGe4js2AvNAC", "uHCbYqZUDQ0C", "uhg_js2x6EAC", "uIQL0ClhP78C", "UiRYFVuAx-4C", "Uisvt8dbF9EC", "uISwNVKQlOIC", "UiY-F2E2lHgC", "UJaPCc5NR6kC", "UJfYIdr7qfUC", "uJOCncLLnLsC", "UJYVS2GxGMsC", "Uk9QIJmBVE8C", "UKaXYLcwoVoC", "UKix4jTGLEMC", "Uknk8sIZrbwC", "UKwN_B4HzisC", "ulappz4IaLsC", "ulAYKWVjDm0C", "ULF5r0lziKUC", "uLHa0KWZBYkC", "ulHlbvxfO7EC", "uLHlJ6sjohwC", "UlJQ7hp4HzEC", "uLuevcUMEUAC", "ULZlBvE5OOYC", "um_yWo4ZZR4C", "uMdMY55qzCoC", "ume1sxlKekcC", "UmfW-jF7pkIC", "UMI5PqvqzksC", "umk5P3OKU8cC", "UmLTsumqfskC", "umNBfh-NoN0C", "UmoiWWYNdD8C", "UMy-1YdP7jQC", "UnPP_G13_uAC", "uOB2fMgynp8C", "uolzqanj75kC", "uoOIJOibx2EC", "UpC4QJP66HUC", "UQHIYZMXzp0C", "UQPwOavv8e8C", "uqQwIHpqpfgC", "UQWZSGa6ptwC", "UratcuTxJJcC", "URkMY_t6RQQC", "UrKtMKiVIEwC", "urWWO7AXLNsC", "us670m1NV6AC", "USKxwYjlEjQC", "uSM7MK18EjwC", "UsomGft5YhUC", "UuCmOj7iKo4C", "UUnbb9tXDtAC", "uUV3JgWK5dsC", "UV9O88l1jsYC", "UvfbcAxCdrUC", "uVH-cmqx1BcC", "uVSiv0Yh2KYC", "UW8ptGgmKBYC", "UwcFKj6f9tEC", "UWCV0A6Sm64C", "ux2inxSrMjYC", "uX8zO_eCzxkC", "UX9gVZmGCJgC", "UxF2p5R_-soC", "UXHTnXuNjWoC", "UxHuPMtHGBIC", "uxJlAgRemHgC", "UXkCqO7U14oC", "UXypLB7duOgC", "uy74QJnLK7UC", "Uy9PbkDwisYC", "Uyab3vXJNCgC", "UYbmXGtHcAEC", "uYd4Q1vQluAC", "uYdmnMArdZUC", "UyJaWLcdZgMC", "UYNnCXZmi2IC", "UYx-L-uz778C", "uzdsDdbr-YYC", "UZfWWjyXmsAC", "uznwumfbBJEC", "uZRJFb2JqCcC", "uZWmAAQiLNoC", "UzZA6-L9jC4C", "v-iDn44wlr0C", "v-PR2oOTjJoC", "v0YQv_CGq9wC", "v1GQZtYOZy0C", "v39x_fKR-ykC", "V3a6-Ny0MfIC", "v3LzmLUVwgAC", "v3vCw1T7yq4C", "v41wD2jEzQkC", "V54naZlLOi4C", "v5aU82lCwccC", "v6Nv22zpEMsC", "v6vIrPFCJoMC", "V76H9NQUbp8C", "V7SsFqkHaC4C", "V8BQNWkvddkC", "v8fnNHXeEb8C", "v_7BR5kU7QAC", "V_IMCohto0YC", "V_ZjKmO24ooC", "va83wz5u7ZAC", "vaj33IYnl0YC", "VAoSXvUROnwC", "vAzmPrsjrpwC", "vazz9jFGhc4C", "vb2N_BEc7rcC", "vBB54ABhmuEC", "VBhUV9DP5LUC", "vBISE7equQ4C", "vbOCF_qzX1QC", "VceR7vhczmcC", "vcnEIw3HYUwC", "vD8S2kkzEgIC", "vDQf8U2Tcb4C", "vDRezS6n5e0C", "vDYk0hyuEWUC", "VEof-jTO6z8C", "VfdbVKeF00EC", "vfn8iIujiqkC", "vgGJo3wR6sQC", "vGJJHsJASekC", "VH_YLJZHMlYC", "VHu3wL-lkjgC", "VI-Z3_0l1zIC", "vIobJo2oDA8C", "vitoIs2Cr7oC", "vj7ybCmMe5UC", "VjaK5lke2BUC", "vJbWK3ZOz6YC", "VJK0Ffr7LL4C", "VjRw6SLS6BwC", "VkAIRAwtXbMC", "VKB0vasDiMMC", "vkC7vC78f4AC", "vkZruQoCA7YC", "VL2YyP7qN8sC", "vL6GBI5JFKIC", "VlbQb4fDNaIC", "vLcdDmLQbNIC", "VlFWzpsWNHMC", "VM4GFlzHg34C", "vm_KCE4XXPMC", "VMaPd86rSiQC", "VMtYQ2yEIb0C", "Vn4n9fJYivkC", "VnJ29GOasfMC", "vNQ3K5HfiHAC", "vO0OArqchzcC", "VOA_B_72BssC", "voiup-mz2CkC", "Vp-lB-r2jcAC", "vP6QdtNb3NoC", "VPdWbqXkRwwC", "VpkbchYdHzQC", "VpMxQAe_R1UC", "VpynYE28wDAC", "vq7eeFukzNEC", "VQ8Dji_otuMC", "VQrC1zTh6WwC", "VQYKRZo5fj4C", "vrAja1wLa5AC", "VRQF0ws5Ps8C", "VRrm_CQd7PYC", "VS26zQZ81nYC", "VskxkGOz-5AC", "vssg7oBsX6MC", "VssJ5c7KsNwC", "Vt5QfVZLCWQC", "Vtjr4N7ZIb0C", "VTN5v_8IY8kC", "VtP9wYK2ws4C", "vTR5TfkMo8sC", "vuBXrI4_hAsC", "VugJuXuobUQC", "VuiQGIl0GVwC", "VuYDPDHttQkC", "vvi0pa3X8REC", "VvtLdQ_JWI0C", "VVZ9995LHdMC", "vWIVyXC2rK8C", "VXp3l0ZXZscC", "VXT04BGUPU8C", "vya66ZMsKhAC", "vyytRY0STBAC", "vzdbUH74-z4C", "vZdMfbamUbQC", "vzKx12aNFZEC", "VzvlkNQnz2UC", "w-4UAn9A5IQC", "w-rb62wiFAwC", "W-T3-55PL_UC", "w0AQbV1Yv2gC", "W0Ha1AYQ9PQC", "w0HzM7RzzkAC", "W0ucw4WwLCgC", "W1KFNeoVo-UC", "W1oLHR1zRWgC", "W39p_m_eK2wC", "w3nuf3FThEsC", "w57G3DshfU4C", "w6NLi9nyWJoC", "W7XRfHzoUt8C", "W8bxvyiMWjUC", "w8DFaxItUf8C", "W8oYW15gH18C", "W9UlXT9_srgC", "w_KLe1AylhEC", "wAa9qq9kbncC", "WADDM36d3TAC", "wAdUjtKxyQYC", "waQTwXPvrKgC", "wbJsCd9mBKcC", "Wc9zUQin1HIC", "WcBG3YOei4gC", "WcbvthlLe3kC", "wCIDSZ5SX7gC", "WcIsm-pa81YC", "wcrnOmttT6oC", "Wd0UuFoJHMAC", "WdD4GRa0WokC", "wdGdQAVN8b8C", "WDyRGAfLeycC", "WE56DE4iZ1sC", "WEhp2bcpeL4C", "WeWE_TA1xf4C", "wF93D3RESCMC", "Wffn8Q_nUucC", "Wg66gWttf-cC", "WGGGLt9ne7EC", "wGhwAajnbUcC", "wgmtlfkwMdoC", "WGudVA5jz3cC", "Wh38a8gCR1YC", "wH6mVwu-o80C", "Whh6Gqep5JYC", "WHmMhb8usnsC", "wIaOzaH2xhAC", "WIcUq43zKzQC", "wiELCaS5A6cC", "wIFW20Vb6yoC", "wIHvn-CZyDIC", "wip9RnTSQkQC", "wIRoUV4zomYC", "Wj3_t3JQi74C", "wjEkgQZhqQ4C", "WJF9OSx57G0C", "wjPnFzWFHioC", "wjxrloC2gyMC", "wJzaC53nfjAC", "wk7OS2RM6yEC", "Wk_rW5ls5ZMC", "WkaDXMQwjgUC", "WKSgYUH1ZrAC", "WLc1uaZ3uQYC", "wLiz-YM2xhgC", "WLky5avnUWYC", "wLoKfdx7-3QC", "wm0JI4OwwewC", "wM5jDrPpDN0C", "WMA5OJCTCH4C", "wMaa_8Xb8IAC", "Wmq4IoyD7YkC", "wmTuJF6FbKQC", "WmUSPSLxlPQC", "WmUw83YShgAC", "WNDpC8SR784C", "WnGFo9t_IOUC", "WO98q-vYCYEC", "wosmqf485hUC", "WOuuYHLvYjcC", "Wp1XC3mN_2IC", "wPkSa-HN_MYC", "wpqvUuohLcYC", "wq0ilxW2vqUC", "WqAlWYtemkIC", "Wr8kC-w7JAAC", "wsINE_FYvboC", "wt35LTE782MC", "wtcUDTuDvcwC", "wtFtcD-u6YoC", "WTkreYxHt7kC", "wugATspM3_kC", "wUgQibrOaRMC", "WUPkrIURLK8C", "WVlWFpXP6pAC", "wVz695SACj8C", "ww1McrTprWIC", "Wwr_6d-81JQC", "wWvmlkiMdccC", "wxu_2Jmu1SUC", "wXW9mCfmeCkC", "wYc5_9x-vYMC", "wYeYMW2VJOcC", "wYjr2x5aBhoC", "wyMh187NfMQC", "Wyxj7Y3Fh7AC", "wZA6KEKKL48C", "WZizrtIcd58C", "wzU8hMXumDsC", "wzVeU1tbS9kC", "wzvgJAT0hFkC", "X-K-6gLqjfMC", "X-yja2PWbOsC", "X0qyLfOh1wwC", "X29egdUI4WUC", "X2IGPFRi3VcC", "x2OnhrVLMX0C", "x3FYLq_E6aYC", "X3zpP3adixsC", "x5GZe2b1T5kC", "X724dVctLwMC", "x8Cxy9E9ctYC", "x9dq3UEW2S8C", "x9Ph_EeUGlsC", "X_4Z6_ze6QEC", "x_FVF_Z44VkC", "X_g3l2bLmfMC", "xa0jilK-wBEC", "XA2CIjIqxPkC", "Xa4ZPBvQ7wwC", "xa6pUrdsRJYC", "XaZ_EXZxcgAC", "XB6ckxWOq9kC", "XC_QGlNr6UEC", "xcL6uJBrEP4C", "xcYBiLQM8D4C", "xDCfd-wJ1nYC", "xDptolIJzuMC", "xdunEwG0ekEC", "XEbyTBf7EiQC", "XeFUnQ5T4ZsC", "XF6jHaJL7-kC", "Xf6PZclfvyEC", "xfKLCGCY-IwC", "xG3vyS2XmiwC", "Xg8V-Q7Slh4C", "xgVgTyZEcEIC", "xhLJvNa3hw0C", "xHpBz44fTkMC", "Xhzjutx6xXcC", "xiEXEWPb0u4C", "xjhrj3Au1YAC", "XJkbu5qnYw8C", "XJkW6G12GnoC", "XJLX3A9wDwQC", "xjPHxJNx620C", "XJSdT_4NWTMC", "XJYsQAhR0woC", "Xk0NR2m7SmcC", "xKAfOh_De1kC", "xLozeea_y28C", "xMptYMB2jgAC", "XN0YxwnmW8kC", "Xn4TW9WsGcsC", "XncmdPu_yykC", "xnd6J2H_Hi4C", "XnKrkTozrGQC", "xOs4YQg0z_oC", "Xp6vEAtv5JgC", "XpDNvGEAe7UC", "xPF9Hb7DPLgC", "XPfQIK59tucC", "XppZdaDs7e0C", "xpXfiGyGbYEC", "Xq_QETrozC0C", "XQDjUGNtapwC", "XQgd7Bzf-SwC", "XQiwtnVqsvwC", "xQUkutYqkz4C", "xR2GawWTausC", "XrDPPG0e1XkC", "XRudk_NcA7cC", "XSPNUs8flVIC", "xTFw4h2p9m0C", "XTldGQSpnSgC", "xtlipDsvjbMC", "XtS0pZ4iiaYC", "XtU5TuLc3LQC", "XTv8wmnkif4C", "XuB3bzU2jYIC", "XUcWWiRp8EkC", "xULD1fHFdnwC", "xUzaWGocMdMC", "xv1OQIhdYiEC", "XvncO5yhtRIC", "XvWq5fQbUXAC", "Xw720FqZ4tgC", "XW_Wvjwt5nIC", "XwaR3Efr5xkC", "Xwtf8xn5oosC", "xX_rOjavnGgC", "XxoVcV6L1WUC", "xXZySrxyCR8C", "XYN8GF8Tg6QC", "XYno9yAbYvsC", "xYoPWwqWlZcC", "xZ1dKyGlFpEC", "XZ_L7qpBphgC", "XZkmY8pBCzUC", "XzZsuib2o-IC", "Y-BoqcxnjHMC", "y-dYbFcEtRkC", "Y-rDB1iuKD4C", "Y-zAdmcmpr0C", "y01CkeGoQBsC", "y0NEkHDng8kC", "Y2Mwck8Q9A4C", "y457SKdxBjgC", "Y6opRGhAvtsC", "Y6Q9DyIsEv8C", "y6TlC075m68C", "y77n2ySMJHUC", "y82VKVtQyF0C", "Y9RC-KWX7NEC", "y_8DsXWLV1YC", "yAGyi110qQkC", "yAZo2iCsCnwC", "YBJyS4ONR2AC", "Ybsjrj4Cj_oC", "YBTzuxRVppUC", "yBvwlp82czgC", "YCz0J-8HIIMC", "YD3DmobOQ1UC", "yd8ymZJI3PUC", "yEE5Byt3Yn8C", "YEnl6AXNgjMC", "yEvCzH8lTZsC", "Yfs9Vcgc-IgC", "YG3PX9nKxcwC", "yG7dKaS25OkC", "YgGzvE5QfUcC", "yGWzMkuQuAoC", "yGzGUapBwtcC", "Yh7SFWaXGmQC", "YhgcwJ1L-s0C", "YHMOopeGRLUC", "YHPmmt9VvF8C", "yHuMzHT1ymMC", "yhVvGG2wk6sC", "yi4rHT-XFREC", "YIhZQkLdV5gC", "yJ5eW6WbkZkC", "yJ9txWojyRQC", "YJGDWnNxZgUC", "YjR5Ve-zTcYC", "yjW4Qo8aVa0C", "YkfCt1ci-gYC", "yKIy-iHLaiEC", "YLf-ZgX-UbwC", "YLG0VQhpBREC", "YlGSROC8f24C", "yLnfnsSjs7kC", "ylOpe_XWA20C", "yMAK06tbIQEC", "YmWF6E452ygC", "yMwiTTpwasgC", "yNbybmjraNoC", "YNf0HXz7DzkC", "YNkNV-0dqoMC", "yNMBdJjMDAMC", "ynr1IgaajCAC", "YNr8R3Pz4BEC", "yO2yG0nxTtsC", "yo4D8ch_qOgC", "yoP8GwogNwoC", "YoWHawdOEasC", "yPBDST7yCzkC", "YPI00cDVcuIC", "yPPeKkqCX3IC", "YPYmS6tzg3IC", "Yq80VBOTOO0C", "YQJtrDm2m8YC", "yqM4zGmsYioC", "YQpUF06YzgIC", "YQqzosYoyKEC", "YqSsNCkr4P8C", "YqUrwg2oKMYC", "YruT5IEUQ40C", "ysiSyAiBL3EC", "ysLtzvYykasC", "YsrVKLkmOYoC", "YTEB8cwULEoC", "YTkZPwz-IisC", "yTqN9YLy15QC", "YtTAKHTADK4C", "Yu2oPyz_cusC", "yU5ezbYpJcEC", "yv3eVLIKUbkC", "Yv8qGDyMCcAC", "YVteNzkhHYoC", "ywr0CcGDNHwC", "YwSKMQIymxsC", "ywUiQD0ExS8C", "YwvRsvYofqoC", "YXi4TxShj7MC", "YXjEJmEuSw4C", "yxrwrGNFe8EC", "yXSFWak3ExMC", "yXUjLwz-LbcC", "yY0UFm0rwyUC", "yYE1mOtXiakC", "YyOij4PJX3UC", "yySSPhUSBDAC", "Yyxuxa-4z38C", "YZ0CYplKus0C", "yzewmitzYgEC", "z-mixu2SLyoC", "z-WsBum6UckC", "z-XHduBD-fgC", "z03CQmKJuC8C", "z0Vxqx9UBxUC", "Z20jwWZr9rAC", "Z5jDzJD_8jkC", "z5m6Iq-d0fkC", "z5PCXXkpVRkC", "Z67UVjeaYU0C", "Z6IREjoKKSMC", "z6nLTGxdAIQC", "z7FxeM_bLL8C", "z7GVCC0hlBsC", "Z7XSIdAGjY8C", "Z89d21_IaX4C", "Z8nOkDyOwnUC", "z9xMfXGoWd0C", "z_LZp0HLrzEC", "zAEtQO1y7qMC", "zAirHadN5cwC", "zaZ8mAysMeUC", "zaZJTCOL2zwC", "Zb8giChIpp0C", "zBcGaNyjIakC", "Zc11bf7iopcC", "ZcGvAzjPSboC", "zCiuBsoCiAwC", "zciYiyHBb_EC", "Zcr7qa3b1xEC", "Zd1l0Ivij8wC", "ZdAaM8LdiMEC", "ZdcWjMktgz0C", "ZdlHoksfOuAC", "zdn7ZhQb13oC", "zDUNcRJHPPoC", "zEA5ve49rGcC", "zEb7PjUzZqsC", "ZEcqBsj4nzgC", "zehMDN6VEH8C", "ZeNbiH_7W80C", "zf0XkweGmlsC", "ZfuiGIlEhE4C", "Zg9zkoeC8ikC", "ZGCaf4HbUMsC", "ZGqcDmY1V_EC", "zGwctkli91sC", "ZH5OHnoFkdoC", "ZHEYK-O-CyYC", "zHSKn-li060C", "zHSO2GUV9ucC", "zI9VMiSN2b4C", "ZiEbz0B92nAC", "zIfWQF4BmggC", "ZigB9tzZ6nUC", "ziPDbUsmdwMC", "ZiVRnurrtzoC", "zj9NFQ-R0O4C", "zJCkBsVE4e0C", "zJExf_8IszwC", "ZK_fL6GQQ3MC", "ZkOEFzU5KfQC", "zkteuesBwpQC", "zKVjWGmUMsQC", "zlEriTpFmKUC", "zLjdSAeUHNUC", "ZLk-uuTII9EC", "ZLRaCF3rPwoC", "zLyrsEvkaZUC", "zMb-ettxv2EC", "ZmG_FiqqyqgC", "ZmH2rNbYVUAC", "ZmIcSTz5I-MC", "ZmRXTGKNUacC", "ZnahFZulWTcC", "znBbzQ_xb44C", "ZnC93TifTzsC", "ZNFbrV028y8C", "ZnFzSgYtgSAC", "ZnOutTTiMrAC", "znXDfnRWpqsC", "Zo0LzmyjP-4C", "zo4C658vKIAC", "zOBmXKh-OicC", "ZofDHNpTlrgC", "zOsz3T_YX38C", "ZP5fR-FfEvIC", "ZP9Rg_dx_JUC", "zpdvLYZX2kIC", "zPJrA-irbp8C", "zPxCryQcBwAC", "zQDMySj1ytEC", "zqHiiXjk6xQC", "zQlpLeSVg4gC", "ZqM1fdyT-HEC", "ZQRFFeUnLUIC", "ZqXo8b-P8DUC", "ZRI1DvA4R1MC", "ZrJB-MsbWvoC", "zsDExU_Oji0C", "ZSfix9YX33UC", "zsRtUi8r-fwC", "zSv6dBWneMEC", "zSV6gfQSMeIC", "ZSvSfCmzo2wC", "zSYm8sBkECQC", "ZT8pJZnkAysC", "zTa37YkeYwUC", "zTB98B5wOC0C", "zTd05X5fINgC", "ZTL1LP6SitAC", "ztnY1wbBubIC", "ZTtvaxiqdpUC", "ZTYG01M4xLQC", "ZULgTHal9iIC", "ZV3afTMMSHsC", "zvyBq6k6tWUC", "ZwcbYU9lI8cC", "ZwjiMn4-_T8C", "zwPKJGpFJmUC", "zwYTsxFqZ1MC", "zX0mefUtuHMC", "zx574VhlOOoC", "zXWXyM0CqHsC", "zY3HGzU4WSsC", "ZyAt3T1V4EcC", "ZYC9J99h_KoC", "zYgKMgNoO5kC", "zYk5y-t1950C", "zyTPMwa4iVAC", "zyzNGXvy-6QC", "zZdMFSI4wGgC", "ZzDwREJdaC0C", "zZUcvgn33YAC", "ZZueYtIK1OAC", "8KSd2u8LD2MC", "bLOKdFhvUZcC", "BPpCOYH2RCgC", "C4_7_rbKy-QC", "ceYlEs6gT3QC", "d_lVB6HZJ4YC", "DpqPwAk8UvYC", "dxumVrUrpYcC", "EhmN7RRA_ugC", "eoy-khRFxGUC", "fT6U0Ee7_kQC", "GU1cifth7UAC", "i04gvDRlG3IC", "iykLVJAK49kC", "nI3JXcSjvwsC", "nSvBa7hvG1EC", "NTWZOS6Ew_QC", "PaGLM2GozFoC", "PFYBPAS3LIEC", "qB9vnlTv6Z4C", "ROZpwAolfS0C", "TuoFvFXf3NYC", "U77um_h_dgcC", "VF3fYPWhRZ0C", "yA8CJ_xxNLwC", "-Ac81W-ZQDEC", "-g93J_EADYgC", "9sHHczJ__74C", "aN6SxmXodLkC", "AOKXOA9jxYoC", "AYUZIqbH2F4C", "b2ov6zAspKsC", "bEdfDabRIs4C", "CYQZUeo0mcMC", "dTmVGc4SoRwC", "ECWbSMvY_yoC", "g3dIAAAAYAAJ", "garJ9BwysNEC", "H4cbM4mroF4C", "HZc3FzaajnMC", "j4PpSFWmNQUC", "jWgXAAAAYAAJ", "KqUVJLLDJbQC", "kyWrpT3TMTAC", "nsW03V-aBDAC", "qE2FPaaAa6wC", "RAUKBvP5OfgC", "rUbjngR5YqIC", "SQhknRXlyvkC", "u9udoFdoMooC", "uaAMQY5-4nMC", "WMZ959gYm0IC", "WwmkMDW1GxIC", "xEKrdRy6Yn0C", "-3xLKI5mpTsC", "4HIWAAAAYAAJ", "4mOrEoLlJQMC", "5Wa1OGIrpfsC", "6a8HvlJBqu4C", "AcFukkjcG6EC", "aDzteIlBZ-gC", "B73wDUgCSk0C", "C-7CUEbWSHkC", "CfPWhC7NKlcC", "e8F70MxEViAC", "fUIZtMHfyisC", "GX5PtCqGnsIC", "hG4-QGmD_84C", "hsgseqd6jW0C", "ikniJkskaZIC", "jIEhvjDHdwQC", "jy83rMzyVKcC", "K3uKk_QBg4YC", "KJfZw8djFIoC", "nRz4SETLpucC", "ob9NMdgEs-EC", "Qbln_WYE65cC", "qUelIDH7unkC", "VqU5HA3h3SIC", "XeAVAAAAYAAJ", "xllOU8qyH5QC", "yO3lSt5C3OEC", "ZMV0OxvLseIC", "0ZOQM0b3CIEC", "bfXZpcLNv7UC", "c7K9joiXqgYC", "cJ1kUY-wUVwC", "cZ_F_J1308wC", "GITDL2ZCedkC", "ixaluvF7Mx8C", "lez8urgN7IsC", "MlOWsTGRARIC", "OIk7WeItvpQC", "q2eNLtaZ7osC", "QwptKz0-wL8C", "R82YRMlkujYC", "xdbrbcBssP8C", "ZbnLAfbazQ4C", "1F2N9Q6NISQC", "1xlR5HF9ZhgC", "6VJ7KzN1x_wC", "_U0oAK46KZ0C", "aWmi9nbSr04C", "CcJjP5T0fwQC", "dfysT8sctZAC", "dYMS5W6_Lb0C", "eK0SnBnpkA8C", "HQwZYSf8x-8C", "jy1wYy1s2cAC", "k63dDkZnAoIC", "lb96g-R0yFcC", "lCNdMetFtm4C", "LnkpdauAHvEC", "PNjrRKR3sKoC", "q2E_qQwNi84C", "Qa8IoiT_3kAC", "rKNgpIpk00sC", "rYyxqSi4vJEC", "tMrWdiJa5kIC", "uey347n5FmMC", "wXVwWWBl0S8C", "ZswFrYyJ6dMC", "0JMqA3_JQ30C", "1rW-QpIAs8UC", "2weL0iAfrEMC", "3bKJ-DZZpWIC", "5HCaqYbD5t0C", "5NfZvS8gCeQC", "6vIfS9fiMu0C", "7BUf0xhBN8EC", "9m9tNj2w2bcC", "alR-oZEbPFUC", "AUqkcy2G-N8C", "BersqPj7I8sC", "BIOMtGClRbcC", "BJcgLVibkrEC", "bS70a4o-wsEC", "ccnkgkRSIMcC", "CdvXLjqAcccC", "cMWIkZzNgxUC", "d8lp4Wth67IC", "DCqFYOrGyegC", "dZqcuS2SfDgC", "fJelZ9wO11kC", "gKSp69qW17cC", "HjRPMPdVlYUC", "HRCHJp-V0QUC", "i95ShDMoWl8C", "IhFHHJ4hTnoC", "IwywDY4P6gsC", "J4cTSAXOC6sC", "jUX8N9kiCiQC", "JXKlVTGYOq8C", "k0P11ZxGN3QC", "KYs2iT4brBQC", "m_MwlF3VmKgC", "MJgN0BWagZcC", "Ms_VAVC4IJ0C", "nXYsBeGHHWsC", "Ojqi8KbWuLwC", "p1hd3kN0odgC", "P29bv8K6lXAC", "pMnySBrsQ70C", "ppLI3zTIhQ4C", "PWuh21HK5DsC", "QgzBqhbdlvUC", "qLfZf7f5_pkC", "RMd3GpIFxcUC", "RRUkLhyGZVgC", "S4v4JCNH7KgC", "tcjBGGcB8QMC", "th8NdVD8E0gC", "TlYexn8n8gQC", "Ts4PoJismWYC", "VhKiOWjjB5AC", "WSCEgZsug1oC", "Xgaf0bkDcyIC", "xWjTZhw1MiUC", "ykz7uzPEMjEC", "yOrLifj9vzIC", "ZXRxl3Bl2xMC", "-A1mSoCEOm0C", "-aAwQO_-rXwC", "-ak5icwgpRcC", "-goleb9Ov3oC", "-iBS6-2OO3wC", "-Kzb2LPyE0oC", "-L99RHLc3WoC", "-nGQ0N7P-EYC", "-pB1UoFnjZcC", "-PS1vVwZlsgC", "-sFpPTDMyrMC", "-T7z7wffbVgC", "-T9Ba5NZ_jYC", "-vhCqN2twGQC", "-ZVoVtwCMz0C", "04CSCh06t0MC", "05qJUAYfFycC", "07TScp8-0tcC", "0btZWYVwXkoC", "0gCmKrNJd8wC", "0IUC0Mxdl-0C", "0P2nLQWsG3QC", "0PCwIecU6PoC", "0UmvRJkREtYC", "10I6OfI_MOsC", "11BnFWuym8AC", "12Pk5zZFirEC", "1_eNSlA-2WIC", "1exhZf_kk_UC", "1gudrZd7CQsC", "1GWERGJlwOIC", "1J4pZFaAwnMC", "1K_wEFkeFmYC", "1ml95FLM5koC", "1PSwP25DkcoC", "1q0ae-XNmWwC", "1R75c1UxVE0C", "1TiOka9bx3sC", "1ToTgls77wUC", "1trnFmoGajYC", "1ttGagcQQi4C", "1ZF625C3My0C", "2-7DDxR-3KQC", "240uVq1tL0gC", "2aFQoNOCUCwC", "2CSkYN2KGjQC", "2d-RLuD_MX8C", "2eiErUtb-p8C", "2Gfol9An-wEC", "2hptMOgYHSEC", "2iKL7zr3kl0C", "2kL9sbknSc8C", "2ndITi80AcsC", "2vD8gLn4otkC", "2WG7cwrN2r8C", "2X-PWN_f0xwC", "2xaB9PksH1UC", "2YbevnCXAhgC", "32-r0N8l9BgC", "3A0SF9sk3EIC", "3BJdlkZ6kDkC", "3C05cv30rkcC", "3cn2R0KenN0C", "3GWqOS-52IsC", "3j5tyWkEZSYC", "3ksWYtJflsQC", "3LwmTxRRMiQC", "3LX7nh7hRcwC", "3M1RSHUqkNEC", "3o57NbjApJkC", "3REGuousjN4C", "3rtX9t-nnvwC", "3wasr5JWeicC", "3yMZOhzLhSIC", "3zmVaLrGIDEC", "45ADMg9AA7YC", "48LKoLGCyJoC", "4ikgmM2vLJ0C", "4Ll-PPvmduUC", "4LVeJT7gghMC", "4mmoZFtCpuoC", "4nd6alor2goC", "4t-sybVuoqoC", "4TjL9Ox1ntoC", "4xg6oUobMz4C", "4xlZeu8O3lcC", "4xz9OqthGW0C", "4Z5x82ImmF0C", "4ZjfJ8cPe1UC", "50lo5A_1jDIC", "50qHcSNVVEMC", "5dO2lAMQqhIC", "5GppqmU13pIC", "5HkS5BEBKLsC", "5jNPsVIcHt4C", "5k1D1TO3iQEC", "5KHXPeiSYBgC", "5l3CTPeF4D8C", "5MF4TPsIZj0C", "5OYP9Rt0NdoC", "5PorGvw6SjkC", "5sWxHTayN0wC", "5wsK1OP7UFgC", "5x1lzLq2Ft0C", "5XEMuJwnBmUC", "62l_suJtyz0C", "64zO-_FNDrsC", "66h1xWOV8c0C", "66TgFp2YqrAC", "6hkR_ixby08C", "6LpfzaGv1aYC", "6lVEKlrTq8EC", "6PY_emBeGjUC", "6TasRmIFOxQC", "6TfTS9ITW7UC", "6y_SmPc9fh4C", "6ZVkqm-J9GkC", "7-Fe-PRzbEwC", "7AFwtCfB7acC", "7C7oIV48RQQC", "7Sc4p5-ghJcC", "7TKf8BQFoF4C", "7wvrD78mUEcC", "7ZNiOo89Er4C", "834s9cWP4rgC", "8_KTbTmM3M0C", "8b-2gaCHPC4C", "8c9a9jarbMwC", "8HLqaeTFg7sC", "8i65CApWCnUC", "8jkBcSDQPXcC", "8kj3dlshk88C", "8md43ihiJ_cC", "8vZBfWypDhUC", "8wRu5InF79gC", "8xNAMDp9NasC", "8YugVtom1y4C", "95As2OF67f0C", "95ZyM7vujG0C", "9a_SyUG-A24C", "9aHawVmF_lgC", "9dqQY3Ujsx4C", "9gUrbzov9x0C", "9IH-7kSW4aIC", "9nOljWrLzAAC", "9oCHolP7FD0C", "9S9__jWLI9AC", "9uheAs3jS0sC", "9ukKq4MTYosC", "9XwBSmv5gQkC", "_0H8gwj4a1MC", "_0W5ByvEPEgC", "_2BuAVaMM5YC", "__sIfvwqVWwC", "_blECNR-6_4C", "_EyFjj8RjOoC", "_fehXFJYw0IC", "_kWzkDcAGDwC", "_phRPWsSpAgC", "_uBqNByaO0AC", "_vLmG9qEROgC", "_W-HKRVsfoQC", "a1oW4XozmDkC", "a5EoTv1OyTUC", "A_LL2LQASdoC", "abo7EABChYAC", "aDUcWY2ewlwC", "af3tmwYlgBEC", "aFcsnUEewLkC", "AfL0t-YzOrEC", "aGJPbks3necC", "AhEBg26pUNUC", "ahvvPmDtF-YC", "AJ_eBJtHxmsC", "ajd1V305PgQC", "ajqdpRHpO-oC", "al-R4JKev9EC", "ALeXRMGU1CsC", "amcdGPg5Q7gC", "amXicbM6BCkC", "An0-v7dEJjAC", "aP9K8wyxm-oC", "Aqidsw3SkDUC", "arXrC7N2IyYC", "AS3uSFlVv2AC", "ATNy_Zg3PSsC", "aUJNgHWl_koC", "AW7ekICdHAIC", "aYLi55kim1gC", "aYNCTZ16yAYC", "aZCAXVMDh6EC", "b6BT-AYpUNEC", "b7GZr5Btp30C", "B8_1UBmqVUoC", "B_1HgSfFnnIC", "BCvtssom1CMC", "BEwIQs5xY_8C", "beXegQJwqTQC", "BgVuXsW_gO0C", "BIJZTGjTxBgC", "Bj2HHI0c2RIC", "BJGCuje64FcC", "BjVsa4uDdAcC", "Bk_q7dal8XAC", "bkz7stcdbKgC", "bL7QZHtWvaUC", "Bm21Fz4TD-4C", "bn5GNkLfnsAC", "Bosc5JVxNpkC", "bowcw__fhuUC", "BPm4izC3prUC", "bPoVokUhRC0C", "bPP8Zk78a70C", "BQ2L4J6Xy4wC", "BQYR6js0CC8C", "BraohBA1avIC", "BRXXrVQEjHcC", "btxslX4AXTUC", "BTYXkirY88QC", "bv8IAqVh8EAC", "BZ1BmKEHti0C", "C0sUyTpAAQYC", "C636G0btdUIC", "C7M0tiUKMccC", "c8ALAAAAIAAJ", "CAFR6IBF4xYC", "CAm2DpIqRUIC", "CAVIOrW3vYAC", "Cayp_Um4O9gC", "CcjUGVlekQQC", "cdBPOJUP4VsC", "cigGNKrQzz8C", "CjAnY99LwTgC", "cjdNRUsOhgwC", "CKM5MUMtlcoC", "cmTZ3RMv_OwC", "cOhb6JXKOrQC", "cp5XkRVbixAC", "crzkrzMji6MC", "CTrT6wh172AC", "cu5IY6ygv9UC", "cV8xnSIa0-IC", "CY3b0mcDF9QC", "CywS3hbvth8C", "cZa3DlaSTqIC", "D-3KYbfqI2UC", "d1VgIgCq18sC", "D3uGQFvx8DEC", "d5JwYbI5P3cC", "D7TseoWoSbMC", "D8GqhULfKfAC", "daHa8NMqnwQC", "DB7nanStgAgC", "DcoqRQ47bBIC", "DdlNuvGMPisC", "Dg6SArOSCmQC", "DiWBGOP-YnoC", "DjV5hgTWNGEC", "dOg7Q9_JWAMC", "DOGQDHo8ihIC", "DOkj9TTvvN0C", "Dqz-2gf6E6UC", "DtRpdVi0Wk8C", "DujYWG8TPMMC", "DUKA1_lFigcC", "dvn3uent7VcC", "dYY3FF9jZbMC", "dyzDnCLWJugC", "DzpLddaKog8C", "DZvXOwntNZ4C", "E-Rugdp6qhcC", "e-xsrjsL7WkC", "e4a5-ItuU1oC", "e4igHzyfO78C", "e5dkxDhDjCoC", "e62RhdqIdMkC", "e799caakIWoC", "E_9NtwNY7UcC", "EAKnwRtpLcoC", "Eb42B-GQzV8C", "ebmErco-iKMC", "ebnitl7SNLQC", "EE6BmZJN4-gC", "EE_RN4aVs6gC", "egBeCRxm5yoC", "eHANhZwVouYC", "Eiji-EnuhXUC", "EkMVZUxZrgIC", "ElF3FHwouuIC", "eMBG_soDdNoC", "eoh8e52wo_oC", "eoZbYsAa4x0C", "EP6-ogoEBlEC", "eRFL_367VoUC", "eTve6XEUbYIC", "eX2ZaT-4_wsC", "EXxAswWsfKwC", "F-xrdbnQ6HQC", "F40VFo10z_MC", "f8EOBjMJMZcC", "FDjtQsXv_JUC", "Fge-BwqhqIYC", "FGVwp_WrWNwC", "FjgxVAzS5UQC", "fk7SawIjG3IC", "fKfSAu6v5LYC", "FkhBUABBe6YC", "fleOoPdOHuUC", "FlUj0Rk_rF4C", "fnO3XYYpU54C", "fPEKgIA1Hs4C", "fPzgHneNFDAC", "fQPaHzqyUxoC", "fSUZa2YTDcAC", "fTQhA56xtM0C", "fuL-_BhZFyEC", "fuq94a8C0ioC", "FVC9eqGkMr8C", "fx3wIM1_DSoC", "FXs-uRSDBFYC", "FYMVNMlz130C", "fyVtp3EMxasC", "FzPaB_6Pw4MC", "g-NdglUBHSUC", "G3ig-0M4wSIC", "G_yomLlpp4EC", "gBJbpHyFf7MC", "Gc8edC9wPEgC", "GDDhso7XjngC", "gdTIB8pfyREC", "geN6MUthHdkC", "GhCHtcyf9AcC", "GkWRVHPpQ0gC", "glIu5tT3abgC", "gM_IMlsbTqUC", "GMuSEzGL5XcC", "gnh2Rb1rcMIC", "GOblIwn-0AkC", "GPE6ZAqGrnoC", "gPHjjrNWaQwC", "gPvk-eE7t0IC", "gRNDLAK4kPUC", "Gs5PRR9-8BcC", "gUsX8yzMHaMC", "GvK7m9Bm6UsC", "gxFGJu_N8l0C", "Gy_T3abN6AEC", "H1VPa_mPaakC", "h2VxxlEKTokC", "h3g3GicFWGoC", "H3nCwyx8bf8C", "H_yEm6z1u84C", "hAi3CdjXlQsC", "HAjfSA3ir3kC", "HAPhBsmxtaYC", "hbOtcP4F7zIC", "hC3cgIKwXkkC", "hD0PNMu8CfQC", "hdvsn-N4nY8C", "He7Ge-Dz1HUC", "heBZpgYUKdAC", "hhdVr9F-JfAC", "HhwifKDS9ZkC", "hLjVKucYOtsC", "hmfbjsogFAoC", "HOLITuv6UvkC", "HpH7qJNt7MkC", "HPkTKm_bUbgC", "hqucruPBheQC", "htZzDGlCnQYC", "HwYh_FHh2VgC", "hXGr-9l1DXcC", "hXGXc2iPKlUC", "hxml9KC0GBUC", "HZzpv5Q5fBMC", "i-Mt27qe598C", "I33IwXtJwbIC", "I3aNPR1FursC", "I5GcpyPx3RwC", "i9iPG7C3EP4C", "Ibcy57Hz4tcC", "iCDr6AsHO-UC", "ihzLdVtdZQ8C", "Iisrp6FPHaYC", "IjxMRgYhQPYC", "ILPNO5j2sOkC", "IQvFpyBhGHEC", "IrLXImwvDiEC", "iTpXLrPR2TQC", "Iur4CMs_EtYC", "ivEfPj-mpqcC", "ixHcs9C-NCUC", "izPo3KwVucIC", "J4DVFmMLjOIC", "J65nNxyoKVQC", "J93o05MH3v8C", "JbhLhvJ22gMC", "jbOHb2BAwzQC", "jboIUDsekmIC", "JCXZJSfCVHUC", "Je0qlv3ZQQ8C", "jEKGKWorNlwC", "JEZzcN8G67AC", "Jh59S6WIS98C", "JHMdZC08HhcC", "JhmWHw3qfDIC", "JHNPbt7pEeQC", "jIj-qAflWxQC", "jInV9Bd_Z88C", "JL1VM5wMbrQC", "JmTIWYs3yhwC", "jpxkQ-1elyAC", "jQA6wVLCINUC", "jQJ1J_Vw1N8C", "JrNoQNpSM4cC", "JuLko8USApwC", "JWAjm234VJcC", "JXFhzfy9SZAC", "JXWOqakIlREC", "Jy_rBRz9u-MC", "K-Y4mWxqh8YC", "K0mrPqWzMB8C", "K3GS2HFqOYgC", "K7VPVr0gtg0C", "K82mOsYwq_MC", "k9n8v_7foQkC", "kAa8wzlx9G4C", "KByAsGhYJAcC", "Kc6tnRHBwLcC", "kdDRJLxBhl4C", "kfMew5cFAJsC", "kFpd86J8PLsC", "KgfHxvGFHAoC", "kgvhQ-oSZiUC", "KHuYOF29QyUC", "KI4TH6s01esC", "kKLbyWycRwcC", "kmCI6l0o-6AC", "Kn_OAuktbq4C", "KNvxPSAYzbQC", "knzNIfmU2F0C", "KO0HSzikNoUC", "KO0tMOWl5AEC", "kP5qDIDDzFwC", "kQ9yVsm3mFgC", "kqn2-JywK5kC", "kQN2jMWUrSUC", "kRekNRGo3NYC", "ktma1QNK0MAC", "kuEjSb9teJwC", "kuFhjNZuHTAC", "kYYkfkHZGksC", "l1Sqtmj1LkYC", "l5tycCzdgNAC", "L9sYq3XSLmIC", "l_1xed01BsQC", "LA15eDlOPgoC", "lBg47Qr7fX4C", "LbVCdCE-NQAC", "lbxIFujfyIwC", "LE66AM36fHgC", "LeNwsQ-5Sw8C", "LFk3pHpFiG4C", "LG3-9h0ZtiMC", "lH6Sy-O13e4C", "LjcOPtNNcZ4C", "ljcOSMK7t0EC", "Lo2uCECV__8C", "lOnWsyu-u0cC", "LOODynIU69wC", "LQyUKopZcSkC", "lsQx0-3BPV4C", "luIVsjEYeWUC", "luUj8miPuIIC", "LvgD47sRQaUC", "lwaKAqUMG10C", "lYi58Tv9XpIC", "lYlMNqYwBUIC", "lYxfy6eJ_x8C", "Lz7LNak21AQC", "lZJD2zYGbNwC", "M3S8TS_impUC", "M5ebQh1lg8oC", "M6_uZrk7lyIC", "m6cQfXCETnIC", "Ma77jxOOmBcC", "mbKKzi5FniYC", "Mbo_p4-46-cC", "mc01rIPvkfYC", "mCE-VlYSRlIC", "mCGvUhYJBGQC", "MdPIAGigJigC", "MEbKsiomE2QC", "MF8yfy5cq5wC", "Mfjv6snK0-EC", "MgAqE2DCDfYC", "mGOpScSIwU4C", "MJcrTG6tJsAC", "MJPLCqIniGsC", "mLdLHhqxUb4C", "mlOa7wPX6OYC", "mmi_hBrCMMAC", "MMQDgUxu910C", "mp-IUPLINmwC", "mpAhhjPPZMYC", "MS2f3p0j55oC", "MuaMgeJ4FF8C", "muFCYYdoG4cC", "mz5lxQxgegQC", "N1hm_nUeIToC", "n2FA-nwz7GYC", "n5BlBsFbGOQC", "n6eiH3iPVKYC", "N7BvXVUCQk8C", "naJdU5fxuNoC", "ND0pmtL28TsC", "NGIIGZmarOAC", "NhAg6qFMThYC", "nIJWmnfzNGIC", "nJ35cT-IGAMC", "NJz6xRVdOgcC", "Nk0jHTnCg8MC", "NKbAEGF4N9wC", "Nl-vaAdJD3MC", "nLdLoB7zZ9gC", "NLngYyWFl_YC", "nrQ_3YxoE_QC", "Ns7psv2IJ7MC", "nSzoG72E93MC", "nT2kbcDtMl8C", "Ntn27W4nT7wC", "nTOFkmnCQuIC", "nVbRKyVBDGMC", "NynQQGQbglYC", "o12obKDqiZQC", "o1YpDokP-8oC", "O32VXB9e5P4C", "O7Rbx4ptxqsC", "O7vMyhYJtKQC", "OcbAOkX1uRYC", "OdbUxdAghF4C", "oFnWbTqgNPYC", "ogUR3V9wbbIC", "OID48u6zY4EC", "OIWNFaJvJokC", "OKEZgru9cnUC", "okSjKZ7An5AC", "OMRWM0-gSnMC", "oN4xZy_2DKUC", "oNklVtBSda4C", "orHgII9AODoC", "oU_-6ikmidoC", "oxfoF_gasvsC", "oy-P5D7hTVAC", "oY_x7dE15_AC", "OZVeoomxxhYC", "P10p-iR2zcAC", "P2PkZfwL630C", "P3sywFksmrcC", "P5GsREMbUmAC", "p7-Enmqb604C", "p8i33BpBn0oC", "P9YjNjzr9OIC", "PB733uKl-coC", "pBiPKtOYWpkC", "Pd8-s6rOt_cC", "Phtqa_3tNykC", "PI1s90jUcHgC", "pJX8yAaMtKEC", "PK_BGGCU_dsC", "pkW1ckw93vcC", "pLhb4dAWIAgC", "PmwfH7X-IKAC", "pnH2Sz5rY0IC", "PnVKu0Yp2bcC", "PnXSXb6866EC", "POG-LSUgYckC", "pPcQ1RIn9AQC", "PqcPCgsr2u0C", "PQo7zbsvwl4C", "pSdaNuIaUUEC", "PStOS3H5LxgC", "PTAiHWK2BYIC", "PtGdSELRYuMC", "pTyCHGmAgf0C", "pX4yxOHnWg8C", "Q-R13b1QdjkC", "q2HObxRtdcwC", "q3HwhfjRmswC", "Q5P2lFaM8GgC", "q6_56x5tB7gC", "Q7yPw1ODvBUC", "qa29r1Ze1coC", "QagG_KI7Ll8C", "QBebLwsuiSUC", "QcPRc-WAI5UC", "qDhd138pPBAC", "qhOMLscX-ZYC", "qIh6FkKdQP0C", "QiJRvuXA_VcC", "qjjEsQv1spQC", "qk8ps8dtZgIC", "QKoOBXQZAMoC", "qmY3JmLtz60C", "qop8k5f85LgC", "qpVATEIQeEYC", "QQdBlDBUFywC", "qqeX8MJurLkC", "QqNpbTQwKXMC", "Qrw6vrtkDp0C", "qRza88jRTx4C", "QSBlbbkXDwAC", "QSljY8xP2psC", "QUA-ZtqMZqIC", "QUDMaGlCuEQC", "R0UdWQ5thf8C", "r1ulmNr6YWoC", "R5P2GlJvigQC", "r6t8AmFSZ80C", "R7Frpn3g9AEC", "RbOYBr0M_wgC", "rcEEeFWBx_sC", "rfJNoXk8UIEC", "RfKMOwRb1-kC", "RJcBeywz9uMC", "rJiKbrZcijAC", "RkguTdoH3VQC", "Rla7OihRvUgC", "RNkFavRF4ncC", "rtpgMCVSopIC", "rTuCTr1pdc4C", "rubP60KftfYC", "RuX1cSRsL_0C", "RVrOhyTWpJ0C", "Rw4u68fxYQMC", "rxC8j3j8MQUC", "rxrJ1RWBXK0C", "RYCMx6o47pMC", "RYT4ylLK-D4C", "Rz3XpyQv5gEC", "s-8jZaXpoBAC", "s-9zCT2bTr8C", "s0khq62YOaIC", "S0lDWprGB5cC", "S1_hPAL8obUC", "S2lqgDTm6a4C", "S2S9xPNlGoAC", "S4BJKqVYjrEC", "S57m5gW0L-MC", "S6U6qp4xJMQC", "S855YcZlshgC", "s8gX0VAyexcC", "S9Y2JxSVJcgC", "sC81wohqV8sC", "sDUEiJuHaW0C", "sfduJhZsoT0C", "sfvnNdVY3KIC", "sI2bAxgLMXYC", "si3R3Pfa98QC", "sInqr5ILPE8C", "SJXr9w_lVLUC", "sKbCtww7hacC", "skEwuRfPmx0C", "SkswFyhqRIMC", "sna9BaxVbj8C", "so0gddc0w3UC", "soZMXyEm0aAC", "Sp7z9sK7RNkC", "sPpaZnZMDG0C", "SRfKde-5LI4C", "ssEbmvfcJT8C", "STxlycWlVS0C", "sVH3YlIZK5QC", "sw6FvZ1pTX0C", "sWu2bfKcyb0C", "sYgTwHQbNAAC", "SzKVdMrU7i4C", "T0Av5fU9BTcC", "t1RCSP8YKt8C", "t4xRL9aEebsC", "T70Ahd88jSMC", "t96gl1TfRBgC", "taa1oB24qmgC", "tfOQ4dzVxUEC", "TIlDhmuZ3QwC", "tiwxzqYq2o8C", "TJDGTP9Sa5UC", "tKoGFBA-nIEC", "Tl0N2lRAO9oC", "tl9q9DbnkuUC", "tLbt4eCcltcC", "tLWve-VvBLoC", "TnVICuub4UAC", "TNYhnkXQSjAC", "toNN2yNKRBIC", "TpEfdRUQdKUC", "TqRn1lAypsgC", "TRXrMWY_i2IC", "TRzS5F92QYQC", "TV2O8YYqz1AC", "tV4Kh6qMU24C", "tVtKEWjIrnMC", "Txr71zy_pRkC", "Ty8aEmWc_ekC", "TyoOzgIlH4QC", "tZWnNPKg1K8C", "u0ksbFqagU8C", "u1RmDoJqkF4C", "u26ijgx0v_EC", "U3rMsphfCLAC", "U7G38s4y0VoC", "UAgtStKY2ycC", "ucNMDAWWyLsC", "Ud2goDsqfBIC", "uDgXoRkyWqQC", "ue_JYo-k0_wC", "uhIk3OddN9MC", "Uhm87WZBnxEC", "UhRSsLkjxDgC", "Uip3_g7zlAUC", "UIqUmzUf9sMC", "uJpXCZGxbZYC", "UJwfDYDJ-v0C", "UPeqxCF1adMC", "UPFHb7vEgjoC", "URkMY_t6RQQC", "Uui9coi6DZoC", "UujKmek0_9YC", "UUl7Zyj841QC", "Uxw6_S0NNhUC", "uXwyf1bWtFIC", "Uy9PbkDwisYC", "uybFyRcJQdQC", "v-iDn44wlr0C", "v-walRnRxWQC", "V3me7QWAZR0C", "v3XWH2PDLewC", "V5_0Tgm5ZUQC", "v8du6cp0vUAC", "V_FUpOrlnqUC", "vaNlzzIqXe0C", "VAzHhu4oFfYC", "VBI6JppgQBAC", "vbu2gis26C0C", "vcfj4xsrlg0C", "vdsK7BPGya4C", "VeoKtu_22q0C", "VfHuIq1s1pkC", "VfOmTJsotWAC", "vg1qPwCc-V8C", "VGkkjkLPZkoC", "vlhLAobsK68C", "VNetYrB8EBoC", "VocWKgK9SxQC", "VTHTUY5rUEMC", "VTko4TvTOgsC", "vTYHNyrBDfIC", "vx72IzkGD98C", "w-rb62wiFAwC", "W37zSNcybaEC", "w45BbvlRh1kC", "W4SqcNr8PLYC", "WB3wKoZRE3EC", "wcFGH-zIyGgC", "WCO0Sb1KLAoC", "wdqStSm-iY0C", "wfFiU4nPB0wC", "WFPgBUSv4PoC", "wGxmfLq4b_4C", "wItnFpuHr60C", "WIyz0mYxAwkC", "WkHO9HI7koEC", "wKJu6g5ovhcC", "wmDQ_3qzvmIC", "WmnpTpW8NOwC", "wMZIv4IxWI0C", "wNfB3AQSx1IC", "WqMMAAAAIAAJ", "WqQMESs4msoC", "WqVq6SDhtjQC", "WrSpNfsBcocC", "WVofz29Hx9UC", "WWBccP5LebcC", "Wy_kuQZzfdIC", "X39-syX449AC", "x46qiaccZLYC", "X6RtpboH478C", "x7Mdt86YwcAC", "x7YtLD4uLogC", "Xb9O5yNS5GEC", "XbWEsxy-2PwC", "Xc9xDgHgvaYC", "XCHXGyItdFIC", "xDSBaet2uSsC", "XG1CKclG-m8C", "xHy8oKa4RikC", "Xj95W0fz21IC", "XLaAIkKiydcC", "xLpndPXF3xwC", "xoM0DgW5FU0C", "xOnhG9tidGsC", "xpSSfrWCyfAC", "xQ8-prtJK_gC", "XQvkEb6_AHkC", "xR837PDL2tMC", "Xsf9OUuxtXcC", "XTcjm0flPdYC", "xukJAAAAIAAJ", "XVuRuM96pI0C", "XwC0xZU5z7kC", "Xwp8PCPA3-gC", "xYvLraxYTZoC", "XzJdpd8DbYEC", "y16ww5ZsJ0AC", "Y3uctGmr1XQC", "Y7vSVW3ebSwC", "YESB90FOStQC", "YFDGjgxc2CYC", "Yi0QySjju4UC", "yJwNrABugDEC", "yK4JAAAAIAAJ", "YlbvjEgeDlwC", "ymJ9o-w_6WEC", "yQxzIgfbG6cC", "ys_jtGM5WjYC", "YSkgXOledRgC", "YSvUvc0IzL8C", "Yt9tXLgiV40C", "YvxjJ0F0byQC", "Yxoe-sEcHNgC", "yyL40aHSTQkC", "Yzcf8RFQPmUC", "z160FGJyrikC", "z1DfFnoxQ-cC", "Z2p_Um2rCV4C", "Z6nJYDZOMWAC", "Z6yTi6HNUWwC", "z7VPlZZSZXEC", "zbDszWGvA0wC", "zcvgXWIpaiMC", "zDPLJqiMPsUC", "ZEbSSqwIhDsC", "ZhXjJeiefZsC", "ZID9VvvWiaIC", "zIYCfy0NnGgC", "ZLpcgAQvr_gC", "znkqSl7cimIC", "zpcP4AV_jPAC", "zqOfU_Ckag8C", "zr509w02h08C", "zUXuJTJ5sKcC", "ZvwEDOhLbpEC", "zWccvj_kr6YC", "zxAN9KvG-REC", "zYxRFAYcAZsC", "0DQaTU7Opq0C", "0ROwDrcmHssC", "1MsHm6me4XQC", "1n_qawoy41MC", "1Qgt4oyMwJQC", "2cLeRqOi0zYC", "2gg7P7GCBH4C", "2xsjEwJptn8C", "5jk0aWSzIPwC", "6AO31B6yUVUC", "6CyOE9PdJxgC", "6X745rS5Ci8C", "78QSbIswtQAC", "7VjyaoCFbIgC", "8dCnb4uR63EC", "8MXGNxVINkAC", "A8amtX_z1WkC", "aJyGy_eOeQ0C", "aLe4HgLkgr0C", "AmaLNTaGYxsC", "ARI1y0bu8UMC", "aw4MbnSCfnMC", "c8WH6c7_RP4C", "C9CVARo5snsC", "DA3SRxogVOwC", "dKIo6D9yh3cC", "DUcbyaGlYo4C", "earytjxi6pEC", "eBkmbFDT0PEC", "eubyMCDFlu4C", "fnVy4v5pZPMC", "frpHqlVH-O4C", "g0N8hOgFz3QC", "G87TWxGRMscC", "gDgXbx8hEjAC", "GsN2SVvNZZYC", "HcDMKrh-_fEC", "HjmIMdOx6-cC", "hW-wnqbfrdkC", "injpY-EerZgC", "JIr_egKfnDUC", "JP7D17zIEowC", "JQGHqScEFtoC", "kJp22rZDOZQC", "L1ZJT0XrFZYC", "LjHYjEZy9zMC", "LqdNEHd4Mg8C", "MAKtC4g83WsC", "MAyXHjLS7rEC", "MbGpxRxguagC", "MeBFzDmECGoC", "MeO8b6S9lb4C", "MhR5a-2nrhoC", "MJbBqn3XWqAC", "MKKPFqc3WqYC", "mp6P88ff1YEC", "mpEBZLxaLJQC", "mPTi-oZ3x-cC", "nWNI5NeeYEgC", "OnuW0ebjkaoC", "p063Z0CSLa4C", "p15Pwk-192wC", "PWnWRFEGoeUC", "rJSXMIxpcngC", "roXy5kT34j4C", "rRQ-ln-SYnMC", "s-IKDw_xNO4C", "S4ek45Si2AcC", "TjOfAy2tnb4C", "u2rIbGeX4r0C", "Unws1YIys8cC", "v9mR1wFHtq8C", "wCnHmQnPNmwC", "wlSmtlw6-bwC", "WptXk482oEUC", "wxJ9j6s_wRwC", "WZEAkY1LdtAC", "x33cjhYYoKQC", "xfsr4C_BvYwC", "XLJB3gh7LgkC", "y13y4Y5k1pwC", "y1GjTaSmauYC", "y7RoHrgX7yAC", "yu9H0Hv4Ot4C", "zd_xk4vIXsUC", "ZgVbSPYVs5sC", "ZoZZm1TYsUwC", "-jb3fATxhIkC", "1cuf2UOiRT4C", "1Mjd2GCRPmAC", "1Yt77zSb6LsC", "20DKxA4xziQC", "2znEBgYpeBIC", "3CqwLGSH1goC", "3iKRM06GXdwC", "4mcT7A371xQC", "5ge0enUNb78C", "5TMsK3VRLeUC", "7tyEWZr5iFYC", "8ELEochuwQkC", "8MCjH9CygmAC", "aqb3OYAzq1kC", "b2H01Xb9Ma4C", "bi0-4WDPGrEC", "bNO3yU4E1FsC", "cEcUmWap-CUC", "COrG7hjNlzAC", "cxHK_QB8XKwC", "dNVtHXmiDsQC", "Egiv9G3sUUQC", "ep5gtKMz8EMC", "exEgXSQhK8cC", "eyALF5NigoYC", "F_-1q6fZd7MC", "FPzap8_I4SgC", "FREOMhfr83sC", "gLrXMmu9mRUC", "gPb8y2rfjp8C", "iydRKCdhKwQC", "jZjO1mQYWd4C", "kll6h_lodrwC", "KosqNyzeyccC", "KVEq58n6iF8C", "lLtq-tWVp-AC", "lWipWdrHsMwC", "n7eJZppCVjAC", "NqBNe1RIDHsC", "nSh5F2_xXBwC", "nTlbdMveXwEC", "nWmxMXOnZcMC", "O57Cwf7Sz5IC", "OPp9I41o8XUC", "OZVrxulVBtoC", "pCP2VfWmEYwC", "poxr4hi57aUC", "PoYKChoswe8C", "PwUF_UMTZHgC", "q0nXhXclx_UC", "Qd-7TwoF7acC", "QnDvIsNKNIwC", "rCZVxulC2WkC", "RHpWjc4FaegC", "rugwMFpIA8AC", "ryIHc_dFg9QC", "s8arC-pIXY4C", "shIupOtoVfMC", "th8NdVD8E0gC", "uVcMr-ke0sEC", "uvr8XVTzrNcC", "v_AhjnYqvwAC", "Vx6CHHo8pz8C", "WVKiq9stTNgC", "XAH5bMCkKOMC", "XaoYP7uYIaIC", "xo77Lp9wHHAC", "XxRpPZ_rvD4C", "xxXRcfoL824C", "yZwjL-7IRTwC", "-2yQLxykXdoC", "-63xyvVTNwIC", "-e9rPAsnJ_sC", "-Joj2MhFqfoC", "-sC56mcAocsC", "084O32ukZIUC", "0DPypk1BLE0C", "0hA2qfGXhngC", "0xMxokVu8gsC", "1W-9MGOa_GkC", "21An6w_jf2wC", "2_rnWxsz-vUC", "2P3667UaaiQC", "34uu189sV_oC", "39hsjKwsqo0C", "3w0uK79cj_oC", "4cAsr_eptg0C", "4Hes-lClFOYC", "4j8n8hIBEa0C", "4jUjPh64X9UC", "4PmYFVJqM5cC", "5I5w_BSa0t4C", "5N78fogAH9QC", "5Q4wTKEAcT0C", "6-gRK9HMQKoC", "6huHRNMyNHIC", "6LQFtclkwvoC", "6oPfuGceReUC", "6ToRJrRHIg8C", "6uxXorE4r-UC", "6VcFyV09_aQC", "6XC3WJCTitkC", "7_UDV5Qtak8C", "7eP3jOihyjgC", "7KjggICeBJcC", "7lw7lR80rZMC", "7Yhkld-Fr5wC", "89Ncr5FRfSUC", "8h53hG89aOAC", "8KSd2u8LD2MC", "8wZbEcJsi94C", "9DpbNlLT934C", "9INFeLkvCXcC", "9Vinatxm4nUC", "_Eeh1L3IZxgC", "_rewTS4v-EsC", "_sbGtJRO5ewC", "_XIBgBYFL3MC", "_ZjCNO3mv1UC", "ae_pD7pHuI8C", "AkKj4l2F3kcC", "alluQPeRBGMC", "ancSAJsaedoC", "ApiIleI7naEC", "AWcV-S0y5TkC", "azEBqa0MXt4C", "b2St6X76bs0C", "Ba_8Ulu01o4C", "bcVMkcCoomQC", "beTVIkCGUfsC", "bw7SVDqiXN8C", "bwRPfOCzpcAC", "C5SIEprnWoUC", "CbjT2wba0LkC", "ccwXeaPkuoUC", "CUxLphJ34_cC", "Cxs3wKnB9SQC", "CxYXaAUJytUC", "d2bXnMAEJnQC", "DFhKLhM96vYC", "dHlP3pvh__QC", "dJJLK7Pp44AC", "dyT0IvLPFgQC", "e-qkVO01Gu4C", "EBKfl5RSwiEC", "eG47cVekPg0C", "eHAK8fdo0_cC", "eiP2wOi3KYwC", "ej1kzdwRbl8C", "etZroNcGKbcC", "Ev8E12hG8kkC", "f9sAf8jPkwoC", "FkcyIXUg-o4C", "FsdsMdM29hsC", "G0LZTx33-x0C", "gqAM-eIG2ykC", "GSr_S-qHI4EC", "GU1cifth7UAC", "gXf91p7v0SgC", "H4SmRvJ5shoC", "hARsDKA-f3QC", "hBwJqBsSLqMC", "hcGD7oT41e4C", "HktLkMtT1TUC", "HmZMBoTuKUEC", "Hopo4xCUcO4C", "hrSvSVdsU2oC", "hX7yGLd7ghEC", "HY3QRixFRWgC", "I9Trz48CCN4C", "IFlpcI0GS0UC", "ihIbEYpA_RcC", "ioy3vqVglTkC", "iqDmeypmglMC", "IyTKqDwkecMC", "J1oe7HvFoyMC", "jBcboa6zxMEC", "Ji5bZMlHakgC", "JnMEcVuQtcAC", "JpuMcmrhlTUC", "jVVZdthQs3gC", "JXjE1ODVPYIC", "k94DhcD19SkC", "KCIQVzXg-lgC", "KgxJ912PD38C", "KiVkPTWJCsAC", "KOvFJOOVMLsC", "KQnU1ftyUCEC", "kxFKNqDXd3EC", "KZhh4_4gq2gC", "L6YLdYgyO94C", "lQMtArj7klYC", "LSfIVk6DSekC", "LUwmBJ6YeAMC", "lXvXAGo4PxUC", "mDmcW9KR6r0C", "MQhZlYc8JHYC", "MQnawiTMcDQC", "mUGSaiTsBAIC", "myEezv0t178C", "MZsXsF1Ud7wC", "N15Bxyj-DM4C", "NPZYBrWZPVAC", "NYtR9fIlXnEC", "O-r-wnVA4mEC", "o47MZTN6c9sC", "o5FSTZx-100C", "ocsTmllg7nQC", "OKs_Q4orV6gC", "P8aq9mlY994C", "Pi_UoFpZmxUC", "PJSBn8GOSbsC", "PKoiPvi_5eUC", "pN2PxCR_-agC", "pPNIei42SgwC", "pqJRCIXAFSgC", "PQP6e9H1tzAC", "qgKMMROhGCEC", "qgwv-CpcWykC", "QIc__kliKwAC", "qiTF90Oo5KUC", "qlO8hMCAsEUC", "qPlNAKakhiIC", "Qr3LshsVPJQC", "R1-A3Ad2_8QC", "rGtHSwTF7soC", "RI-jGHJ82oUC", "RUW-hYKZBS0C", "rX73rwDuFw0C", "SJe2yL_R6JQC", "SP5BF1gA02YC", "Sp8XJxAfu4QC", "sxTKXYdFbF4C", "sxzxivjTs9IC", "T-1tiE_D6ggC", "TbL8h1SJ4PQC", "TH03T-vmAoQC", "tHbd0sXwIp0C", "ThM-8xccpOoC", "tnfIZlWC6HsC", "tOLFrSSbFD8C", "tp4ncMbnOEMC", "tRX8HYsd9s4C", "tSk1mvtq_iYC", "tT_D6rYb9IYC", "tTNMgO5_CHQC", "TU3k6MuE2BAC", "U3MN8AAaD5YC", "u9bP7QbozNcC", "uD6UZjMTjg8C", "uf3aCkUbz3oC", "UGb18NmjOTkC", "uKp-VsaCNMQC", "UmBZOMbtZZIC", "uQ1rsATfO34C", "UqIvGf3jRHoC", "UQwjcdyVWPIC", "Vg-jISv-naoC", "vMcpRqad5-gC", "vWWaPvxsTfgC", "vWXzNR4adfwC", "w1KP1fpepAcC", "W6TImqN5HpwC", "W_L_2yTfOEEC", "wCvZ9ksz-zgC", "We5JWvX01HkC", "WfK9oTHKNqQC", "wSW30jYW7qEC", "WTunFBRfhWUC", "XD9Kbzjja38C", "xg_XzghnjRYC", "Xpid-HEEpRUC", "y-A5skJWwlIC", "YB4ADAMeqIAC", "YCWHcGaIhksC", "YGvfcDwewVoC", "ZFn5mActQoIC", "ZjmqkYh6uGYC", "zN-ZBSv2UuIC", "zUOwyWMDCMkC", "ZvnYdfPW-i8C", "Zwlpxvn9MrcC", "1d3XWXXxnEsC", "2ANRSQIyYqYC", "2JYJicwT84cC", "aaf6k3DWcSAC", "AgXcLEG_-SIC", "aSAXAAAAYAAJ", "c_BRQDmCqcoC", "cXdKAAAAYAAJ", "eGGYWL0962AC", "ey7Oa4CWqp8C", "FeOinIzH49kC", "fkRwjQz0O7cC", "FoWo8VitsoAC", "GKc2mPfcZ8AC", "hFSx37SaQRoC", "HQu0fXQ1oXwC", "jeVS4jRjSlQC", "MfkNV2DW_3oC", "Ms_VAVC4IJ0C", "QJ93ffsVAHMC", "Rf6rp_UfnBEC", "S6BJ94y1jnwC", "TXnD5iuM6DkC", "v3yqHR7keCcC", "xEooBgVLQY0C", "XlsVAQAAIAAJ", "XOkiRiqhCMIC", "xz2LhK79I3gC", "YV0IskcivVIC", "-4JaSBhEmmgC", "-F7oqyLU8yEC", "-vWT6E7gwRYC", "-xJpukMoY2kC", "0Sb9rQ5Ewd4C", "184dpojuVVYC", "1CCCWMqPtzEC", "1cx5KF8bz9QC", "1KdwvK9lLVUC", "1ltSREk9A94C", "1NrVATQ_Z5EC", "2UyX_6Sf0koC", "2X59P60QHnYC", "3-0St2ZXAxkC", "3HDyoJBoLBQC", "3u6N2cT0bOAC", "3yJtseH08loC", "4coo9ddRaooC", "4F1SDVZb2NgC", "4ny3c9qR8X8C", "4qonczmsK7EC", "5Dg9D0fMB-AC", "6ue1tbd-dTQC", "7334_AEUgVgC", "7g0AnM3HoA4C", "7gXh4VqSVUcC", "7sn58GhCxdgC", "8GQCE0Xd2f4C", "8rOvpN2d9TsC", "96i1EXvEucgC", "_3eu9hxU9NQC", "_B4Bef8FTFwC", "_ceeVvxULncC", "_h4Jf64pDyAC", "_mur2PUOp8wC", "_NaVar4pJ6cC", "_VH9YGAUbtAC", "akHTeRj4JOUC", "AMLHe2Co4X0C", "ANOU4FnPuCgC", "Arnvw-uD3msC", "AZ5J6B1-4BoC", "bfXZpcLNv7UC", "brQZSNtn0KYC", "bUmGusx0JwEC", "C-xXxfEAnzQC", "C4MAjfTb2t0C", "CA6h2G_mJlIC", "Cdg_NkdhoToC", "cJ1kUY-wUVwC", "COjPOyLC1NYC", "cW3PW9PbqPUC", "CXFWZuxyUFQC", "cxlwwocKMcoC", "Cyly4t2jHMsC", "D-ctsVAeN-kC", "db-C5NSSIAkC", "DeEME8MFhakC", "e2q53WFE7hEC", "EdoPqnSc6g4C", "ego1raoSBfMC", "ekJA6MZoH40C", "em3obwwfGUAC", "epEsCd50PV4C", "ePwhbo8BwE0C", "eQajBqGgHkQC", "EvFiS2rAlosC", "eXgmkezrzYcC", "F0v4zCQg10gC", "F2Z6uxeA0IsC", "FbTQFXdYCMMC", "FEizu4ZRuRYC", "FshiVC33NhMC", "FtulaDr2j-AC", "fvGy7lnl5e0C", "GBoeXA2d7dUC", "GCyjMr7CudIC", "gKSeZ_VIb9AC", "GlHfBPW8nsMC", "gMHYj6T-DCkC", "gnEGziO0ASQC", "gw6yAuC6wSQC", "HFotoS0lwvQC", "HlYbfBRhINIC", "HnGJsP8JI8MC", "hv0m2jtuXDYC", "I9PuYGBUEW0C", "IgHMY_Xa43MC", "iiepH07oVM0C", "InUl-Q41sOwC", "j4PpSFWmNQUC", "j7XsGbC7QKsC", "JHxxM6mOAAQC", "JiDYXW7kIFsC", "JNuRxUXjmWAC", "jqCjWhYNecMC", "jVL9t0pASC0C", "JxFIS87S148C", "K8VvOPLwg-EC", "kaEecwxX7WEC", "KcOo6u5EKR8C", "KDeCgbRa5jcC", "kflefDbfDOUC", "Kj5w6sZTJsoC", "KyYHVPJfJsEC", "latQHavSMfsC", "LC6iZsMxUpoC", "LgYDKal5OAcC", "LMTMTcWUNWcC", "Lp2G5aLhFZYC", "LPNS_W0lVGIC", "LY1LT83Skp4C", "m_3NPZVcsg4C", "MCP9XkskjIEC", "md6oFs29tVwC", "mD8bF6pFasIC", "MDM7ZFecFV0C", "mim-M3zIAWUC", "mK6MS891avEC", "mLqL7ulqj-oC", "mmbreDPQxlEC", "MnS1IHKV_hoC", "MSXVXP_3cFMC", "mtP0gwO7MEYC", "mUsT853PvLcC", "muw8IPWgGUAC", "N8jwsqqPjIoC", "ngZuhGcX_2wC", "nIuDdBIsS-MC", "nLYzditxyIQC", "NSK9cDNJX8AC", "O9Tp5tX0RRQC", "O_Ve1esIKS8C", "OGUZOmPbDiYC", "ohii9rGckGwC", "OHqefo2QlCQC", "oLjRxbE1SwkC", "oXg0wOgdKDcC", "OxYEcy6azbUC", "p37VqBkJvL0C", "p_f2oSYQam8C", "pEKjhF_EUIwC", "pMo2v1U_VNcC", "PNW7TiM1BJ8C", "Q8k6Z7jH8a0C", "qAAtIknyj_gC", "Qms9PNSDEFoC", "QpXLNs8v_WEC", "qZsoQyr70zkC", "R5-edU1taWAC", "RB0X01C7pg8C", "rFn1T6E0UJEC", "RJQ-tXO2i9oC", "rjTH9c476t0C", "rkRu9OJ6gWQC", "RLpxnrnXXhYC", "RmvQfoKiPCQC", "Rt70xjfLrfsC", "rXOX6BISgrwC", "Sds79NgjU7oC", "seXnMV9-vmkC", "Si1YdYq9hXcC", "SNdZ96QZ768C", "suVX7iZ3Z2sC", "T0u3mLgB7Q8C", "t5c9qWOoXsAC", "T7bAqUjbq84C", "tjnjQkoBnBMC", "tKf9RKS8zx0C", "tNKtrgmE1fUC", "TwgKlwgXZPIC", "uDoVm8-uXfQC", "uH_AITzNp1UC", "Ujyr6whVn20C", "unZllMnur4MC", "UoJqoeANmZgC", "uQBf9FmAu-oC", "UTgWS01SxfkC", "UvK1Slvkz3MC", "UwH5IwTWH3EC", "Uxwq3DdghtwC", "v2RPoiRHX7EC", "vD23gqpkAaYC", "VFeSGRmAYXsC", "VJufAYSsmZ4C", "vlRL88hU1bsC", "VyAIKyqpLFAC", "W3kGJYwFKDEC", "WeKvtiwft_MC", "whdtOuA58e0C", "WrL9de30FDMC", "wzPlQGKox1EC", "wzpQ1ITeIt8C", "XADVtLpi0k8C", "xdbrbcBssP8C", "Xh8GddJI8CEC", "xkkHhFuhPkMC", "xpKEExbb8DQC", "xsv8s0uId1oC", "xurCDqruAkoC", "YbTa79buEaoC", "YDCEorbLCFMC", "YNXPoQiZQDIC", "Yonh5x309J0C", "ys_e1Jaxh4UC", "YSVeIm0jLy8C", "YUsiaYPFcgsC", "z4arig0oCm0C", "ZBkdrgIqguoC", "zmLlHLWm96QC", "-Ac81W-ZQDEC", "-sFkv-rGTJYC", "1xlR5HF9ZhgC", "2UyX_6Sf0koC", "32yoIgkRJOcC", "3e1IKgAVDi0C", "4IFSVDIWAFkC", "4lMynL91Mw4C", "66Dm4p1wxqUC", "7VWZRVvoE0MC", "7xJKxbP5pL0C", "8QzD1qRZ3f0C", "8t0enPgsm44C", "97bydx8gf7cC", "9z-9ufun9G4C", "_UNNPyZHBHoC", "a2iAh-KFdIgC", "ae89cJhLYJ4C", "auZXJuwLw8QC", "aWcGepCckEMC", "AxwO8nc74hgC", "AZ5J6B1-4BoC", "B6YCffPQR-cC", "BHEWSQd1a3cC", "bKKyBRMnI3QC", "btpIkZ6X6egC", "CzEy6ernA3oC", "D96Kjfbn6RgC", "d_-I7aOYbckC", "DCILcKYEg-gC", "dKIo6D9yh3cC", "DMA63zMS7lAC", "dpxajQE4VG0C", "DVMsjPtMfqMC", "dyieVB2i5wAC", "EbquUB1D6B8C", "ekJA6MZoH40C", "eParwQ0YdrcC", "Esr4fKWU27AC", "fa8Ilo7DVW4C", "FEL8DlqjYEkC", "FJGUYgk2cvMC", "fnkCJBTdJekC", "gdqzOgL7-f0C", "Gqo5IlbVj2MC", "HQwZYSf8x-8C", "I-SAcg7Ves0C", "Ia0W1gg3aqYC", "IciSK2hKiQ4C", "iCpj07vEEIcC", "injpY-EerZgC", "JIccGs-Gzz8C", "JuDQleqK5PYC", "KcOo6u5EKR8C", "KE-2ixsSCpMC", "KosqNyzeyccC", "kx6eAjugaA0C", "LBBhikJpLjwC", "LGbZmjzCHvAC", "lGS9Lbv0PdsC", "LVuUjIq_P9oC", "M-IRbSratpYC", "m7EUB-P4noMC", "mAiJ8a_vk3QC", "Mw1ky2bqh04C", "n7eJZppCVjAC", "nI3JXcSjvwsC", "NpHmCupwB5cC", "PdCLMpSY5qkC", "PFYBPAS3LIEC", "PNjrRKR3sKoC", "pqJRCIXAFSgC", "Q5QRRluMxecC", "qE2FPaaAa6wC", "QI6aci84OfgC", "QRPXBXsU7UIC", "RAUKBvP5OfgC", "rKq8bnUK3WoC", "rPoBYx7hRB4C", "RtuUTyHr-5wC", "s8zIH7dnYCsC", "sdoeg4UWckkC", "SRFbLHcl808C", "T5UpCOVOJboC", "Tk2tDV5PIjwC", "tKf9RKS8zx0C", "tSceY_DydLoC", "tSTJQof39GEC", "TtJ0VT4AnMkC", "TVudYcZo5dMC", "u5CQpfaElJYC", "Ua-wEYZS6eoC", "ucpxOA3LDWcC", "uey347n5FmMC", "uf5x7GtHpjkC", "uUenyaHxJfMC", "UvK1Slvkz3MC", "vBz89NFgzqIC", "VDin06S0V_8C", "veGXULZK6UAC", "VKGbb1hg8JAC", "vzXz40IXEpIC", "W_5-RKxftbcC", "WcIJcNFzgqgC", "whdtOuA58e0C", "wQW4fnPUwBkC", "WrL9de30FDMC", "WVKEsWCgh3sC", "x3IcNujwHxcC", "xllOU8qyH5QC", "XngKxt-zCNkC", "YA7gLtcwMMcC", "yBDBEGBIUmgC", "Ztp-cUw0jowC", "zY6re8jbHWUC", "zzv-uEc6v3oC", "-3wmOo_IsmsC", "-Ac81W-ZQDEC", "-ChM6a5u6M8C", "-CLgHZOadckC", "-GiwEX6RMeUC", "-JQgOaES2VsC", "-rZv_sVuoXEC", "-u2YftwNR10C", "-X52qeiGteQC", "-XP7DTeuuZQC", "-zIdXgGm_mMC", "0BGLbBzVliYC", "0ebRxGSCUYwC", "0gmHw-vHr40C", "0haAje37kvMC", "0KPRrkBISAoC", "0pDWXUyrXwsC", "0SnZ26KqgEIC", "0ywyhKnti_gC", "0z1_U277JzgC", "13sniV1eNVsC", "1au3mbl9OhUC", "1c-m_QnbDvYC", "1d2n3Q5Jn8wC", "1GnFOBVjE_UC", "1mUi6nzik1wC", "1N8katBAbJoC", "1p5-4eMRdKEC", "1Q-s9CbuCQgC", "1QHr1YYD66oC", "1xlR5HF9ZhgC", "1YSxPAP8XhMC", "1Z0skArBkdkC", "1ZZn7DLTskkC", "237PaZVtDjMC", "26VWKV5V9kkC", "28-8vpddlVkC", "281ZO5O2HWQC", "2BxlZpK1_yYC", "2c5vBU1eU0EC", "2f_dIRVjUXMC", "2OacwRaPMXcC", "2OkozfAgTYQC", "2TkuqbekiL8C", "2VFCTmQPM7AC", "2WwAfFlIrTEC", "3AxDv2bsfNEC", "3BrulA0PTmQC", "3bwkR2NgVW8C", "3EYAYUOEchsC", "3meeBRX67sgC", "3riJYW4TMeAC", "3rjD8nL92AwC", "3S8r-FluryEC", "3V_6YwEqHzcC", "3XAIxbTa8k4C", "42HnEenlw_EC", "43yVaZoByecC", "492iizG4Jx4C", "4dsETTyOBxsC", "4hRwjNQclhgC", "4jv1DfsvqpEC", "4PatqekyGkIC", "4tQldK5E07UC", "4UhBvm3LbWIC", "4wr9zohow94C", "50cYOYZuPEEC", "53-gp__-Ni0C", "55PsW9Jt8DEC", "59a2_pfKi4IC", "5DCHpJrnEXwC", "5g5RBYEo5fAC", "5gAANhPh6LcC", "5GEwe5PIzK4C", "5kATSNyEMmkC", "5oRR4qzG6zIC", "5qtal-QaXwsC", "5R2Q5kKDia0C", "5rTzCFJ-UtYC", "5sZdIZ0GBJ4C", "5ws4KytmfEwC", "61MPIWD2nFQC", "67wx-rCPKzsC", "68XRZyuYbcMC", "6fNjbZVaig0C", "6gqGJ-BVDlEC", "6sq6qEBhonsC", "6stlUN-MjXIC", "6VVHgoCt9KQC", "6W1Bh5R3O7wC", "70vb78KIR1AC", "72_PrSu57SoC", "73XvU2tCUi8C", "77VSf06vQEkC", "781jTOT4n1AC", "7HhKjSs6q5cC", "7pB2Xjw6U4sC", "7qUvezISnjEC", "7VWZRVvoE0MC", "7yPXLxnf46YC", "848QRUKZkSoC", "84NTN0_Z7PwC", "84rJ77ALstEC", "8_9DRzv7CdQC", "8_hvDp3sCkMC", "8iYU-kAiBxAC", "8nRllaLoFBcC", "8seX71u_LHMC", "8Xztp3e0TfAC", "8yzQ6zRibasC", "92LGqm5F4ywC", "9i7yZUpmdiMC", "9OhpLVADPQwC", "9plU4x0dP1oC", "_3eu9hxU9NQC", "_ATB4nYqguQC", "_eJiYywsoOQC", "_hNbGkhxlysC", "_lAViWbDXYQC", "_MDWi7AOJl8C", "_SsA-3vGopQC", "_uHAsgQZKv8C", "_wIcpxMOjD4C", "A-agLi2ldB4C", "A-crywke5jEC", "a0IDhqcZsFAC", "A3D3IwNiOkUC", "A4d0W94Ae-0C", "a5Q_FCG0t0MC", "A6FQywvBORoC", "a6Q2S2JZz2AC", "A9MVPDPN1vkC", "a9yLyHtIgEIC", "aBaAQ9ZPM4UC", "AE4mW-um7tUC", "AEVQIco1rkIC", "AfPTfDbxLE8C", "AGwk6qG9rIIC", "ahFs9THomokC", "aHg46bCHoIMC", "aHNeW3rAdYUC", "ai3GHUTVfDQC", "aiLpfyPqmiYC", "aJ5zDM1KfewC", "AL_paj7-NcYC", "AMl7b-gZSKEC", "aoaYrL-ZBnMC", "aOfD2uon4wcC", "AprADuUfsNcC", "AsFLaG69M-wC", "AsY1vTm4xWQC", "AU1MAA9I58cC", "AuaFFAI3xocC", "aVTTHRlL-csC", "AvvgFOAbURQC", "AXcT1FuCIIUC", "AxwO8nc74hgC", "AzWmYqgAj8wC", "baKATJNpCikC", "BATd_O0z-r0C", "BbKlsN69PmUC", "bDDUuqRITs4C", "bdVzZ59FoO4C", "beAh43E_wcsC", "bEe6T9f7zAgC", "BEWGP8PbTpkC", "BGt-ZgFtBhkC", "BHEWSQd1a3cC", "Bik1zikOjYEC", "bKKyBRMnI3QC", "BonRzVxisykC", "Boqh8dNWxTEC", "bPCmwNZEEr4C", "bPKI_3mAi2kC", "bQ-d_JK0zmUC", "BSL6s5iAB2cC", "BSlBWtayNRcC", "BTpNxGl2tXUC", "btTgbQqk8_sC", "BTvIhQ25s50C", "bVFMCuLLklAC", "bWECSuumcDIC", "bxFZDbbyCz8C", "BYj6ql7jv28C", "c-D-b8zEJvoC", "C-xXxfEAnzQC", "c1UfjmtTYWwC", "C3OU2sMjXjoC", "c7U0S1iOPHYC", "CA5wOJ0r7aUC", "cDFbng59ksYC", "cf5RFWIMJugC", "cG-gPxwzDGwC", "CHnm8gP-n_AC", "cjjHQgjMiXQC", "cMPHWmt6lWAC", "cMX0xoOETCkC", "cO414xqtpNQC", "cObMuzlpw0MC", "cosLaMDLOF4C", "CQFNpdixOlUC", "CRicb8AOkpEC", "CrJXCFjqd1EC", "cSqzF6bJiNsC", "CUARfIi5QdIC", "cvaYmFpC1rMC", "CYQZUeo0mcMC", "D-xZXkWpWtIC", "D2y7SftShx8C", "D8jiYWiqyqEC", "d_-I7aOYbckC", "D_1u-B9MAaUC", "dazjzKOMSxsC", "DCILcKYEg-gC", "DcMOw7Q98mkC", "dE45EA-mE9cC", "de4CjVEmv28C", "Dep5Eh_SUPkC", "deTO4RY7YHYC", "DHH7CDE_ju0C", "DjOF5044Q8kC", "DjzwZGaJq64C", "dlGBjrq_5IsC", "dLo_GyEykjQC", "DnigThvaffcC", "DNl5gZ6i-94C", "dpxajQE4VG0C", "dqI6k8TIN3MC", "DRcWz8Qif6YC", "DTCsQYBQK2EC", "dTF5pdoDIVIC", "dTmVGc4SoRwC", "dTtZ4GPU6z0C", "DVMsjPtMfqMC", "dw7ECt8MMlsC", "dWQLrRj6dQkC", "Dx4Ugg8si7kC", "DXyXGjjrIFwC", "DZF4PTaXUSYC", "DZoTIeLlBxsC", "E-jshveXxl8C", "E6UrL76WfJUC", "E7HAX2d5WwsC", "e_AKhyXiMtsC", "E_gJ4mWAkYgC", "EAu33SRf6VwC", "ebfN6XqMUZcC", "EcsIyDtMXCgC", "ees5mRMzg1kC", "eg6aPq47nRkC", "EGRLRfGTpF8C", "EGyDOtkjYSUC", "EH_5jtqfq5sC", "Ejgq8771UU4C", "eLWHPScZ-qAC", "em1D_FpNlocC", "Eok8kGCq9rEC", "epDlSPRlP64C", "EpfiV_4Im6sC", "EQ6shEPH3Z8C", "erOBU9dVA3sC", "esaI75H-SpQC", "esmBu4Ojrk8C", "Ev3D_54sCvEC", "F0yMFwWjhjMC", "F2cr0G_ZWmEC", "f3gbvvW4zaIC", "F5iKoj8roJoC", "F9nerYOcPNQC", "fa8Ilo7DVW4C", "faNTuib-zAEC", "FcjGQ-BTTdIC", "FGhVMc7gN0EC", "FGnoQosLZyYC", "FId_zGvhbKUC", "fk6uvAeBbccC", "fkqAJFeoSEAC", "fL9HDd_AFN8C", "fLFwNBxxRuMC", "fLkGTjDvYjgC", "FmDzziz8-WQC", "FnnbwLpPr58C", "fO9c9IVuOXYC", "FOFAaptU4CUC", "FOsLvwmv_K4C", "FRx9Z-8oLKkC", "Fsi_veuH6B8C", "fuu9yAPkl5QC", "fVgCjnhk14AC", "FVyEZ9kFLuEC", "fxoF-vPG-TMC", "G001xz-FDhEC", "G0tcxUnNVnQC", "G5p_fx8DMvIC", "g7n-vsSJUyEC", "G8DvSzUoDKkC", "gccU6riITuIC", "Gens5o-Vit0C", "gHxW_KO-HY8C", "gLHMGpzPmCUC", "GlObs5fGEWkC", "glV24BcDr8IC", "gNc34oNpg0AC", "GOYq2EX1QuYC", "GpAzYZnAqcoC", "GQoKx7UugagC", "GRJwW2NF6ScC", "grmm7d-B_TgC", "GSeUzsNrKQoC", "GsGTLu2Zv9kC", "gszyGuchgQkC", "gtFcropCebsC", "GWfvFkdqmNYC", "GYFIDaVfMAYC", "GzEa-lL8rngC", "GzmXXKwy0KAC", "gZrmiKutsckC", "GZtwxVgblZwC", "H-Gkvb6HK9cC", "h2WTgw_Qs4kC", "H4cbM4mroF4C", "h6Bcq8aNffcC", "H6ullBCJMXEC", "H8hOjFvZHkUC", "h_crbeKZ6iAC", "h_x9e3LtUfYC", "hGqZ-wk3zOMC", "HgusS4sGYbsC", "hGZbWwdB-1QC", "Hh8KuEIR7twC", "HIaDcEkD_y8C", "Hic-eJ_9l9gC", "hKWhhhMTRaMC", "HpoOj_yRvv8C", "hq41UzIN6sUC", "hTjaPrQQsgIC", "HVdIYf5TwXsC", "hw3gf8U_Z5cC", "HX0bEWOab_cC", "hxgOv2k1KWgC", "Hy8pU6BwX3AC", "hz32iBYVyGgC", "I0AHmFs9q2sC", "i5kZUavDFxAC", "I6mW-aqF138C", "I92GsTNjFqYC", "I_9X0_Q2rXIC", "IaA8mZqhjPkC", "iaKLCIkmYmsC", "iBdjTgKVtxUC", "IciSK2hKiQ4C", "iCnHT7D0fp4C", "IeeiW4TPJmAC", "IN_KLE9YuFkC", "inlgYOatTYgC", "ioUUU5cyWD4C", "IrEEP19689oC", "iRRpp3vEKp0C", "ISKMgGkrnh8C", "iVrXqNNZwZMC", "izeowNVsC_kC", "j1S-lIVPTrkC", "j2Hqz7qyg9sC", "j4PpSFWmNQUC", "j9KkHgfBwxAC", "J9qv-A3q01wC", "Ja_OwdTm398C", "JbUKeU0Di68C", "JchdjM2KH1wC", "JejkOq1HMzkC", "JfKzrfi8A6sC", "jgC36S_BdpwC", "JgQmOA61vR0C", "JIbbzILVgrgC", "jIg8Y9-Ha54C", "JiWZf5Or3a8C", "jJfgCKnJZLoC", "JjGiGOYJLoYC", "jJpr-7aBf_QC", "JlCLVAGG3xEC", "JljBYVrqvI0C", "jo20j86ugJMC", "Jp_eAHUqG4UC", "JPpCG82zwk8C", "jptgGdakja4C", "Jqbe-AbH7aEC", "JQg-nxPFjwcC", "jqP_eDTHM5UC", "jRWEvzORYDsC", "jwRRCH7N47UC", "jy1wYy1s2cAC", "JyBhDSvIu74C", "jZKc_W6PImEC", "K2NkBhJz06kC", "k3mNH4F9ZtEC", "k4_A4hmDOBkC", "K7JBq7pp_FcC", "kahd0P1GJuoC", "kD_rDCpaugsC", "kdJw6JgwK9EC", "KE-2ixsSCpMC", "KEGWF4JtXV0C", "kEH1Js5RC_8C", "KGe9O7sGfRYC", "KiECrhfUzRwC", "kpmL51ZiAcQC", "KPP6PhKAJgMC", "Kr_FL4dBOQoC", "Ks9kynHehRkC", "KtTuVrTjjecC", "KUMr_UyL55QC", "KuziLVfZfhMC", "kWjL0vyR0UMC", "kWOsMN_IxgUC", "kX_Buy_sG-gC", "kXVVmvAqFawC", "kYZCqpL0xcIC", "l05GSu0j7r0C", "L2JiVYu7PtQC", "l8qmxf8AGhoC", "LCg3rwRZ-X8C", "LDYVl5Ym3-oC", "lgbhSUdDEvUC", "ljDfUfu0kagC", "LkwY7J2y0xQC", "LMb7ClaXJS0C", "LnkpdauAHvEC", "lNx25OPfhggC", "ls_-Lgth7TQC", "LTa33mfbNOgC", "LuJ76pYKJqgC", "LZNNhBR3ea4C", "M2x18ZHzI-4C", "M763AjCmiqUC", "m7EUB-P4noMC", "mAiJ8a_vk3QC", "MdktGa0nHXsC", "MDM7ZFecFV0C", "Me7fAyZojEIC", "meoj6qqzJ3wC", "MGJ0uN6mmY0C", "MgwE2PZu318C", "mmofUwH31moC", "mPJkTVlz084C", "muXgq4C2UtoC", "mzfNbAE9mX8C", "N-xT_PsAjNcC", "N19wqjhL7cAC", "n3G62PcJbY8C", "n83XQTUI-DoC", "NB9Bhi6mOgAC", "nBLD2FTooCgC", "nc5GNvctQpEC", "Nd7KLa6CAtMC", "nejBeS_jnCkC", "Nf6hRs94nggC", "NFinEL0eTHMC", "ng7RJW-udoQC", "nGw_z0Z5SeoC", "nic0RdWRvJIC", "nnr7H0zxeIsC", "nqJCFT30myMC", "NRyO822Rw24C", "ntyWhaSXRDQC", "nw2sKOHJDwcC", "NwsUasv4wmgC", "Nx_zJLzs3EYC", "nxnnSzT74fsC", "o0FEMFyP_58C", "o4dc_zcnl1cC", "o7TrduB4-bsC", "O9Ih8cP82ZUC", "OfF0qpEoSrsC", "OFxRs3ScMxEC", "ojxc71E0aGYC", "ok-060mlnKMC", "Ol7nuF7QRkUC", "OnmhSKwSvM0C", "OOaw8tbk9lYC", "op5CtTPCk1IC", "OpSkmWjy7jIC", "OQBwAwyLz-4C", "OQldD65qBpAC", "oWDiu7i6uAsC", "oYG7nsEmq4kC", "oZ_vOd5GFrcC", "p00q4rikH2kC", "P09SDvbxwxQC", "p5PdMtSLLf0C", "P8FS76Kyv4kC", "P8XhS2TaxzQC", "PAEuxkTd6sUC", "PAupJYHq3_QC", "pCNalA6pX68C", "pE8eDBV3C9QC", "pEh87asSVtgC", "Pf5UpP2yQ1QC", "pfDTnAQNrKMC", "PFYBPAS3LIEC", "pL4MvQHRZGEC", "Pp6ydR5FHfYC", "PR_yqTL6FngC", "ptus_WL-Af8C", "PtXj1SYg_j8C", "pve694PWVDwC", "PXe5yUh7eDQC", "PXhISl9MQL4C", "Pxx5knnbhR8C", "py2PTt6TfgUC", "pZcnl7NK3NAC", "Q1chf04zVP0C", "q7tI2koKzr8C", "Q97JavphfIgC", "Q_UzZy1Aq64C", "QA7MGuf1DygC", "QcNDxzsbMPkC", "qd-zYXT0USUC", "QDJDpSJN2W8C", "QDo8QoJfJgQC", "Qe79lVUM-_QC", "QG7AAgV2laEC", "Qh4wsMFC0MoC", "QI6aci84OfgC", "qijqtSY6M6UC", "qikD022P1usC", "qK0BIL65rXoC", "qLfipozwnmoC", "QLGfNWbHYEwC", "QrjEgKsuXlIC", "QRPXBXsU7UIC", "QS4k67pzxggC", "QSwNbjG_JZYC", "qVxi5W6X9pcC", "QyNRtayO-8YC", "QZ_54ZvNjh4C", "qzt3tdca6xkC", "R1dgM34YgtcC", "r1o7_VVkb5oC", "r2Aglw65zccC", "r6BtrMH7j-MC", "rCGEg8VvFeQC", "RDzHvqdjynMC", "rEa6zWxasXQC", "rElJhaRDMSQC", "rfP4tCddelYC", "rmabvIcEFp0C", "RoPB4vjbFCkC", "rQqOoknhLQMC", "rs9QiQn3ugEC", "rUQMaklNOBcC", "rVyfxzxH3p0C", "rWAiRrm3LkcC", "rx1LI-P8nIkC", "rxRBf9nB-IYC", "ry83-hLk2WAC", "RYC17q5J9YoC", "RYf1o1haIFoC", "S0NUaz1xGvIC", "S1A_KdKUIocC", "S6SE1AMRmswC", "s_OpBZttLfAC", "sBjTIqguys8C", "sdoeg4UWckkC", "SGdTGMniVXkC", "SH1zfdGHbwoC", "siIiEJJWk6wC", "SkEHskyHjHYC", "SKHt_C2UgW0C", "SnJrQaEVJpUC", "SOEwja9ZQ5wC", "SwREHRH64IkC", "SWZ4FCf3LiQC", "sxiK7p9dxPYC", "sZlfOhrBemwC", "T1yLPvZoW00C", "t4x7Cy4p7lwC", "T_nZurUMcV4C", "tBKTK71-XKEC", "TBTXWyg9hkEC", "TcClcWvUrIsC", "tcHqtHz-yQoC", "TdSouWWZjZ0C", "tezKte4wcdYC", "tGfmounsYWMC", "tH7isGkFXtkC", "THczQ7cOz6IC", "tIb_fIPq_FQC", "tiQ1Lhg-r_0C", "tj-CfBmVD_EC", "Tk2tDV5PIjwC", "TkiCsdBgh0gC", "TKp8H1RMQSoC", "tKsNhxsy2v8C", "tKYwAMiDewwC", "tLsIzyFR08IC", "Tnxf6ItROOUC", "To1usfEfgfoC", "tozMibuZIOkC", "tQHBF-3p9B4C", "TRMz4gjMJdoC", "Ts5iLKxcAYQC", "TS6FdaS3OIIC", "tT_D6rYb9IYC", "Tv8d8ynb_58C", "TVudYcZo5dMC", "twEszupCmA4C", "tZKHQmFAMEYC", "U-jRYXvtyq4C", "u04b9-5u_jsC", "U1zMgkoUuwgC", "U6A95jkB3CcC", "UaBgDPVml0AC", "UAHgz1nZpUIC", "UBZ95HBrXJEC", "Uc0_h6qUskAC", "UDOKkCY7DHYC", "uey347n5FmMC", "ufdL_jO4GiUC", "uG4vxj_Atv8C", "UH9Oe5o9e2EC", "uiGk4G4tVZMC", "UjgEeVZVasUC", "ULCWTAjeIP4C", "ulQHhov3sMkC", "UnAArdWaO0QC", "unZiH7sXugQC", "UpF4aMQJ98YC", "UpYbOsOhgSAC", "UtlzaeM_NAcC", "UtsUZz66E2kC", "uvu21YInc88C", "uWy3rhbJvScC", "uyBP7TKyOjgC", "V1u1f8sv3k8C", "V5pglCEa2-sC", "v5zJZoSMC1EC", "v7bN2acZLE4C", "v7ScEd7NtIsC", "v9tZu1CH53QC", "VAo33t9q5TMC", "VAoCot5ZoygC", "vCxNVGb_2OcC", "VDY-pMwWmI0C", "VFJvvg8LmEcC", "VGGVIgezt34C", "vJZZi97-CVEC", "vMU7xhXmFg4C", "vsVJP6AhBJgC", "vUpSQK_x1T4C", "vVArHEF-bwoC", "VvhMdgcJKRUC", "w0YNgj0PcswC", "W214nqbIVZcC", "W4wZTKeyjzMC", "WA75soorIIwC", "WBmEY0t4hx4C", "WDvIpH2lB0QC", "wGk7cLvVlQwC", "WhQ5FihdLK4C", "WIyxykAkusEC", "WmK0-ckzLFkC", "wOAFj0r9KJEC", "wPbMBSdncT4C", "Wpn1uzq6RT0C", "wPQQXGo4rzAC", "wrlYMilBmZMC", "WsULcn-jfvUC", "wsxnhrrtNaMC", "WTl8OKRoFHYC", "WwmkMDW1GxIC", "wycoiv9BJ0QC", "WYQPTNHS0zUC", "WzzD2RMKP8wC", "X0LWTVvOCdoC", "X1rg0yNmMMsC", "x4f0Rx_b-D4C", "x9-H-6LPYGMC", "X_fR-2n40oEC", "x_k8Aptn6tEC", "x_uy8HAkkxMC", "Xc28Zq9EKcoC", "xcWfPlAlFUkC", "xFVpLV_Mqc0C", "xI6Y8BZJumMC", "xmYBTQcF1TsC", "XnQMxHHhmy0C", "xo87MIuUcT0C", "xRmf6D64ADIC", "XSGsyt-f-GAC", "xtS1kIGT-KwC", "XUVAHkwxfpsC", "xXuYjNkxiWsC", "xY7ZCJX1MHsC", "Y0YND98qCT8C", "Y20wwovSqr4C", "y2K_ufwme2YC", "Y4-i2vOL-hkC", "y452FlGWGdIC", "y5plTzPTw8YC", "yaWuHE_PrJ4C", "yCWLfqveCZYC", "yDxxc4XNCDIC", "yKPqty4knx8C", "YLwF_d7Rzh8C", "ymhwUl8eEVMC", "YmUjOuOnMdsC", "YnpccgRJV9EC", "yoJFJAB_F6QC", "yoPXlbQQh88C", "yRXlqW-8XEUC", "YussB5D5yO0C", "yuURbFPqG1AC", "YwXckRmVguUC", "YXkm2ydUHJwC", "Yyw6_PWorwkC", "Z0GoPisj9BMC", "Z1MLmkX_NfEC", "Z1v2pqaOmuEC", "z2v9b_mUnncC", "z9izbk-II6MC", "Z9y5-M3gX6gC", "z_nqWKD4zCcC", "zeNHpa-LirAC", "zFnso9Pjcw0C", "ZiXnaD9kb3YC", "ZKXGAEzc4-AC", "zLJcQEPrJKwC", "ZM2NTPsde2oC", "zMOM4uUPb3kC", "ZpapRhTk2aMC", "zPW5Az1MtzkC", "zQeugdxXXokC", "Zs_jqHzP4mIC", "ZsPZlcZt-LUC", "ZtLb4cCZZq4C", "Ztp-cUw0jowC", "zuM1wHVdxskC", "ZxasNALEUjMC", "zY6re8jbHWUC", "zz5otC8t4cgC", "zzv-uEc6v3oC", "1BHndeKTdDQC", "1cXYGgN_gTQC", "1UMxj3O_JbEC", "2z22FTDqiwwC", "3ia-XWJVD7oC", "47QEw79wBfQC", "5FE9hLvsv1kC", "5yF2gn9ksCUC", "6EkBTg_85fUC", "7hDY74g6pc8C", "9Jf46a7wqqoC", "_J8ymvTQz8kC", "_VfAeaKff1MC", "a72fLJcsH0wC", "AlknZbhbUPAC", "auZXJuwLw8QC", "aXiTtDi_PTMC", "Bx8fU-e2FqQC", "DBMoE3YCx0QC", "dF3FBNFsyvMC", "DPfYhaIgsEAC", "Ecl4xUM5SwMC", "ehmsqp0m4OAC", "eio5-Npast8C", "ESO9jfBkdsIC", "faAjVTbjQKIC", "FLfw-N8MCf8C", "FOcu05SkdGUC", "FpZ92p1JmhsC", "FPzap8_I4SgC", "fRx3pCIX8mYC", "GmMHj1qoG8gC", "H6ot0KqrqtYC", "h9jmli9voT4C", "HXOHZHjIKmUC", "HY3CC_nLoXIC", "Igu9K9zMEdMC", "JdTMZTHuLCoC", "jPLaqKhumPQC", "jYvfQEAc-8kC", "k64rkWSuGfAC", "K8qzZ7NWsvgC", "KAvITyK0lpsC", "kcmDfBs_cbQC", "Lel5W0G1n3EC", "lykWOYUgb0gC", "MUw_dAtcRjEC", "N6OCJhkuULUC", "NA8H9zqSKeoC", "nb8fUMuQRzEC", "NIo3RQmYLqQC", "PREUJETIcjAC", "rN-hxaSVANcC", "rsUwp-NGH4UC", "S6vx8j7-0KwC", "SEwbSC99jKgC", "SJ8ITTbJFBsC", "tNsZ8xge-0wC", "U7RCAkcuQTUC", "UggCNKyB2vIC", "UZSkjJ-20GwC", "VsMfKkwxSgcC", "W-_DNF0vm-IC", "wK4qdX-0UIAC", "xTqQrFWNoW8C", "Yl554V37zDwC", "ytjVJ9wANosC", "ywFYNFkgU9cC", "ZnF7UEcxuIQC", "ZO1IGCLCvWYC", "-1wfzbInfNIC", "0UnbTUjYzsMC", "2J-M4SBQFbcC", "3EO3zIqao8MC", "3JmF7JAtIX8C", "3nOSSNv3xlgC", "4vlcQZU6mwQC", "52nYgUsVn9QC", "5Pp8OEhIJ8EC", "6fcdrgoqgjkC", "6Y3LUwwAVQUC", "7Ga0TEYaScIC", "7P87HIh9ajMC", "7VWZRVvoE0MC", "beHXwswSD9AC", "bIih2n8DAXIC", "bmFSp3b8J_oC", "BSn7ms3kdsoC", "bX0XtVhbnOkC", "BZDgJjfi59gC", "cwEDQB2DFI8C", "Emwp17M6vE8C", "ETGVeEFFuMAC", "Fuyh3lrYV2YC", "G8N3X2u6oNcC", "g_1wN2RzTlcC", "gDgXbx8hEjAC", "GfpVKx-8lDsC", "GITDL2ZCedkC", "GPCfFs1LTIMC", "hKzjNMFba5gC", "hLhw14J-swcC", "hRrLcmOMaEwC", "j2_I7ao7B7gC", "J91S8m-5HhoC", "JIr_egKfnDUC", "JYI23XTj_XkC", "k0D1eAO035MC", "k0vwC7309EoC", "KPxNDJNQ3-8C", "LIDYmd2ibVQC", "LjHYjEZy9zMC", "lmwsbWLw6EAC", "MNcB4QaX7gMC", "nq5uwdWwEJEC", "nQYybfJwXrcC", "oQ8mv52KmBIC", "oSXEwOdkpmAC", "PDpBpo5CVB4C", "Pv1uod9kd4MC", "pWDVOTYvfvgC", "q2eNLtaZ7osC", "qg61T_I1mwsC", "qUn_UMWtrsoC", "Rg3XP_rQS6oC", "RW6pxRN2JysC", "S5v4BpqrWNYC", "s9QEjj3Lx30C", "sZ0GSJbIMo0C", "T2Mp9EEd3ncC", "TGcxvQRT5swC", "tI9POJ_lt0cC", "UfTmmBmUhbcC", "V8uoRGamur0C", "v9mR1wFHtq8C", "vaEH7rkN7vsC", "vIziFZ3K7dcC", "vKOCatOFvTgC", "wHihWKJE3asC", "WjUBulsr2O0C", "WuTHl4pK0GcC", "Xg-KfK7aFgcC", "xNdZnPXsKN4C", "XRcbURgaxmMC", "Y6-AxGipk34C", "ZC0V9erPk2IC", "Zp_b7CdQnzwC", "0i7tc2P7fAsC", "0syw4IwVuC8C", "14-8TtEVjSQC", "1KEKV2BysrUC", "1nU7NLCQGQgC", "1Rx6_jyLbBYC", "1ygSThNA1-MC", "2613mp_QbBgC", "2arSMI2yjlcC", "2by0nndSiDgC", "2nxLkMspauIC", "2toggaqJMzEC", "3oYJz7vV8fQC", "3w83rbjVWZgC", "4Eqexh3saqEC", "4L7Tl2y4PowC", "5Bli9QkKskYC", "5IVMhC9jGIIC", "6D_4FLb1DKAC", "85CBUYQqKUQC", "96_4UJrUGBYC", "9I62BcuPxfYC", "9m9tNj2w2bcC", "9Oo7uTUvAS0C", "_f9cU9A5l-0C", "_ivnD4_EHEUC", "Ax6PzlpRgNkC", "AXjRvYddXJoC", "B8zM5bs2A9gC", "bV0Pivbww6oC", "bWo8Ge1WRiwC", "cCCZD5BdAdMC", "cOxMYVG0nWwC", "cP5pxV6ogdoC", "cyD059eY2RYC", "dcKqHyguyUMC", "E1Tg9q6qgFUC", "EAQfpPEkcbMC", "ED8DRD0xzrcC", "EjtrYjnAVwEC", "eyALF5NigoYC", "eyik0rO0HlsC", "EZ8s1tWqvCMC", "eZmH26oClAwC", "fE0xNuSuFLMC", "fEmaqHANzXsC", "fPh-6h0ZjIUC", "GhU4NHMJW3cC", "gSggUrFCgNsC", "hEFNvjChUOYC", "HQwZmUU67L8C", "i6aXJLeZ2OMC", "I_K8gplq24gC", "IntaNqjL4kIC", "J4cKi6r33EQC", "JAxLVY96sqsC", "Jd5XqoxHYUEC", "Jf99l5uQqlMC", "JikT2vM5YZ0C", "JirvAdAxTnIC", "K9Zh0c6Mo44C", "kIzeIBFaDOYC", "L-MW4-8wrg8C", "lbyFW9eCUJ4C", "lHtTdnbIaw8C", "LxcuDGzPmIgC", "MJb1Utv2XEEC", "mvlLcUNu-acC", "mWFAqKADH_YC", "N9llTehCpy4C", "NsF40Xh9KHoC", "o0qO7gsBek0C", "O1BI0t0qA4MC", "oS_xi6YNcnoC", "pj-vSQv9710C", "pMjiOn7JZhIC", "pnv4COWJsikC", "puo_3AXu3HoC", "PwWh1G1ktNsC", "Pyj_G5sd3mUC", "Q7CkHF7xTuYC", "qAfYUYXsc3UC", "QeoUwz4LP2kC", "qINa6ZzeYU4C", "Qm-fSCAMrIwC", "RCz5jGH0mHEC", "rE85howYIwQC", "ryIHc_dFg9QC", "S4t9VQZgeeAC", "S7f9F47uOy4C", "s8d0F4pCFLYC", "Sd7UCI45e48C", "SsplQPga2i8C", "swicGGDT4eQC", "U_Jos-CxgBgC", "UeyX6Z15Dk0C", "uJcL_Uud0OkC", "UXdK4epTU14C", "uzx3iXNsXaEC", "vIIZ_OJBw6sC", "VMVnv48Q-WoC", "VU4TKJsUuNMC", "VugfRqniLuAC", "vw5TIVBcNsIC", "WevM7aDxwqQC", "Wk8OyjcUaNYC", "wYBhLD7xFzwC", "Y-gAhChIGPUC", "y8RsnLXx7V0C", "yeCZUpu-ZD8C", "ykz7uzPEMjEC", "yZnV_OeyVjEC", "-fYxFc8RUo4C", "-POJuDejO_8C", "0-eLkwgkzcEC", "0i1dO3r97wwC", "0M6qezYNW60C", "0Y89CoIRTI8C", "1BL8s7N-pS0C", "1UMxj3O_JbEC", "2CVmvMoBRK4C", "2n-MFn3NIdoC", "2VqEXOH-b2YC", "3eJx3RwFmKAC", "3pu3QWtuQyEC", "4a6oMgT8UsEC", "5XdIgMWhmcoC", "5yoV6-brDSUC", "63iee2qa0aEC", "658MNNM3VWYC", "6AXV76B7GTIC", "7gVDKA2OCBsC", "7mHlJDgr6pUC", "8QzD1qRZ3f0C", "97k3jPprXGUC", "9NTWxB-g2bMC", "9QCpUYKTwKwC", "_nASlQHDNksC", "aKa2XdHTOwoC", "ALOagfpXwsYC", "andJBXf1IJ4C", "aVFlEvtChHEC", "awBtfaGPr38C", "bEdfDabRIs4C", "bLOKdFhvUZcC", "BnqbHc7qE0UC", "bOS9wTxSjsMC", "C1bpMhPibbEC", "CmT3DjMEHY8C", "CNM3UfS5ZA8C", "csItFZBtVdoC", "dBhppfQYfzwC", "DFzy1wgWL6IC", "Dz67I2EuT-MC", "E8tYohlb1NAC", "eKOLNeeZQFMC", "f-lv0GeeF8EC", "F521rduZP-0C", "F_5gaom1OrIC", "fG49kbqrsgoC", "G36liS2WBmYC", "GIrGb5c50MoC", "Gpbzcr6EIG0C", "gpeD8N4Bgv0C", "gXC6tBuB3ukC", "gXIpZThzkgMC", "hKvbOiuRHK4C", "HO2tcJSd1ucC", "hUa1L6-oSFIC", "I20ZTvApcBoC", "iH8kTRPq8V4C", "IiHCtRXb58sC", "iLZ7FK0Z0BYC", "iTqij7sfRv0C", "IVk9f7XuhJMC", "IY8OBT0ALeEC", "Ja79cHnK5vkC", "jBHTwGoIKFYC", "JD8B3w-wAXAC", "JDDCX3NZg0IC", "jdoXBuPkP3IC", "jILZHKGefnAC", "jZm-7l9bVNMC", "k_PJN_n9HXsC", "kdc72ePipCIC", "KLoW8UJ7yV4C", "KSqaVLJ6gAAC", "KZhGMqTcdWkC", "lAJO7vQNrqQC", "lCGyHH-9ThMC", "lez8urgN7IsC", "lmyJpFpDO0cC", "LNyJXYzsm3IC", "luT5wRZFGt0C", "m0uNZ8L7v_wC", "mnVyKrjJnq8C", "Mt-0W2y5Ge0C", "MUgZz6fsfiEC", "MzU5LWah5yMC", "NfPZrhJB96QC", "nqD7og5KJIAC", "NUtoEunmt0IC", "nV_YYqbxgdIC", "o8kXe969g0sC", "ONHIQLf4DV4C", "ox7aNVgljlMC", "OyM3-IXdmJwC", "P3CplYtSSFEC", "PczyUV_YL2MC", "pdpeP0ZbWHsC", "pWewuk6a2BMC", "Qnuo81K0IcYC", "qp2VYFn1sOUC", "R5GOrCL-hNsC", "RPQaACqkjGwC", "rsGdiauRyxMC", "RZe6cV13zE0C", "S7xmKja99FIC", "S8i7H-hTXLAC", "SGI43GWP-IYC", "SI53QAu4dF8C", "SLkt73Lrbp4C", "ssViT_3Q3FQC", "T5UpCOVOJboC", "TTtjs91IuI4C", "TujOn209Ts8C", "tVgbhu4SOtQC", "u1HkFE75cAYC", "u2uHVUp6ekgC", "ueZOmEZ50NMC", "Ug1Syk-SggkC", "uppJmSyZNLgC", "UsLsYpi_y9oC", "V0iKXreetjoC", "V5qOnsDqd8UC", "vHpAxbBtYwgC", "Vimx2y5WKpMC", "vjwfFOOm4ysC", "VttdxFt4kT4C", "vZvy4vn11wwC", "w-vZfK66wxgC", "w6z2R-4hm7QC", "W_5-RKxftbcC", "wOIKIqrmK4gC", "X2-ZG3vkJBMC", "Xqa9U42GP2cC", "xTzN4tAcbWUC", "Ycz40OX8JC4C", "yq1xDpicghkC", "ZERszJzP_w4C", "ZhUKY-yEAzUC", "0pLN4o3jnX4C", "1s0fNs75eU0C", "3QhvCFBjXt8C", "3QPCicPagmkC", "7I9hbvFbSwwC", "8Wv67qmi7JgC", "_1CxStiRr08C", "AUbEMUpDHjMC", "B1woUWB0zoEC", "bqsnJ9Kwf8cC", "cu1La-UW1uUC", "Dgh-sFywyAcC", "dkS7CMsi0CYC", "gVEr98NLoJIC", "hfpZ7mDgL4YC", "HPYLoLgJVKwC", "m8JVt054DKwC", "OIW90It28wwC", "Qn6XPK6_9PwC", "rRYjYKrShPwC", "RZ_J2zSCsBMC", "tjoUmDYGZ_kC", "wBsz9EFmYVYC", "WDBALbSAEY0C", "XlxEL2OAq1MC", "Y9gysXtdfNYC", "-ejuRdu1o0sC", "-L6Mta5ndNAC", "-P3klEJmyYoC", "-vEse95VywMC", "-VqbhDPE6RwC", "0-KFVYyJVQAC", "02Xig2qmvr8C", "09logyEmlP8C", "0BviGSKbcTEC", "0Hq3fQM_ql0C", "0mGCIWM1pOoC", "0yF95v_cIi0C", "1CZjrwiEqWQC", "1nN5hXqGUpQC", "1Tny60vKmUUC", "2-FMeNpDPLUC", "2Ub5TJ2P8_QC", "333tT0uUJUkC", "3h9hkTsLvBsC", "3uni7ltr-EgC", "3Y3Koy1GyxwC", "4CLIORno1rAC", "4hg0KpqgjcYC", "4YR9KKoIGEwC", "50cUnQ3tcKgC", "50wLU-gKr-QC", "5gdqw3ax1KsC", "5ohxQyl4-O8C", "5SXv0BUeKh0C", "5VMcW1f4fmMC", "63VsrJx-DcwC", "6AWJpoorWoQC", "6MtRNh_cgSMC", "6zDH9GBpFmEC", "6ZOuUCxDuNQC", "74JpqIiLifEC", "79qeY1rwa9MC", "7ER4mPFI9osC", "7TEhDf57HygC", "7Xf-oGYr5V8C", "7YtL5kM_olQC", "8fjvEUIapQIC", "8Fy9NHweW9QC", "8gelKH734-oC", "8OEbjHKSKkcC", "8srzbBuD8ooC", "8TCybCs-AHAC", "9L8MwyFsFvsC", "9P7h5rB2vQ0C", "9Yy_tYUfn0AC", "_jueZ7Tz8ywC", "_U9YvW-NfvIC", "A-nGXqb5JSYC", "a3MgYVp3MNgC", "a3wg36vBXkYC", "AhajUs_0K-EC", "AikWxorjwGQC", "AlGuOeb7pl0C", "aLrU_YzhaBoC", "AM1Q4ECeQDcC", "aWGs4TGKDcgC", "AY1iHnq-xcQC", "BBKEcM6M_BUC", "bBYG-E9nRykC", "bCosFPTNyRwC", "bL0V6oCroGYC", "BOIK4w9zM_gC", "Bp35IAKbcd8C", "bX1nS36naX4C", "CaBAy2oYiNwC", "cbJAOnu-iEAC", "ClNeCvWR5P0C", "CN5So0yMZp4C", "CrJXCFjqd1EC", "cZ_F_J1308wC", "D1g9NcEBcEYC", "D8UzeKZKKvgC", "dCq_E2MSODcC", "DEussc1kYYYC", "Dk283ZDn2CgC", "DMQjVRUdl0kC", "dMwhA-NhOF4C", "DrGsqbdcIRwC", "DsDJpRznYFAC", "DSiWIXzQQRIC", "Dt67NJYFYL4C", "DXl5d3PpY04C", "edFHvonqKX0C", "evF6kdfndvYC", "eZYrYzQW3nQC", "F1Lhjw9V1WwC", "f2D-5VU4K_0C", "FjmABe9tZFkC", "FonNsPo-E60C", "FQK28Kn_l_gC", "fu-kpQVvUNkC", "fVGEkW_gHYkC", "fyvF_1MmEMkC", "FZ38Nhdr94gC", "g-xFICaT2KgC", "G1NBCKQUbLQC", "G4UH8cPE_VkC", "gDdUJG9ZAsMC", "gsMmMAyYC-gC", "GUCo0saVa8gC", "gV4SCyVYuYQC", "Hbvw2UCKoZ4C", "hEUQWxM0nHsC", "HgMEuYosYCoC", "HLzw4WZuZRAC", "hUIhZALOqtgC", "hV6KwLHHzOwC", "I4jlSqTv0bEC", "i78nrgJzFSMC", "I7eMlFZ-drcC", "I_EZKwscuG8C", "Ifj8JhEt9ggC", "IWvJms37_owC", "iXS0g4iuYzEC", "J2lPGw1Rtw4C", "jaHqDitMkcwC", "JBmmx4WE6k8C", "JigkhryKpx4C", "jtWpJQCieJgC", "K5VWQGFBxcQC", "KgSgVDI8c2UC", "KIo9mt-eOFgC", "kqbwwzLe9_MC", "kSk9JR9LgSwC", "kx6eAjugaA0C", "L4GeYVeSpAAC", "l4lfK_WL3gEC", "LEHGfCUDYfAC", "liXVkOxFDqsC", "lKKf4Yj0W4MC", "loo0_eXLXggC", "LurjwBaxF8MC", "Lw86RxlWQnYC", "lXrnTDSacVMC", "LyOdxBQrBwIC", "lZtKCE5Ui2UC", "m1Or0ficxlsC", "mUYVmd01fuoC", "mxt0Ro-l-gAC", "mzfNbAE9mX8C", "NfGHZllfQK4C", "nFVzIP622gEC", "nJv2mifE1o4C", "nlJT7puXjx4C", "nm-BUiZMc3EC", "nQ68hmToee0C", "nVMR4Gh_Y1sC", "NyTudGXQewIC", "oB4OC53QYYkC", "Odv4ILalBKcC", "OFcR4TvqVoYC", "om6ka6hzytYC", "p-NUf2ojrQYC", "p3YW4rJ5ob8C", "pAxZbNwBNzUC", "PE53nJcigosC", "pNXdJ7cvvngC", "PRi6bl07_b0C", "Pw-rcBpV-80C", "Q3Rfm2JBti0C", "Q8lg56HLGp0C", "QdiTkdgSoaYC", "QhWVUH9tNw4C", "QlLMwIkHVu8C", "Qob065xfJc4C", "qqkjpQLEWPQC", "qRn_S83y_7cC", "QtTNYdNpJRkC", "QUBFst0zmBUC", "qUgPnJLN4lEC", "Qyhd5sjMWnMC", "ROHwG0JvP-sC", "RS6m_DbSJXIC", "Ru0t7ESGsDAC", "rxlhF88yrg0C", "s0CyUSH9iPgC", "SaaCMIz8PvUC", "sAtrYgbkH5gC", "scftQIAXQHQC", "SEQr7Y2ESicC", "SIGIlqKAaW8C", "SIGkFwAmFKwC", "sNCoxfSclV4C", "SoxnKRQyj10C", "suQbrg7MhFAC", "SWZ4FCf3LiQC", "Sysopkjdno8C", "T31kevVNqUMC", "t5NEp5iKhkYC", "T6U5eQyWuSsC", "T97vHe-Q8OMC", "TE0WobkrkQYC", "trfXmiUm5PgC", "tu16MecA8cEC", "tuSGXALbaLIC", "Tv77pfIsaVYC", "ubodMGnHnx0C", "udGI7FjregcC", "UDuEFOTuCFIC", "ufNTEMTqAhYC", "uIBm2EZDcQMC", "UjOac1Td7CYC", "UkO0zAqUSVEC", "UlhGedGC668C", "uLXTjolpB_EC", "URoDbjKxx3oC", "URtZ3OXHZQsC", "US5aoykpdoAC", "USgMx6uKq7cC", "uU7Lam3hcRwC", "UUODSqSSrZcC", "UvgGzh-6t8cC", "vnEhQB8-uoEC", "VuaA_9dvD_EC", "VzamFijBMFwC", "w7e869WABvwC", "WI0nPy7U0XIC", "wIEr8jXYBt8C", "Wih7vhglJFsC", "wk1caZUaMOUC", "WNBFbIUssgAC", "wou23_QQyHgC", "wXjHgnoHQ0MC", "X3rvKJrmYVwC", "x9YvEamhGw4C", "XaKz2uqbMzUC", "xd3X5x_-MOoC", "xJ1j7mkgvlwC", "xKOiyh5KvFAC", "Xkw1nCTwsWsC", "XLFMJx8ekPkC", "XmEN-qK0bsMC", "XvMdKogKFqcC", "XzVLIY5L2swC", "y-YtcOzwf6MC", "y11kvNfIDh4C", "Y3yDkC9IIukC", "Y5yyFc5E2m8C", "yA4cn92ySgEC", "yDymY0juFzAC", "YmWw98yeh0oC", "YqtYxm9n5-IC", "Yw64dgRvc7EC", "z080t9ESro8C", "Z2HZ7kIVskUC", "Z5VRwewA4rkC", "z6iODYzWf54C", "ZHwey8h5Kj4C", "zMxUsres-coC", "zwKv3PF_Ff8C", "ZX4JoRmrwyMC", "-Ac81W-ZQDEC", "4RAq9z5RgxYC", "5rF_31RVTnMC", "7o6pq4VR26YC", "8HDEs3wNLd8C", "9m9tNj2w2bcC", "cis5uCsRYeMC", "Dep5Eh_SUPkC", "IaA8mZqhjPkC", "IJ-GgyfvKL8C", "JAxLVY96sqsC", "JckCvpOQDOoC", "jgC36S_BdpwC", "LBBhikJpLjwC", "lGS9Lbv0PdsC", "MJgN0BWagZcC", "O1H7BVBsK9oC", "o4dc_zcnl1cC", "PJP9W9X2NGQC", "pskTkT2TDeYC", "RoO9jkV-yzIC", "SQhknRXlyvkC", "T0u3mLgB7Q8C", "uHq_8awQIbgC", "WCEhW6yWDNAC", "WMVCPeDrXs8C", "Y5vLDglww74C", "yFgt50M0WPcC", "zfONjvb9FpIC", "-6tK6UnVlEcC", "-NwZA2WUfngC", "-TNhhlGcCzwC", "0nV-mIqPa5gC", "1ZkYEFi3DMMC", "2m5bzSFYhXsC", "33krmNTydTIC", "4Y0ZBW19n_YC", "58ozhlerewMC", "6DBnS2g-KrQC", "6N6t5MXXaIsC", "6ujGHAm6UmgC", "9-8jnjgYrgYC", "9IQFh2qW9b0C", "AAiV6mJp4hUC", "aC8Baky2qTcC", "bFURkBeZqPYC", "bSphUJjJe-MC", "bxZ47UHnWGsC", "c008kdNwR1cC", "cypYpNnWjXMC", "dj7I5K33aL4C", "DNd2K6mxLpIC", "gIHSN-ht0xQC", "GxKN1LiEYyEC", "gZVaXvKwxHIC", "hhnIWGD5Zt0C", "IWvreEoFhPMC", "KMdvIKsOJwIC", "KuaZgBcnmAMC", "llUvnqcEKTcC", "mJTJO3vZkSoC", "mUTV9dgfMuMC", "Qw7qj5nXSPUC", "rKmH2DNXricC", "s2ZtdAx83yMC", "s4WCjkloJCAC", "tGBUvLpgmUMC", "uuX_cmZ4mjoC", "voB6UejOtncC", "VoPogETDqa4C", "XSIssqPhDbEC", "Ybu81FJA3jgC", "zzUeWIFDCaEC", "-76GjNpR9VUC", "0uoqWWIauscC", "2hLRAkzKHjIC", "_zhwTYftf-sC", "eDt6lmVX_k0C", "fiBhVEiOFw0C", "fXX-Z75KAhoC", "gbIG-epQgyYC", "gDcH3tczR60C", "I6BQ9yxgSaoC", "Ku8NG5OgmlEC", "lSybHLQbZ_kC", "Mmvao4xhMiYC", "O1H7BVBsK9oC", "Os-9cxoj5AcC", "t9tHrAygQWIC", "uf5x7GtHpjkC", "wmgF8XJf4l4C", "xHWgnMsz8UIC", "YoryriygeZgC", "YZ5aQdRwaX4C", "Z9Djirq3VyYC", "zezJOW8XFc0C", "zMWMzPG3j38C", "zPNgwV6VPywC", "-Ufj7x82aZQC", "0H2ujnLIb4YC", "0VQVWO-XzX4C", "198V5wsaoW8C", "1eVAVRRUnkAC", "2qYKIG4lhHYC", "2vnbMzYXBQsC", "2vtmwCOgzI0C", "3_fzWPCMmvYC", "4F85nqXb6w0C", "4KiPFF1pfPAC", "5IaLGlxtqsAC", "5zd7ZiWzIKEC", "61W3aGvTVgIC", "6kBREfqwuHEC", "a-apCPdumpsC", "A8KuchLCcYkC", "anFmX2d0KxoC", "aVWi86L3w3EC", "bIoc-41VKYEC", "BJcgLVibkrEC", "ccWmlymJEq0C", "ClHUjere8vgC", "cNB8Qm4_2J4C", "DDQ6Vw9J5DwC", "DIxJQdDgS0QC", "dLbwPpBYDl8C", "DQ-wif7eBJoC", "dULNnyLkyEoC", "e4Tb_6mxqY8C", "E7h_E7K_fwsC", "FKkPEODeDT0C", "FUha9wJrSXMC", "fVgPWLQWA4sC", "fVLMYb4OH3YC", "G_ChtsfxkRsC", "GwI3Sj_pwsUC", "h0oAFNvncUUC", "hiA_PNMp6lYC", "hKNc-9vorskC", "hKV_j23sEKcC", "i6kVrD7R_n8C", "IHtQFK_sBqcC", "iqKULT8jgRkC", "IwywDY4P6gsC", "J6sln7m6S6UC", "jdwZB4TQN8gC", "JJ8ubAShaQYC", "jUX8N9kiCiQC", "K1-LL9vlxZcC", "ldH2BM3vs_EC", "liuJiSc9n6oC", "LxcWEfaffaoC", "lyrm5fJSrSkC", "M1AUC4TY4u0C", "mnoT8c0Vx_8C", "mtQuudHqmqcC", "MwQnyFkCIL8C", "nHAot4SFzlUC", "niDNtZoYsAUC", "NoKhJMLbgD8C", "NRWlitmahXkC", "oa7NCF8auswC", "Oa8W1lM7dp0C", "Oh6wLFldgIwC", "Ojqi8KbWuLwC", "paCOTGa0wS4C", "PpEz47zsLEwC", "ppLI3zTIhQ4C", "Ps6bjZJvsHoC", "q09de7IECAkC", "QTsy3cwmtgkC", "R7yZULA2tBMC", "RfXAhxwv3d8C", "RMd3GpIFxcUC", "RZavt1b_0BAC", "S0f1dqjiGXwC", "stUAkZC2Fm0C", "T4Elzas1b3QC", "tWhTr1WekFYC", "tysWnxuQhYkC", "u7aQrw6Uo4oC", "UcPsbca_C5EC", "UohaMn1AmigC", "vkHCx--93jIC", "VX4reY-uK3oC", "WU-OyPMpDVgC", "XBkchXgQ-d8C", "xoZ-WjpIc6UC", "XVwOEeHTU4QC", "YIdZ4-jKaGIC", "YIY4089h9icC", "yPBQ0x8ilx8C", "Yt5DTUj4LXgC", "ZE0pJLh53e4C", "zuzKDZmT14oC", "ZYLmkgIqCLkC", "-52RHqbsaWwC", "-_Si5OP6cjkC", "02XEWTji9E0C", "0Mei4WzHik0C", "0w2UpJzBamoC", "1bNXWy9W9IAC", "1E8PhEA5Az8C", "1lGuK9xyvokC", "1rOerr2Ci-0C", "1sInFMCUm2YC", "1T39-GfAWrUC", "1u_tY_pssu4C", "23PS8aGYYhsC", "2E3MiOWRNtQC", "2jNwYjcIK6IC", "2TTqv_HACK8C", "2X_sivIIyQ8C", "3XAM96b312YC", "4gS_0UwVI34C", "4Hpzwl0VoyUC", "4kLJkLerSaAC", "4UXyNz_R__wC", "5DGXp5h2oL4C", "5oSqucVGhwIC", "60KnbxhqPL8C", "6oILDOdkvxYC", "802VgkC4UEUC", "8dKozfsRRH4C", "8HYQQYEtQ4gC", "8ICiTVcgwuAC", "8JspW2EUnLQC", "8NCXcrGcjiwC", "8Ri5V2SwMkQC", "995krFsdee8C", "9i-bgOjaVysC", "9lZHwn9YINEC", "_MAXmVxrdasC", "_O1UFZ89S6UC", "_PIKFebe0ZUC", "_Pk7ht_KTAQC", "_tZO-x__5b4C", "_yFAecBTPwEC", "a2cWgOGKF9MC", "AKakX0dT3f4C", "aOGdsB7a-MMC", "ArPhc8pH_ugC", "avp_J4eMt4oC", "aw0bmkidutgC", "b2ov6zAspKsC", "baMsUZCRgqIC", "BhIMO0CiTwoC", "bVbUWcZJTjYC", "C53Y8utmakQC", "C_g4YJ0rTsMC", "chGjPf3_RCEC", "CL3ql_ziOxQC", "DEgiTalvVXwC", "DnVCYtiKos8C", "drAw7ArFYTIC", "dTFo7wU_510C", "dtHmdv32NakC", "dZdWebZTGKkC", "e13q14sVPiUC", "E5zQIJb1hRAC", "e7Eznt0V6QEC", "EhmN7RRA_ugC", "ek8nf53EXugC", "EnedFN3PnZwC", "EQVcqI4HM6gC", "erkTSFYCnakC", "eTi6u-MS12kC", "EVitU7S2FPwC", "EYjb5ZmougQC", "F16NoYvQA4IC", "F20_TnLlcR8C", "f65agJNAWVcC", "F9mNmjsAzQMC", "F_vwlakdLxUC", "FaA-TWtbLwQC", "FIqEEO1Kc1EC", "fkRwjQz0O7cC", "ga7KFEaiaMcC", "gGV7hWLTDUgC", "Gk6un4og4_0C", "GMKHspxES6UC", "GU1cifth7UAC", "GyCscVPFIBsC", "GZ4xx0P9di4C", "Hc2dCHfyh0AC", "HdwuLjpjVn8C", "HE9bl6gPs-8C", "hEeJMViuF_EC", "hGD_1iPQh6gC", "HGoajRhgyM4C", "hlEaPi-VRXAC", "hORPJ3l5cSMC", "HZyRMSddyh0C", "I_K8gplq24gC", "iCTMVq5iuAUC", "ijLOO6zrl-sC", "Iq8odoc_AHMC", "iyOjvMGmXo8C", "JAoLsCTW5noC", "JAtHsOzOCoUC", "Jm_TNTVOWG0C", "JQ761pPLQ_oC", "JrfffY38O9MC", "K7zz1seo1GUC", "kIfE_AnrEwAC", "KIu5wqdIb3QC", "Kkf7gowrH_UC", "KQLWPZx8fc4C", "krIH8Sax2nQC", "KwzZwJWBO_EC", "kXSKAfy5cQYC", "l-9PAnwdMHwC", "lBwBNq7OeNYC", "Lel5W0G1n3EC", "lez8urgN7IsC", "lkMyHNy64qkC", "lkoOngAgeK8C", "lzds1LbpY5wC", "lzHauSS_z6wC", "M-Yk76ZkPlIC", "M7F4yExH0ygC", "MaI5EZmsgtQC", "mfbaDBgpteAC", "mj-of_PzKJIC", "mQLDLn0GQfwC", "mqPTDRT2v3UC", "MU-_U6mkTvgC", "MuvqrIW-WUMC", "n2h7p0H5l0wC", "NfBbt3TE9xcC", "nGZ9CyVWkmQC", "nh18wf88pe0C", "nQd8MHuaXysC", "nrQxBfJLvtgC", "Nu-nE7Iif8cC", "o9_TF2NHuFUC", "oaMkKvgT3sYC", "OEXDt0Os5aQC", "oIYNBodW-ZEC", "OknSmoptV8MC", "OkOrJIysavMC", "oLCSBeuStRcC", "oLFVBoeI1gMC", "Or9G72yAd9QC", "P2XgbUHcJiwC", "PDgGBdrq13AC", "PHPdMoXyFfMC", "pJ2DUnZMffYC", "Pn-X4YCCAVYC", "POD-D1f3OUoC", "ppmteilOxqAC", "py7QAfg-elkC", "qLmG7deqB2QC", "QUBQF0zn7hYC", "r-Wlg6VAzJUC", "R82YRMlkujYC", "RFr9q4q0VLsC", "RIPdMkiKipMC", "rLtFv6s_XzMC", "rLv8OfsqR3YC", "RQtjqXmdFOsC", "RrC8pZtmzGoC", "rRUw7deQSo4C", "rUbjngR5YqIC", "Rw2ZYQFfy74C", "s550mfKJWJAC", "sPAud06zOqcC", "SstfNYaa-gsC", "sT8uCriUVloC", "SViiPVoClWAC", "SYaFTP5qgEsC", "sZPy2IltN-wC", "T0Rx9oivVsQC", "t3h4nl3v91YC", "TGYP2rhIXM0C", "TKOUBqpaLI4C", "toKIEHepkIgC", "tTOrRdTXNlQC", "txVOZJziHAcC", "uaAMQY5-4nMC", "ucFO7tBv-pIC", "UcQ0P-6P7q4C", "uf9QosYeuX4C", "ufV1PRGkP90C", "UHSx4t_R0wYC", "UIupgDi6OugC", "Up4x7U20ZVUC", "urO0JtViT3oC", "UtQKuF5Y0tUC", "UuuMiX4SDXMC", "v8Z1tc-6200C", "vHTy1OaeHI0C", "vnl0a09mk-cC", "vt2lioMOxnkC", "vWfPuK6eCn8C", "w1kb1gE5PxUC", "w4GQlLISiCYC", "wFlu01q-wC0C", "wmwnm-sPBeQC", "WwmkfE2TBE8C", "WYfK1zOtoLwC", "X91l3wqJnikC", "x_V3JdEvL7UC", "xOs5mVMo1xAC", "xu_zcxk2cOoC", "y3Zmn5Ke0ZYC", "yiKnw-99J7oC", "YogcNmM_oJwC", "yRizg1DsQh0C", "ysVrxa25lM4C", "yTfReukYcwoC", "z9SSyLNpqusC", "zDLowxgAMCoC", "Zh4_Ptk31K4C", "zlpXQ8ifEv0C", "zwEtSw1aw1QC", "-A-wrak3BkAC", "-H4xjMzoYj4C", "-sFkv-rGTJYC", "-vEXEPUJK4EC", "-y5Jxp_VbTQC", "07LTDdpMZfYC", "0ba36JZTUswC", "0dD9rHI5H5sC", "0G-F2AOqNuUC", "0HMvmNpuDf4C", "0NP8hnGNjAsC", "0Q6cMEkz8xkC", "0Sb9rQ5Ewd4C", "16agJ40MsqkC", "1amOE2BYvIYC", "1dLQ-XiilEIC", "1e_JFkI3DPMC", "1HeSzCJrOR0C", "1IjS2r3poyEC", "1PRS3fY7pykC", "1UMxj3O_JbEC", "1waIe7g_DAsC", "22DJdTiUvg0C", "29I9RRjYX9sC", "2hLRAkzKHjIC", "2Pk6AWA0cJoC", "2pxcG08a90UC", "2sbP7J-lckoC", "2VqEXOH-b2YC", "2W3d7kwUIo4C", "2z22FTDqiwwC", "2ZAptMWcCdwC", "31rCgtgEU7AC", "38T2BHhBznwC", "3HDyoJBoLBQC", "3QzNODskpJYC", "3S37vpzASg0C", "3zLSRa5lIyUC", "44ml8Z4UGEMC", "4_QEsBJLmy8C", "4cJDRBFy9kEC", "4F1SDVZb2NgC", "4GXEmkTTUpoC", "4mcT7A371xQC", "5_zAi06GKNwC", "5E0omkoy-S4C", "5EdVJ4vYF8QC", "5F3S8RgQNUQC", "5gdqw3ax1KsC", "5L4An9lC3hwC", "5L8anx8CvsIC", "5r3QJUEsNWUC", "5rF_31RVTnMC", "5VMcW1f4fmMC", "61rslRcPoZ0C", "61W3aGvTVgIC", "6pmBjSl35egC", "6S2GdoIPkKQC", "6YkQy7wv83EC", "6yRD5W-t2XMC", "70vIJVnOOpIC", "71NB5LcRaSIC", "73s7zfPb2L0C", "79x4w7DnzPMC", "7RGQjnd620gC", "7VWZRVvoE0MC", "7wMuF4A4XF8C", "7Yhkld-Fr5wC", "7Ypg28yZ6aIC", "8aEwylFfsjIC", "8dCnb4uR63EC", "8fp1A2s6aQwC", "8h7qnrbCEAUC", "8H8WfZ_AyU8C", "8HDEs3wNLd8C", "8yG5UrYMQ-0C", "8z03WKzlC3MC", "96hZRNDqFJwC", "9b2VoLf4MzkC", "9dQq-oVJFaUC", "9jiJd8_5KnoC", "9K6oJ3mezL4C", "9L-bI_M_WskC", "9L8MwyFsFvsC", "9ne3r2XzbzEC", "9nFwTXKoS6gC", "9QCpUYKTwKwC", "9SrWPKB2q7MC", "9VYuMmcxSYcC", "9vZ64MLmVS8C", "9wynPVLnhDAC", "_2BzIHoeil8C", "_30zvdewnuEC", "__CvAFrcWY0C", "_c95aA8dOLkC", "_mtzX3Gs9nUC", "_mur2PUOp8wC", "_P1JvRV1iCIC", "_rewTS4v-EsC", "_UKmhTR0ITkC", "_UNNPyZHBHoC", "_uxrn_B6nQIC", "_wofmBiXXv0C", "a3eobGCRYGgC", "a8O0IRmdttkC", "akhuVP5NY-kC", "AmESXDfiId4C", "AoSgoI5FddcC", "AR4mvx9Tn0QC", "asrHFGGziHwC", "aWmi9nbSr04C", "aXwlII05pnkC", "axxlIDSbKg0C", "AYD_qooekugC", "AZ5J6B1-4BoC", "B2tGEsVMrYUC", "b34oZ_wzrTkC", "B5I9_q-88Q4C", "BA8Ok58Q-ugC", "bCGd7ampITkC", "bKVCtH4AjwgC", "BNZ2-nzmQ_EC", "boA1HQSnefYC", "btpIkZ6X6egC", "BZvXZ1au0VcC", "c0KhuXidBe4C", "C2YHElDp6loC", "c2zhJMEYccQC", "C4Rqx1_fKLYC", "C_bL0PRTQl4C", "CBureoAhqXEC", "CcJjP5T0fwQC", "ccwXeaPkuoUC", "CdocFvhd-JsC", "CefIFvgupFYC", "CEYDySjS0UwC", "cfS2tdrgGa0C", "CfZMvlReQAkC", "cLec-hyjLJgC", "cMjSV6CDnOgC", "CQ356zufRpcC", "CqjBCWV6Eu4C", "cWQJJIgJNtUC", "CwYTKoE33jgC", "Cx4DMx_JXggC", "cxlsKCEBohsC", "CxYXaAUJytUC", "CYYnmQwmT2QC", "D1Gm-lqYM2AC", "d1LNoUWhdf4C", "d2rXwFdzuo8C", "D2sYaR0b2ZUC", "D5H6yvflq-wC", "D8UzeKZKKvgC", "D_IwgpeDNUcC", "DayPI1EjaRgC", "DE_Ay18WF8oC", "DEgbRttpd9EC", "dELO9Pc3P50C", "dfysT8sctZAC", "DFzy1wgWL6IC", "dhr32lY_rt4C", "dKIo6D9yh3cC", "DNmjHtlFJUcC", "dqM_GcdDEHsC", "DVMsjPtMfqMC", "dwfGvtzvte4C", "dyIWVNGh-zcC", "E-tcvjEw4jEC", "e2q53WFE7hEC", "e8aDEGSDCToC", "EarJQWvrLOQC", "edFHvonqKX0C", "eFBOvBvKqE4C", "eK0SnBnpkA8C", "em3obwwfGUAC", "eq0n9Ck79ysC", "EqgV2wJhi1cC", "Er-_4IaVw1AC", "EtjIuCcJkNoC", "eu-lSNjgkSIC", "EYTfQ9h2vaoC", "fa0U8hYlJlwC", "FaovgJjD1AIC", "faQU6AVeFigC", "fBazruOey4UC", "fCunxPYp_OAC", "Ffl0HCe_YV4C", "FFO2clqJCqMC", "Fg2TI5x7qOUC", "Fg5MjfVSQOkC", "FN5wMOZKTYMC", "fnVy4v5pZPMC", "FPWSLAVs8jMC", "FS2DSJIHg9MC", "fTi775ZHyDsC", "fWKAXYomhoIC", "FXPtglTFvKIC", "FZH5yr1VCfUC", "G4UH8cPE_VkC", "g8o-_gdZ4gIC", "GCyjMr7CudIC", "GELdo7SRRssC", "GG7Y6ZFGk0AC", "GghRg6VmYPMC", "GifAXXyoO84C", "gkaUu__vNDQC", "GKPktrYG7sUC", "gq5gFEcgRHAC", "gt7EQgH8-b4C", "GVchqY1ZaB0C", "gxizgOuEebsC", "gxU0P7bsBIYC", "GyjunFDS-HoC", "gZaqADTgdtcC", "h0gJc-Sdx_8C", "H4m1VKnO7VYC", "H501Nxy7xv0C", "H83nwxNyJMgC", "H8_o6tEvTnYC", "H_5zYEhiT3IC", "HDVCxjgGZmkC", "HElYZgz1dLsC", "hfpZ7mDgL4YC", "hFSx37SaQRoC", "HG1-0P8zV8IC", "HGnopNYgga4C", "hhnIWGD5Zt0C", "HjmIMdOx6-cC", "hk7brsxp4d0C", "HLkJ7pVVOKEC", "HpydZ7Xl1xwC", "hsKLPs5XqtQC", "HT7LP-hRhQ4C", "HwQD7Q7rhkwC", "hx4zw8cp__UC", "HXRS6p9LRTIC", "HxtpSewA1lAC", "HZc3FzaajnMC", "I-RTiw0Z30MC", "i3Ts4B2_SrAC", "iaKLCIkmYmsC", "iCpj07vEEIcC", "ifocmqVPHUwC", "IjJNEdgb7DwC", "IKSHVdYUzGEC", "injpY-EerZgC", "IQC01c3qeCQC", "IsldnzHkxpsC", "itSPLM6udREC", "ittzoegmRpAC", "iUwStqNL3CUC", "iUyrNlDbzsIC", "IV2Gkol65s4C", "Iw_gHtk4ghYC", "iXn5U2IzVH0C", "j1hzezxjN4QC", "jagVDBB5nNMC", "jB1L3asv5ysC", "JbffyB5vT4kC", "Jh0wzZASOyQC", "JI6RrXDzH9UC", "jILZHKGefnAC", "JNgAP8k5KroC", "jNYDVy1Xt40C", "jOMGyirP81IC", "K-7YdiF2eEQC", "k1Am3RpR7dAC", "k63dDkZnAoIC", "K8qzZ7NWsvgC", "KAvITyK0lpsC", "KAZvQcXJ0vEC", "KcOo6u5EKR8C", "kfDyeu7Gt8YC", "KFWbc2tiav8C", "KgSgVDI8c2UC", "KjxRXWdXeREC", "kJxvhVkvYmYC", "KkRi8y0wGhEC", "kNBw5fDZ7sYC", "kotPYEqx7kMC", "Kq6EQGda_30C", "KRaNlo6MwskC", "KY7pygt5ImgC", "l4CEWzs7a88C", "L5RPRCmkzhYC", "la_e6cgLl-sC", "LBBhikJpLjwC", "lDcxH8-0ODYC", "LdxfLieU0aEC", "lh0JevgRoKsC", "Lib_c4i9A50C", "lj5woI0AjhsC", "lKq3n2S7I8kC", "LmCCGgBTqFAC", "lmTAEdyyMRUC", "LnkpdauAHvEC", "LVYKm7eJC28C", "lx7mQQ0mm0IC", "LXdGN9ovH6AC", "lyOsjsAjvcgC", "M1AUC4TY4u0C", "M5X8iZ0GCoYC", "m5ysTujFqbgC", "mDmcW9KR6r0C", "MF9KWcidqhcC", "MfS5ck5qHDwC", "mGrRj_bpLBoC", "MH5atcMZq2EC", "MmJeXfkFNKwC", "mMy6t9_dONAC", "MNA1xBL8akkC", "mQVimIsyPd8C", "ms6LXsqcn7wC", "mSlgn03zAroC", "Mt9NFfWXW7wC", "mUEOJuwUAOkC", "muXgq4C2UtoC", "mUYVmd01fuoC", "MYII8Qi1-eoC", "n2B9sT9UfIkC", "n2EK2khQWfsC", "n2kd2ajvTIsC", "nI3i03KWHlcC", "niDNtZoYsAUC", "NIo3RQmYLqQC", "NksODwE5nNIC", "nRC9zn3nHIQC", "nRLXi-7ikW0C", "NuMx6tmf5iIC", "NWiG1MtLMioC", "Ny5I1aaSlSIC", "Nzcj9nmbEiUC", "NzRpoHvMkS0C", "nzUcExdmkzAC", "NzzLC__TwZkC", "Obp2ZR6DlakC", "obY-pbyMSp0C", "oCji-fn5qEUC", "OcRqqQiIrqoC", "OF-YSMKCVwMC", "of5TqT4nz4QC", "ofSWPafmlpAC", "OiE31yjuVbYC", "OKq9OVHLjjUC", "OKV8Nd7hKhkC", "On9mohCLQMgC", "ongYdoSU3R0C", "oSXEwOdkpmAC", "OwCyCvI8mokC", "OxyUsyZrqY8C", "oXz1ZblCUIUC", "p-ln2rx0vrwC", "p0dUyABx9SQC", "P7yZUMBcbxAC", "peudW5Nk940C", "PFYBPAS3LIEC", "PIqwFAOQXdoC", "PJArEP_lPlMC", "PJgMFxbClw8C", "pK43Jn0RmTcC", "PltZoL6swlQC", "Pm9ZcFYtLZ4C", "pnGaA_pJXjQC", "PQh8kNVjYyQC", "pS-xvdmJsMYC", "ps7z-1FtNPkC", "pV8oTgZ6B3AC", "PxOB8s6dtA0C", "Pyg-gr37IkwC", "Q1CEQ0AZh1kC", "q1JPyB4n7LgC", "Q2OHIJ5W94IC", "Q2yO_wNMX74C", "Q5BuEKEe4pYC", "q6-Pgq6Bd0cC", "Q7Jk307w-XkC", "q9N5V51Zp3UC", "Qa8IoiT_3kAC", "qDWo8bSCLwkC", "qFV6Th-pDiYC", "qg61T_I1mwsC", "qgJ4lh1zynwC", "QhPgEq5ZeY8C", "QJb16_AAePkC", "QJWqI7uH7YUC", "qKHF_8IruzYC", "qliYOteXA30C", "QlLMwIkHVu8C", "qsijdHADx8IC", "qxiWkQws3msC", "Qyhd5sjMWnMC", "R19P0tZxivIC", "r63oLL3zwpsC", "REwBpIGM9PAC", "rg20BVnXdz0C", "RkGQBTHGw_8C", "rKq8bnUK3WoC", "rkRu9OJ6gWQC", "RlmniRlFsU0C", "RMd3GpIFxcUC", "ROHwG0JvP-sC", "RoT8nuzZY6MC", "RoYgPLWFeakC", "rRQ-ln-SYnMC", "RrTATTAw4MoC", "rtumzZ-I8gwC", "RW5arTsd59UC", "rXeG6ivbdIcC", "RXT-iRt5s9MC", "RZ_J2zSCsBMC", "s-IKDw_xNO4C", "S1aY04SCeCcC", "S3wSTfB65c8C", "S7wSLx75gsAC", "s8zIH7dnYCsC", "s9mLc43sk5IC", "sAtrYgbkH5gC", "SBBgOwoaYMEC", "sbNgTt34a7AC", "ScE8F_pMuAAC", "SD3G3dyx2ZoC", "sfC0p0Y9wY8C", "SGJFKqC6MEYC", "SH7sligOwkkC", "sh97YD9oH3MC", "shdMhBkwr9cC", "SimBCSprSRUC", "SJe2yL_R6JQC", "sL7ECNmsZQgC", "SLwk6C7rVhgC", "sph0j9N0q44C", "SRFbLHcl808C", "SscRZAljZY0C", "SUAwvChYnlwC", "T0u3mLgB7Q8C", "T9tq_wfD9XMC", "t9XWY5VKJSkC", "t_ZYYXZq4RgC", "tDi1X___kA8C", "Tk2tDV5PIjwC", "tKLvPAScbiAC", "tMW8EeBw1UEC", "tRHgqZAB8C0C", "ts0EsIYrVc4C", "TtJ0VT4AnMkC", "TUfQSR9GsvsC", "TYHPLULRAtAC", "TZjfyuUJ9yQC", "U-G59-3EhFQC", "U0CS9uC20SEC", "U8ExdUHjzkMC", "u9udoFdoMooC", "U_XsG9AG6fsC", "ubRi0dxb8EIC", "ucpxOA3LDWcC", "ueALvm1u_YYC", "UFJC7ZobicUC", "Ugih6Tuam_sC", "UHnXXp7M_2EC", "URoDbjKxx3oC", "UUODSqSSrZcC", "UvK1Slvkz3MC", "UVtcxvx5Zr8C", "UwH5IwTWH3EC", "V-kIKg7wCZYC", "V2Nlg8AWg2AC", "VB4eUip9HNcC", "vcxlHkUGf_wC", "VDY_jN9gbioC", "veGXULZK6UAC", "VF588BtEzCcC", "VGooIP6SZQEC", "vGtXrnsvqWYC", "ViiOObWG1ogC", "Vimx2y5WKpMC", "vJvTIBZTP-8C", "VKGbb1hg8JAC", "vm0qOJQsPIIC", "vRY8uYQUjDwC", "VSlxdKgEO9EC", "VWwH9SboEQcC", "vX0W3_MvZbMC", "VYMshHfserwC", "W6AjlOPmznUC", "W_5-RKxftbcC", "wBE-34_KfcAC", "Wc_U6-E3b6YC", "wDnbqY15oCQC", "WDvIpH2lB0QC", "WGqj5MIQ1KgC", "WGTzrCVoIuYC", "whdtOuA58e0C", "wIEr8jXYBt8C", "WpCOFC9f6H0C", "WQtn2bQAowcC", "WSny7lnNBH8C", "WULCfFrGFcwC", "WUuBNF1eSqwC", "WUyzf2cJzu8C", "WwmkMDW1GxIC", "wzPlQGKox1EC", "X7J1FvRrpPoC", "x8cFahLCb54C", "xAo1XyDVdHkC", "xc2N4ZOxtCYC", "XG5At3bBBWAC", "XIdrVDRgdpMC", "xIp209jwYQ0C", "xkVp8BIq7YkC", "XpgKk24qYW8C", "XQQPM0LOS8IC", "XRxGufxD-PMC", "xsv8s0uId1oC", "XuGYOTVOU8QC", "xuRUA92_Dc4C", "xWOhDP7JWzEC", "xxBV-d20EWQC", "xXFGHk2Z4TwC", "y11kvNfIDh4C", "Y7du4IGkNagC", "YAC7D2qEu4kC", "YAv9Gv9ZIbcC", "ybOLU8HOjA4C", "YcM_8N-LLyUC", "yEnodbQ-u3MC", "YilJnRfXKSAC", "yKKMZ0YNLR4C", "YkVmgI7YvxkC", "YqtQAsx1kGAC", "Yrehcfj2IVsC", "ys_e1Jaxh4UC", "Yso319xUOF8C", "yT_H75Q6vWoC", "yTzXasTZ0xgC", "YuLuAn3itnAC", "YwzHrfZ8ROgC", "yyaL8KoFHKIC", "Yz8Fnw0PlEQC", "z2-T2Cn6NOAC", "z2NgWQu08XsC", "z2z_6hLoPmgC", "Z6yEh5g4iIcC", "z_7igwZUWX0C", "ZCAOHdptArYC", "zDy5mkB49mEC", "zejLZgD7VDsC", "ZfjzX7M8zt0C", "ZHwey8h5Kj4C", "zjvMUVww2fQC", "ZjYP5o18qQUC", "ZlGXyYoJH2EC", "ZM7mhiLmkrsC", "ZOB2ex9u1tMC", "ZoIDSON3vxcC", "Zp_b7CdQnzwC", "ZrnT-eIoVp4C", "zuaXngLs7OIC", "ZUPMbdMUJ8EC", "zWyyiIzM6kkC", "zzB8tAKtJScC", "-HiTXBE53PkC", "-Mu5Id9OoiEC", "-qs-S7mcpAcC", "-SdPoFp5WY0C", "-tpxIqgSRPwC", "-ttE-GZ-90cC", "-zXAoJy9ZmcC", "0WqtKlK_Ha8C", "0zfUQBVN_6IC", "1AX4IDXvGsYC", "1CuMCEn7nRcC", "1cXYGgN_gTQC", "1rbQvvxaIeQC", "1VlYrwJaReUC", "1wJEiMiltVgC", "1zPAua_44-kC", "24teZxI_ULEC", "25CgnTRraSwC", "29SeWQJSpSQC", "29VG6KWyirsC", "2n38thsgRaMC", "2nDPxIRqakcC", "2NNOBx5MdJUC", "3BpO_k_I2w8C", "3KzJr5_U4egC", "3xiBJl96cucC", "41O5QMgL1ZwC", "42qZKhN6n2EC", "49iiP39EWLAC", "4_NxE3TPiJsC", "4d-24SQ8TYwC", "4NhF-0fO0rIC", "4w4d6DjmDXMC", "4ZwXRrnPRuYC", "56-7DPb-1WUC", "5GjvwsQaJpsC", "5IFW0O9roEMC", "5JT8pTHx6lwC", "5PzDzEHKMegC", "5SpZmBLVnTQC", "5sstxl1kHtkC", "6cj5S73lNhMC", "6dJg5lYQTpYC", "6GabZxz4odIC", "6uDSshoVhKUC", "6uSIwSV3jqMC", "73wZxrd6LLoC", "7fMyqj458A8C", "7j2C8YXT8CMC", "7RqcdCf6nMkC", "8CxEChno1_EC", "8iEJ4ygwLR8C", "8jm4f9g0IacC", "8nUpToKerf8C", "8UOpVTHrB_sC", "8Uzp-AZ5mcIC", "8WRQSiji_N4C", "95zvqUxnGRIC", "9aBRG7IsNLgC", "9kNyNN_EpjQC", "_6NkbJnEeJMC", "_b1S5Z3T8ccC", "_dihY3IN01UC", "_f9cU9A5l-0C", "_i1VOn2G0vkC", "_tYR8zDI-gkC", "Ac7i1Tx98cgC", "AdNBeO6z8E8C", "AhyJw6wBpG8C", "Aiomz_6zVOcC", "aiq1-13V_CMC", "amjgNfGpFi4C", "AMQbpv0qNT8C", "Ao-JdOzPM-AC", "AOSNQIKsvqQC", "aUv9po5f7w0C", "b0t3tbbLF1kC", "B2QEk37eIqUC", "b9IsR8SbBqYC", "BA25ObtVNzMC", "BD78Onv1vkUC", "BExlP6vJRXYC", "bfC_gngo50wC", "bg63hIxNC1kC", "BIdJFEjW_vUC", "BN5oIno4VqQC", "Bsk0YKq0fmcC", "BspCLoRq1vUC", "BWYADYaJt2gC", "by3ZJt2TI2YC", "BYXXhMklOo8C", "BZKG-F4EycgC", "C2v0oeOu5VYC", "cbc9ocX0LIsC", "cfi0mLqWXGoC", "ChFWJid77IIC", "Chz_b0lEGXQC", "ckb0paUhxBEC", "ckegWbaTOJ0C", "CLmNsqJmFoMC", "cLWxt9-9rAoC", "coQwNld57tUC", "cQeV7Mafr3IC", "DA8YSPVoU0UC", "DdDPBL0bd3sC", "dJT51seXtO0C", "DmL9nnVzj1EC", "dnwug8jhZigC", "DPXiC_ruDiQC", "DqXoN8liZoQC", "DU-yivYkS6gC", "dWvs3ZAJfF4C", "EbquUB1D6B8C", "Egiv9G3sUUQC", "EGNjKKGuFfsC", "ELDPuG_3HvsC", "ElJEc2z5fzgC", "eTuUboxIQTsC", "euwNw6sDqJgC", "eWbJqcDb9eEC", "f4LDwCA8B3EC", "f57ibdOL5-cC", "f7Ga6pUeGhUC", "F7Xks6zduAwC", "F8Pk9pECmZ0C", "FulGowIgz_oC", "fWaS4YKF92wC", "FWW3LmOvLAkC", "fZLrWkFOed0C", "FzRuc3t_4FQC", "g6oDwhSZW1wC", "G6UBLLF9V6AC", "G_Pl1zA-kLUC", "gHHPFw298TUC", "GhxE5kre3IsC", "gIPYys8Mj9wC", "GM-pxDjDhHEC", "GRTP8eYtZRgC", "gsqHkjUK-CwC", "gt7EQgH8-b4C", "gtIuj0DenGwC", "gUcjEDfJU9wC", "Gwql9KIPwp8C", "Gxqm3AgkOD0C", "Gy-744ZK_6sC", "H1f0MKOTfmYC", "h5dwL3eiZCwC", "HcleFaappJQC", "HefV2Vc5QDoC", "HFMSaLzKFvMC", "hg5N-qqzl8QC", "HG_L8PBfRTcC", "hHW6kcAmitwC", "HIB6jD68jtAC", "hknZxFWtWnQC", "hkyn43xcqBgC", "HNSJEqH4wd8C", "hVhnQbiuF5wC", "hW_OLqbJmjQC", "Hy8W-LdFAEMC", "I7gCj8kl_z0C", "i95ShDMoWl8C", "IeTtcc4I5YgC", "IihkFTDe7U8C", "iMQc67D_Bi8C", "iOygaKJOppsC", "IpTCI9wB72gC", "iXAdjo2g5tsC", "j-bpT-iZsBIC", "j2cH4RdSssgC", "J4ypQMCZMAsC", "jI8f_EJw-loC", "JIWqvxMwdXAC", "JVs8Thx45LIC", "jW3A-I9P7KMC", "jxJmj-TmYhQC", "k6692W5sYakC", "K6Ilv7YHDvsC", "kALuBPE9pgsC", "KfidaxTHKiwC", "KHfuJmOBmaAC", "Kj0tBzuMtXkC", "kJWbXg8Wa1sC", "KqWwCMZQutQC", "l-M62xrrDrkC", "LCBLklGJH6sC", "LcRxfTdcQsgC", "LDaTjZR3M5EC", "lJ5BOCoK4S0C", "lKMngSSGLYYC", "LUjoyS5SKvAC", "LvFLo5USiAMC", "lZ5Fljw24CwC", "LzVq41L36gMC", "M0PjsgRgee4C", "M2X-64ljtXMC", "m3hk7oHshCQC", "MdEgRyJHmvoC", "MeF_f1aEpgEC", "Mfw69Bu72BUC", "MMNOTofuzh0C", "mNIwAvSxIt0C", "mOhNJQRpjroC", "mQLDLn0GQfwC", "MYMr5_Ykyo0C", "N10hOWQXL-kC", "n4bolfkDxvIC", "n7nBUhbFMfMC", "NiM_ryIMcBoC", "nKqcauePjVUC", "nLP9mH1GqtgC", "NmEftUIRJ5YC", "NoKR0DIwgsAC", "NW-neYpd2BYC", "NzZt-kQ_4bkC", "o0pxKZa6arMC", "O4I-9BDUrt8C", "O9dN_wetT2cC", "oc0LoROKM0MC", "OfcnGQxF42wC", "Oi_TFcnNj28C", "OmCZYpe_-yQC", "OmLNidG2VjgC", "onBZhX0H9YkC", "OtabdzMdbboC", "OY-R3RCzA78C", "oz4SawhQX6wC", "p2fY2E64QY0C", "pIOcbS2Pl8kC", "pJCnEYUVvF4C", "pk2phND9ApkC", "pOw1hbQ78H0C", "PTifbRnUvDoC", "q0c-bJ2hHfQC", "q9azqAw4BUYC", "QfHKUpwFKw8C", "qG-9cwHOcCIC", "qiasCVJd65UC", "qltC9xIfSVUC", "qOmL3-S6mB0C", "qrobRyJWc1kC", "Qwr5QXEo2SgC", "qxN4qk2bm3IC", "R_uGxY9OLYEC", "rcmfi84AxKYC", "RCTBfxBqRPMC", "Rgm7rGu-D1IC", "rjP8UMPX2fwC", "rJQTgovAH7QC", "rKmH2DNXricC", "rlHWoqDYZHkC", "rMkF_Lq8fyoC", "ryiKO7sUa2cC", "S1ySM_WvJasC", "SI2M91foS7IC", "SM-_qeJkHIMC", "SRfg1yx_4F0C", "sTM1gVZ5bFMC", "t1UaNw7E5CgC", "tEvwF3BTNLQC", "Tf5MWT-MrzwC", "TI-Jpzfm-04C", "TifhggVk0KoC", "TjS6g05F31EC", "TkSmPbx4wAcC", "tm1CM85Ji_UC", "tOmDiAD6WfkC", "TRXR69wo-rYC", "tsCx4nvNxs8C", "u-Ng_zi1l3kC", "U2pksdgrZUwC", "u9KzoP-MO48C", "UB5Wbb-7BBcC", "ugNkM98iIAoC", "ui2nvsots4UC", "uJoGA_fHppsC", "UMAcfj2k4dYC", "unEwDjEo4XYC", "urbPib1FKzYC", "UYn5KM1ZRKYC", "V00KDCcEbfcC", "v75WO3nTdIMC", "v8ehi--t7EYC", "v9LbGourEWoC", "VbQzT0w3UvUC", "VgcJm1OQzHAC", "VGuRUjq7rHEC", "vK88ktao7pIC", "VLaWXj1jftkC", "VRVgvfUGzHIC", "VS7FlveweFMC", "vvn9_WPnK0gC", "VxVn-pqj488C", "W3M2HhmoJioC", "w5Gkiv9mdWsC", "w6LTXzLHjRYC", "WaoGQDv7PS8C", "wB1YBB9oLoIC", "wGkfEiBVkjwC", "WHCJ-c-xfQMC", "WMjEWv8mbIMC", "wSE4rVYlfA0C", "WSm5d0TfZNwC", "wx6S6kQcs3IC", "wZmrXnyxdpUC", "x0yCaQIFn6AC", "X60kQYBZEwgC", "xcFR-BgMomcC", "XCvxvh1qP9EC", "Xf3h3Z1YQtIC", "xIRuF5cfQ84C", "Xl-q92gWo8kC", "XMpQDN8o764C", "Y3D6_dU9wKcC", "y3Jfv2LJUR4C", "Y_r_YROlF44C", "yA7lxN7h4PAC", "YBSgcUJGkxkC", "YDLE5IsoYdIC", "YdtPYQHlJJIC", "yErnhyixDrMC", "yilnz_FH8EAC", "yjCQGpt39_AC", "Yoei3KyEszUC", "yqZWNBTokh0C", "ysLuHIf92jQC", "yUf0zj2tveoC", "yuF_MMw4IMAC", "z4ymKGCCWJcC", "Z5Wmz4oPcd4C", "z6xF3flz6cgC", "zAaz0BvKzAoC", "zB0MrDkAqHQC", "zcWxPi1-TDwC", "zDors2fHOrMC", "zhJxkMW1EtcC", "ZJ3UgCmHDScC", "ZqOLmYD-0l4C", "ZUwohLzvB7kC", "zyHkTOU7fPMC", "ZZNLaR6u7GYC"]'
});
define("dat/mahog/Library", "dat/mahog/BookInfo,dat/mahog/CONFIG,dat/mahog/params,dat/mahog/utils,text!dat/mahog/data/dominant_colors.json,text!dat/mahog/data/ids.json,third-party/js-signals.min".split(","), function (b, c, e, f, k, m) {
    var k = JSON.parse(k), m = JSON.parse(m), h = function () {
        function h(b, c, e) {
            for (; b < c; b++) e(o.fetch(b), b)
        }

        var o = this, t = [];
        new function () {
            function b(c, e) {
                function f(b) {
                    return function (c) {
                        h(b, b + c.length, function (b) {
                            b.status.data_received = true
                        });
                        for (var e = 0; e < c.length; e++) {
                            var f = o.fetch(e +
                                b);
                            f.data = c[e];
                            f.id = c[e].id;
                            f.status.data_received = true
                        }
                    }
                }

                this.contains = function (b) {
                    return b >= c && b < e
                };
                this.honor = function () {
                    var b = "/api/book_info?begin=" + c + "&end=" + e;
                    h(c, e, function (b) {
                        b.status.data_requested = true
                    });
                    $.getJSON(b, f(c))
                }
            }

            var c = 0, e = [];
            this.request = function (b, c) {
                h(b, c, function () {
                })
            };
            this.update = function () {
                if (c % 20 == 0) {
                    for (var f = 0; f < t.length; f++) {
                        var h, m;
                        m = f;
                        var k;
                        if (k = t[f]) if (k = t[f].status.data_request_queued) if (k = !t[f].status.data_requested) {
                            a:{
                                k = f;
                                for (var n = 0; n < e.length; n++) if (e[n].contains(k)) {
                                    k =
                                        true;
                                    break a
                                }
                                k = false
                            }
                            k = !k
                        }
                        k ? h == void 0 && (h = f) : f != 0 && h != void 0 && m != h && (e.push(new b(h, m)), h = void 0)
                    }
                    for (h != void 0 && m != h && e.push(new b(h, m)); e.length > 0;) e.shift().honor()
                }
                c++
            }
        };
        var u = new function () {
            function b(e) {
                var k = e * c.spritesheet_count, m = k + c.spritesheet_count;
                h(k, m, function (b) {
                    b.status.thumbnail_requested = true
                });
                var o = setInterval(function () {
                    var b = w[e];
                    if (b && b.image) b.image.src = "/spritesheets/" + e + ".jpg"
                }, Math.random() * 1E3 + 1E3);
                w[e] = THREE.ImageUtils.loadTexture("/spritesheets/" + e + ".jpg", THREE.UVMapping,
                    function () {
                        clearInterval(o);
                        v = true;
                        x !== null && clearTimeout(x);
                        x = setTimeout(function () {
                            v = false;
                            x = null
                        }, 1E3);
                        h(k, m, function (b, c) {
                            b.status.thumbnail_received = true;
                            f.push(c)
                        })
                    })
            }

            var f = [], k = [];
            this.request = function (b) {
                var e = Math.floor(b / c.spritesheet_count);
                w[e] == void 0 && k.indexOf(e) == -1 ? k.push(e) : w[e] != void 0 && f.push(b)
            };
            this.update = function () {
                for (var h = 0; h < e.applyThumbnailStaggerSize && f.length > 0; h++) {
                    var m = f.shift(), n = o.fetch(m);
                    if (!n.status.thumbnail_applied) {
                        var t = parseInt(m / c.spritesheet_count);
                        n.applyThumbnail(w[t],
                            m);
                        n.status.thumbnail_applied = true
                    }
                }
                for (h = 0; h < e.imageRequestStaggerSize && k.length > 0; h++) b(k.shift());
                return v
            }
        }, v = false, x = null, w = [];
        this.preloadSheets = function (b) {
            function e(f) {
                return function () {
                    h(f, f + c.spritesheet_count, function (b) {
                        b.status.thumbnail_received = true
                    });
                    w[f].__webglTexture = b.createTexture();
                    b.bindTexture(b.TEXTURE_2D, w[f].__webglTexture);
                    b.texImage2D(b.TEXTURE_2D, 0, b.RGBA, b.RGBA, b.UNSIGNED_BYTE, w[f].image);
                    w[f].__webglInit = true
                }
            }

            for (var f = Math.ceil(c.count / c.spritesheet_count), k = 0; k <
            f; k++) w[k] = THREE.ImageUtils.loadTexture("/spritesheets/" + k + ".jpg", THREE.UVMapping, e(k))
        };
        this.update = function () {
            u.update()
        };
        this.fetch = function (c) {
            var e = t[c];
            e == void 0 && (t[c] = new b, e = t[c]);
            return e
        };
        this.see = function (b, c) {
            B = 0;
            for (var e = b; e <= c; e++) u.request(e)
        };
        var B = 0;
        this.requestCover = function (b, c) {
            var e = o.fetch(b), h = f.fullsizeURL(e.id);
            e.status.fullsize_requested = true;
            var k = new Image;
            k.src = h;
            k.onload = function () {
                c(k)
            }
        };
        this.registerBookDisplayerAt = function (b, e, f, h) {
            f = b.getBookIndex();
            if (f != void 0) f =
                o.fetch(f), f.bookDisplayer = void 0, f.status.clearListeners(), f.status.thumbnail_applied = false, f.status.displayer_attached = false, f.applyThumbnail = function () {
            };
            f = o.fetch(e);
            f.bookDisplayer = b;
            f.applyThumbnail = h;
            f.id = m[e];
            f.data.color = k[e];
            f.status.displayer_attached = true;
            b = Math.floor(e / c.spritesheet_count);
            h(w[b], e);
            B++;
            if (w[b] != void 0) f.status.thumbnail_applied = true;
            return f
        }
    };
    h.ids = m;
    return h
});
define("dat/mahog/shaders/BookVertexPars", [], function () {
    return "uniform float near;\nuniform float far;\nuniform float isCover;\nuniform float thickness;\nuniform float tileSize;\nuniform float tileColumn;\nuniform float tileRow;\nuniform float morphInfluences[ 4 ];\nvarying vec3 vLightWeighting;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec2 vUv2;"
});
define("dat/mahog/shaders/BookFragmentPars", [], function () {
    return "uniform sampler2D texturemap;\nuniform sampler2D lightmap;\nuniform float isOpened;\nuniform vec4 tint;\nuniform float dim;\nvarying vec3 vLightWeighting;\nuniform vec3 fogColor;\nuniform float fogNear;\nuniform float fogFar;\nuniform float transparency;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nconst vec3 black = vec3(0.);\nconst vec3 white = vec3(1.);\nvarying vec2 vUv2;"
});
define("dat/mahog/shaders/MorphingBookShaderSource", ["dat/mahog/shaders/BookUniforms", "dat/mahog/shaders/BookVertexPars", "dat/mahog/shaders/BookFragmentPars"], function (b, c, e) {
    return {
        uniforms: b,
        vertexShader: [c, "void main() {\nvec3 transformedNormal = normalize( normalMatrix * normal );\nvNormal = transformedNormal;\nvUv = uv;\nif (isCover == 1.) {\nvUv2 = vec2(1. - vUv.s / .5, vUv.t / .7);\nif (vUv2.s > 1. || vUv2.s < 0. || vUv2.t > 1. || vUv2.s < 0.) vUv2 = vec2(.01,.5-position.y);\nvUv2 *= tileSize;\nvUv2 += vec2(tileColumn,tileRow)*tileSize;\n} else {\nvUv2 = vec2(vUv.s, vUv.t / .7);\nif (vUv2.s > 1. || vUv2.s < 0. || vUv2.t > 1. || vUv2.s < 0.) vUv2 = vec2(0.,0.);\n}\nvec3 morphedThin = vec3(0.);\nmorphedThin += ( mix(morphTarget0,morphTarget4,thickness) - position ) * morphInfluences[ 0 ];\nmorphedThin += ( mix(morphTarget1,morphTarget5,thickness) - position ) * morphInfluences[ 1 ];\nmorphedThin += ( mix(morphTarget2,morphTarget6,thickness) - position ) * morphInfluences[ 2 ];\nmorphedThin += ( mix(morphTarget3,morphTarget7,thickness) - position ) * morphInfluences[ 3 ];\nmorphedThin += position;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( morphedThin, 1.0 );\n}"].join("\n"),
        fragmentShader: [e, "void main() {\nvec4 texture = texture2D( texturemap, vUv2.st );\nvec3 lightMapMix = texture2D( lightmap, vUv.st ).rgg;\nfloat lightFinal = mix(lightMapMix.r,lightMapMix.g,1.-isOpened);\ngl_FragColor = vec4( vec3( lightFinal * texture ),1.0);\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat fogFactor = smoothstep( fogNear, fogFar, depth );\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n}"].join("\n")
    }
});
define("dat/mahog/MorphingBook", ["dat/mahog/params", "dat/mahog/shaders/MorphingBookShaderSource", "dat/utils/utils"], function (b, c, e) {
    var f = function (c, m, h) {
        function n() {
            var c = Math.max(Math.min(B, 1), 0) * 3;
            u.morphInfluences[0] = Math.max(0, Math.min(c + 1, -c + 1));
            u.morphInfluences[1] = Math.max(0, Math.min(c, -c + 2));
            u.morphInfluences[2] = Math.max(0, Math.min(c - 1, -c + 3));
            u.morphInfluences[3] = Math.max(0, Math.min(c - 2, -c + 4));
            L.onChangeOpenedOrThickness(B, w);
            C.onChangeOpenedOrThickness(B, w);
            E.geometry.computeBoundingBox();
            E.geometry.computeBoundingSphere();
            z.geometry.computeBoundingBox();
            z.geometry.computeBoundingSphere();
            N.rotation.y = e.map(B, 0, b.maxOpen, 0, Math.PI / 2);
            I = e.map(B, 0, b.maxOpen, 1, 2);
            N.scale.set(I * v, x, v)
        }

        function o() {
            u.mesh.children[0].scale.set(v, x, v);
            u.mesh.children[1].scale.set(v, x, v);
            N.scale.set(I * v, x, v)
        }

        function t() {
            C.setTile(A, y, D)
        }

        var u = this, h = h || {}, v = h.width || 35, x = h.height || 50, w = h.thickness || 0.5, B = h.opened || 0,
            A = h.tileSize || 1, y = h.tileColumn || 0, D = h.tileRow || 0;
        this.morphInfluences = [];
        var C = new f.Material(c,
            u, true), L = new f.Material(m, u, false);
        this.mesh = new THREE.Object3D;
        var z = new THREE.Mesh(f.COVER_GEOMETRY, C.material);
        this.mesh.addChild(z);
        var E = new THREE.Mesh(f.PAGES_GEOMETRY, L.material);
        this.mesh.addChild(E);
        var c = new THREE.PlaneGeometry(1, 1), m = new THREE.MeshBasicMaterial, N = new THREE.Mesh(c, m), I = 1;
        N.visible = false;
        this.mesh.addChild(N);
        this.show = function () {
            u.mesh.children[0].visible = true;
            u.mesh.children[1].visible = true
        };
        this.getTopLeft = function (b) {
            var c = Math.atan2(u.mesh.position.z, u.mesh.position.x),
                f = e.map(b, 0, 1, v / 2, v), h = e.map(b, 0, 1, 0, v / 2),
                b = u.mesh.position.x + Math.cos(c + Math.PI / 2) * f + Math.cos(c + Math.PI) * h,
                k = u.mesh.position.y + x / 2,
                c = u.mesh.position.z + Math.sin(c + Math.PI / 2) * f + Math.sin(c + Math.PI) * h;
            return new THREE.Vector3(b, k, c)
        };
        this.getTopRight = function (b) {
            var c = Math.atan2(u.mesh.position.z, u.mesh.position.x), f = e.map(b, 0, 1, v / 2, v),
                h = e.map(b, 0, 1, 0, v / 2), b = u.mesh.position.x + Math.cos(c - Math.PI / 2) * f - Math.cos(c) * h,
                k = u.mesh.position.y + x / 2, c = u.mesh.position.z + Math.sin(c - Math.PI / 2) * f - Math.sin(c) * h;
            return new THREE.Vector3(b,
                k, c)
        };
        this.getBottomMiddleRight = function (b) {
            var c = Math.atan2(u.mesh.position.z, u.mesh.position.x), f = e.map(b, 0, 1, v / 2, v),
                h = e.map(b, 0, 1, 0, v / 2),
                b = u.mesh.position.x + Math.cos(c - Math.PI) * f + Math.cos(c - Math.PI / 2) * h,
                k = u.mesh.position.y - x / 2 * 0.9,
                c = u.mesh.position.z + Math.sin(c - Math.PI) * f + Math.sin(c - Math.PI / 2) * h;
            return new THREE.Vector3(b, k, c)
        };
        this.getBottomRight = function (b) {
            var c = Math.atan2(u.mesh.position.z, u.mesh.position.x), f = e.map(b, 0, 1, v / 2, v),
                h = e.map(b, 0, 1, 0, v / 2), b = u.mesh.position.x + Math.cos(c - Math.PI / 2) *
                f - Math.cos(c) * h, k = u.mesh.position.y - x / 2,
                c = u.mesh.position.z + Math.sin(c - Math.PI / 2) * f - Math.sin(c) * h;
            return new THREE.Vector3(b, k, c)
        };
        this.getBottomLeft = function (b) {
            var c = Math.atan2(u.mesh.position.z, u.mesh.position.x), f = e.map(b, 0, 1, v / 2, v),
                h = e.map(b, 0, 1, 0, v / 2),
                b = u.mesh.position.x + Math.cos(c + Math.PI / 2) * f + Math.cos(c + Math.PI) * h,
                k = u.mesh.position.y - x / 2,
                c = u.mesh.position.z + Math.sin(c + Math.PI / 2) * f + Math.sin(c + Math.PI) * h;
            return new THREE.Vector3(b, k, c)
        };
        this.hide = function () {
            u.mesh.children[0].visible = false;
            u.mesh.children[1].visible = false
        };
        this.__defineGetter__("height", function () {
            return x
        });
        this.__defineSetter__("height", function (b) {
            x != b && (x = b, o())
        });
        this.__defineGetter__("width", function () {
            return v
        });
        this.__defineSetter__("width", function (b) {
            v != b && (v = b, o())
        });
        this.__defineGetter__("thickness", function () {
            return w
        });
        this.__defineSetter__("thickness", function (b) {
            w != b && (w = b, n())
        });
        this.__defineGetter__("opened", function () {
            return B
        });
        this.__defineSetter__("opened", function (b) {
            B != b && (B = b, n())
        });
        this.setCoverImage =
            function (b) {
                C.setImage(b)
            };
        this.setPagesImage = function (b) {
            L.setImage(b)
        };
        this.__defineGetter__("tileSize", function () {
            return A
        });
        this.__defineSetter__("tileSize", function (b) {
            A != b && (A = b, t())
        });
        this.__defineGetter__("tileRow", function () {
            return D
        });
        this.__defineSetter__("tileRow", function (b) {
            D != b && (D = b, t())
        });
        this.__defineGetter__("tileColumn", function () {
            return y
        });
        this.__defineSetter__("tileColumn", function (b) {
            y != b && (y = b, t())
        });
        n();
        o();
        t()
    };
    f.loadAssets = function (c) {
        function e(c) {
            f.PAGES_GEOMETRY = c;
            f.COVER_LIGHT_MAP =
                THREE.ImageUtils.loadTexture(b.MORPHING_COVER_LIGHT_MAP_SRC, THREE.UVMapping, h)
        }

        function h() {
            f.PAGES_LIGHT_MAP = THREE.ImageUtils.loadTexture(b.MORPHING_PAGES_LIGHT_MAP_SRC, THREE.UVMapping, n)
        }

        function n() {
            c && c()
        }

        var o = new THREE.JSONLoader;
        o.load({
            model: b.MORPHING_COVER_GEOMETRY_SRC, callback: function (c) {
                f.COVER_GEOMETRY = c;
                o.load({model: b.MORPHING_PAGES_GEOMETRY_SRC, callback: e})
            }
        })
    };
    f.Material = function (b, e, h) {
        var n = this;
        this.uniforms = THREE.UniformsUtils.clone(c.uniforms);
        this.uniforms.texturemap.texture =
            b;
        this.uniforms.lightmap.texture = h ? f.COVER_LIGHT_MAP : f.PAGES_LIGHT_MAP;
        this.uniforms.isCover.value = h;
        this.uniforms.morphInfluences.value = e.morphInfluences;
        this.material = new THREE.MeshShaderMaterial({
            uniforms: this.uniforms,
            vertexShader: c.vertexShader,
            fragmentShader: c.fragmentShader,
            morphTargets: true,
            lights: true
        });
        this.setImage = function (b) {
            n.uniforms.texturemap.texture.image = b;
            n.uniforms.texturemap.texture.needsUpdate = true
        };
        this.setTile = function (b, c, e) {
            n.uniforms.tileSize.value = b;
            n.uniforms.tileColumn.value =
                c;
            n.uniforms.tileRow.value = e
        };
        this.onChangeOpenedOrThickness = function (b, c) {
            n.uniforms.isOpened.value = b;
            n.uniforms.thickness.value = c
        }
    };
    return f
});
define("dat/mahog/shaders/StaticBookShaderSource", ["dat/mahog/shaders/BookUniforms", "dat/mahog/shaders/BookVertexPars", "dat/mahog/shaders/BookFragmentPars"], function (b, c, e) {
    return {
        uniforms: b,
        vertexShader: [c, "void main() {\nvec3 transformedNormal = normalize( normalMatrix * normal );\nvNormal = transformedNormal;\nvUv = uv;\nvUv2 = vec2(1. - vUv.s / .5, vUv.t / .7);\nif (vUv2.s > 1. || vUv2.s < 0. || vUv2.t > 1. || vUv2.s < 0.) vUv2 = vec2(.0001,.5-position.y);\nvUv2 *= tileSize;\nvUv2 += vec2(tileColumn,tileRow)*tileSize;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}"].join("\n"),
        fragmentShader: [e,
            "void main() {\nvec4 texture = texture2D( texturemap, vUv2.st );\nvec3 light = texture2D( lightmap, vUv.st ).rgb;\nif (vUv.s>0.5 && vUv.t > 0.7) { texture.rgb = white;\n} else { if (tint.a > 0.) texture.rgb *= mix(white, tint.rgb, tint.a);\nif (dim > 0.) texture.rgb = mix(texture.rgb, vec3(0), dim); }\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat fogFactor = smoothstep( fogNear, fogFar, depth );\ngl_FragColor = mix( vec4( texture.rgb * light.g , transparency), vec4( fogColor, 1.0 ), fogFactor );\n}"].join("\n")
    }
});
define("dat/mahog/StaticBook", ["dat/mahog/params", "dat/mahog/shaders/StaticBookShaderSource"], function (b, c) {
    var e = function (b, c) {
        function f() {
            u.mesh.scale.set(x * v, w * v, x * v)
        }

        function m() {
            D.setTile(B, A, y)
        }

        var c = c || {}, u = this, v = 1, x = c.width || 35, w = c.height || 50, B = c.tileSize || 1,
            A = c.tileColumn || 0, y = c.tileRow || 0, D = new e.Material(b, u);
        this.material = D.material;
        this.mesh = new THREE.Mesh(k, D.material);
        this.mesh.matrixAutoUpdate = false;
        this.mesh.rotationAutoUpdate = false;
        this.setTexture = function (b) {
            D.uniforms.texturemap.texture =
                b
        };
        this.setScale = function (b) {
            v = b;
            f()
        };
        var C = 0, L = 0, z = false, E = 0, N = 0, I = false, P;
        this.setTint = function (b, c, e, f) {
            L = f;
            L != C && (z = true);
            D.uniforms.tint.value.x = b;
            D.uniforms.tint.value.y = c;
            D.uniforms.tint.value.z = e
        };
        this.clearTint = function () {
            L = 0;
            L != C && (z = true)
        };
        this.setDim = function (b) {
            N = b;
            N != E && (I = true)
        };
        this.setTransparency = function (b) {
            D.uniforms.transparency.value = b
        };
        this.getTint = function () {
            return C
        };
        this.getDim = function () {
            return E
        };
        this.update = function () {
            if (z) P = L - C, P > 0.05 || P < -0.05 ? (C += P * 0.7, D.uniforms.tint.value.w =
                C) : (z = false, D.uniforms.tint.value.w = L);
            if (I) P = N - E, P > 0.05 || P < -0.05 ? (E += P * 0.7, D.uniforms.dim.value = E) : (I = false, D.uniforms.dim.value = N)
        };
        this.__defineGetter__("width", function () {
            return x
        });
        this.__defineSetter__("width", function (b) {
            x = b;
            f()
        });
        this.__defineGetter__("height", function () {
            return w
        });
        this.__defineSetter__("height", function (b) {
            w = b;
            f()
        });
        this.__defineGetter__("tileSize", function () {
            return B
        });
        this.__defineGetter__("tileColumn", function () {
            return A
        });
        this.__defineGetter__("tileRow", function () {
            return y
        });
        this.__defineSetter__("tileSize", function (b) {
            B = b;
            m()
        });
        this.__defineSetter__("tileColumn", function (b) {
            A = b;
            m()
        });
        this.__defineSetter__("tileRow", function (b) {
            y = b;
            m()
        });
        f();
        m()
    };
    e.loadAssets = function (c) {
        e.COVER_LIGHT_MAP = THREE.ImageUtils.loadTexture(b.STATIC_COVER_LIGHT_MAP_SRC, THREE.UVMapping, function () {
            c && c()
        })
    };
    e.Material = function (b) {
        var f = this;
        f.uniforms = THREE.UniformsUtils.clone(c.uniforms);
        f.uniforms.texturemap.texture = b;
        f.uniforms.lightmap.texture = e.COVER_LIGHT_MAP;
        this.material = new THREE.MeshShaderMaterial({
            uniforms: this.uniforms,
            vertexShader: c.vertexShader, fragmentShader: c.fragmentShader, lights: true
        });
        this.setTile = function (b, c, e) {
            f.uniforms.tileSize.value = b;
            f.uniforms.tileColumn.value = c;
            f.uniforms.tileRow.value = e
        }
    };
    var f = {
        version: 2,
        materials: [{DbgColor: 15658734, DbgIndex: 0, DbgName: "default"}],
        vertices: [0.496127, 0.491075, 0.007651, -0.488862, 0.491075, 0.007651, -0.492502, 0.495455, 0.010889, 0.498874, 0.495455, 0.012181, -0.492502, -0.495455, 0.010889, 0.498874, -0.495455, 0.012181, 0.496127, -0.490868, 0.007651, -0.488862, -0.490868, 0.007651,
            -0.492807, 0.491075, 0, -0.496212, 0.495455, 0, -0.496212, -0.495455, 0, -0.492807, -0.490868, 0, 0.496127, 0.491075, -0.007651, -0.488862, 0.491075, -0.007651, -0.492502, 0.495455, -0.010889, 0.498874, 0.495455, -0.012181, -0.492502, -0.495455, -0.010889, 0.498874, -0.495455, -0.012181, 0.496127, -0.495455, -0.007651, -0.488862, -0.490868, -0.007651, 0.496127, 0.491075, 0, 0.496127, -0.490868, 0],
        morphTargets: [],
        morphColors: [],
        normals: [],
        colors: [],
        uvs: [[3.71E-4, 8.8E-5, 0.494461, 8.8E-5, 0.494461, 0.7, 3.71E-4, 0.7, 0.843354, 0.52269, 0.850928, 0.692143,
            0.850928, 0.296902, 0.843354, 0.382325, 0.940324, 0.335176, 0.932983, 0.327617, 0.9126, 0.581246, 0.920026, 0.581356, 0.977676, 0.253133, 0.957194, 0.004995, 0.949768, 0.005105, 0.97014, 0.251508, 0.898214, 0.250497, 0.513762, 0.250497, 0.513762, 0.286871, 0.88588, 0.284575, 0.934129, 0.294073, 0.96164, 0.292278, 0.971297, 0.292278, 0.007529, 0.709909, 0.497969, 0.709908, 0.497969, 0.990674, 0.007529, 0.990674, 0.880522, 0.300495, 0.880522, 0.692143, 0.887948, 0.692143, 0.887948, 0.300495, 0.977492, 0.333381, 0.971365, 0.327569, 0.953572, 0.533439, 0.960122,
            0.544045, 0.940508, 0.254928, 0.922955, 0.042316, 0.916404, 0.052908, 0.932971, 0.253305, 0.898214, 0.214122, 0.513762, 0.214122, 0.924472, 0.294073, 0.907904, 0.883392, 0.909942, 0.866608, 0.874449, 0.866608, 0.873699, 0.883392, 0.846746, 0.866608, 0.848777, 0.883392, 0.812565, 0.883392, 0.811696, 0.866608, 0.701736, 0.711853, 0.673127, 0.711853, 0.673127, 0.988792, 0.701736, 0.988792, 0.657125, 0.988792, 0.657125, 0.711853, 0.628516, 0.711853, 0.628516, 0.988792, 0.936519, 0.883392, 0.972919, 0.883392, 0.974956, 0.866608, 0.937269, 0.866608, 0.744802,
            0.866608, 0.78233, 0.866608, 0.784248, 0.883392, 0.746839, 0.883392]],
        faces: [11, 3, 2, 4, 5, 0, 0, 1, 2, 3, 11, 5, 6, 0, 3, 0, 4, 5, 6, 7, 11, 1, 2, 3, 0, 0, 8, 9, 10, 11, 11, 7, 6, 5, 4, 0, 12, 13, 14, 15, 11, 9, 10, 4, 2, 0, 16, 17, 18, 19, 11, 8, 9, 2, 1, 0, 20, 41, 9, 8, 11, 10, 11, 7, 4, 0, 21, 22, 12, 15, 11, 15, 17, 16, 14, 0, 23, 24, 25, 26, 11, 17, 15, 12, 18, 0, 27, 28, 29, 30, 11, 19, 16, 17, 18, 0, 31, 32, 33, 34, 11, 13, 12, 15, 14, 0, 35, 36, 37, 38, 11, 9, 14, 16, 10, 0, 16, 39, 40, 17, 11, 8, 13, 14, 9, 0, 20, 35, 38, 41, 11, 10, 16, 19, 11, 0, 21, 32, 31, 22, 11, 20, 8, 1, 0, 0, 42, 43, 44, 45, 11, 6, 7, 11, 21, 0, 46, 47, 48, 49, 11, 20, 0, 6, 21,
            0, 50, 51, 52, 53, 11, 20, 21, 18, 12, 0, 54, 55, 56, 57, 11, 18, 21, 11, 19, 0, 58, 59, 60, 61, 11, 20, 12, 13, 8, 0, 62, 63, 64, 65],
        edges: []
    }, k = null, m = new THREE.JSONLoader;
    m.createModel({
        version: 2,
        materials: [{DbgColor: 15658734, DbgIndex: 0, DbgName: "default"}],
        vertices: [0.487209, 0.486099, 0.168254, -0.466534, 0.486099, 0.168254, -0.478581, 0.495455, 0.183348, 0.493336, 0.495455, 0.183348, -0.478581, -0.495455, 0.183348, 0.493336, -0.495455, 0.183348, 0.487209, -0.486099, 0.168254, -0.466534, -0.486099, 0.168254, -0.492807, 0.486099, 0, -0.501347, 0.495455,
            0, -0.501347, -0.495455, 0, -0.492807, -0.486099, 0, 0.487209, 0.486099, -0.168254, -0.466534, 0.486099, -0.168254, -0.478581, 0.495455, -0.183348, 0.493336, 0.495455, -0.183348, -0.478581, -0.495455, -0.183348, 0.493336, -0.495455, -0.183348, 0.487209, -0.495455, -0.168254, -0.466534, -0.486099, -0.168254, 0.456931, 0.486099, 0, 0.456931, -0.486099, 0],
        morphTargets: [],
        morphColors: [],
        normals: [],
        colors: [],
        uvs: [[3.71E-4, 8.8E-5, 0.494461, 8.8E-5, 0.494461, 0.7, 3.71E-4, 0.7, 0.843354, 0.52269, 0.850928, 0.692143, 0.850928, 0.296902, 0.843354, 0.382325,
            0.940324, 0.335176, 0.932983, 0.327617, 0.9126, 0.581246, 0.920026, 0.581356, 0.977676, 0.253133, 0.957194, 0.004995, 0.949768, 0.005105, 0.97014, 0.251508, 0.898214, 0.250497, 0.513762, 0.250497, 0.513762, 0.286871, 0.88588, 0.284575, 0.934129, 0.294073, 0.96164, 0.292278, 0.971297, 0.292278, 0.007529, 0.709909, 0.497969, 0.709908, 0.497969, 0.990674, 0.007529, 0.990674, 0.880522, 0.300495, 0.880522, 0.692143, 0.887948, 0.692143, 0.887948, 0.300495, 0.977492, 0.333381, 0.971365, 0.327569, 0.953572, 0.533439, 0.960122, 0.544045, 0.940508, 0.254928, 0.922955,
            0.042316, 0.916404, 0.052908, 0.932971, 0.253305, 0.898214, 0.214122, 0.513762, 0.214122, 0.924472, 0.294073, 0.907904, 0.883392, 0.909942, 0.866608, 0.874449, 0.866608, 0.873699, 0.883392, 0.846746, 0.866608, 0.848777, 0.883392, 0.812565, 0.883392, 0.811696, 0.866608, 0.701736, 0.711853, 0.673127, 0.711853, 0.673127, 0.988792, 0.701736, 0.988792, 0.657125, 0.988792, 0.657125, 0.711853, 0.628516, 0.711853, 0.628516, 0.988792, 0.936519, 0.883392, 0.972919, 0.883392, 0.974956, 0.866608, 0.937269, 0.866608, 0.744802, 0.866608, 0.78233, 0.866608, 0.784248,
            0.883392, 0.746839, 0.883392]],
        faces: [11, 3, 2, 4, 5, 0, 0, 1, 2, 3, 11, 5, 6, 0, 3, 0, 4, 5, 6, 7, 11, 1, 2, 3, 0, 0, 8, 9, 10, 11, 11, 7, 6, 5, 4, 0, 12, 13, 14, 15, 11, 9, 10, 4, 2, 0, 16, 17, 18, 19, 11, 8, 9, 2, 1, 0, 20, 41, 9, 8, 11, 10, 11, 7, 4, 0, 21, 22, 12, 15, 11, 15, 17, 16, 14, 0, 23, 24, 25, 26, 11, 17, 15, 12, 18, 0, 27, 28, 29, 30, 11, 19, 16, 17, 18, 0, 31, 32, 33, 34, 11, 13, 12, 15, 14, 0, 35, 36, 37, 38, 11, 9, 14, 16, 10, 0, 16, 39, 40, 17, 11, 8, 13, 14, 9, 0, 20, 35, 38, 41, 11, 10, 16, 19, 11, 0, 21, 32, 31, 22, 11, 20, 8, 1, 0, 0, 42, 43, 44, 45, 11, 6, 7, 11, 21, 0, 46, 47, 48, 49, 11, 20, 0, 6, 21, 0, 50, 51, 52, 53, 11, 20, 21, 18, 12, 0, 54,
            55, 56, 57, 11, 18, 21, 11, 19, 0, 58, 59, 60, 61, 11, 20, 12, 13, 8, 0, 62, 63, 64, 65],
        edges: []
    }, function (b) {
        m.createModel(f, function (c) {
            for (var e = 0; e < b.vertices.length; e++) c.vertices[e].position.x -= (c.vertices[e].position.x - b.vertices[e].position.x) * 0.3, c.vertices[e].position.y -= (c.vertices[e].position.y - b.vertices[e].position.y) * 0.3, c.vertices[e].position.z -= (c.vertices[e].position.z - b.vertices[e].position.z) * 0.3;
            k = c
        })
    });
    return e
});
define("dat/utils/Routine", [], function () {
    return function () {
        function b(c) {
            if (!(k || c >= e.length)) {
                var h;
                try {
                    e[c].execute(function () {
                        b(++c)
                    }, function () {
                        e[c].fatal ? typeof f == "function" && f() : b(++c)
                    })
                } catch (n) {
                    typeof f == "function" && f(n)
                }
            }
        }

        function c(b, c) {
            this.fatal = c;
            this.execute = function (c, e) {
                b.apply(this, [c, function () {
                    console.error("Failed to do " + b);
                    e()
                }])
            }
        }

        var e = [], f, k = false;
        this.clear = function () {
            e = []
        };
        this.wait = function (b, f) {
            e.push(new c(b, f || false))
        };
        this.run = function (c) {
            k = false;
            f = c;
            b(0)
        };
        this.cancel =
            function () {
                k = true
            }
    }
});
(function () {
    var b = typeof jQuery !== "undefined" && jQuery;
    define("jquery", [], function () {
        return b
    })
})();
define("dat/utils/showMessage", ["jquery"], function () {
    var b = document.createElement("div");
    b.setAttribute("id", "console");
    b.innerHTML = "Aww, snap!";
    document.body.appendChild(b);
    var c = $(b);
    c.hide();
    var e, f = false;
    return function (b) {
        c.html(b);
        if (!f) {
            clearTimeout(e);
            c.fadeIn();
            f = true;
            var b = window.innerHeight / 2 - c.height() / 2, m = window.innerWidth / 2 - c.width() / 2;
            c.css("top", b + "px");
            c.css("left", m + "px");
            e = setTimeout(function () {
                c.fadeOut();
                f = false
            }, 5E3)
        }
        $(window).trigger("resize")
    }
});
define("dat/utils/Canvas2DWrappedText", [], function () {
    return function (b, c, e, f, k, m) {
        for (var h = this, n = [], o = 0, t = 0, u, e = e.replace(/<br>/g, "\r"), e = e.replace(/<p>\w<\/p>/, ""), e = e.replace(/<\/p>/g, "\r\r"), e = e.replace(/<\/?[^>]+(>|$)/g, ""), e = e.replace("\r{3,}", "\r\r"), v = 0; v < e.length; v++) {
            var x = e[v];
            x == " " && (t = v);
            u = e.substring(o, v + 1);
            var w = b.measureText(u).width;
            if (x == "\r" || w > k) {
                var B = m !== void 0 && (n.length + 1) * f > m;
                x == " " || x == "\r" ? (n.push(e.substring(o, v) + (B ? "..." : "")), o = v + 1) : (n.push(e.substring(o, t) + (B ? "..." :
                    "")), o = t + 1);
                if (B) break
            }
        }
        B || n.push(u);
        this.numLines = function () {
            return n.length
        };
        this.draw = function () {
            b.font = c;
            for (var e = 0, k = 0; k < n.length; k++) e = h.textAlign == "center" ? -b.measureText(n[k]).width / 2 : 0, b.fillText(n[k], e, k * f)
        };
        this.getHeight = function () {
            return f * n.length
        }
    }
});
define("dat/mahog/makePages", "dat/mahog/params,dat/utils/Routine,dat/utils/utils,dat/utils/showMessage,dat/utils/Canvas2DWrappedText,dat/mahog/utils,dat/utils/urlArgs,three".split(","), function (b, c, e, f, k, m, h) {
    var n, o, t, u = false;
    return function (e, x, w) {
        u || (n = document.createElement("canvas"), t = n.getContext("2d"), u = true);
        var B = new c, A = new Image;
        B.wait(function (b, c) {
            A.crossOrigin = "";
            A.src = m.qrURL(e.id);
            A.onload = b;
            A.onerror = c
        });
        B.wait(function () {
            var c = b.pagesTextureWidth / x / b.pagesAspectRatio, f = b.pagesTextureWidth;
            n.height = c;
            o = n.width = f;
            t.fillStyle = "#fff";
            t.fillRect(0, 0, o, c);
            t.fillStyle = "#000";
            t.save();
            t.translate(o * 0.07, c * 3.53 / 4);
            t.scale(b.pagesScale, b.pagesScale);
            t.drawImage(A, -57.5, -57.5, 115, 115);
            t.restore();
            e.volumeInfo.description ? (f = h.installation == void 0 ? new k(t, "15px serif", e.volumeInfo.description, 20, 187 * b.pagesScale, 290 * b.pagesScale) : new k(t, "11.5px serif", e.volumeInfo.description, 18, 215 * b.pagesScale, 300 * b.pagesScale), t.save(), t.translate(o * 0.625, c * 0.45 - f.getHeight() / 2), t.scale(b.pagesScale, b.pagesScale),
                f.draw(), t.restore(), t.save(), t.translate(o * 0.625, c * 0.38 - f.getHeight() / 2), t.scale(b.pagesScale, b.pagesScale), t.textAlign = "left", t.font = "italic 16px serif", t.fillText("Synopsis", 0, 0)) : (t.save(), t.translate(o * 0.802, c * 0.5), t.scale(b.pagesScale, b.pagesScale), t.textAlign = "center", t.font = "italic 16px serif", t.fillText("No description available.", 0, 0));
            t.restore();
            t.fillStyle = "#000";
            var f = 0, m;
            e.volumeInfo.subtitle ? (m = new k(t, "20px serif", e.volumeInfo.title, 24, 175 * b.pagesScale), m.textAlign = "center", t.save(),
                t.translate(o * 0.21, c * 0.185), t.scale(b.pagesScale, b.pagesScale), m.draw(), t.restore(), f += m.getHeight() - 16 * b.pagesScale, m = new k(t, "16px serif", e.volumeInfo.subtitle, 21, 145 * b.pagesScale), m.textAlign = "center", t.save(), t.translate(o * 0.21, c * 0.24 + f), t.scale(b.pagesScale, b.pagesScale), m.draw(), t.restore(), f += m.getHeight()) : (m = new k(t, "20px serif", e.volumeInfo.title, 24, 145 * b.pagesScale), m.textAlign = "center", t.save(), t.translate(o * 0.21, c * 0.185), t.scale(b.pagesScale, b.pagesScale), m.draw(), t.restore(), m.numLines() ==
            1 && (f -= 17 * b.pagesScale));
            t.save();
            t.lineWidth = 0.5;
            t.translate(o * 0.21, c * 0.27 + f);
            t.scale(b.pagesScale, b.pagesScale);
            t.beginPath();
            t.moveTo(-80, 0);
            t.lineTo(80, 0);
            t.stroke();
            t.restore();
            m = new k(t, "16px serif", e.volumeInfo.authors.join(", "), 21, 145 * b.pagesScale);
            m.textAlign = "center";
            t.save();
            t.translate(o * 0.21, c * 0.34 + f);
            t.scale(b.pagesScale, b.pagesScale);
            m.draw();
            t.restore();
            t.save();
            t.fillStyle = "#666";
            t.translate(o * 0.21, c * 0.43);
            t.scale(b.pagesScale, b.pagesScale);
            w(n)
        });
        B.run(function () {
            f(b.errorString);
            require("dat/mahog/BookDisplayer").cancel()
        })
    }
});
define("dat/utils/Easing", [], function () {
    Easing = {
        Linear: {},
        Quadratic: {},
        Cubic: {},
        Quartic: {},
        Quintic: {},
        Sinusoidal: {},
        Exponential: {},
        Circular: {},
        Elastic: {},
        Back: {},
        Bounce: {}
    };
    Easing.Linear.EaseNone = function (b) {
        return b
    };
    Easing.Quadratic.EaseIn = function (b) {
        return b * b
    };
    Easing.Quadratic.EaseOut = function (b) {
        return -b * (b - 2)
    };
    Easing.Quadratic.EaseInOut = function (b) {
        return (b *= 2) < 1 ? 0.5 * b * b : -0.5 * (--b * (b - 2) - 1)
    };
    Easing.Cubic.EaseIn = function (b) {
        return b * b * b
    };
    Easing.Cubic.EaseOut = function (b) {
        return --b * b * b + 1
    };
    Easing.Cubic.EaseInOut =
        function (b) {
            return (b *= 2) < 1 ? 0.5 * b * b * b : 0.5 * ((b -= 2) * b * b + 2)
        };
    Easing.Quartic.EaseIn = function (b) {
        return b * b * b * b
    };
    Easing.Quartic.EaseOut = function (b) {
        return -(--b * b * b * b - 1)
    };
    Easing.Quartic.EaseInOut = function (b) {
        return (b *= 2) < 1 ? 0.5 * b * b * b * b : -0.5 * ((b -= 2) * b * b * b - 2)
    };
    Easing.Quintic.EaseIn = function (b) {
        return b * b * b * b * b
    };
    Easing.Quintic.EaseOut = function (b) {
        return (b -= 1) * b * b * b * b + 1
    };
    Easing.Quintic.EaseInOut = function (b) {
        return (b *= 2) < 1 ? 0.5 * b * b * b * b * b : 0.5 * ((b -= 2) * b * b * b * b + 2)
    };
    Easing.Sinusoidal.EaseIn = function (b) {
        return -Math.cos(b *
            Math.PI / 2) + 1
    };
    Easing.Sinusoidal.EaseOut = function (b) {
        return Math.sin(b * Math.PI / 2)
    };
    Easing.Sinusoidal.EaseInOut = function (b) {
        return -0.5 * (Math.cos(Math.PI * b) - 1)
    };
    Easing.Exponential.EaseIn = function (b) {
        return b == 0 ? 0 : Math.pow(2, 10 * (b - 1))
    };
    Easing.Exponential.EaseOut = function (b) {
        return b == 1 ? 1 : -Math.pow(2, -10 * b) + 1
    };
    Easing.Exponential.EaseInOut = function (b) {
        return b == 0 ? 0 : b == 1 ? 1 : (b *= 2) < 1 ? 0.5 * Math.pow(2, 10 * (b - 1)) : 0.5 * (-Math.pow(2, -10 * (b - 1)) + 2)
    };
    Easing.Circular.EaseIn = function (b) {
        return -(Math.sqrt(1 - b * b) - 1)
    };
    Easing.Circular.EaseOut =
        function (b) {
            return Math.sqrt(1 - --b * b)
        };
    Easing.Circular.EaseInOut = function (b) {
        return (b /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - b * b) - 1) : 0.5 * (Math.sqrt(1 - (b -= 2) * b) + 1)
    };
    Easing.Elastic.EaseIn = function (b) {
        var c, e = 0.1, f = 0.4;
        if (b == 0) return 0;
        if (b == 1) return 1;
        f || (f = 0.3);
        !e || e < 1 ? (e = 1, c = f / 4) : c = f / (2 * Math.PI) * Math.asin(1 / e);
        return -(e * Math.pow(2, 10 * (b -= 1)) * Math.sin((b - c) * 2 * Math.PI / f))
    };
    Easing.Elastic.EaseOut = function (b) {
        var c, e = 0.1, f = 0.4;
        if (b == 0) return 0;
        if (b == 1) return 1;
        f || (f = 0.3);
        !e || e < 1 ? (e = 1, c = f / 4) : c = f / (2 * Math.PI) * Math.asin(1 /
            e);
        return e * Math.pow(2, -10 * b) * Math.sin((b - c) * 2 * Math.PI / f) + 1
    };
    Easing.Elastic.EaseInOut = function (b) {
        var c, e = 0.1, f = 0.4;
        if (b == 0) return 0;
        if (b == 1) return 1;
        f || (f = 0.3);
        !e || e < 1 ? (e = 1, c = f / 4) : c = f / (2 * Math.PI) * Math.asin(1 / e);
        return (b *= 2) < 1 ? -0.5 * e * Math.pow(2, 10 * (b -= 1)) * Math.sin((b - c) * 2 * Math.PI / f) : e * Math.pow(2, -10 * (b -= 1)) * Math.sin((b - c) * 2 * Math.PI / f) * 0.5 + 1
    };
    Easing.Back.EaseIn = function (b) {
        return b * b * (2.70158 * b - 1.70158)
    };
    Easing.Back.EaseOut = function (b) {
        return (b -= 1) * b * (2.70158 * b + 1.70158) + 1
    };
    Easing.Back.EaseInOut = function (b) {
        return (b *=
            2) < 1 ? 0.5 * b * b * (3.5949095 * b - 2.5949095) : 0.5 * ((b -= 2) * b * (3.5949095 * b + 2.5949095) + 2)
    };
    Easing.Bounce.EaseIn = function (b) {
        return 1 - Easing.Bounce.EaseOut(1 - b)
    };
    Easing.Bounce.EaseOut = function (b) {
        return (b /= 1) < 1 / 2.75 ? 7.5625 * b * b : b < 2 / 2.75 ? 7.5625 * (b -= 1.5 / 2.75) * b + 0.75 : b < 2.5 / 2.75 ? 7.5625 * (b -= 2.25 / 2.75) * b + 0.9375 : 7.5625 * (b -= 2.625 / 2.75) * b + 0.984375
    };
    Easing.Bounce.EaseInOut = function (b) {
        return b < 0.5 ? Easing.Bounce.EaseIn(b * 2) * 0.5 : Easing.Bounce.EaseOut(b * 2 - 1) * 0.5 + 0.5
    };
    return Easing
});
(function () {
    var b = this, c = b._, e = {}, f = Array.prototype, k = Object.prototype, m = f.slice, h = f.unshift,
        n = k.toString, o = k.hasOwnProperty, t = f.forEach, u = f.map, v = f.reduce, x = f.reduceRight, w = f.filter,
        B = f.every, A = f.some, y = f.indexOf, D = f.lastIndexOf, k = Array.isArray, C = Object.keys,
        L = Function.prototype.bind, z = function (b) {
            return new H(b)
        };
    typeof module !== "undefined" && module.exports ? (module.exports = z, z._ = z) : b._ = z;
    z.VERSION = "1.1.6";
    var E = z.each = z.forEach = function (b, c, f) {
        if (b != null) if (t && b.forEach === t) b.forEach(c, f); else if (z.isNumber(b.length)) for (var h =
            0, k = b.length; h < k; h++) {
            if (h in b && c.call(f, b[h], h, b) === e) break
        } else for (h in b) if (o.call(b, h) && c.call(f, b[h], h, b) === e) break
    };
    z.map = function (b, c, e) {
        var f = [];
        if (b == null) return f;
        if (u && b.map === u) return b.map(c, e);
        E(b, function (b, h, k) {
            f[f.length] = c.call(e, b, h, k)
        });
        return f
    };
    z.reduce = z.foldl = z.inject = function (b, c, e, f) {
        var h = e !== void 0;
        b == null && (b = []);
        if (v && b.reduce === v) return f && (c = z.bind(c, f)), h ? b.reduce(c, e) : b.reduce(c);
        E(b, function (b, k, m) {
            !h && k === 0 ? (e = b, h = true) : e = c.call(f, e, b, k, m)
        });
        if (!h) throw new TypeError("Reduce of empty array with no initial value");
        return e
    };
    z.reduceRight = z.foldr = function (b, c, e, f) {
        b == null && (b = []);
        if (x && b.reduceRight === x) return f && (c = z.bind(c, f)), e !== void 0 ? b.reduceRight(c, e) : b.reduceRight(c);
        b = (z.isArray(b) ? b.slice() : z.toArray(b)).reverse();
        return z.reduce(b, c, e, f)
    };
    z.find = z.detect = function (b, c, e) {
        var f;
        N(b, function (b, h, k) {
            if (c.call(e, b, h, k)) return f = b, true
        });
        return f
    };
    z.filter = z.select = function (b, c, e) {
        var f = [];
        if (b == null) return f;
        if (w && b.filter === w) return b.filter(c, e);
        E(b, function (b, h, k) {
            c.call(e, b, h, k) && (f[f.length] = b)
        });
        return f
    };
    z.reject = function (b, c, e) {
        var f = [];
        if (b == null) return f;
        E(b, function (b, h, k) {
            c.call(e, b, h, k) || (f[f.length] = b)
        });
        return f
    };
    z.every = z.all = function (b, c, f) {
        var h = true;
        if (b == null) return h;
        if (B && b.every === B) return b.every(c, f);
        E(b, function (b, k, m) {
            if (!(h = h && c.call(f, b, k, m))) return e
        });
        return h
    };
    var N = z.some = z.any = function (b, c, f) {
        c || (c = z.identity);
        var h = false;
        if (b == null) return h;
        if (A && b.some === A) return b.some(c, f);
        E(b, function (b, k, m) {
            if (h = c.call(f, b, k, m)) return e
        });
        return h
    };
    z.include = z.contains = function (b,
                                       c) {
        var e = false;
        if (b == null) return e;
        if (y && b.indexOf === y) return b.indexOf(c) != -1;
        N(b, function (b) {
            if (e = b === c) return true
        });
        return e
    };
    z.invoke = function (b, c) {
        var e = m.call(arguments, 2);
        return z.map(b, function (b) {
            return (c.call ? c || b : b[c]).apply(b, e)
        })
    };
    z.pluck = function (b, c) {
        return z.map(b, function (b) {
            return b[c]
        })
    };
    z.max = function (b, c, e) {
        if (!c && z.isArray(b)) return Math.max.apply(Math, b);
        var f = {computed: -Infinity};
        E(b, function (b, h, k) {
            h = c ? c.call(e, b, h, k) : b;
            h >= f.computed && (f = {value: b, computed: h})
        });
        return f.value
    };
    z.min = function (b, c, e) {
        if (!c && z.isArray(b)) return Math.min.apply(Math, b);
        var f = {computed: Infinity};
        E(b, function (b, h, k) {
            h = c ? c.call(e, b, h, k) : b;
            h < f.computed && (f = {value: b, computed: h})
        });
        return f.value
    };
    z.sortBy = function (b, c, e) {
        return z.pluck(z.map(b, function (b, f, h) {
            return {value: b, criteria: c.call(e, b, f, h)}
        }).sort(function (b, c) {
            var e = b.criteria, f = c.criteria;
            return e < f ? -1 : e > f ? 1 : 0
        }), "value")
    };
    z.groupBy = function (b, c) {
        var e = {};
        E(b, function (b, f) {
            var h = c(b, f);
            (e[h] || (e[h] = [])).push(b)
        });
        return e
    };
    z.sortedIndex =
        function (b, c, e) {
            e || (e = z.identity);
            for (var f = 0, h = b.length; f < h;) {
                var k = f + h >> 1;
                e(b[k]) < e(c) ? f = k + 1 : h = k
            }
            return f
        };
    z.toArray = function (b) {
        return !b ? [] : b.toArray ? b.toArray() : z.isArray(b) ? b : z.isArguments(b) ? m.call(b) : z.values(b)
    };
    z.size = function (b) {
        return z.toArray(b).length
    };
    z.first = z.head = function (b, c, e) {
        return c != null && !e ? m.call(b, 0, c) : b[0]
    };
    z.rest = z.tail = function (b, c, e) {
        return m.call(b, c == null || e ? 1 : c)
    };
    z.last = function (b) {
        return b[b.length - 1]
    };
    z.compact = function (b) {
        return z.filter(b, function (b) {
            return !!b
        })
    };
    z.flatten = function (b) {
        return z.reduce(b, function (b, c) {
            if (z.isArray(c)) return b.concat(z.flatten(c));
            b[b.length] = c;
            return b
        }, [])
    };
    z.without = function (b) {
        var c = m.call(arguments, 1);
        return z.filter(b, function (b) {
            return !z.include(c, b)
        })
    };
    z.uniq = z.unique = function (b, c) {
        return z.reduce(b, function (b, e, f) {
            if (0 == f || (c === true ? z.last(b) != e : !z.include(b, e))) b[b.length] = e;
            return b
        }, [])
    };
    z.intersect = function (b) {
        var c = m.call(arguments, 1);
        return z.filter(z.uniq(b), function (b) {
            return z.every(c, function (c) {
                return z.indexOf(c,
                    b) >= 0
            })
        })
    };
    z.zip = function () {
        for (var b = m.call(arguments), c = z.max(z.pluck(b, "length")), e = Array(c), f = 0; f < c; f++) e[f] = z.pluck(b, "" + f);
        return e
    };
    z.indexOf = function (b, c, e) {
        if (b == null) return -1;
        var f;
        if (e) return e = z.sortedIndex(b, c), b[e] === c ? e : -1;
        if (y && b.indexOf === y) return b.indexOf(c);
        for (e = 0, f = b.length; e < f; e++) if (b[e] === c) return e;
        return -1
    };
    z.lastIndexOf = function (b, c) {
        if (b == null) return -1;
        if (D && b.lastIndexOf === D) return b.lastIndexOf(c);
        for (var e = b.length; e--;) if (b[e] === c) return e;
        return -1
    };
    z.range = function (b,
                        c, e) {
        arguments.length <= 1 && (c = b || 0, b = 0);
        for (var e = arguments[2] || 1, f = Math.max(Math.ceil((c - b) / e), 0), h = 0, k = Array(f); h < f;) k[h++] = b, b += e;
        return k
    };
    z.bind = function (b, c) {
        if (b.bind === L && L) return L.apply(b, m.call(arguments, 1));
        var e = m.call(arguments, 2);
        return function () {
            return b.apply(c, e.concat(m.call(arguments)))
        }
    };
    z.bindAll = function (b) {
        var c = m.call(arguments, 1);
        c.length == 0 && (c = z.functions(b));
        E(c, function (c) {
            b[c] = z.bind(b[c], b)
        });
        return b
    };
    z.memoize = function (b, c) {
        var e = {};
        c || (c = z.identity);
        return function () {
            var f =
                c.apply(this, arguments);
            return o.call(e, f) ? e[f] : e[f] = b.apply(this, arguments)
        }
    };
    z.delay = function (b, c) {
        var e = m.call(arguments, 2);
        return setTimeout(function () {
            return b.apply(b, e)
        }, c)
    };
    z.defer = function (b) {
        return z.delay.apply(z, [b, 1].concat(m.call(arguments, 1)))
    };
    var I = function (b, c, e) {
        var f;
        return function () {
            var h = this, k = arguments, m = function () {
                f = null;
                b.apply(h, k)
            };
            e && clearTimeout(f);
            if (e || !f) f = setTimeout(m, c)
        }
    };
    z.throttle = function (b, c) {
        return I(b, c, false)
    };
    z.debounce = function (b, c) {
        return I(b, c, true)
    };
    z.once = function (b) {
        var c = false, e;
        return function () {
            if (c) return e;
            c = true;
            return e = b.apply(this, arguments)
        }
    };
    z.wrap = function (b, c) {
        return function () {
            var e = [b].concat(m.call(arguments));
            return c.apply(this, e)
        }
    };
    z.compose = function () {
        var b = m.call(arguments);
        return function () {
            for (var c = m.call(arguments), e = b.length - 1; e >= 0; e--) c = [b[e].apply(this, c)];
            return c[0]
        }
    };
    z.after = function (b, c) {
        return function () {
            if (--b < 1) return c.apply(this, arguments)
        }
    };
    z.keys = C || function (b) {
        if (b !== Object(b)) throw new TypeError("Invalid object");
        var c = [], e;
        for (e in b) o.call(b, e) && (c[c.length] = e);
        return c
    };
    z.values = function (b) {
        return z.map(b, z.identity)
    };
    z.functions = z.methods = function (b) {
        return z.filter(z.keys(b), function (c) {
            return z.isFunction(b[c])
        }).sort()
    };
    z.extend = function (b) {
        E(m.call(arguments, 1), function (c) {
            for (var e in c) c[e] !== void 0 && (b[e] = c[e])
        });
        return b
    };
    z.defaults = function (b) {
        E(m.call(arguments, 1), function (c) {
            for (var e in c) b[e] == null && (b[e] = c[e])
        });
        return b
    };
    z.clone = function (b) {
        return z.isArray(b) ? b.slice() : z.extend({}, b)
    };
    z.tap = function (b, c) {
        c(b);
        return b
    };
    z.isEqual = function (b, c) {
        if (b === c) return true;
        var e = typeof b;
        if (e != typeof c) return false;
        if (b == c) return true;
        if (!b && c || b && !c) return false;
        if (b._chain) b = b._wrapped;
        if (c._chain) c = c._wrapped;
        if (b.isEqual) return b.isEqual(c);
        if (z.isDate(b) && z.isDate(c)) return b.getTime() === c.getTime();
        if (z.isNaN(b) && z.isNaN(c)) return false;
        if (z.isRegExp(b) && z.isRegExp(c)) return b.source === c.source && b.global === c.global && b.ignoreCase === c.ignoreCase && b.multiline === c.multiline;
        if (e !== "object") return false;
        if (b.length && b.length !== c.length) return false;
        var e = z.keys(b), f = z.keys(c);
        if (e.length != f.length) return false;
        for (var h in b) if (!(h in c) || !z.isEqual(b[h], c[h])) return false;
        return true
    };
    z.isEmpty = function (b) {
        if (z.isArray(b) || z.isString(b)) return b.length === 0;
        for (var c in b) if (o.call(b, c)) return false;
        return true
    };
    z.isElement = function (b) {
        return !!(b && b.nodeType == 1)
    };
    z.isArray = k || function (b) {
        return n.call(b) === "[object Array]"
    };
    z.isArguments = function (b) {
        return !(!b || !o.call(b, "callee"))
    };
    z.isFunction =
        function (b) {
            return !(!b || !b.constructor || !b.call || !b.apply)
        };
    z.isString = function (b) {
        return !!(b === "" || b && b.charCodeAt && b.substr)
    };
    z.isNumber = function (b) {
        return !!(b === 0 || b && b.toExponential && b.toFixed)
    };
    z.isNaN = function (b) {
        return b !== b
    };
    z.isBoolean = function (b) {
        return b === true || b === false
    };
    z.isDate = function (b) {
        return !(!b || !b.getTimezoneOffset || !b.setUTCFullYear)
    };
    z.isRegExp = function (b) {
        return !(!b || !b.test || !b.exec || !(b.ignoreCase || b.ignoreCase === false))
    };
    z.isNull = function (b) {
        return b === null
    };
    z.isUndefined =
        function (b) {
            return b === void 0
        };
    z.noConflict = function () {
        b._ = c;
        return this
    };
    z.identity = function (b) {
        return b
    };
    z.times = function (b, c, e) {
        for (var f = 0; f < b; f++) c.call(e, f)
    };
    z.mixin = function (b) {
        E(z.functions(b), function (c) {
            M(c, z[c] = b[c])
        })
    };
    var P = 0;
    z.uniqueId = function (b) {
        var c = P++;
        return b ? b + c : c
    };
    z.templateSettings = {evaluate: /<%([\s\S]+?)%>/g, interpolate: /<%=([\s\S]+?)%>/g};
    z.template = function (b, c) {
        var e = z.templateSettings,
            e = "var __p=[],print=function(){__p.push.apply(__p,arguments);};with(obj||{}){__p.push('" +
                b.replace(/\\/g, "\\\\").replace(/'/g, "\\'").replace(e.interpolate, function (b, c) {
                    return "'," + c.replace(/\\'/g, "'") + ",'"
                }).replace(e.evaluate || null, function (b, c) {
                    return "');" + c.replace(/\\'/g, "'").replace(/[\r\n\t]/g, " ") + "__p.push('"
                }).replace(/\r/g, "\\r").replace(/\n/g, "\\n").replace(/\t/g, "\\t") + "');}return __p.join('');",
            e = new Function("obj", e);
        return c ? e(c) : e
    };
    var H = function (b) {
        this._wrapped = b
    };
    z.prototype = H.prototype;
    var W = function (b, c) {
        return c ? z(b).chain() : b
    }, M = function (b, c) {
        H.prototype[b] = function () {
            var b =
                m.call(arguments);
            h.call(b, this._wrapped);
            return W(c.apply(z, b), this._chain)
        }
    };
    z.mixin(z);
    E("pop,push,reverse,shift,sort,splice,unshift".split(","), function (b) {
        var c = f[b];
        H.prototype[b] = function () {
            c.apply(this._wrapped, arguments);
            return W(this._wrapped, this._chain)
        }
    });
    E(["concat", "join", "slice"], function (b) {
        var c = f[b];
        H.prototype[b] = function () {
            return W(c.apply(this._wrapped, arguments), this._chain)
        }
    });
    H.prototype.chain = function () {
        this._chain = true;
        return this
    };
    H.prototype.value = function () {
        return this._wrapped
    }
})();
define("underscore", function () {
});
define("dat/mahog/animate", ["underscore"], function () {
    function b(m, h) {
        function n(b) {
            var e = new c(m, b, o);
            _.each(b.to, function (b, c) {
                if (!_.isUndefined(u[c])) u[c].__markedForDeath = true;
                u[c] = e
            });
            k.push(e)
        }

        function o(b) {
            _.each(u, function (c, e) {
                c == b && delete u[e]
            })
        }

        var t, u = {}, v;
        v = _.isString(h) ? h : b.DEFAULT_NAMESPACE;
        t = function (c) {
            if (_.isArray(c)) {
                if (f(m, c, n), n(c[0]), k.length == 0) b.ondisturb()
            } else if (!_.isUndefined(c) && (n(e(m, c)), k.length == 0)) b.ondisturb();
            t.destinationChange()
        };
        t.isAnimating = function (b) {
            return b in
                u
        };
        h !== false && (m[v] = t);
        t.clear = function () {
            var b = arguments;
            b.length == 0 && (b = _.keys(u));
            _.each(b, function (b) {
                if (!_.isUndefined(u[b])) u[b].__markedForDeath = true
            })
        };
        t.destinationChange = function () {
        };
        t.dest = function (b) {
            return _.isUndefined(u[b]) ? m[b] : u[b].__params.to[b]
        };
        if (h === false) return t
    }

    function c(b, c, e) {
        function f(e, k, n) {
            B && c.onUpdate(e, k, n) === false || _.each(e, function (c, e) {
                b[e] = c
            })
        }

        this.__params = c;
        var k = this, u = c.at + c.duration, v, x = _.isFunction(c.onBegin), w = _.isFunction(c.onComplete),
            B = _.isFunction(c.onUpdate),
            A = _.isFunction(c.curve);
        this.update = function (b) {
            if (k.__markedForDeath) return e(k), false;
            if (b >= u) {
                if (w) c.onComplete();
                f(c.to, 1, 1);
                e(k);
                return false
            }
            if (b < c.at) return v = b, true;
            if (x && v < c.at) c.onBegin();
            var m = 0 + 1 * ((b - c.at) / (u - c.at)), B = m;
            A && (B = c.curve(m));
            var L = {};
            _.each(c.to, function (b, e) {
                L[e] = c.from[e] + (b - c.from[e]) * ((B - 0) / 1)
            });
            f(L, m, B);
            v = b;
            return true
        }
    }

    function e(b, c) {
        if (_.isUndefined(c.at)) c.at = Date.now();
        if (_.isUndefined(c.from)) c.from = {};
        var e = {};
        _.each(c.to, function (c, f) {
            e[f] = b[f]
        });
        c.from = _.extend(e,
            c.from);
        return c
    }

    function f(b, c, f) {
        _.each(_.range(c.length - 1), function (k) {
            c[k].onComplete = _.wrap(c[k].onComplete, function (t) {
                c[k + 1] = e(b, c[k + 1]);
                f(c[k + 1]);
                _.isFunction(t) && t()
            })
        });
        c[0] = e(b, c[0]);
        _.each(_.range(1, c.length), function (b) {
            if (_.isUndefined(c[b].at)) c[b].at = c[b - 1].at + c[b - 1].duration
        })
    }

    var k = [];
    b.DEFAULT_NAMESPACE = "animate";
    b.ondisturb = function () {
    };
    b.update = function (b) {
        if (k.length === 0) return false;
        _.isUndefined(b) && (b = Date.now());
        var c = [];
        _.each(k, function (e, f) {
            e.update(b) === false && c.push(f -
                c.length)
        });
        _.each(c, function (b) {
            k.splice(b, 1)
        });
        return k.length > 0
    };
    return b
});
define("dat/mahog/BookDisplayer", "dat/mahog/params,dat/mahog/StaticBook,dat/mahog/CONFIG,dat/mahog/makePages,dat/utils/Easing,dat/utils/utils,dat/mahog/animate,dat/utils/showMessage,three".split(","), function (b, c, e, f, k, m, h, n) {
    var o = function (h, u, v) {
        function x(c, f) {
            if (!y) {
                L = c;
                if (c != void 0 && f != void 0) {
                    var h = e.spritesheet_count, k = f % h, h = Math.sqrt(h), m = Math.floor(k / h);
                    H.tileSize = 1 / h + b.tileSizeCorrect;
                    H.tileRow = m;
                    H.tileColumn = k % h;
                    H.clearTint()
                } else H.tileSize = 1, H.tileRow = 0, H.tileColumn = 0;
                H.setTexture(c ||
                    o.DEFAULT_TEXTURE)
            }
        }

        function w(c) {
            if (o.active == A) v.opened = 0, C = false, H.mesh.visible = false, v.show(), v.mesh.position.copy(A.mesh.position), v.mesh.rotation.copy(A.mesh.rotation), o.loading = false, v.animate({
                from: {cover: 0},
                to: {cover: 1},
                duration: b.bookOpenTime,
                onUpdate: B(v.mesh, true),
                onComplete: function () {
                    A.comingOut = false;
                    c && c()
                },
                onBegin: function () {
                    A.comingOut = true
                }
            })
        }

        function B(c, e) {
            var f = u.position.distanceTo(u.target.position), f = b.openDistance / f, h;
            h = e ? new THREE.Vector3(m.lerp(u.position.x, u.target.position.x,
                f), m.lerp(u.position.y, u.target.position.y, f), m.lerp(u.position.z, u.target.position.z, f)) : new THREE.Vector3(v.mesh.position.x, v.mesh.position.y, v.mesh.position.z);
            var f = new THREE.Matrix4, n = new THREE.Vector3;
            f.lookAt(h, u.position, u.up);
            n.setRotationFromMatrix(f);
            var o = m.dist(A.restPosition.x, A.restPosition.z, 0, 0), t = m.dist(h.x, h.z, 0, 0);
            A.targetAngle = Math.atan2(h.x, h.z);
            A.startAngle = Math.atan2(A.restPosition.x, A.restPosition.z);
            f = A.targetAngle - A.startAngle;
            for (n = m.sign(f); Math.abs(f) > Math.PI;) A.targetAngle +=
                -n * Math.PI * 2, f = A.targetAngle - A.startAngle;
            return openOnUpdate = function (f, n) {
                A.fullyOut = e && n == 1;
                v.opened = 0;
                var u;
                e ? (n = k.Exponential.EaseOut(n), u = k.Exponential.EaseOut(n)) : (u = 1 - n, n = k.Exponential.EaseIn(u), u = k.Exponential.EaseIn(u));
                var w = m.lerp(A.startAngle, A.targetAngle, n), x = m.lerp(o, t, n);
                c.position.x = Math.sin(w) * x;
                c.position.y = m.lerp(A.restPosition.y, h.y, k.Cubic.EaseIn(n));
                c.position.z = Math.cos(w) * x;
                c.rotation.y = m.lerp(A.startAngle + b.bookTwist - Math.PI / 2, A.targetAngle, u);
                c.updateMatrix()
            }
        }

        var A = this,
            y = false, D = false, C = false, L, z, E, N, I, P, H = this.staticBook = new c(o.DEFAULT_TEXTURE),
            W = H.width, M = H.height, J = W / M;
        this.mesh = H.mesh;
        this.mesh.bookDisplayer = this;
        this.restPosition = new THREE.Vector3;
        this.restRotation = new THREE.Vector3;
        this.getWidth = function () {
            return W
        };
        this.getHeight = function () {
            return M
        };
        var Q = new function () {
            this.on_displayer_attached = function () {
                b.TINT_DEBUG && H.setTint(1, 1, 1)
            };
            this.on_data_request_queued = function () {
                b.TINT_DEBUG && H.setTint(1, 0, 0)
            };
            this.on_data_requested = function () {
                b.TINT_DEBUG &&
                H.setTint(0.6, 1, 0)
            };
            this.on_data_received = function () {
                b.TINT_DEBUG && H.setTint(1, 1, 0)
            };
            this.on_thumbnail_requested = function () {
                b.TINT_DEBUG && H.setTint(0, 0, 0)
            };
            this.on_thumbnail_received = function () {
                b.TINT_DEBUG && H.setTint(0, 1, 0)
            };
            this.on_thumbnail_created = function () {
                b.TINT_DEBUG && H.setTint(0, 1, 0.5)
            };
            this.on_thumbnail_applied = function () {
                b.TINT_DEBUG && H.setTint(0, 1, 1)
            };
            this.on_fullsize_requested = function () {
            };
            this.on_fullsize_received = function () {
            }
        };
        this.setBookIndex = function (b) {
            if (I == b) return false;
            P = h.library.registerBookDisplayerAt(A,
                b, Q, x);
            I = b;
            var c = P.data.color;
            L == void 0 && H.setTint(c[0] / 255, c[1] / 255, c[2] / 255, 1);
            this.genre = h.getGenre(b);
            A.onGenreChange();
            return true
        };
        this.getBookIndex = function () {
            return I
        };
        this.getBookID = function () {
            return P.id
        };
        this.highlight = function () {
            H.setTint(1, 1, 0)
        };
        this.unhighlight = function () {
            H.clearTint()
        };
        this.onGenreChange = function () {
            A.genre != h.getCurrentGenre() ? H.setDim(0.66) : H.setDim(0)
        };
        this.update = function () {
            if (C || D) {
                E = Math.sin((Date.now() - z) / 200);
                var b;
                b = N > 0 ? E < 0 : E > 0;
                !D || D && !b ? b = Math.abs(E) * 15 : (b =
                    0, D = false);
                A.mesh.position.y = b + A.restPosition.y;
                A.mesh.updateMatrix()
            }
            P.status.thumbnail_requested && !P.status.thumbnail_received ? (b = (Math.sin((Date.now() - I * 40) / 140) + 1) / 2 + 0.5, H.setTransparency(b)) : H.setTransparency(1);
            H.update()
        };
        this.open = function (c, e) {
            A.comingOut = false;
            z = Date.now();
            C = true;
            v.hide();
            o.loading = true;
            o.active = A;
            v.mesh.position.x = H.mesh.position.x;
            v.mesh.position.y = H.mesh.position.y;
            v.mesh.position.z = H.mesh.position.z;
            v.mesh.rotation.x = H.mesh.rotation.x;
            v.mesh.rotation.y = H.mesh.rotation.y;
            v.mesh.rotation.z = H.mesh.rotation.z;
            var k = 0, m = function () {
                k++;
                k == 2 && (y = true, w(c))
            };
            h.library.requestCover(I, function (b) {
                o.active == A && v.setCoverImage(b);
                m()
            }, function () {
                n(b.errorString);
                o.cancel()
            });
            // $.ajax("https://www.googleapis.com/books/v1/volumes/" + P.id, {
            //     dataType: "jsonp", success: function (c) {
            //         c.volumeInfo ? (e.call(this, c), f(c, J, function (b) {
            //             v.setPagesImage(b);
            //             m()
            //         }, function () {
            //             n(b.errorString);
            //             o.cancel()
            //         })) : (n(c.error.message), o.cancel())
            //     }
            // })
            c = {
                volumeInfo: '-Ac81W-ZQDEC',
                name: '-Ac81W-ZQDEC'
            }
            e.call(this, c);
            f(c, J, function (b) {
                v.setPagesImage(b);
                m()
            }, function () {
                n(b.errorString);
                o.cancel()
            })
        };
        this.cancel = function () {
            C = false;
            D = true;
            N = E
        };
        this.close = function () {
            v.animate.clear();
            A.closing = true;
            H.mesh.visible = true;
            v.animate({
                from: {close: 0},
                to: {close: 1},
                duration: b.bookCloseTime,
                onUpdate: B(H.mesh, false),
                onComplete: function () {
                    A.closing = false
                }
            });
            y = false;
            v.hide();
            v.opened = 0
        }
    };
    o.active = null;
    o.cancel = function () {
        o.active != null && ((o.active.fullyOut || o.active.comingOut) && o.active.close(), o.active.cancel());
        o.active = null;
        o.loadingID = "";
        o.loading = false
    };
    o.DEFAULT_TEXTURE = THREE.ImageUtils.loadTexture("textures/blue.jpg");
    return o
});
define("dat/mahog/SpiralShelf", ["dat/mahog/params", "dat/mahog/utils", "dat/utils/urlArgs"], function (b, c, e) {
    return function (f, k, m, h) {
        var n = this, o = new THREE.Geometry, t, u = function (b) {
            for (var c = 1; c < b;) c <<= 1;
            return c
        }, v = THREE.ImageUtils.loadTexture(b.SHELF_TEXTURE, new THREE.UVMapping, function () {
            var b = document.createElement("canvas");
            b.width = u(v.image.width);
            b.height = u(v.image.height);
            b.getContext("2d").drawImage(v.image, 0, 0, v.image.width, v.image.height, 0, 0, b.width, b.height);
            v.image = b
        });
        this.mesh = {};
        if (h) for (var x in h) b[x] =
            h[x];
        (function () {
            if (e.installation === "1" || e.installation_debug === "1") b.orbits *= 3;
            t = new THREE.MeshPhongMaterial({map: v, shading: THREE.SmoothShading});
            for (var f = 0, h = b.orbits / 2, k = Math.PI * 2 / b.shelfResolution, m = -b.orbits / 2; m <= h; m += k) {
                var u = b.spiralRadius - b.shelfDepth / 2, x = Math.cos(m) * u,
                    L = c.orbitToY(m) + b.shelfThickness / 2, z = Math.sin(m) * u,
                    u = b.spiralRadius + b.shelfDepth / 2, E = Math.cos(m) * u,
                    N = c.orbitToY(m) + b.shelfThickness / 2, I = Math.sin(m) * u,
                    u = b.spiralRadius + b.shelfDepth / 2, P = Math.cos(m) * u, H = c.orbitToY(m) - b.shelfThickness /
                    2, W = Math.sin(m) * u, u = b.spiralRadius - b.shelfDepth / 2, M = Math.cos(m) * u,
                    J = c.orbitToY(m) - b.shelfThickness / 2;
                u *= Math.sin(m);
                x = new THREE.Vector3(x, L, z);
                E = new THREE.Vector3(E, N, I);
                P = new THREE.Vector3(P, H, W);
                M = new THREE.Vector3(M, J, u);
                o.vertices.push(new THREE.Vertex(x));
                o.vertices.push(new THREE.Vertex(E));
                o.vertices.push(new THREE.Vertex(P));
                o.vertices.push(new THREE.Vertex(M));
                var Q = o.vertices.length, J = f % b.topTextureSpan / b.topTextureSpan, H = J + 1 / b.topTextureSpan,
                    u = f % b.sideTextureSpan / b.sideTextureSpan, N = u +
                    1 / b.sideTextureSpan;
                if (Q > 7) {
                    var x = Q - 4, E = Q - 3, P = Q - 2, M = Q - 1,
                        I = o.vertices[x].position.clone().normalize().negate(),
                        O = o.vertices[E].position.clone().normalize(), Y = o.vertices[P].position.clone().normalize(),
                        L = o.vertices[M].position.clone().normalize().negate(), z = Q - 8, V = Q - 7, W = Q - 6;
                    Q -= 5;
                    var Z = o.vertices[z].position.clone().normalize().negate(),
                        K = o.vertices[V].position.clone().normalize(), X = o.vertices[W].position.clone().normalize(),
                        S = o.vertices[Q].position.clone().normalize().negate();
                    b.outsideFace && (o.faces.push(new THREE.Face4(V,
                        E, P, W, [K, O, Y, X])), o.faceVertexUvs[0].push([new THREE.UV(0, u), new THREE.UV(0, N), new THREE.UV(1, N), new THREE.UV(1, u)]));
                    O = new THREE.Vector3(0, 1, 0);
                    b.topFace && (o.faces.push(new THREE.Face4(z, x, E, V, [O, O, O, O])), o.faceVertexUvs[0].push([new THREE.UV(1, J), new THREE.UV(1, H), new THREE.UV(0, H), new THREE.UV(0, J)]));
                    b.insideFace && (o.faces.push(new THREE.Face4(Q, M, x, z, [S, L, I, Z])), o.faceVertexUvs[0].push([new THREE.UV(0, u), new THREE.UV(0, N), new THREE.UV(1, N), new THREE.UV(1, u)]));
                    x = new THREE.Vector3(0, -1, 0);
                    b.bottomFace &&
                    (o.faces.push(new THREE.Face4(W, P, M, Q, [x, x, x, x])), o.faceVertexUvs[0].push([new THREE.UV(0, J), new THREE.UV(0, H), new THREE.UV(1, H), new THREE.UV(1, J)]))
                }
                f++
            }
            n.mesh = new THREE.Mesh(o, t)
        })()
    }
});
define("text!dat/mahog/pre.html", function () {
    return "<h6>You are currently looking:</h6>"
});
define("text!dat/mahog/post.html", function () {
    return '<a href="#">Browse Subjects</a>'
});
define("dat/mahog/DomLabelManager", "dat/mahog/params,text!dat/mahog/pre.html,text!dat/mahog/post.html,dat/utils/urlArgs,underscore,jquery".split(","), function (b, c, e, f) {
    return function (c, e, h) {
        function n() {
            var c = e.getCurrentGenre();
            if (c !== B) {
                var f = _.indexOf(w, c);
                v.find("li");
                var h = -(f * 50) - 60, k = 350, n = f - A, o = Math.abs(n);
                if (o >= w.length - 1) h = -(A * 50) - 60, n < 0 ? h -= 50 : h += 50, _.isNull(C) || clearTimeout(C), C = setTimeout(function () {
                    v.css({
                        "-webkit-transition": "all 0ms cubic-bezier(0.785, 0.135, 0.150, 0.860)",
                        "-moz-transition": "all 0ms cubic-bezier(0.785, 0.135, 0.150, 0.860)",
                        "-ms-transition": "all 0ms cubic-bezier(0.785, 0.135, 0.150, 0.860)",
                        "-o-transition": "all 0ms cubic-bezier(0.785, 0.135, 0.150, 0.860)",
                        transition: "all 0ms cubic-bezier(0.785, 0.135, 0.150, 0.860)",
                        marginTop: -(f * 50) - 60
                    });
                    C = null
                }, k); else if (o > 3) k = b.cameraPositionDriftLength;
                v.css({
                    "-webkit-transition": "all " + k + "ms cubic-bezier(0.785, 0.135, 0.150, 0.860)",
                    "-moz-transition": "all " + k + "ms cubic-bezier(0.785, 0.135, 0.150, 0.860)",
                    "-ms-transition": "all " + k + "ms cubic-bezier(0.785, 0.135, 0.150, 0.860)",
                    "-o-transition": "all " + k + "ms cubic-bezier(0.785, 0.135, 0.150, 0.860)",
                    transition: "all " + k + "ms cubic-bezier(0.785, 0.135, 0.150, 0.860)",
                    marginTop: h
                }).children("li").removeClass("active").eq(f + 1).addClass("active");
                B = c;
                A = f
            }
        }

        var o = this, t = $('<div id="label-manager" style="display: none; top: -250px;" />').appendTo("#content"),
            u = $('<div id="active-genre-element"/>').appendTo(t), v, x, w = _.pluck(c, "name"), B = "Travel", A = 0,
            y = 0, D = null, C = null;
        if (f.installation != void 0 || f.installation_debug != void 0) y = $(window).height() /
            2;
        this.hidden = true;
        this.update = function () {
            n()
        };
        this.fadeOut = function () {
            var b = y - 250;
            t.css({marginTop: b, opacity: 0});
            x.css({marginTop: b, opacity: 0});
            _.isNull(D) || clearTimeout(D);
            D = setTimeout(function () {
                t.css("display", "none");
                x.css("display", "none");
                D = null;
                o.hidden = true
            }, 350)
        };
        this.fadeIn = function () {
            t.css({display: "block", opacity: 0, marginTop: y - 250});
            x.css({display: "block", opacity: 0, marginTop: y - 250});
            _.defer(function () {
                t.css({marginTop: y, opacity: 1});
                x.css({marginTop: y, opacity: 1});
                o.hidden = false
            })
        };
        (function () {
            var b =
                "<ul>";
            _.each(w.reverse(), function (c) {
                b += '<li name="' + c + '"><span>' + c + "</span></li>"
            });
            b += "</ul>";
            var c = $(window);
            x = $('<div class="frame" />').width(227).height(40).css({
                position: "fixed",
                marginTop: y
            }).appendTo(t).bind("mouseover mouseenter", function () {
                v.find(".active").html("Browse subjects")
            }).bind("mouseout mouseleave", function () {
                var b = v.find(".active");
                b.html("<span>" + b.attr("name") + "</span>")
            }).click(function (b) {
                b.preventDefault();
                h.show()
            });
            u.html(b);
            v = u.find("ul");
            c.resize(function () {
                t.css({
                    left: (c.width() -
                        t.outerWidth()) / 2
                });
                x.css({top: 12, left: (c.width() - x.outerWidth()) / 2})
            }).trigger("resize");
            t.css({top: 22, marginTop: y});
            v.find("li").eq(0).clone().appendTo(v);
            v.find("li").eq(w.length - 1).clone().prependTo(v)
        })()
    }
});
define("dat/mahog/Genre2DOverlay", "dat/mahog/params,dat/utils/urlArgs,dat/mahog/CONFIG,dat/utils/utils,jquery,underscore".split(","), function (b, c, e) {
    return function (f, k) {
        function m() {
            var b = (window.innerHeight - z.outerHeight()) / 2;
            z.css("top", b);
            var c = $(".container"), b = c.width(), e = c.position().left, c = c.position().top;
            L.css({left: e + b - L.width() / 2, top: c - L.height() / 2})
        }

        var h = this, n = document.createElement("div");
        n.setAttribute("class", "closebutton");
        var o = document.createElement("div");
        o.setAttribute("id",
            "genre-2d");
        var t = "<div class='container'>", u = "",
            v = "<h1>Choose a Subject:</h1><div class='decoration two-thirds'></div>",
            x = "<footer>The helix includes " + e.count + " books, and was last updated on September 19, 2011.</footer>";
        c.installation !== void 0 && (u = "<h5 class='pre-heading'>Project</h5><h1>" + b.projectTitle + "</h1>", v = "<h3 class='post-heading'>" + b.projectDescription + "</h3><div class='decoration two-thirds'></div>", x = "<footer>" + b.smallPrint + "</footer>");
        u += v;
        for (var v = "<div class='body'>", w = Math.ceil(f.length /
            3), B = 0; B < 3; B++) {
            for (var A = "<ul>", y = "", D = 0; D < w; D++) {
                var C = f[B * w + D];
                C && (y += "<li>" + ("<span class = 'name'>" + C.name + "</span> <span class = 'count'>" + C.count + "</span>") + "</li>")
            }
            A += y + "</ul>";
            v += A
        }
        v += "<div class='clear'></div></div><div class='decoration three-quarters'></div>";
        $("body").append(o);
        t += u + v + x + "</div>";
        o.innerHTML = t;
        o.appendChild(n);
        var L = $(n);
        L.click(function () {
            h.hide()
        });
        var z = $(o);
        o.style.display = "block";
        z.hide();
        $("li").click(function (b) {
            var c = $(this).find(".name").html();
            b.preventDefault();
            b.stopPropagation();
            k(c);
            h.hide()
        });
        this.domElement = o;
        this.hide = function () {
            z.css("opacity", "0.0");
            L.fadeOut();
            setTimeout(function () {
                E = false;
                z.css("display", "none")
            }, 500)
        };
        var E = false;
        z.css("top", window.innerHeight / 2 - z.outerHeight() / 2);
        this.__defineGetter__("showing", function () {
            return E
        });
        this.show = function () {
            E || (E = true, z.css("display", "block"), z.outerHeight(), $(window).resize(m), z.css("opacity", "1.0"), setTimeout(function () {
                var b = $(".container"), c = b.width(), e = b.position().left, b = b.position().top;
                L.css({
                    left: e +
                        c - L.width() / 2, top: b - L.height() / 2
                });
                L.fadeIn()
            }, 500))
        }
    }
});
define("text!dat/mahog/data/categories.json", function () {
    return '[{"count": 98, "name": "Bestsellers"}, {"count": 283, "name": "Biographies and Memoirs"}, {"count": 157, "name": "Business and Investing"}, {"count": 125, "name": "Childrens Books"}, {"count": 86, "name": "Computers and Internet"}, {"count": 254, "name": "Cooking Food and Wine"}, {"count": 192, "name": "Fantasy"}, {"count": 788, "name": "Fiction"}, {"count": 511, "name": "Free Books"}, {"count": 4153, "name": "General"}, {"count": 855, "name": "Highly Cited"}, {"count": 87, "name": "History"}, {"count": 71, "name": "Humor"}, {"count": 212, "name": "Lifestyle and Home"}, {"count": 29, "name": "Movie Inspirations"}, {"count": 210, "name": "Mystery and Thrillers"}, {"count": 116, "name": "NYT Bestsellers"}, {"count": 741, "name": "New Arrivals"}, {"count": 70, "name": "Parenting and Families"}, {"count": 77, "name": "Politics and Current Events"}, {"count": 112, "name": "Reference"}, {"count": 139, "name": "Religion and Spirituality"}, {"count": 282, "name": "Romance"}, {"count": 73, "name": "Science"}, {"count": 122, "name": "Science Fiction"}, {"count": 220, "name": "Sports"}, {"count": 561, "name": "Top Rated"}, {"count": 341, "name": "Travel"}]'
});
(function () {
    function b(b, c, e) {
        c([b], function (b) {
            e(function () {
                return b
            })
        })
    }

    function c(c) {
        var e = c.currentTarget || c.srcElement, o;
        if (c.type === "load" || f.test(e.readyState)) {
            c = e.getAttribute("data-requiremodule");
            m[c] = true;
            for (c = 0; o = k[c]; c++) if (m[o.name]) b(o.name, o.req, o.onLoad); else break;
            c > 0 && k.splice(0, c);
            setTimeout(function () {
                e.parentNode.removeChild(e)
            }, 15)
        }
    }

    var e = typeof document !== "undefined" && typeof window !== "undefined" && (document.createElement("script").async || window.opera && Object.prototype.toString.call(window.opera) ===
        "[object Opera]" || "MozAppearance" in document.documentElement.style), f = /^(complete|loaded)$/, k = [],
        m = {};
    define("order", {
        version: "0.25.0", load: function (f, m, o, t) {
            var u = m.nameToUrl(f, null);
            t.isBuild ? b(f, m, o) : (require.s.skipAsync[u] = true, e ? m([f], function (b) {
                o(function () {
                    return b
                })
            }) : m.specified(f) ? m([f], function (b) {
                o(function () {
                    return b
                })
            }) : (k.push({name: f, req: m, onLoad: o}), require.attach(u, null, f, c, "script/cache")))
        }
    })
})();
var Stats = function () {
    function b(b, c, e) {
        var f, h, k;
        for (h = 0; h < 30; h++) for (f = 0; f < 73; f++) k = (f + h * 74) * 4, b[k] = b[k + 4], b[k + 1] = b[k + 5], b[k + 2] = b[k + 6];
        for (h = 0; h < 30; h++) k = (73 + h * 74) * 4, h < c ? (b[k] = O[e].bg.r, b[k + 1] = O[e].bg.g, b[k + 2] = O[e].bg.b) : (b[k] = O[e].fg.r, b[k + 1] = O[e].fg.g, b[k + 2] = O[e].fg.b)
    }

    var c = 0, e = 2, f, k = 0, m = (new Date).getTime(), h = m, n = m, o = 0, t = 1E3, u = 0, v, x, w, B, A, y = 0,
        D = 1E3, C = 0, L, z, E, N, I = 0, P = 1E3, H = 0, W, M, J, Q, O = {
            fps: {bg: {r: 16, g: 16, b: 48}, fg: {r: 0, g: 255, b: 255}},
            ms: {bg: {r: 16, g: 48, b: 16}, fg: {r: 0, g: 255, b: 0}},
            mem: {
                bg: {
                    r: 48, g: 16,
                    b: 26
                }, fg: {r: 255, g: 0, b: 128}
            }
        };
    f = document.createElement("div");
    f.style.cursor = "pointer";
    f.style.width = "80px";
    f.style.opacity = "0.9";
    f.style.zIndex = "10001";
    f.addEventListener("click", function () {
        c++;
        c == e && (c = 0);
        v.style.display = "none";
        L.style.display = "none";
        W.style.display = "none";
        switch (c) {
            case 0:
                v.style.display = "block";
                break;
            case 1:
                L.style.display = "block";
                break;
            case 2:
                W.style.display = "block"
        }
    }, false);
    v = document.createElement("div");
    v.style.backgroundColor = "rgb(" + Math.floor(O.fps.bg.r / 2) + "," + Math.floor(O.fps.bg.g /
        2) + "," + Math.floor(O.fps.bg.b / 2) + ")";
    v.style.padding = "2px 0px 3px 0px";
    f.appendChild(v);
    x = document.createElement("div");
    x.style.fontFamily = "Helvetica, Arial, sans-serif";
    x.style.textAlign = "left";
    x.style.fontSize = "9px";
    x.style.color = "rgb(" + O.fps.fg.r + "," + O.fps.fg.g + "," + O.fps.fg.b + ")";
    x.style.margin = "0px 0px 1px 3px";
    x.innerHTML = '<span style="font-weight:bold">FPS</span>';
    v.appendChild(x);
    w = document.createElement("canvas");
    w.width = 74;
    w.height = 30;
    w.style.display = "block";
    w.style.marginLeft = "3px";
    v.appendChild(w);
    B = w.getContext("2d");
    B.fillStyle = "rgb(" + O.fps.bg.r + "," + O.fps.bg.g + "," + O.fps.bg.b + ")";
    B.fillRect(0, 0, w.width, w.height);
    A = B.getImageData(0, 0, w.width, w.height);
    L = document.createElement("div");
    L.style.backgroundColor = "rgb(" + Math.floor(O.ms.bg.r / 2) + "," + Math.floor(O.ms.bg.g / 2) + "," + Math.floor(O.ms.bg.b / 2) + ")";
    L.style.padding = "2px 0px 3px 0px";
    L.style.display = "none";
    f.appendChild(L);
    z = document.createElement("div");
    z.style.fontFamily = "Helvetica, Arial, sans-serif";
    z.style.textAlign = "left";
    z.style.fontSize =
        "9px";
    z.style.color = "rgb(" + O.ms.fg.r + "," + O.ms.fg.g + "," + O.ms.fg.b + ")";
    z.style.margin = "0px 0px 1px 3px";
    z.innerHTML = '<span style="font-weight:bold">MS</span>';
    L.appendChild(z);
    w = document.createElement("canvas");
    w.width = 74;
    w.height = 30;
    w.style.display = "block";
    w.style.marginLeft = "3px";
    L.appendChild(w);
    E = w.getContext("2d");
    E.fillStyle = "rgb(" + O.ms.bg.r + "," + O.ms.bg.g + "," + O.ms.bg.b + ")";
    E.fillRect(0, 0, w.width, w.height);
    N = E.getImageData(0, 0, w.width, w.height);
    try {
        performance && performance.memory && performance.memory.totalJSHeapSize &&
        (e = 3)
    } catch (Y) {
    }
    W = document.createElement("div");
    W.style.backgroundColor = "rgb(" + Math.floor(O.mem.bg.r / 2) + "," + Math.floor(O.mem.bg.g / 2) + "," + Math.floor(O.mem.bg.b / 2) + ")";
    W.style.padding = "2px 0px 3px 0px";
    W.style.display = "none";
    f.appendChild(W);
    M = document.createElement("div");
    M.style.fontFamily = "Helvetica, Arial, sans-serif";
    M.style.textAlign = "left";
    M.style.fontSize = "9px";
    M.style.color = "rgb(" + O.mem.fg.r + "," + O.mem.fg.g + "," + O.mem.fg.b + ")";
    M.style.margin = "0px 0px 1px 3px";
    M.innerHTML = '<span style="font-weight:bold">MEM</span>';
    W.appendChild(M);
    w = document.createElement("canvas");
    w.width = 74;
    w.height = 30;
    w.style.display = "block";
    w.style.marginLeft = "3px";
    W.appendChild(w);
    J = w.getContext("2d");
    J.fillStyle = "#301010";
    J.fillRect(0, 0, w.width, w.height);
    Q = J.getImageData(0, 0, w.width, w.height);
    return {
        domElement: f, update: function () {
            k++;
            m = (new Date).getTime();
            y = m - h;
            D = Math.min(D, y);
            C = Math.max(C, y);
            b(N.data, Math.min(30, 30 - y / 200 * 30), "ms");
            z.innerHTML = '<span style="font-weight:bold">' + y + " MS</span> (" + D + "-" + C + ")";
            E.putImageData(N, 0, 0);
            h = m;
            if (m >
                n + 1E3) {
                o = Math.round(k * 1E3 / (m - n));
                t = Math.min(t, o);
                u = Math.max(u, o);
                b(A.data, Math.min(30, 30 - o / 100 * 30), "fps");
                x.innerHTML = '<span style="font-weight:bold">' + o + " FPS</span> (" + t + "-" + u + ")";
                B.putImageData(A, 0, 0);
                if (e == 3) I = performance.memory.usedJSHeapSize * 9.54E-7, P = Math.min(P, I), H = Math.max(H, I), b(Q.data, Math.min(30, 30 - I / 2), "mem"), M.innerHTML = '<span style="font-weight:bold">' + Math.round(I) + " MEM</span> (" + Math.round(P) + "-" + Math.round(H) + ")", J.putImageData(Q, 0, 0);
                n = m;
                k = 0
            }
        }
    }
};
define("stats", function () {
});
if (!window.requestAnimationFrame) window.requestAnimationFrame = function () {
    return window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (b) {
        window.setTimeout(b, 1E3 / 60)
    }
}();
define("RequestAnimationFrame", function () {
});
var dat = dat || {};
dat.GUI = function (b) {
    b == void 0 && (b = {});
    var c = false;
    b.height == void 0 ? b.height = 300 : c = true;
    var e = [], f = [], k = true, m, h, n = this, o = true, t = 280;
    if (b.width != void 0) t = b.width;
    var u = false, v, x, w = 0, B;
    this.domElement = document.createElement("div");
    this.domElement.setAttribute("class", "guidat");
    this.domElement.style.width = t + "px";
    var A = b.height, y = document.createElement("div");
    y.setAttribute("class", "guidat-controllers");
    y.style.height = A + "px";
    y.addEventListener("DOMMouseScroll", function (b) {
        var c = this.scrollTop;
        b.wheelDelta ?
            c += b.wheelDelta : b.detail && (c += b.detail);
        b.preventDefault && b.preventDefault();
        b.returnValue = false;
        y.scrollTop = c
    }, false);
    var D = document.createElement("a");
    D.setAttribute("class", "guidat-toggle");
    D.setAttribute("href", "#");
    D.innerHTML = o ? "Close Controls" : "Open Controls";
    var C = false, L = 0, z = 0, E = false, N, I, P, H, W = function (b) {
        I = N;
        H = P;
        N = b.pageY;
        P = b.pageX;
        b = N - I;
        if (!o) if (b > 0) o = true, A = v = 1, D.innerHTML = x || "Close Controls"; else return;
        var c = H - P;
        if (b > 0 && A > h) {
            var e = dat.GUI.map(A, h, h + 100, 1, 0);
            b *= e
        }
        C = true;
        L += b;
        v += b;
        A +=
            b;
        y.style.height = v + "px";
        z += c;
        t += c;
        t = dat.GUI.constrain(t, 240, 500);
        n.domElement.style.width = t + "px";
        Q()
    };
    D.addEventListener("mousedown", function (b) {
        I = N = b.pageY;
        H = P = b.pageX;
        E = true;
        b.preventDefault();
        L = z = 0;
        document.addEventListener("mousemove", W, false);
        return false
    }, false);
    D.addEventListener("click", function (b) {
        b.preventDefault();
        return false
    }, false);
    document.addEventListener("mouseup", function (b) {
        E && !C && n.toggle();
        if (E && C) if (z == 0 && V(), v > h) clearTimeout(B), v = w = h, Y(); else if (y.children.length >= 1) {
            var c =
                y.children[0].offsetHeight;
            clearTimeout(B);
            w = Math.round(A / c) * c - 1;
            w <= 0 ? (n.close(), v = c * 2) : (v = w, Y())
        }
        document.removeEventListener("mousemove", W, false);
        b.preventDefault();
        return E = C = false
    }, false);
    this.domElement.appendChild(y);
    this.domElement.appendChild(D);
    if (b.domElement) b.domElement.appendChild(this.domElement); else if (dat.GUI.autoPlace) {
        if (dat.GUI.autoPlaceContainer == null) dat.GUI.autoPlaceContainer = document.createElement("div"), dat.GUI.autoPlaceContainer.setAttribute("id", "guidat"), document.body.appendChild(dat.GUI.autoPlaceContainer);
        dat.GUI.autoPlaceContainer.appendChild(this.domElement)
    }
    this.autoListenIntervalTime = 1E3 / 60;
    var M = function () {
        m = setInterval(function () {
            n.listen()
        }, this.autoListenIntervalTime)
    };
    this.__defineSetter__("autoListen", function (b) {
        (k = b) ? f.length > 0 && M() : clearInterval(m)
    });
    this.__defineGetter__("autoListen", function () {
        return k
    });
    this.listenTo = function (b) {
        f.length == 0 && M();
        f.push(b)
    };
    this.unlistenTo = function (b) {
        for (var c = 0; c < f.length; c++) f[c] == b && f.splice(c, 1);
        f.length <= 0 && clearInterval(m)
    };
    this.listen = function (b) {
        var b =
            b || f, c;
        for (c in b) b[c].updateDisplay()
    };
    this.listenAll = function () {
        this.listen(e)
    };
    this.autoListen = true;
    var J = function (b, c) {
        function e() {
            return b.apply(this, c)
        }

        e.prototype = b.prototype;
        return new e
    };
    this.add = function () {
        if (arguments.length == 1) {
            var b = [], f;
            for (f in arguments[0]) b.push(n.add(arguments[0], f));
            return b
        }
        b = arguments[0];
        f = arguments[1];
        var k;
        a:for (k in e) if (e[k].object == b && e[k].propertyName == f) break a;
        k = b[f];
        if (k == void 0) dat.GUI.error(b + " either has no property '" + f + "', or the property is inaccessible.");
        else if (b = typeof k, k = O[b], k == void 0) dat.GUI.error("Cannot create controller for data type '" + b + "'"); else {
            for (var m = [this], o = 0; o < arguments.length; o++) m.push(arguments[o]);
            if (k = J(k, m)) {
                y.appendChild(k.domElement);
                e.push(k);
                dat.GUI.allControllers.push(k);
                b != "function" && dat.GUI.saveIndex < dat.GUI.savedValues.length && (k.setValue(dat.GUI.savedValues[dat.GUI.saveIndex]), dat.GUI.saveIndex++);
                Q();
                u || (v = h);
                if (!c) try {
                    if (arguments.callee.caller == window.onload) A = w = v = h, y.style.height = A + "px"
                } catch (t) {
                }
                return k
            } else dat.GUI.error("Error creating controller for '" +
                f + "'.")
        }
    };
    var Q = function () {
        h = 0;
        for (var b in e) h += e[b].domElement.offsetHeight;
        y.style.overflowY = h - 1 > v ? "auto" : "hidden"
    }, O = {
        number: dat.GUI.ControllerNumber,
        string: dat.GUI.ControllerString,
        "boolean": dat.GUI.ControllerBoolean,
        "function": dat.GUI.ControllerFunction
    };
    this.reset = function () {
    };
    this.toggle = function () {
        o ? this.close() : this.open()
    };
    this.open = function () {
        D.innerHTML = x || "Close Controls";
        w = v;
        clearTimeout(B);
        Y();
        V();
        o = true
    };
    this.close = function () {
        D.innerHTML = x || "Open Controls";
        w = 0;
        clearTimeout(B);
        Y();
        V();
        o = false
    };
    this.name = function (b) {
        x = b;
        D.innerHTML = b
    };
    this.appearanceVars = function () {
        return [o, t, v, y.scrollTop]
    };
    var Y = function () {
        A = y.offsetHeight;
        A += (w - A) * 0.6;
        Math.abs(A - w) < 1 ? A = w : B = setTimeout(Y, 1E3 / 30);
        y.style.height = Math.round(A) + "px";
        Q()
    }, V = function () {
        n.domElement.style.width = t - 1 + "px";
        setTimeout(function () {
            n.domElement.style.width = t + "px"
        }, 1)
    };
    if (dat.GUI.guiIndex < dat.GUI.savedAppearanceVars.length) {
        t = parseInt(dat.GUI.savedAppearanceVars[dat.GUI.guiIndex][1]);
        n.domElement.style.width = t + "px";
        v = parseInt(dat.GUI.savedAppearanceVars[dat.GUI.guiIndex][2]);
        u = true;
        if (eval(dat.GUI.savedAppearanceVars[dat.GUI.guiIndex][0]) == true) {
            var A = v, Z = dat.GUI.savedAppearanceVars[dat.GUI.guiIndex][3];
            setTimeout(function () {
                y.scrollTop = Z
            }, 0);
            if (dat.GUI.scrollTop > -1) document.body.scrollTop = dat.GUI.scrollTop;
            w = v;
            this.open()
        }
        dat.GUI.guiIndex++
    }
    dat.GUI.allGuis.push(this);
    if (dat.GUI.allGuis.length == 1 && (window.addEventListener("keyup", function (b) {
        !dat.GUI.supressHotKeys && b.keyCode == 72 && dat.GUI.toggleHide()
    }, false), dat.GUI.inlineCSS)) b = document.createElement("style"), b.setAttribute("type",
        "text/css"), b.innerHTML = dat.GUI.inlineCSS, document.head.insertBefore(b, document.head.firstChild)
};
dat.GUI.hidden = false;
dat.GUI.autoPlace = true;
dat.GUI.autoPlaceContainer = null;
dat.GUI.allControllers = [];
dat.GUI.allGuis = [];
dat.GUI.supressHotKeys = false;
dat.GUI.toggleHide = function () {
    dat.GUI.hidden ? dat.GUI.open() : dat.GUI.close()
};
dat.GUI.open = function () {
    dat.GUI.hidden = false;
    for (var b in dat.GUI.allGuis) dat.GUI.allGuis[b].domElement.style.display = "block"
};
dat.GUI.close = function () {
    dat.GUI.hidden = true;
    for (var b in dat.GUI.allGuis) dat.GUI.allGuis[b].domElement.style.display = "none"
};
dat.GUI.saveURL = function () {
    var b = dat.GUI.replaceGetVar("saveString", dat.GUI.getSaveString());
    window.location = b
};
dat.GUI.scrollTop = -1;
dat.GUI.load = function (b) {
    var b = b.split(","), c = parseInt(b[0]);
    dat.GUI.scrollTop = parseInt(b[1]);
    for (var e = 0; e < c; e++) {
        var f = b.splice(2, 4);
        dat.GUI.savedAppearanceVars.push(f)
    }
    dat.GUI.savedValues = b.splice(2, b.length)
};
dat.GUI.savedValues = [];
dat.GUI.savedAppearanceVars = [];
dat.GUI.getSaveString = function () {
    var b = [], c;
    b.push(dat.GUI.allGuis.length);
    b.push(document.body.scrollTop);
    for (c in dat.GUI.allGuis) for (var e = dat.GUI.allGuis[c].appearanceVars(), f = 0; f < e.length; f++) b.push(e[f]);
    for (c in dat.GUI.allControllers) dat.GUI.allControllers[c].type != "function" && (e = dat.GUI.allControllers[c].getValue(), dat.GUI.allControllers[c].type == "number" && (e = dat.GUI.roundToDecimal(e, 4)), b.push(e));
    return b.join(",")
};
dat.GUI.getVarFromURL = function (b) {
    for (var c, e = window.location.href.slice(window.location.href.indexOf("?") + 1).split("&"), f = 0; f < e.length; f++) if (c = e[f].split("="), c != void 0 && c[0] == b) return c[1];
    return null
};
dat.GUI.replaceGetVar = function (b, c) {
    for (var e, f = window.location.href, k = window.location.href.slice(window.location.href.indexOf("?") + 1).split("&"), m = 0; m < k.length; m++) if (e = k[m].split("="), e != void 0 && e[0] == b) return f.replace(e[1], c);
    return window.location.href.indexOf("?") != -1 ? f + "&" + b + "=" + c : f + "?" + b + "=" + c
};
dat.GUI.saveIndex = 0;
dat.GUI.guiIndex = 0;
dat.GUI.showSaveString = function () {
    alert(dat.GUI.getSaveString())
};
dat.GUI.makeUnselectable = function (b) {
    if (!(b == void 0 || b.style == void 0)) {
        b.onselectstart = function () {
            return false
        };
        b.style.MozUserSelect = "none";
        b.style.KhtmlUserSelect = "none";
        b.unselectable = "on";
        for (var b = b.childNodes, c = 0; c < b.length; c++) dat.GUI.makeUnselectable(b[c])
    }
};
dat.GUI.makeSelectable = function (b) {
    if (!(b == void 0 || b.style == void 0)) {
        b.onselectstart = function () {
        };
        b.style.MozUserSelect = "auto";
        b.style.KhtmlUserSelect = "auto";
        b.unselectable = "off";
        for (var b = b.childNodes, c = 0; c < b.length; c++) dat.GUI.makeSelectable(b[c])
    }
};
dat.GUI.map = function (b, c, e, f, k) {
    return f + (k - f) * ((b - c) / (e - c))
};
dat.GUI.constrain = function (b, c, e) {
    b < c ? b = c : b > e && (b = e);
    return b
};
dat.GUI.error = function (b) {
    typeof console.error == "function" && console.error("[DAT.GUI ERROR] " + b)
};
dat.GUI.roundToDecimal = function (b, c) {
    var e = Math.pow(10, c);
    return Math.round(b * e) / e
};
dat.GUI.extendController = function (b) {
    b.prototype = new dat.GUI.Controller;
    b.prototype.constructor = b
};
dat.GUI.addClass = function (b, c) {
    dat.GUI.hasClass(b, c) || (b.className += " " + c)
};
dat.GUI.hasClass = function (b, c) {
    return b.className.indexOf(c) != -1
};
dat.GUI.removeClass = function (b, c) {
    b.className = b.className.replace(RegExp(" " + c, "g"), "")
};
dat.GUI.getVarFromURL("saveString") != null && dat.GUI.load(dat.GUI.getVarFromURL("saveString"));
dat.GUI.Controller = function () {
    this.parent = arguments[0];
    this.object = arguments[1];
    this.propertyName = arguments[2];
    if (arguments.length > 0) this.initialValue = this.propertyName[this.object];
    this.domElement = document.createElement("div");
    this.domElement.setAttribute("class", "guidat-controller " + this.type);
    this.propertyNameElement = document.createElement("span");
    this.propertyNameElement.setAttribute("class", "guidat-propertyname");
    this.name(this.propertyName);
    this.domElement.appendChild(this.propertyNameElement);
    dat.GUI.makeUnselectable(this.domElement)
};
dat.GUI.Controller.prototype.changeFunction = null;
dat.GUI.Controller.prototype.finishChangeFunction = null;
dat.GUI.Controller.prototype.name = function (b) {
    this.propertyNameElement.innerHTML = b;
    return this
};
dat.GUI.Controller.prototype.reset = function () {
    this.setValue(this.initialValue);
    return this
};
dat.GUI.Controller.prototype.listen = function () {
    this.parent.listenTo(this);
    return this
};
dat.GUI.Controller.prototype.unlisten = function () {
    this.parent.unlistenTo(this);
    return this
};
dat.GUI.Controller.prototype.setValue = function (b) {
    this.object[this.propertyName] = b;
    this.changeFunction != null && this.changeFunction.call(this, b);
    this.updateDisplay();
    return this
};
dat.GUI.Controller.prototype.getValue = function () {
    return this.object[this.propertyName]
};
dat.GUI.Controller.prototype.updateDisplay = function () {
};
dat.GUI.Controller.prototype.onChange = function (b) {
    this.changeFunction = b;
    return this
};
dat.GUI.Controller.prototype.onFinishChange = function (b) {
    this.finishChangeFunction = b;
    return this
};
dat.GUI.Controller.prototype.options = function () {
    var b = this, c = document.createElement("select");
    if (arguments.length == 1) {
        var e = arguments[0], f;
        for (f in e) {
            var k = document.createElement("option");
            k.innerHTML = f;
            k.setAttribute("value", e[f]);
            if (arguments[f] == this.getValue()) k.selected = true;
            c.appendChild(k)
        }
    } else for (f = 0; f < arguments.length; f++) {
        k = document.createElement("option");
        k.innerHTML = arguments[f];
        k.setAttribute("value", arguments[f]);
        if (arguments[f] == this.getValue()) k.selected = true;
        c.appendChild(k)
    }
    c.addEventListener("change",
        function () {
            b.setValue(this.value);
            b.finishChangeFunction != null && b.finishChangeFunction.call(this, b.getValue())
        }, false);
    b.domElement.appendChild(c);
    return this
};
dat.GUI.ControllerBoolean = function () {
    this.type = "boolean";
    dat.GUI.Controller.apply(this, arguments);
    var b = this, c = document.createElement("input");
    c.setAttribute("type", "checkbox");
    c.checked = this.getValue();
    this.setValue(this.getValue());
    this.domElement.addEventListener("click", function (e) {
        c.checked = !c.checked;
        e.preventDefault();
        b.setValue(c.checked)
    }, false);
    c.addEventListener("mouseup", function () {
        c.checked = !c.checked
    }, false);
    this.domElement.style.cursor = "pointer";
    this.propertyNameElement.style.cursor =
        "pointer";
    this.domElement.appendChild(c);
    this.updateDisplay = function () {
        c.checked = b.getValue()
    };
    this.setValue = function (b) {
        if (typeof b != "boolean") try {
            b = eval(b)
        } catch (c) {
        }
        return dat.GUI.Controller.prototype.setValue.call(this, b)
    }
};
dat.GUI.extendController(dat.GUI.ControllerBoolean);
dat.GUI.ControllerFunction = function () {
    this.type = "function";
    var b = this;
    dat.GUI.Controller.apply(this, arguments);
    this.domElement.addEventListener("click", function () {
        b.fire()
    }, false);
    this.domElement.style.cursor = "pointer";
    this.propertyNameElement.style.cursor = "pointer";
    var c = null;
    this.onFire = function (b) {
        c = b;
        return this
    };
    this.fire = function () {
        c != null && c.call(this);
        b.object[b.propertyName].call(b.object)
    }
};
dat.GUI.extendController(dat.GUI.ControllerFunction);
dat.GUI.ControllerNumber = function () {
    this.type = "number";
    dat.GUI.Controller.apply(this, arguments);
    var b = this, c = false, e = false, f = 0, k = 0, m = arguments[3], h = arguments[4], n = arguments[5];
    this.min = function () {
        var c = false;
        m == void 0 && h != void 0 && (c = true);
        if (arguments.length == 0) return m; else m = arguments[0];
        c && (u(), n == void 0 && (n = (h - m) * 0.01));
        return b
    };
    this.max = function () {
        var c = false;
        m != void 0 && h == void 0 && (c = true);
        if (arguments.length == 0) return h; else h = arguments[0];
        c && (u(), n == void 0 && (n = (h - m) * 0.01));
        return b
    };
    this.step =
        function () {
            if (arguments.length == 0) return n; else n = arguments[0];
            return b
        };
    this.getMin = function () {
        return m
    };
    this.getMax = function () {
        return h
    };
    this.getStep = function () {
        return n == void 0 ? h != void 0 && m != void 0 ? (h - m) / 100 : 1 : n
    };
    var o = document.createElement("input");
    o.setAttribute("id", this.propertyName);
    o.setAttribute("type", "text");
    o.setAttribute("value", this.getValue());
    n && o.setAttribute("step", n);
    this.domElement.appendChild(o);
    var t, u = function () {
        t = new dat.GUI.ControllerNumberSlider(b, m, h, n, b.getValue());
        b.domElement.appendChild(t.domElement)
    };
    m != void 0 && h != void 0 && u();
    o.addEventListener("blur", function () {
        var c = parseFloat(this.value);
        t && dat.GUI.removeClass(b.domElement, "active");
        isNaN(c) || b.setValue(c)
    }, false);
    o.addEventListener("mousewheel", function (c) {
        c.preventDefault();
        b.setValue(b.getValue() + Math.abs(c.wheelDeltaY) / c.wheelDeltaY * b.getStep());
        return false
    }, false);
    o.addEventListener("mousedown", function (b) {
            k = f = b.pageY;
            dat.GUI.makeSelectable(o);
            document.addEventListener("mousemove", x, false);
            document.addEventListener("mouseup", v, false)
        },
        false);
    o.addEventListener("keydown", function (c) {
        switch (c.keyCode) {
            case 13:
                c = parseFloat(this.value);
                b.setValue(c);
                break;
            case 38:
                c = b.getValue() + b.getStep();
                b.setValue(c);
                break;
            case 40:
                c = b.getValue() - b.getStep(), b.setValue(c)
        }
    }, false);
    var v = function () {
        document.removeEventListener("mousemove", x, false);
        dat.GUI.makeSelectable(o);
        b.finishChangeFunction != null && b.finishChangeFunction.call(this, b.getValue());
        e = c = false;
        document.removeEventListener("mouseup", v, false)
    }, x = function (h) {
        k = f;
        f = h.pageY;
        var m = k - f;
        !c &&
        !e && (m == 0 ? c = true : e = true);
        if (c) return true;
        dat.GUI.addClass(b.domElement, "active");
        dat.GUI.makeUnselectable(b.parent.domElement);
        dat.GUI.makeUnselectable(o);
        h.preventDefault();
        h = b.getValue() + m * b.getStep();
        b.setValue(h);
        return false
    };
    this.options = function () {
        b.noSlider();
        b.domElement.removeChild(o);
        return dat.GUI.Controller.prototype.options.apply(this, arguments)
    };
    this.noSlider = function () {
        t && b.domElement.removeChild(t.domElement);
        return this
    };
    this.setValue = function (b) {
        b = parseFloat(b);
        m != void 0 && b <= m ?
            b = m : h != void 0 && b >= h && (b = h);
        return dat.GUI.Controller.prototype.setValue.call(this, b)
    };
    this.updateDisplay = function () {
        o.value = dat.GUI.roundToDecimal(b.getValue(), 4);
        if (t) t.value = b.getValue()
    }
};
dat.GUI.extendController(dat.GUI.ControllerNumber);
dat.GUI.ControllerNumberSlider = function (b, c, e, f, k) {
    var m = false, h = this;
    this.domElement = document.createElement("div");
    this.domElement.setAttribute("class", "guidat-slider-bg");
    this.fg = document.createElement("div");
    this.fg.setAttribute("class", "guidat-slider-fg");
    this.domElement.appendChild(this.fg);
    var n = function (c) {
        if (m) {
            var e;
            e = h.domElement;
            var f = 0, k = 0;
            if (e.offsetParent) {
                do f += e.offsetLeft, k += e.offsetTop; while (e = e.offsetParent);
                e = [f, k]
            } else e = void 0;
            c = dat.GUI.map(c.pageX, e[0], e[0] + h.domElement.offsetWidth,
                b.getMin(), b.getMax());
            c = Math.round(c / b.getStep()) * b.getStep();
            b.setValue(c)
        }
    };
    this.domElement.addEventListener("mousedown", function (c) {
        m = true;
        dat.GUI.addClass(b.domElement, "active");
        n(c);
        document.addEventListener("mouseup", o, false)
    }, false);
    var o = function () {
        dat.GUI.removeClass(b.domElement, "active");
        m = false;
        b.finishChangeFunction != null && b.finishChangeFunction.call(this, b.getValue());
        document.removeEventListener("mouseup", o, false)
    };
    this.__defineSetter__("value", function (c) {
        this.fg.style.width = dat.GUI.map(c,
            b.getMin(), b.getMax(), 0, 100) + "%"
    });
    document.addEventListener("mousemove", n, false);
    this.value = k
};
dat.GUI.ControllerString = function () {
    this.type = "string";
    var b = this;
    dat.GUI.Controller.apply(this, arguments);
    var c = document.createElement("input"), e = this.getValue();
    c.setAttribute("value", e);
    c.setAttribute("spellcheck", "false");
    this.domElement.addEventListener("mouseup", function () {
        c.focus();
        c.select()
    }, false);
    c.addEventListener("keyup", function (e) {
        e.keyCode == 13 && b.finishChangeFunction != null && (b.finishChangeFunction.call(this, b.getValue()), c.blur());
        b.setValue(c.value)
    }, false);
    c.addEventListener("mousedown",
        function () {
            dat.GUI.makeSelectable(c)
        }, false);
    c.addEventListener("blur", function () {
        dat.GUI.supressHotKeys = false;
        b.finishChangeFunction != null && b.finishChangeFunction.call(this, b.getValue())
    }, false);
    c.addEventListener("focus", function () {
        dat.GUI.supressHotKeys = true
    }, false);
    this.updateDisplay = function () {
        c.value = b.getValue()
    };
    this.options = function () {
        b.domElement.removeChild(c);
        return dat.GUI.Controller.prototype.options.apply(this, arguments)
    };
    this.domElement.appendChild(c)
};
dat.GUI.extendController(dat.GUI.ControllerString);
dat.GUI.inlineCSS = "#guidat { position: fixed; top: 0; right: 0; width: auto; z-index: 1001; text-align: right; } .guidat { color: #fff; opacity: 0.97; text-align: left; float: right; margin-right: 20px; margin-bottom: 20px; background-color: #fff; } .guidat, .guidat input { font: 9.5px Lucida Grande, sans-serif; } .guidat-controllers { height: 300px; overflow-y: auto; overflow-x: hidden; background-color: rgba(0, 0, 0, 0.1); } a.guidat-toggle:link, a.guidat-toggle:visited, a.guidat-toggle:active { text-decoration: none; cursor: pointer; color: #fff; background-color: #222; text-align: center; display: block; padding: 5px; } a.guidat-toggle:hover { background-color: #000; } .guidat-controller { padding: 3px; height: 25px; clear: left; border-bottom: 1px solid #222; background-color: #111; } .guidat-controller, .guidat-controller input, .guidat-slider-bg, .guidat-slider-fg { -moz-transition: background-color 0.15s linear; -webkit-transition: background-color 0.15s linear; transition: background-color 0.15s linear; } .guidat-controller.boolean:hover, .guidat-controller.function:hover { background-color: #000; } .guidat-controller input { float: right; outline: none; border: 0; padding: 4px; margin-top: 2px; background-color: #222; } .guidat-controller select { margin-top: 4px; float: right; } .guidat-controller input:hover { background-color: #444; } .guidat-controller input:focus, .guidat-controller.active input { background-color: #555; color: #fff; } .guidat-controller.number { border-left: 5px solid #00aeff; } .guidat-controller.string { border-left: 5px solid #1ed36f; } .guidat-controller.string input { border: 0; color: #1ed36f; margin-right: 2px; width: 148px; } .guidat-controller.boolean { border-left: 5px solid #54396e; } .guidat-controller.function { border-left: 5px solid #e61d5f; } .guidat-controller.number input[type=text] { width: 35px; margin-left: 5px; margin-right: 2px; color: #00aeff; } .guidat .guidat-controller.boolean input { margin-top: 6px; margin-right: 2px; font-size: 20px; } .guidat-controller:last-child { border-bottom: none; -webkit-box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.5); -moz-box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.5); box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.5); } .guidat-propertyname { padding: 5px; padding-top: 7px; cursor: default; display: inline-block; } .guidat-controller .guidat-slider-bg:hover, .guidat-controller.active .guidat-slider-bg { background-color: #444; } .guidat-controller .guidat-slider-bg .guidat-slider-fg:hover, .guidat-controller.active .guidat-slider-bg .guidat-slider-fg { background-color: #52c8ff; } .guidat-slider-bg { background-color: #222; cursor: ew-resize; width: 40%; margin-top: 2px; float: right; height: 21px; } .guidat-slider-fg { cursor: ew-resize; background-color: #00aeff; height: 21px; } ";
define("dat/gui/dat.GUI.min", function () {
});
define("dat/mahog/Bookshelf", "dat/mahog/shaders/BookUniforms,dat/mahog/Library,dat/mahog/MorphingBook,dat/mahog/StaticBook,dat/mahog/params,dat/mahog/BookDisplayer,dat/mahog/utils,dat/mahog/SpiralShelf,dat/mahog/CONFIG,dat/mahog/DomLabelManager,dat/mahog/animate,dat/mahog/Genre2DOverlay,dat/utils/Easing,dat/utils/utils,dat/utils/Routine,dat/utils/showMessage,dat/utils/urlArgs,text!dat/mahog/data/categories.json,order!dat/gui/dat.GUI.min,jquery,three,stats,RequestAnimationFrame,underscore".split(","), function (b,
c, e, f, k, m, h, n, o, t, u, v, x, w, B, A, y, D) {
    var D = JSON.parse(D), C = !!y.disableClickToRead;
    return function () {
        var A, z;

        function E() {
            ha = new dat.GUI({height: A - 40});
            G = new THREE.Camera(k.baseFov, z / A, 1, 1E4);
            Ga = G.position.y - 1;
            Ha = new THREE.Projector;
            qa = new THREE.Scene;
            qa.fog = new THREE.Fog(0, k.near, k.far);
            qa.matrixAutoUpdate = false;
            Ea = new e(new THREE.Texture, new THREE.Texture);
            u(Ea);
            Ea.hide();
            Ea.mesh.matrixAutoUpdate = true;
            qa.addObject(Ea.mesh);
            qa.addLight(Va);
            qa.addLight(db);
            if (y.stats == "true" || y.stats == "1") ra = new Stats,
                ra.domElement.style.position = "absolute", ra.domElement.style.bottom = "20px", ra.domElement.style.left = "20px", ra.domElement.style.opacity = "0.6", ra.domElement.style.zIndex = 100, ra.domElement.setAttribute("id", "stats"), U.domElement.appendChild(ra.domElement);
            THREE.currentRenderer = Aa;
            Aa.sortObjects = false;
            U.domElement.appendChild(Aa.domElement);
            if (y.installation != void 0 || y.installation_debug != void 0) {
                var b = document.createElement("style");
                b.type = "text/css";
                b.styleSheet ? b.styleSheet.cssText = "*, html, body, div, canvas { cursor: url(/textures/ui/invisible.gif), none !important; }" :
                    b.appendChild(document.createTextNode("*, html, body, div, canvas { cursor: url(/textures/ui/invisible.gif), none !important; }"));
                document.getElementsByTagName("head")[0].appendChild(b)
            }
            wa = document.createElement("div");
            wa.setAttribute("class", "closebutton");
            U.domElement.appendChild(wa);
            $(wa).click(function (b) {
                b.stopPropagation();
                U.returnBookToShelf()
            });
            pa = document.createElement("div");
            pa.setAttribute("id", "click-to-read");
            pa.style.display = "none";
            pa.innerHTML = '<a href="#" target="_blank">Click here to get the book.</a>';
            U.domElement.appendChild(pa);
            window.addEventListener("resize", N, false);
            N()
        }

        function N() {
            var b = $("#content");
            Aa.setSize(b.width(), b.height());
            G.aspect = b.width() / b.height();
            G.updateProjectionMatrix();
            z = b.width();
            A = b.height();
            Ka = true
        }

        function I() {
            var b = Math.floor(h.yToIndex(U.getClimbDest())), c = k.grabTextures, e = w.wrap(b - c / 2, o.count),
                b = w.wrap(b + c / 2, o.count), c = G.target.position.y - G.position.y, f = U.getCurrentBookIndex(),
                f = U.getGenre(f);
            f != ta && (Ka = true, ta = f, _.each(U.bookDisplayers, function (b) {
                b.onGenreChange()
            }),
                Ka = true);
            e > b ? (U.library.see(e, o.count - 1, c), U.library.see(0, b, c)) : U.library.see(e, b, c)
        }

        function P() {
            G.vel = Math.abs(Ga - G.position.y);
            if (Ga != G.position.y) for (var b = 0; b < U.bookDisplayers.length; b++) {
                var c = U.bookDisplayers[b], e;
                e = b;
                var f = k.loopHeight, m = w.lerp(G.position.y, G.target.position.y, 0.1);
                if (G.position.y > G.target.position.y) {
                    for (; h.indexToY(e) < m - f;) e += ab;
                    for (; h.indexToY(e) > m + f;) e -= ab
                } else {
                    for (; h.indexToY(e) > m + f;) e -= ab;
                    for (; h.indexToY(e) < m - f;) e += ab
                }
                f = w.wrap(e, o.count);
                c.setBookIndex(f);
                e = h.indexToY(e);
                f = h.yToOrbit(e);
                c.restPosition.x = Math.cos(f) * k.spiralRadius;
                c.restPosition.y = e + c.getHeight() / 2;
                c.restPosition.z = Math.sin(f) * k.spiralRadius;
                c.restRotation.y = -(f % (Math.PI * 2)) + k.bookTwist;
                c.mesh.position.copy(c.restPosition);
                c.mesh.rotation.copy(c.restRotation);
                c.mesh.updateMatrix()
            }
            Ga = G.position.y
        }

        function H() {
            y.saveString == void 0 && (y.installation != void 0 || y.installation_debug != void 0 ? dat.GUI.load("1,0,true,304,767,0,1300,1240,1100,68,1.8221,true,40,110,0.5708,1.6445,202,39,950,1.25,618,237,725,1400,1525,3000,-15,56,0,0,20") :
                dat.GUI.load("1,0,true,280,0,0,500,400,950,74,1.8221,true,28,52,0.5708,1.6445,279,52,355,1.25,665,120,550,1250,1500,3000,54,30,0,0,20"));
            dat.GUI.close();
            ha.listenAll();
            ha.add(k, "numBookDisplayers").min(0).step(5);
            ha.add(k, "loopHeight").step(10);
            ha.add(k, "cameraDistance").step(50);
            ha.add(k, "shelfHeight").onChange(P);
            ha.add(k, "bookTwist", 0, Math.PI * 2).onChange(P);
            ha.add(k, "scaleFov");
            ha.add(k, "baseFov");
            ha.add(k, "maxFov");
            ha.add(k, "fovCap").max(Math.PI / 2).step(0.05);
            ha.add(k, "fovCurve", 0.01, 3);
            ha.add(k,
                "spiralRadius").onChange(P);
            ha.add(k, "booksPerCircle").onChange(P);
            ha.add(k, "grabTextures").min(1);
            ha.add(k, "shelfYOffset").step(0.25);
            ha.add(k, "lightDistance");
            ha.add(k, "openDistance");
            ha.add(qa.fog, "near").step(25).onChange(function (c) {
                b.fogNear.value = c;
                za(c, b.fogFar.value)
            });
            ha.add(qa.fog, "far").step(25).onChange(function (c) {
                b.fogFar.value = c;
                za(b.fogNear.value, c)
            });
            ha.add(k, "cameraTargetDriftLength").step(25);
            ha.add(k, "cameraPositionDriftLength").step(25);
            ha.add(k, "labelOffsetY").step(1);
            ha.add(k,
                "labelOffsetX").step(1);
            ha.add(k, "offsetTheta").step(Math.PI / 16).min(-Math.PI * 2).max(Math.PI * 2);
            ha.add(k, "focusOffset");
            ha.add(k, "maxTextures")
        }

        function W(b) {
            var b = b || function () {
                return true
            }, c = new THREE.Vector3(Qa / z * 2 - 1, -(La / A) * 2 + 1, 0.5);
            Ha.unprojectVector(c, G);
            c = (new THREE.Ray(G.position, c.subSelf(G.position).normalize())).intersectScene(qa);
            for (i = 0; i < c.length; i++) {
                var e = c[i].object;
                if (b(e, c[i].distance)) return e
            }
            return null
        }

        function M(b) {
            if (b.generated || !y.installation) return ib = Qa || 0, hb = La || 0, Qa =
                (b.x || b.clientX) + $("body").scrollLeft(), La = (b.y || b.clientY) + $("body").scrollTop(), false
        }

        function J(b) {
            if (b.generated || !y.installation) {
                b.preventDefault();
                var c = false;
                fa.cameraPositionY != fa.cameraTargetPositionY && (c = true);
                fa.animate.clear();
                c && fa.animate({
                    to: {cameraPositionY: fa.cameraTargetPositionY},
                    duration: k.cameraTargetDriftLength,
                    curve: x.Exponential.EaseOut
                });
                va = ib = Qa = (b.x || b.clientX) + $("body").scrollLeft();
                Ia = hb = La = (b.y || b.clientY) + $("body").scrollTop();
                sa = W(aa) !== null;
                Sa = false;
                U.domElement.addEventListener("mousemove",
                    Q, false);
                U.domElement.addEventListener("mouseup", V, false);
                window.addEventListener("mouseout", V, false);
                return false
            }
        }

        function Q(b) {
            if (b.generated || !y.installation) {
                if (!Sa && w.dist(va, Ia, Qa, La) > k.dragEpsilon) {
                    Sa = true;
                    va = Qa;
                    Ia = La;
                    gb = Ea.opened;
                    var b = {}, c;
                    for (c in fa) b[c] = fa[c];
                    Ba = b
                } else if (!Sa) return false;
                Sa = true;
                if (m.loading) m.cancel(); else if (m.active != null) if (sa) return ea(), da(), c = w.map(Qa, va, va - k.fullOpenEffort, 0, 1), c += gb, c = w.clamp(c, 0, 1), p(c), false; else U.returnBookToShelf(), m.cancel();
                b = w.map(Qa,
                    va, va + 300, Ba.orbit, Ba.orbit + Math.PI / 8);
                c = w.map(La, Ia, Ia + 2.5, Ba.cameraTargetPositionY, Ba.cameraTargetPositionY + 0.5 * (5 / 6));
                fa.animate.clear();
                fa.animate({to: {orbit: b, cameraPositionY: c, cameraTargetPositionY: c}, duration: 0});
                Ka = true;
                return false
            }
        }

        function O(b) {
            if (b.generated || !y.installation) {
                m.active != null && (m.cancel(), U.returnBookToShelf());
                var c = fa.orbit - b.wheelDeltaX / 1E3, b = fa.cameraTargetPositionY - b.wheelDeltaY / 6;
                fa.animate.clear();
                fa.animate({
                    to: {orbit: c, cameraPositionY: b, cameraTargetPositionY: b},
                    duration: 0
                });
                Ka = true;
                return false
            }
        }

        function Y(b) {
            if ((b.generated || !y.installation) && !Sa) {
                var c = b = null;
                oa.showing || (b = W(ca), c = W(aa), m.active != null && c != null ? (ea(function () {
                    S(true)
                }), da()) : m.active == null ? b != null && U.showCover(b.bookDisplayer) : b != null && b.bookDisplayer != m.active ? (m.loading && !m.active.comingOut ? m.cancel() : U.returnBookToShelf(), U.showCover(b.bookDisplayer)) : U.returnBookToShelf())
            }
        }

        function V(b) {
            if (b.generated || !y.installation) {
                sa = false;
                if (m.active == null && Sa) {
                    var c;
                    c = Qa - ib;
                    b = La - hb;
                    fa.animate({
                        to: {
                            orbit: fa.orbit +
                                c * 0.03
                        }, duration: k.cameraTargetDriftLength, curve: x.Exponential.EaseOut
                    });
                    c = 5;
                    fa.animate({
                        to: {
                            cameraPositionY: fa.cameraPositionY + b * c,
                            cameraTargetPositionY: fa.cameraTargetPositionY + b * c
                        }, duration: k.cameraPositionDriftLength, curve: x.Exponential.EaseOut
                    })
                } else m.active && m.active.fullyOut && Sa && S();
                U.domElement.removeEventListener("mousemove", Q);
                U.domElement.removeEventListener("mouseup", V);
                window.removeEventListener("mouseout", V);
                return false
            }
        }

        function Z() {
            requestAnimationFrame(Z);
            Ka = u.update() || Ka || m.loading ||
                U.frameCount < 6E5;
            U.frameCount++;
            var b = Math.abs(Math.atan2(fa.cameraTargetPositionY - fa.cameraPositionY, k.cameraDistance - k.spiralRadius)),
                b = Math.min(b, k.fovCap), b = Math.pow(b / k.fovCap, k.fovCurve);
            R = k.baseFov + (k.scaleFov ? b * (k.maxFov - k.baseFov) : 0);
            b = k.cameraDistance * k.baseFov / R;
            G.fov = R;
            G.updateProjectionMatrix();
            G.position.x = Math.cos(fa.orbit) * b;
            G.position.z = Math.sin(fa.orbit) * b;
            G.target.position.y = fa.cameraTargetPositionY + h.orbitToY(fa.orbit);
            G.position.y = fa.cameraPositionY + h.orbitToY(fa.orbit);
            Va.position.x =
                Math.cos(fa.orbit + Math.PI / 3);
            Va.position.z = Math.sin(fa.orbit + Math.PI / 3);
            Va.position.normalize();
            db.position.x = Math.cos(fa.orbit) * k.lightDistance;
            db.position.z = Math.sin(fa.orbit) * k.lightDistance;
            db.position.y = G.position.y;
            ia.mesh.position.y = Math.floor(G.position.y / k.shelfHeight) * k.shelfHeight;
            ia.mesh.updateMatrix();
            Ca.update();
            P();
            for (var b = 0, c = U.bookDisplayers.length; b < c; b++) U.bookDisplayers[b].update(G);
            b = U.library.update();
            (Ka || b) && Aa.render(qa, G);
            (y.stats == "true" || y.stats == "1") && ra.update();
            Ka =
                false
        }

        function K(b) {
            Ea.animate({
                from: {open: 0},
                to: {open: 1},
                duration: (k.maxOpen - Ea.opened) / k.openVel,
                onUpdate: la(true),
                onComplete: function () {
                    ga(true);
                    y.installation === void 0 && y.installation_debug === void 0 && ya();
                    _.isFunction(b) && b()
                }
            })
        }

        function X(b) {
            Ea.animate({
                from: {open: 1},
                to: {open: 0},
                duration: Ea.opened / k.openVel,
                onUpdate: la(false),
                onComplete: function () {
                    ga(false);
                    y.installation === void 0 && y.installation_debug === void 0 && $(pa).fadeOut();
                    _.isFunction(b) && b()
                }
            })
        }

        function S(b) {
            var c = Ea.opened > (gb > 0.5 ? k.maxOpen -
                k.openThreshold : k.openThreshold);
            b && (c = !c);
            c ? U.openBook() : U.closeBook()
        }

        function p(b) {
            if (m.active != null) Ea.opened = w.lerp(0, k.maxOpen, b), Ea.mesh.rotation.y = w.cmap(x.Sinusoidal.EaseInOut(b), 0, 1, m.active.targetAngle, m.active.targetAngle - Math.PI / 2), Ka = true
        }

        function ca(b, c) {
            return b.bookDisplayer !== void 0 && b.visible && c < k.cameraDistance
        }

        function aa(b) {
            for (var c in Ea.mesh.children) if (b == Ea.mesh.children[c]) return true;
            return false
        }

        function la(b) {
            var c = w.map(Ea.opened, 0, k.maxOpen, 0, 1);
            return function (e,
                             f) {
                var h = w.map(f, 0, 1, c, b ? 1 : 0),
                    h = b ? w.map(x.Circular.EaseOut(f), 0, 1, c, 1) : w.map(x.Quadratic.EaseOut(f), 0, 1, c, 0);
                p(h)
            }
        }

        function ka(b) {
            var b = _.isUndefined(b) ? 0 : Math.round(b), c = Ha.projectVector(Ea.getTopRight(b), G),
                b = A / 2 * (1 - c.y) - $(wa).height() / 2, c = z / 2 * (c.x + 1) - $(wa).width() / 2;
            wa.style.top = b + "px";
            wa.style.left = c + "px"
        }

        function ja(b) {
            var c = Ha.projectVector(Ea.getBottomMiddleRight(b), G), b = A / 2 * (1 - c.y) - $(pa).height() / 2,
                c = z / 2 * (c.x + 1) - $(pa).width() / 2;
            pa.style.top = b + "px";
            pa.style.left = c + "px"
        }

        function ea(b) {
            $(wa).fadeOut(k.closeButtonFadeSpeed,
                function () {
                    window.removeEventListener("resize", ma, false);
                    _.isFunction(b) && b()
                })
        }

        function da(b) {
            $(pa).fadeOut(k.closeButtonFadeSpeed, function () {
                window.removeEventListener("resize", na, false);
                _.isFunction(b) && b()
            })
        }

        function ga(b) {
            ka(b);
            $(wa).fadeIn(function () {
                window.addEventListener("resize", ma, false)
            })
        }

        function ya() {
            C || (ja(1), $(pa).fadeIn(function () {
                window.addEventListener("resize", na, false)
            }))
        }

        function ma() {
            ka(Ea.open)
        }

        function na() {
            ja(1)
        }

        function za(b, c) {
            _.each(U.bookDisplayers, function (e) {
                e.staticBook.material.uniforms.fogNear.value =
                    b;
                e.staticBook.material.uniforms.fogFar.value = c
            })
        }

        this.__defineSetter__("numBookDisplayers", function (b) {
            for (; U.bookDisplayers.length < b;) {
                var c = new m(U, G, Ea);
                U.bookDisplayers.push(c);
                qa.addObject(c.mesh)
            }
            ab = b
        });
        this.__defineGetter__("numBookDisplayers", function () {
            return ab
        });
        this.bookDisplayers = [];
        this.domElement = document.createElement("div");
        this.domElement.setAttribute("id", "content");
        var ta, Aa = new THREE.WebGLRenderer({antialias: true});
        this.library = new c(Aa);
        this.frameCount = 0;
        this.getClimbDest = function () {
            return fa.animate.dest("cameraTargetPositionY") +
                h.orbitToY(fa.animate.dest("orbit"))
        };
        this.goToBookById = function (b, e) {
            U.returnBookToShelf();
            var f = c.ids.indexOf(b);
            if (f < 0) console.log("Error index of " + b + " not found: " + f); else {
                var h = e;
                e === true && (h = function () {
                    U.showCover(f)
                });
                U.goToBookByIndex(f, h)
            }
        };
        this.getActiveBookId = function () {
            return m.active != null ? m.active.getBookID() : null
        };
        this.goToBookByIndex = function (b, c) {
            var e = h.indexToY(b), e = h.yToOrbit(e), f = Math.floor(e / (Math.PI * 2));
            e %= Math.PI * 2;
            f += 1;
            for (var f = -f * k.shelfHeight, m = e - fa.orbit; Math.abs(m) >
            Math.PI * 2;) e -= w.sign(m) * Math.PI * 2, f -= w.sign(m) * k.shelfHeight, m = e - fa.orbit;
            U.returnBookToShelf();
            fa.animate({
                to: {cameraTargetPositionY: f},
                duration: k.cameraTargetDriftLength,
                curve: x.Circular.EaseOut
            });
            fa.animate({
                to: {cameraPositionY: f, orbit: e},
                duration: k.cameraPositionDriftLength,
                curve: x.Quadratic.EaseOut,
                onComplete: c
            })
        };
        this.goToGenre = function (b, c) {
            var e = 0, f;
            for (f in ua) if (ua[f].name === b) break; else e += ua[f].count;
            e = Math.max(e, k.booksPerCircle);
            U.goToBookByIndex(e, c, U.showCover)
        };
        this.getCurrentGenre =
            function () {
                return ta
            };
        this.getGenre = function (b) {
            var c = 0, e;
            for (e in ua) if (c += ua[e].count, c > b) return ua[e].name;
            return ua[0].name
        };
        this.showCover = function (b, c) {
            Ca.fadeOut();
            if (!m.active || m.active.fullyOut) {
                if (_.isNumber(b)) {
                    var e = b, b = U.bookDisplayers[e];
                    if (_.isUndefined(b)) b = U.library.fetch(e).bookDisplayer
                } else if (_.isUndefined(b) || _.isNull(b)) b = U.library.fetch(U.getCurrentBookIndex()).bookDisplayer;
                if (!m.loading && m.active != b) m.active = b, U.lastOpenedId = b.getBookID(), b.open(function () {
                    ga(0);
                    _.isFunction(c) &&
                    c()
                }, function (b) {
                    b.error === void 0 && $(pa).find("a").attr("href", b.volumeInfo.infoLink)
                })
            }
        };
        this.openBook = function (b) {
            $(wa).css("opacity") < 1 || $(wa).css("display") === "none" ? K(b) : (ea(b), da())
        };
        this.closeBook = function (b) {
            $(wa).css("opacity") < 1 || $(wa).css("display") === "none" ? X(b) : (ea(b), da())
        };
        this.getCurrentBookIndex = function () {
            var b = h.indexToY(o.count), c = w.wrap(U.getClimbDest() + k.shelfHeight, b), c = h.yToIndex(c),
                e = c / k.booksPerCircle;
            e -= h.orbitToY(fa.orbit) / k.shelfHeight;
            var f = k.booksPerCircle - o.count % k.booksPerCircle,
                b = Math.floor(U.getClimbDest() / b);
            c += b * f;
            e % 1 < 0.5 ? c -= w.wrap(e, 1) * k.booksPerCircle : (c -= (e - 0.5) % 1 * k.booksPerCircle, c -= k.booksPerCircle / 2);
            c += k.booksPerCircle * k.focusOffset;
            c = w.wrap(c, o.count);
            return Math.round(c)
        };
        this.returnBookToShelf = function () {
            m.loading && m.cancel();
            ea();
            da();
            Ca.fadeIn();
            m.active != null && m.active.close();
            m.active = null
        };
        var Fa = null, Da = false, U = this, Ha, qa, ra, R, G, Ga, ha, ia, ua, oa, sa = false, Ca, pa, wa,
            fa = {cameraPositionY: 0, cameraTargetPositionY: 0, orbit: 0};
        this.ready = function (b) {
            clearTimeout(Fa);
            Da ? _.isFunction(b) && b(U) : Fa = setTimeout(this.ready, 7E3, b)
        };
        u(fa);
        fa.animate.destinationChange = I;
        var va, Ia, Ba, nb = new THREE.AmbientLight(16777215, 1), Va = new THREE.DirectionalLight(16777215, 1),
            db = new THREE.PointLight(16777215, 1);
        Va.position.set(1, 0.2, 0);
        Va.position.normalize();
        var gb = 0, ab = 0, Sa = false, ib = 0, hb = 0, Qa = 0, La = 0, Ea;
        A = void 0;
        z = void 0;
        if (y.rows !== void 0 || y.cols !== void 0) {
            var Ma = y.rows || 1, Pa = y.cols || 1, Wa = y.bezel || 0;
            z = Pa * window.innerWidth + (Pa - 1) * Wa;
            A = Ma * window.innerHeight + (Ma - 1) * Wa
        } else z = parseInt(y.fullWidth) ||
            window.innerWidth, A = parseInt(y.fullHeight) || window.innerHeight, parseInt(y.viewX), parseInt(y.viewY);
        Ma = new B;
        Ma.wait(e.loadAssets);
        Ma.wait(f.loadAssets);
        Ma.wait(function (b) {
            E();
            ua = D;
            H();
            oa = new v(ua, U.goToGenre, Aa.domElement);
            U.domElement.appendChild(oa.domElement);
            Ca = new t(ua, U, oa);
            b()
        });
        Ma.wait(function (b) {
            ia = new n(nb, Va, db);
            qa.addObject(ia.mesh);
            U.numBookDisplayers = k.numBookDisplayers;
            I();
            Z();
            b()
        });
        Ma.wait(function (b) {
            Da = true;
            b()
        });
        Ma.run();
        this.addEventListeners = function () {
            U.domElement.addEventListener("mousemove",
                M, false);
            U.domElement.addEventListener("mousedown", J, false);
            U.domElement.addEventListener("click", Y, false);
            U.domElement.addEventListener("mousewheel", O, false);
            _.isUndefined(void 0) || $(void 0).click(function () {
                oa.show()
            });
            Ca.hidden && Ca.fadeIn()
        };
        this.removeEventListeners = function () {
            U.domElement.removeEventListener("mousemove", M, false);
            U.domElement.removeEventListener("mousedown", J, false);
            U.domElement.removeEventListener("click", Y, false);
            U.domElement.removeEventListener("mousewheel", O, false);
            _.isUndefined(void 0) ||
            $(void 0).unbind("click")
        };
        var Ka = true
    }
});
